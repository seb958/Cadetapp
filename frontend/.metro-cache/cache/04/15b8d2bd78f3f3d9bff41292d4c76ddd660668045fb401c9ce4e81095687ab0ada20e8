{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // Implementation taken from Flutter's LeastSquareSolver\n  // https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return LeastSquareSolver;\n    }\n  });\n  class Vector {\n    constructor(length) {\n      this.offset = 0;\n      this.length = length;\n      this.elements = new Array(length);\n    }\n    static fromVOL(values, offset, length) {\n      const result = new Vector(0);\n      result.offset = offset;\n      result.length = length;\n      result.elements = values;\n      return result;\n    }\n    get(index) {\n      return this.elements[this.offset + index];\n    }\n    set(index, value) {\n      this.elements[this.offset + index] = value;\n    }\n    dot(other) {\n      let result = 0;\n      for (let i = 0; i < this.length; i++) {\n        result += this.get(i) * other.get(i);\n      }\n      return result;\n    }\n    norm() {\n      return Math.sqrt(this.dot(this));\n    }\n  }\n  class Matrix {\n    constructor(rows, columns) {\n      this.columns = columns;\n      this.elements = new Array(rows * columns);\n    }\n    get(row, column) {\n      return this.elements[row * this.columns + column];\n    }\n    set(row, column, value) {\n      this.elements[row * this.columns + column] = value;\n    }\n    getRow(row) {\n      return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n    }\n  }\n\n  // An nth degree polynomial fit to a dataset.\n  class PolynomialFit {\n    // The polynomial coefficients of the fit.\n    //\n    // For each `i`, the element `coefficients[i]` is the coefficient of\n    // the `i`-th power of the variable.\n\n    // Creates a polynomial fit of the given degree.\n    //\n    // There are n + 1 coefficients in a fit of degree n.\n    constructor(degree) {\n      this.coefficients = new Array(degree + 1);\n    }\n  }\n  const precisionErrorTolerance = 1e-10;\n\n  // Uses the least-squares algorithm to fit a polynomial to a set of data.\n  class LeastSquareSolver {\n    // The x-coordinates of each data point.\n\n    // The y-coordinates of each data point.\n\n    // The weight to use for each data point.\n\n    // Creates a least-squares solver.\n    //\n    // The [x], [y], and [w] arguments must not be null.\n    constructor(x, y, w) {\n      this.x = x;\n      this.y = y;\n      this.w = w;\n    }\n\n    // Fits a polynomial of the given degree to the data points.\n    //\n    // When there is not enough data to fit a curve null is returned.\n    solve(degree) {\n      if (degree > this.x.length) {\n        // Not enough data to fit a curve.\n        return null;\n      }\n      const result = new PolynomialFit(degree);\n\n      // Shorthands for the purpose of notation equivalence to original C++ code.\n      const m = this.x.length;\n      const n = degree + 1;\n\n      // Expand the X vector to a matrix A, pre-multiplied by the weights.\n      const a = new Matrix(n, m);\n      for (let h = 0; h < m; h++) {\n        a.set(0, h, this.w[h]);\n        for (let i = 1; i < n; i++) {\n          a.set(i, h, a.get(i - 1, h) * this.x[h]);\n        }\n      }\n\n      // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n      // Orthonormal basis, column-major ordVectorer.\n      const q = new Matrix(n, m);\n      // Upper triangular matrix, row-major order.\n      const r = new Matrix(n, m);\n      for (let j = 0; j < n; j += 1) {\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, a.get(j, h));\n        }\n        for (let i = 0; i < j; i += 1) {\n          const dot = q.getRow(j).dot(q.getRow(i));\n          for (let h = 0; h < m; h += 1) {\n            q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n          }\n        }\n        const norm = q.getRow(j).norm();\n        if (norm < precisionErrorTolerance) {\n          // Vectors are linearly dependent or zero so no solution.\n          return null;\n        }\n        const inverseNorm = 1.0 / norm;\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) * inverseNorm);\n        }\n        for (let i = 0; i < n; i += 1) {\n          r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n        }\n      }\n\n      // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n      // We just work from bottom-right to top-left calculating B's coefficients.\n      const wy = new Vector(m);\n      for (let h = 0; h < m; h += 1) {\n        wy.set(h, this.y[h] * this.w[h]);\n      }\n      for (let i = n - 1; i >= 0; i -= 1) {\n        result.coefficients[i] = q.getRow(i).dot(wy);\n        for (let j = n - 1; j > i; j -= 1) {\n          result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n        }\n        result.coefficients[i] /= r.get(i, i);\n      }\n      return result;\n    }\n  }\n});","lineCount":163,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,4,0,"Object"],[6,8,4,0],[6,9,4,0,"defineProperty"],[6,23,4,0],[6,24,4,0,"exports"],[6,31,4,0],[7,4,4,0,"value"],[7,9,4,0],[8,2,4,0],[9,2,69,15,"Object"],[9,8,69,15],[9,9,69,15,"defineProperty"],[9,23,69,15],[9,24,69,15,"exports"],[9,31,69,15],[10,4,69,15,"enumerable"],[10,14,69,15],[11,4,69,15,"get"],[11,7,69,15],[11,18,69,15,"get"],[11,19,69,15],[12,6,69,15],[12,13,69,15,"LeastSquareSolver"],[12,30,69,15],[13,4,69,15],[14,2,69,15],[15,2,6,0],[15,8,6,6,"Vector"],[15,14,6,12],[15,15,6,13],[16,4,7,2,"constructor"],[16,15,7,13,"constructor"],[16,16,7,14,"length"],[16,22,7,20],[16,24,7,22],[17,6,8,4],[17,10,8,8],[17,11,8,9,"offset"],[17,17,8,15],[17,20,8,18],[17,21,8,19],[18,6,9,4],[18,10,9,8],[18,11,9,9,"length"],[18,17,9,15],[18,20,9,18,"length"],[18,26,9,24],[19,6,10,4],[19,10,10,8],[19,11,10,9,"elements"],[19,19,10,17],[19,22,10,20],[19,26,10,24,"Array"],[19,31,10,29],[19,32,10,30,"length"],[19,38,10,36],[19,39,10,37],[20,4,11,2],[21,4,12,2],[21,11,12,9,"fromVOL"],[21,18,12,16,"fromVOL"],[21,19,12,17,"values"],[21,25,12,23],[21,27,12,25,"offset"],[21,33,12,31],[21,35,12,33,"length"],[21,41,12,39],[21,43,12,41],[22,6,13,4],[22,12,13,10,"result"],[22,18,13,16],[22,21,13,19],[22,25,13,23,"Vector"],[22,31,13,29],[22,32,13,30],[22,33,13,31],[22,34,13,32],[23,6,14,4,"result"],[23,12,14,10],[23,13,14,11,"offset"],[23,19,14,17],[23,22,14,20,"offset"],[23,28,14,26],[24,6,15,4,"result"],[24,12,15,10],[24,13,15,11,"length"],[24,19,15,17],[24,22,15,20,"length"],[24,28,15,26],[25,6,16,4,"result"],[25,12,16,10],[25,13,16,11,"elements"],[25,21,16,19],[25,24,16,22,"values"],[25,30,16,28],[26,6,17,4],[26,13,17,11,"result"],[26,19,17,17],[27,4,18,2],[28,4,19,2,"get"],[28,7,19,5,"get"],[28,8,19,6,"index"],[28,13,19,11],[28,15,19,13],[29,6,20,4],[29,13,20,11],[29,17,20,15],[29,18,20,16,"elements"],[29,26,20,24],[29,27,20,25],[29,31,20,29],[29,32,20,30,"offset"],[29,38,20,36],[29,41,20,39,"index"],[29,46,20,44],[29,47,20,45],[30,4,21,2],[31,4,22,2,"set"],[31,7,22,5,"set"],[31,8,22,6,"index"],[31,13,22,11],[31,15,22,13,"value"],[31,20,22,18],[31,22,22,20],[32,6,23,4],[32,10,23,8],[32,11,23,9,"elements"],[32,19,23,17],[32,20,23,18],[32,24,23,22],[32,25,23,23,"offset"],[32,31,23,29],[32,34,23,32,"index"],[32,39,23,37],[32,40,23,38],[32,43,23,41,"value"],[32,48,23,46],[33,4,24,2],[34,4,25,2,"dot"],[34,7,25,5,"dot"],[34,8,25,6,"other"],[34,13,25,11],[34,15,25,13],[35,6,26,4],[35,10,26,8,"result"],[35,16,26,14],[35,19,26,17],[35,20,26,18],[36,6,27,4],[36,11,27,9],[36,15,27,13,"i"],[36,16,27,14],[36,19,27,17],[36,20,27,18],[36,22,27,20,"i"],[36,23,27,21],[36,26,27,24],[36,30,27,28],[36,31,27,29,"length"],[36,37,27,35],[36,39,27,37,"i"],[36,40,27,38],[36,42,27,40],[36,44,27,42],[37,8,28,6,"result"],[37,14,28,12],[37,18,28,16],[37,22,28,20],[37,23,28,21,"get"],[37,26,28,24],[37,27,28,25,"i"],[37,28,28,26],[37,29,28,27],[37,32,28,30,"other"],[37,37,28,35],[37,38,28,36,"get"],[37,41,28,39],[37,42,28,40,"i"],[37,43,28,41],[37,44,28,42],[38,6,29,4],[39,6,30,4],[39,13,30,11,"result"],[39,19,30,17],[40,4,31,2],[41,4,32,2,"norm"],[41,8,32,6,"norm"],[41,9,32,6],[41,11,32,9],[42,6,33,4],[42,13,33,11,"Math"],[42,17,33,15],[42,18,33,16,"sqrt"],[42,22,33,20],[42,23,33,21],[42,27,33,25],[42,28,33,26,"dot"],[42,31,33,29],[42,32,33,30],[42,36,33,34],[42,37,33,35],[42,38,33,36],[43,4,34,2],[44,2,35,0],[45,2,36,0],[45,8,36,6,"Matrix"],[45,14,36,12],[45,15,36,13],[46,4,37,2,"constructor"],[46,15,37,13,"constructor"],[46,16,37,14,"rows"],[46,20,37,18],[46,22,37,20,"columns"],[46,29,37,27],[46,31,37,29],[47,6,38,4],[47,10,38,8],[47,11,38,9,"columns"],[47,18,38,16],[47,21,38,19,"columns"],[47,28,38,26],[48,6,39,4],[48,10,39,8],[48,11,39,9,"elements"],[48,19,39,17],[48,22,39,20],[48,26,39,24,"Array"],[48,31,39,29],[48,32,39,30,"rows"],[48,36,39,34],[48,39,39,37,"columns"],[48,46,39,44],[48,47,39,45],[49,4,40,2],[50,4,41,2,"get"],[50,7,41,5,"get"],[50,8,41,6,"row"],[50,11,41,9],[50,13,41,11,"column"],[50,19,41,17],[50,21,41,19],[51,6,42,4],[51,13,42,11],[51,17,42,15],[51,18,42,16,"elements"],[51,26,42,24],[51,27,42,25,"row"],[51,30,42,28],[51,33,42,31],[51,37,42,35],[51,38,42,36,"columns"],[51,45,42,43],[51,48,42,46,"column"],[51,54,42,52],[51,55,42,53],[52,4,43,2],[53,4,44,2,"set"],[53,7,44,5,"set"],[53,8,44,6,"row"],[53,11,44,9],[53,13,44,11,"column"],[53,19,44,17],[53,21,44,19,"value"],[53,26,44,24],[53,28,44,26],[54,6,45,4],[54,10,45,8],[54,11,45,9,"elements"],[54,19,45,17],[54,20,45,18,"row"],[54,23,45,21],[54,26,45,24],[54,30,45,28],[54,31,45,29,"columns"],[54,38,45,36],[54,41,45,39,"column"],[54,47,45,45],[54,48,45,46],[54,51,45,49,"value"],[54,56,45,54],[55,4,46,2],[56,4,47,2,"getRow"],[56,10,47,8,"getRow"],[56,11,47,9,"row"],[56,14,47,12],[56,16,47,14],[57,6,48,4],[57,13,48,11,"Vector"],[57,19,48,17],[57,20,48,18,"fromVOL"],[57,27,48,25],[57,28,48,26],[57,32,48,30],[57,33,48,31,"elements"],[57,41,48,39],[57,43,48,41,"row"],[57,46,48,44],[57,49,48,47],[57,53,48,51],[57,54,48,52,"columns"],[57,61,48,59],[57,63,48,61],[57,67,48,65],[57,68,48,66,"columns"],[57,75,48,73],[57,76,48,74],[58,4,49,2],[59,2,50,0],[61,2,52,0],[62,2,53,0],[62,8,53,6,"PolynomialFit"],[62,21,53,19],[62,22,53,20],[63,4,54,2],[64,4,55,2],[65,4,56,2],[66,4,57,2],[68,4,59,2],[69,4,60,2],[70,4,61,2],[71,4,62,2,"constructor"],[71,15,62,13,"constructor"],[71,16,62,14,"degree"],[71,22,62,20],[71,24,62,22],[72,6,63,4],[72,10,63,8],[72,11,63,9,"coefficients"],[72,23,63,21],[72,26,63,24],[72,30,63,28,"Array"],[72,35,63,33],[72,36,63,34,"degree"],[72,42,63,40],[72,45,63,43],[72,46,63,44],[72,47,63,45],[73,4,64,2],[74,2,65,0],[75,2,66,0],[75,8,66,6,"precisionErrorTolerance"],[75,31,66,29],[75,34,66,32],[75,39,66,37],[77,2,68,0],[78,2,69,15],[78,8,69,21,"LeastSquareSolver"],[78,25,69,38],[78,26,69,39],[79,4,70,2],[81,4,72,2],[83,4,74,2],[85,4,76,2],[86,4,77,2],[87,4,78,2],[88,4,79,2,"constructor"],[88,15,79,13,"constructor"],[88,16,79,14,"x"],[88,17,79,15],[88,19,79,17,"y"],[88,20,79,18],[88,22,79,20,"w"],[88,23,79,21],[88,25,79,23],[89,6,80,4],[89,10,80,8],[89,11,80,9,"x"],[89,12,80,10],[89,15,80,13,"x"],[89,16,80,14],[90,6,81,4],[90,10,81,8],[90,11,81,9,"y"],[90,12,81,10],[90,15,81,13,"y"],[90,16,81,14],[91,6,82,4],[91,10,82,8],[91,11,82,9,"w"],[91,12,82,10],[91,15,82,13,"w"],[91,16,82,14],[92,4,83,2],[94,4,85,2],[95,4,86,2],[96,4,87,2],[97,4,88,2,"solve"],[97,9,88,7,"solve"],[97,10,88,8,"degree"],[97,16,88,14],[97,18,88,16],[98,6,89,4],[98,10,89,8,"degree"],[98,16,89,14],[98,19,89,17],[98,23,89,21],[98,24,89,22,"x"],[98,25,89,23],[98,26,89,24,"length"],[98,32,89,30],[98,34,89,32],[99,8,90,6],[100,8,91,6],[100,15,91,13],[100,19,91,17],[101,6,92,4],[102,6,93,4],[102,12,93,10,"result"],[102,18,93,16],[102,21,93,19],[102,25,93,23,"PolynomialFit"],[102,38,93,36],[102,39,93,37,"degree"],[102,45,93,43],[102,46,93,44],[104,6,95,4],[105,6,96,4],[105,12,96,10,"m"],[105,13,96,11],[105,16,96,14],[105,20,96,18],[105,21,96,19,"x"],[105,22,96,20],[105,23,96,21,"length"],[105,29,96,27],[106,6,97,4],[106,12,97,10,"n"],[106,13,97,11],[106,16,97,14,"degree"],[106,22,97,20],[106,25,97,23],[106,26,97,24],[108,6,99,4],[109,6,100,4],[109,12,100,10,"a"],[109,13,100,11],[109,16,100,14],[109,20,100,18,"Matrix"],[109,26,100,24],[109,27,100,25,"n"],[109,28,100,26],[109,30,100,28,"m"],[109,31,100,29],[109,32,100,30],[110,6,101,4],[110,11,101,9],[110,15,101,13,"h"],[110,16,101,14],[110,19,101,17],[110,20,101,18],[110,22,101,20,"h"],[110,23,101,21],[110,26,101,24,"m"],[110,27,101,25],[110,29,101,27,"h"],[110,30,101,28],[110,32,101,30],[110,34,101,32],[111,8,102,6,"a"],[111,9,102,7],[111,10,102,8,"set"],[111,13,102,11],[111,14,102,12],[111,15,102,13],[111,17,102,15,"h"],[111,18,102,16],[111,20,102,18],[111,24,102,22],[111,25,102,23,"w"],[111,26,102,24],[111,27,102,25,"h"],[111,28,102,26],[111,29,102,27],[111,30,102,28],[112,8,103,6],[112,13,103,11],[112,17,103,15,"i"],[112,18,103,16],[112,21,103,19],[112,22,103,20],[112,24,103,22,"i"],[112,25,103,23],[112,28,103,26,"n"],[112,29,103,27],[112,31,103,29,"i"],[112,32,103,30],[112,34,103,32],[112,36,103,34],[113,10,104,8,"a"],[113,11,104,9],[113,12,104,10,"set"],[113,15,104,13],[113,16,104,14,"i"],[113,17,104,15],[113,19,104,17,"h"],[113,20,104,18],[113,22,104,20,"a"],[113,23,104,21],[113,24,104,22,"get"],[113,27,104,25],[113,28,104,26,"i"],[113,29,104,27],[113,32,104,30],[113,33,104,31],[113,35,104,33,"h"],[113,36,104,34],[113,37,104,35],[113,40,104,38],[113,44,104,42],[113,45,104,43,"x"],[113,46,104,44],[113,47,104,45,"h"],[113,48,104,46],[113,49,104,47],[113,50,104,48],[114,8,105,6],[115,6,106,4],[117,6,108,4],[119,6,110,4],[120,6,111,4],[120,12,111,10,"q"],[120,13,111,11],[120,16,111,14],[120,20,111,18,"Matrix"],[120,26,111,24],[120,27,111,25,"n"],[120,28,111,26],[120,30,111,28,"m"],[120,31,111,29],[120,32,111,30],[121,6,112,4],[122,6,113,4],[122,12,113,10,"r"],[122,13,113,11],[122,16,113,14],[122,20,113,18,"Matrix"],[122,26,113,24],[122,27,113,25,"n"],[122,28,113,26],[122,30,113,28,"m"],[122,31,113,29],[122,32,113,30],[123,6,114,4],[123,11,114,9],[123,15,114,13,"j"],[123,16,114,14],[123,19,114,17],[123,20,114,18],[123,22,114,20,"j"],[123,23,114,21],[123,26,114,24,"n"],[123,27,114,25],[123,29,114,27,"j"],[123,30,114,28],[123,34,114,32],[123,35,114,33],[123,37,114,35],[124,8,115,6],[124,13,115,11],[124,17,115,15,"h"],[124,18,115,16],[124,21,115,19],[124,22,115,20],[124,24,115,22,"h"],[124,25,115,23],[124,28,115,26,"m"],[124,29,115,27],[124,31,115,29,"h"],[124,32,115,30],[124,36,115,34],[124,37,115,35],[124,39,115,37],[125,10,116,8,"q"],[125,11,116,9],[125,12,116,10,"set"],[125,15,116,13],[125,16,116,14,"j"],[125,17,116,15],[125,19,116,17,"h"],[125,20,116,18],[125,22,116,20,"a"],[125,23,116,21],[125,24,116,22,"get"],[125,27,116,25],[125,28,116,26,"j"],[125,29,116,27],[125,31,116,29,"h"],[125,32,116,30],[125,33,116,31],[125,34,116,32],[126,8,117,6],[127,8,118,6],[127,13,118,11],[127,17,118,15,"i"],[127,18,118,16],[127,21,118,19],[127,22,118,20],[127,24,118,22,"i"],[127,25,118,23],[127,28,118,26,"j"],[127,29,118,27],[127,31,118,29,"i"],[127,32,118,30],[127,36,118,34],[127,37,118,35],[127,39,118,37],[128,10,119,8],[128,16,119,14,"dot"],[128,19,119,17],[128,22,119,20,"q"],[128,23,119,21],[128,24,119,22,"getRow"],[128,30,119,28],[128,31,119,29,"j"],[128,32,119,30],[128,33,119,31],[128,34,119,32,"dot"],[128,37,119,35],[128,38,119,36,"q"],[128,39,119,37],[128,40,119,38,"getRow"],[128,46,119,44],[128,47,119,45,"i"],[128,48,119,46],[128,49,119,47],[128,50,119,48],[129,10,120,8],[129,15,120,13],[129,19,120,17,"h"],[129,20,120,18],[129,23,120,21],[129,24,120,22],[129,26,120,24,"h"],[129,27,120,25],[129,30,120,28,"m"],[129,31,120,29],[129,33,120,31,"h"],[129,34,120,32],[129,38,120,36],[129,39,120,37],[129,41,120,39],[130,12,121,10,"q"],[130,13,121,11],[130,14,121,12,"set"],[130,17,121,15],[130,18,121,16,"j"],[130,19,121,17],[130,21,121,19,"h"],[130,22,121,20],[130,24,121,22,"q"],[130,25,121,23],[130,26,121,24,"get"],[130,29,121,27],[130,30,121,28,"j"],[130,31,121,29],[130,33,121,31,"h"],[130,34,121,32],[130,35,121,33],[130,38,121,36,"dot"],[130,41,121,39],[130,44,121,42,"q"],[130,45,121,43],[130,46,121,44,"get"],[130,49,121,47],[130,50,121,48,"i"],[130,51,121,49],[130,53,121,51,"h"],[130,54,121,52],[130,55,121,53],[130,56,121,54],[131,10,122,8],[132,8,123,6],[133,8,124,6],[133,14,124,12,"norm"],[133,18,124,16],[133,21,124,19,"q"],[133,22,124,20],[133,23,124,21,"getRow"],[133,29,124,27],[133,30,124,28,"j"],[133,31,124,29],[133,32,124,30],[133,33,124,31,"norm"],[133,37,124,35],[133,38,124,36],[133,39,124,37],[134,8,125,6],[134,12,125,10,"norm"],[134,16,125,14],[134,19,125,17,"precisionErrorTolerance"],[134,42,125,40],[134,44,125,42],[135,10,126,8],[136,10,127,8],[136,17,127,15],[136,21,127,19],[137,8,128,6],[138,8,129,6],[138,14,129,12,"inverseNorm"],[138,25,129,23],[138,28,129,26],[138,31,129,29],[138,34,129,32,"norm"],[138,38,129,36],[139,8,130,6],[139,13,130,11],[139,17,130,15,"h"],[139,18,130,16],[139,21,130,19],[139,22,130,20],[139,24,130,22,"h"],[139,25,130,23],[139,28,130,26,"m"],[139,29,130,27],[139,31,130,29,"h"],[139,32,130,30],[139,36,130,34],[139,37,130,35],[139,39,130,37],[140,10,131,8,"q"],[140,11,131,9],[140,12,131,10,"set"],[140,15,131,13],[140,16,131,14,"j"],[140,17,131,15],[140,19,131,17,"h"],[140,20,131,18],[140,22,131,20,"q"],[140,23,131,21],[140,24,131,22,"get"],[140,27,131,25],[140,28,131,26,"j"],[140,29,131,27],[140,31,131,29,"h"],[140,32,131,30],[140,33,131,31],[140,36,131,34,"inverseNorm"],[140,47,131,45],[140,48,131,46],[141,8,132,6],[142,8,133,6],[142,13,133,11],[142,17,133,15,"i"],[142,18,133,16],[142,21,133,19],[142,22,133,20],[142,24,133,22,"i"],[142,25,133,23],[142,28,133,26,"n"],[142,29,133,27],[142,31,133,29,"i"],[142,32,133,30],[142,36,133,34],[142,37,133,35],[142,39,133,37],[143,10,134,8,"r"],[143,11,134,9],[143,12,134,10,"set"],[143,15,134,13],[143,16,134,14,"j"],[143,17,134,15],[143,19,134,17,"i"],[143,20,134,18],[143,22,134,20,"i"],[143,23,134,21],[143,26,134,24,"j"],[143,27,134,25],[143,30,134,28],[143,33,134,31],[143,36,134,34,"q"],[143,37,134,35],[143,38,134,36,"getRow"],[143,44,134,42],[143,45,134,43,"j"],[143,46,134,44],[143,47,134,45],[143,48,134,46,"dot"],[143,51,134,49],[143,52,134,50,"a"],[143,53,134,51],[143,54,134,52,"getRow"],[143,60,134,58],[143,61,134,59,"i"],[143,62,134,60],[143,63,134,61],[143,64,134,62],[143,65,134,63],[144,8,135,6],[145,6,136,4],[147,6,138,4],[148,6,139,4],[149,6,140,4],[149,12,140,10,"wy"],[149,14,140,12],[149,17,140,15],[149,21,140,19,"Vector"],[149,27,140,25],[149,28,140,26,"m"],[149,29,140,27],[149,30,140,28],[150,6,141,4],[150,11,141,9],[150,15,141,13,"h"],[150,16,141,14],[150,19,141,17],[150,20,141,18],[150,22,141,20,"h"],[150,23,141,21],[150,26,141,24,"m"],[150,27,141,25],[150,29,141,27,"h"],[150,30,141,28],[150,34,141,32],[150,35,141,33],[150,37,141,35],[151,8,142,6,"wy"],[151,10,142,8],[151,11,142,9,"set"],[151,14,142,12],[151,15,142,13,"h"],[151,16,142,14],[151,18,142,16],[151,22,142,20],[151,23,142,21,"y"],[151,24,142,22],[151,25,142,23,"h"],[151,26,142,24],[151,27,142,25],[151,30,142,28],[151,34,142,32],[151,35,142,33,"w"],[151,36,142,34],[151,37,142,35,"h"],[151,38,142,36],[151,39,142,37],[151,40,142,38],[152,6,143,4],[153,6,144,4],[153,11,144,9],[153,15,144,13,"i"],[153,16,144,14],[153,19,144,17,"n"],[153,20,144,18],[153,23,144,21],[153,24,144,22],[153,26,144,24,"i"],[153,27,144,25],[153,31,144,29],[153,32,144,30],[153,34,144,32,"i"],[153,35,144,33],[153,39,144,37],[153,40,144,38],[153,42,144,40],[154,8,145,6,"result"],[154,14,145,12],[154,15,145,13,"coefficients"],[154,27,145,25],[154,28,145,26,"i"],[154,29,145,27],[154,30,145,28],[154,33,145,31,"q"],[154,34,145,32],[154,35,145,33,"getRow"],[154,41,145,39],[154,42,145,40,"i"],[154,43,145,41],[154,44,145,42],[154,45,145,43,"dot"],[154,48,145,46],[154,49,145,47,"wy"],[154,51,145,49],[154,52,145,50],[155,8,146,6],[155,13,146,11],[155,17,146,15,"j"],[155,18,146,16],[155,21,146,19,"n"],[155,22,146,20],[155,25,146,23],[155,26,146,24],[155,28,146,26,"j"],[155,29,146,27],[155,32,146,30,"i"],[155,33,146,31],[155,35,146,33,"j"],[155,36,146,34],[155,40,146,38],[155,41,146,39],[155,43,146,41],[156,10,147,8,"result"],[156,16,147,14],[156,17,147,15,"coefficients"],[156,29,147,27],[156,30,147,28,"i"],[156,31,147,29],[156,32,147,30],[156,36,147,34,"r"],[156,37,147,35],[156,38,147,36,"get"],[156,41,147,39],[156,42,147,40,"i"],[156,43,147,41],[156,45,147,43,"j"],[156,46,147,44],[156,47,147,45],[156,50,147,48,"result"],[156,56,147,54],[156,57,147,55,"coefficients"],[156,69,147,67],[156,70,147,68,"j"],[156,71,147,69],[156,72,147,70],[157,8,148,6],[158,8,149,6,"result"],[158,14,149,12],[158,15,149,13,"coefficients"],[158,27,149,25],[158,28,149,26,"i"],[158,29,149,27],[158,30,149,28],[158,34,149,32,"r"],[158,35,149,33],[158,36,149,34,"get"],[158,39,149,37],[158,40,149,38,"i"],[158,41,149,39],[158,43,149,41,"i"],[158,44,149,42],[158,45,149,43],[159,6,150,4],[160,6,151,4],[160,13,151,11,"result"],[160,19,151,17],[161,4,152,2],[162,2,153,0],[163,0,153,1],[163,3]],"functionMap":{"names":["<global>","Vector","Vector#constructor","Vector.fromVOL","Vector#get","Vector#set","Vector#dot","Vector#norm","Matrix","Matrix#constructor","Matrix#get","Matrix#set","Matrix#getRow","PolynomialFit","PolynomialFit#constructor","LeastSquareSolver","constructor","solve"],"mappings":"AAA;ACK;ECC;GDI;EEC;GFM;EGC;GHE;EIC;GJE;EKC;GLM;EMC;GNE;CDC;AQC;ECC;GDG;EEC;GFE;EGC;GHE;EIC;GJE;CRC;AaG;ECS;GDE;CbC;eeI;ECU;GDI;EEK;GFgE;CfC"},"hasCjsExports":false},"type":"js/module"}]}