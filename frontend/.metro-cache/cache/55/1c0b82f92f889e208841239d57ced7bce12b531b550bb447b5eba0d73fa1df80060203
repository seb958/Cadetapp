{"dependencies":[{"name":"../PointerType","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":45,"index":60}}],"key":"hYk7sjMJT+Y27KGuBYSPOC2Jih8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.isPointerInBounds = isPointerInBounds;\n  Object.defineProperty(exports, \"PointerTypeMapping\", {\n    enumerable: true,\n    get: function () {\n      return PointerTypeMapping;\n    }\n  });\n  Object.defineProperty(exports, \"degToRad\", {\n    enumerable: true,\n    get: function () {\n      return degToRad;\n    }\n  });\n  Object.defineProperty(exports, \"coneToDeviation\", {\n    enumerable: true,\n    get: function () {\n      return coneToDeviation;\n    }\n  });\n  exports.calculateViewScale = calculateViewScale;\n  exports.tryExtractStylusData = tryExtractStylusData;\n  Object.defineProperty(exports, \"RNSVGElements\", {\n    enumerable: true,\n    get: function () {\n      return RNSVGElements;\n    }\n  });\n  exports.isRNSVGElement = isRNSVGElement;\n  exports.isRNSVGNode = isRNSVGNode;\n  var _PointerType = require(_dependencyMap[0], \"../PointerType\");\n  function isPointerInBounds(view, {\n    x,\n    y\n  }) {\n    const rect = view.getBoundingClientRect();\n    return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n  }\n  const PointerTypeMapping = new Map([['mouse', _PointerType.PointerType.MOUSE], ['touch', _PointerType.PointerType.TOUCH], ['pen', _PointerType.PointerType.STYLUS], ['none', _PointerType.PointerType.OTHER]]);\n  const degToRad = degrees => degrees * Math.PI / 180;\n  const coneToDeviation = degrees => Math.cos(degToRad(degrees / 2));\n  function calculateViewScale(view) {\n    const styles = getComputedStyle(view);\n    const resultScales = {\n      scaleX: 1,\n      scaleY: 1\n    };\n\n    // Get scales from scale property\n    if (styles.scale !== undefined && styles.scale !== 'none') {\n      const scales = styles.scale.split(' ');\n      if (scales[0]) {\n        resultScales.scaleX = parseFloat(scales[0]);\n      }\n      resultScales.scaleY = scales[1] ? parseFloat(scales[1]) : parseFloat(scales[0]);\n    }\n\n    // Get scales from transform property\n    const matrixElements = new RegExp(/matrix\\((.+)\\)/).exec(styles.transform)?.[1];\n    if (matrixElements) {\n      const matrixElementsArray = matrixElements.split(', ');\n      resultScales.scaleX *= parseFloat(matrixElementsArray[0]);\n      resultScales.scaleY *= parseFloat(matrixElementsArray[3]);\n    }\n    return resultScales;\n  }\n  function tryExtractStylusData(event) {\n    const pointerType = PointerTypeMapping.get(event.pointerType);\n    if (pointerType !== _PointerType.PointerType.STYLUS) {\n      return;\n    }\n\n    // @ts-ignore This property exists (https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent#instance_properties)\n    const eventAzimuthAngle = event.azimuthAngle;\n    // @ts-ignore This property exists (https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent#instance_properties)\n    const eventAltitudeAngle = event.altitudeAngle;\n    if (event.tiltX === 0 && event.tiltY === 0) {\n      // If we are in this branch, it means that either tilt properties are not supported and we have to calculate them from altitude and azimuth angles,\n      // or stylus is perpendicular to the screen and we can use altitude / azimuth instead of tilt\n\n      // If azimuth and altitude are undefined in this branch, it means that we are either perpendicular to the screen,\n      // or that none of the position sets is supported. In that case, we can treat stylus as perpendicular\n      if (eventAzimuthAngle === undefined || eventAltitudeAngle === undefined) {\n        return {\n          tiltX: 0,\n          tiltY: 0,\n          azimuthAngle: Math.PI / 2,\n          altitudeAngle: Math.PI / 2,\n          pressure: event.pressure\n        };\n      }\n      const {\n        tiltX,\n        tiltY\n      } = spherical2tilt(eventAltitudeAngle, eventAzimuthAngle);\n      return {\n        tiltX,\n        tiltY,\n        azimuthAngle: eventAzimuthAngle,\n        altitudeAngle: eventAltitudeAngle,\n        pressure: event.pressure\n      };\n    }\n    const {\n      altitudeAngle,\n      azimuthAngle\n    } = tilt2spherical(event.tiltX, event.tiltY);\n    return {\n      tiltX: event.tiltX,\n      tiltY: event.tiltY,\n      azimuthAngle,\n      altitudeAngle,\n      pressure: event.pressure\n    };\n  }\n\n  // `altitudeAngle` and `azimuthAngle` are experimental properties, which are not supported on Firefox and Safari.\n  // Given that, we use `tilt` properties and algorithm that converts one value to another.\n  //\n  // Source: https://w3c.github.io/pointerevents/#converting-between-tiltx-tilty-and-altitudeangle-azimuthangle\n  function tilt2spherical(tiltX, tiltY) {\n    const tiltXrad = tiltX * Math.PI / 180;\n    const tiltYrad = tiltY * Math.PI / 180;\n\n    // calculate azimuth angle\n    let azimuthAngle = 0;\n    if (tiltX === 0) {\n      if (tiltY > 0) {\n        azimuthAngle = Math.PI / 2;\n      } else if (tiltY < 0) {\n        azimuthAngle = 3 * Math.PI / 2;\n      }\n    } else if (tiltY === 0) {\n      if (tiltX < 0) {\n        azimuthAngle = Math.PI;\n      }\n    } else if (Math.abs(tiltX) === 90 || Math.abs(tiltY) === 90) {\n      // not enough information to calculate azimuth\n      azimuthAngle = 0;\n    } else {\n      // Non-boundary case: neither tiltX nor tiltY is equal to 0 or +-90\n      const tanX = Math.tan(tiltXrad);\n      const tanY = Math.tan(tiltYrad);\n      azimuthAngle = Math.atan2(tanY, tanX);\n      if (azimuthAngle < 0) {\n        azimuthAngle += 2 * Math.PI;\n      }\n    }\n\n    // calculate altitude angle\n    let altitudeAngle = 0;\n    if (Math.abs(tiltX) === 90 || Math.abs(tiltY) === 90) {\n      altitudeAngle = 0;\n    } else if (tiltX === 0) {\n      altitudeAngle = Math.PI / 2 - Math.abs(tiltYrad);\n    } else if (tiltY === 0) {\n      altitudeAngle = Math.PI / 2 - Math.abs(tiltXrad);\n    } else {\n      // Non-boundary case: neither tiltX nor tiltY is equal to 0 or +-90\n      altitudeAngle = Math.atan(1.0 / Math.sqrt(Math.pow(Math.tan(tiltXrad), 2) + Math.pow(Math.tan(tiltYrad), 2)));\n    }\n    return {\n      altitudeAngle: altitudeAngle,\n      azimuthAngle: azimuthAngle\n    };\n  }\n\n  // If we are on a platform that doesn't support `tiltX` and `tiltY`, we have to calculate them from `altitude` and `azimuth` angles.\n  //\n  // Source: https://w3c.github.io/pointerevents/#converting-between-tiltx-tilty-and-altitudeangle-azimuthangle\n  function spherical2tilt(altitudeAngle, azimuthAngle) {\n    const radToDeg = 180 / Math.PI;\n    let tiltXrad = 0;\n    let tiltYrad = 0;\n    if (altitudeAngle === 0) {\n      // the pen is in the X-Y plane\n      if (azimuthAngle === 0 || azimuthAngle === 2 * Math.PI) {\n        // pen is on positive X axis\n        tiltXrad = Math.PI / 2;\n      }\n      if (azimuthAngle === Math.PI / 2) {\n        // pen is on positive Y axis\n        tiltYrad = Math.PI / 2;\n      }\n      if (azimuthAngle === Math.PI) {\n        // pen is on negative X axis\n        tiltXrad = -Math.PI / 2;\n      }\n      if (azimuthAngle === 3 * Math.PI / 2) {\n        // pen is on negative Y axis\n        tiltYrad = -Math.PI / 2;\n      }\n      if (azimuthAngle > 0 && azimuthAngle < Math.PI / 2) {\n        tiltXrad = Math.PI / 2;\n        tiltYrad = Math.PI / 2;\n      }\n      if (azimuthAngle > Math.PI / 2 && azimuthAngle < Math.PI) {\n        tiltXrad = -Math.PI / 2;\n        tiltYrad = Math.PI / 2;\n      }\n      if (azimuthAngle > Math.PI && azimuthAngle < 3 * Math.PI / 2) {\n        tiltXrad = -Math.PI / 2;\n        tiltYrad = -Math.PI / 2;\n      }\n      if (azimuthAngle > 3 * Math.PI / 2 && azimuthAngle < 2 * Math.PI) {\n        tiltXrad = Math.PI / 2;\n        tiltYrad = -Math.PI / 2;\n      }\n    }\n    if (altitudeAngle !== 0) {\n      const tanAlt = Math.tan(altitudeAngle);\n      tiltXrad = Math.atan(Math.cos(azimuthAngle) / tanAlt);\n      tiltYrad = Math.atan(Math.sin(azimuthAngle) / tanAlt);\n    }\n    const tiltX = Math.round(tiltXrad * radToDeg);\n    const tiltY = Math.round(tiltYrad * radToDeg);\n    return {\n      tiltX,\n      tiltY\n    };\n  }\n  const RNSVGElements = new Set(['Circle', 'ClipPath', 'Ellipse', 'ForeignObject', 'G', 'Image', 'Line', 'Marker', 'Mask', 'Path', 'Pattern', 'Polygon', 'Polyline', 'Rect', 'Svg', 'Symbol', 'TSpan', 'Text', 'TextPath', 'Use']);\n\n  // This function helps us determine whether given node is SVGElement or not. In our implementation of\n  // findNodeHandle, we can encounter such element in 2 forms - SVG tag or ref to SVG Element. Since Gesture Handler\n  // does not depend on SVG, we use our simplified SVGRef type that has `elementRef` field. This is something that is present\n  // in actual SVG ref object.\n  //\n  // In order to make sure that node passed into this function is in fact SVG element, first we check if its constructor name\n  // corresponds to one of the possible SVG elements. Then we also check if `elementRef` field exists.\n  // By doing both steps we decrease probability of detecting situations where, for example, user makes custom `Circle` and\n  // we treat it as SVG.\n  function isRNSVGElement(viewRef) {\n    const componentClassName = Object.getPrototypeOf(viewRef).constructor.name;\n    return RNSVGElements.has(componentClassName) && Object.hasOwn(viewRef, 'elementRef');\n  }\n\n  // This function checks if given node is SVGElement. Unlike the function above, this one\n  // operates on React Nodes, not DOM nodes.\n  //\n  // Second condition was introduced to handle case where SVG element was wrapped with\n  // `createAnimatedComponent` from Reanimated.\n  function isRNSVGNode(node) {\n    // If `ref` has `rngh` field, it means that component comes from Gesture Handler. This is a special case for\n    // `Text` component, which is present in `RNSVGElements` set, yet we don't want to treat it as SVG.\n    if (node.ref?.rngh) {\n      return false;\n    }\n    return Object.getPrototypeOf(node?.type)?.name === 'WebShape' || RNSVGElements.has(node?.type?.displayName);\n  }\n});","lineCount":256,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,4,0,"exports"],[7,9,4,0],[7,10,4,0,"isPointerInBounds"],[7,27,4,0],[7,30,4,0,"isPointerInBounds"],[7,47,4,0],[8,2,11,0,"Object"],[8,8,11,0],[8,9,11,0,"defineProperty"],[8,23,11,0],[8,24,11,0,"exports"],[8,31,11,0],[9,4,11,0,"enumerable"],[9,14,11,0],[10,4,11,0,"get"],[10,7,11,0],[10,18,11,0,"get"],[10,19,11,0],[11,6,11,0],[11,13,11,0,"PointerTypeMapping"],[11,31,11,0],[12,4,11,0],[13,2,11,0],[14,2,12,0,"Object"],[14,8,12,0],[14,9,12,0,"defineProperty"],[14,23,12,0],[14,24,12,0,"exports"],[14,31,12,0],[15,4,12,0,"enumerable"],[15,14,12,0],[16,4,12,0,"get"],[16,7,12,0],[16,18,12,0,"get"],[16,19,12,0],[17,6,12,0],[17,13,12,0,"degToRad"],[17,21,12,0],[18,4,12,0],[19,2,12,0],[20,2,13,0,"Object"],[20,8,13,0],[20,9,13,0,"defineProperty"],[20,23,13,0],[20,24,13,0,"exports"],[20,31,13,0],[21,4,13,0,"enumerable"],[21,14,13,0],[22,4,13,0,"get"],[22,7,13,0],[22,18,13,0,"get"],[22,19,13,0],[23,6,13,0],[23,13,13,0,"coneToDeviation"],[23,28,13,0],[24,4,13,0],[25,2,13,0],[26,2,14,0,"exports"],[26,9,14,0],[26,10,14,0,"calculateViewScale"],[26,28,14,0],[26,31,14,0,"calculateViewScale"],[26,49,14,0],[27,2,39,0,"exports"],[27,9,39,0],[27,10,39,0,"tryExtractStylusData"],[27,30,39,0],[27,33,39,0,"tryExtractStylusData"],[27,53,39,0],[28,2,194,0,"Object"],[28,8,194,0],[28,9,194,0,"defineProperty"],[28,23,194,0],[28,24,194,0,"exports"],[28,31,194,0],[29,4,194,0,"enumerable"],[29,14,194,0],[30,4,194,0,"get"],[30,7,194,0],[30,18,194,0,"get"],[30,19,194,0],[31,6,194,0],[31,13,194,0,"RNSVGElements"],[31,26,194,0],[32,4,194,0],[33,2,194,0],[34,2,205,0,"exports"],[34,9,205,0],[34,10,205,0,"isRNSVGElement"],[34,24,205,0],[34,27,205,0,"isRNSVGElement"],[34,41,205,0],[35,2,215,0,"exports"],[35,9,215,0],[35,10,215,0,"isRNSVGNode"],[35,21,215,0],[35,24,215,0,"isRNSVGNode"],[35,35,215,0],[36,2,3,0],[36,6,3,0,"_PointerType"],[36,18,3,0],[36,21,3,0,"require"],[36,28,3,0],[36,29,3,0,"_dependencyMap"],[36,43,3,0],[37,2,4,7],[37,11,4,16,"isPointerInBounds"],[37,28,4,33,"isPointerInBounds"],[37,29,4,34,"view"],[37,33,4,38],[37,35,4,40],[38,4,5,2,"x"],[38,5,5,3],[39,4,6,2,"y"],[40,2,7,0],[40,3,7,1],[40,5,7,3],[41,4,8,2],[41,10,8,8,"rect"],[41,14,8,12],[41,17,8,15,"view"],[41,21,8,19],[41,22,8,20,"getBoundingClientRect"],[41,43,8,41],[41,44,8,42],[41,45,8,43],[42,4,9,2],[42,11,9,9,"x"],[42,12,9,10],[42,16,9,14,"rect"],[42,20,9,18],[42,21,9,19,"left"],[42,25,9,23],[42,29,9,27,"x"],[42,30,9,28],[42,34,9,32,"rect"],[42,38,9,36],[42,39,9,37,"right"],[42,44,9,42],[42,48,9,46,"y"],[42,49,9,47],[42,53,9,51,"rect"],[42,57,9,55],[42,58,9,56,"top"],[42,61,9,59],[42,65,9,63,"y"],[42,66,9,64],[42,70,9,68,"rect"],[42,74,9,72],[42,75,9,73,"bottom"],[42,81,9,79],[43,2,10,0],[44,2,11,7],[44,8,11,13,"PointerTypeMapping"],[44,26,11,31],[44,29,11,34],[44,33,11,38,"Map"],[44,36,11,41],[44,37,11,42],[44,38,11,43],[44,39,11,44],[44,46,11,51],[44,48,11,53,"PointerType"],[44,60,11,64],[44,61,11,64,"PointerType"],[44,72,11,64],[44,73,11,65,"MOUSE"],[44,78,11,70],[44,79,11,71],[44,81,11,73],[44,82,11,74],[44,89,11,81],[44,91,11,83,"PointerType"],[44,103,11,94],[44,104,11,94,"PointerType"],[44,115,11,94],[44,116,11,95,"TOUCH"],[44,121,11,100],[44,122,11,101],[44,124,11,103],[44,125,11,104],[44,130,11,109],[44,132,11,111,"PointerType"],[44,144,11,122],[44,145,11,122,"PointerType"],[44,156,11,122],[44,157,11,123,"STYLUS"],[44,163,11,129],[44,164,11,130],[44,166,11,132],[44,167,11,133],[44,173,11,139],[44,175,11,141,"PointerType"],[44,187,11,152],[44,188,11,152,"PointerType"],[44,199,11,152],[44,200,11,153,"OTHER"],[44,205,11,158],[44,206,11,159],[44,207,11,160],[44,208,11,161],[45,2,12,7],[45,8,12,13,"degToRad"],[45,16,12,21],[45,19,12,24,"degrees"],[45,26,12,31],[45,30,12,35,"degrees"],[45,37,12,42],[45,40,12,45,"Math"],[45,44,12,49],[45,45,12,50,"PI"],[45,47,12,52],[45,50,12,55],[45,53,12,58],[46,2,13,7],[46,8,13,13,"coneToDeviation"],[46,23,13,28],[46,26,13,31,"degrees"],[46,33,13,38],[46,37,13,42,"Math"],[46,41,13,46],[46,42,13,47,"cos"],[46,45,13,50],[46,46,13,51,"degToRad"],[46,54,13,59],[46,55,13,60,"degrees"],[46,62,13,67],[46,65,13,70],[46,66,13,71],[46,67,13,72],[46,68,13,73],[47,2,14,7],[47,11,14,16,"calculateViewScale"],[47,29,14,34,"calculateViewScale"],[47,30,14,35,"view"],[47,34,14,39],[47,36,14,41],[48,4,15,2],[48,10,15,8,"styles"],[48,16,15,14],[48,19,15,17,"getComputedStyle"],[48,35,15,33],[48,36,15,34,"view"],[48,40,15,38],[48,41,15,39],[49,4,16,2],[49,10,16,8,"resultScales"],[49,22,16,20],[49,25,16,23],[50,6,17,4,"scaleX"],[50,12,17,10],[50,14,17,12],[50,15,17,13],[51,6,18,4,"scaleY"],[51,12,18,10],[51,14,18,12],[52,4,19,2],[52,5,19,3],[54,4,21,2],[55,4,22,2],[55,8,22,6,"styles"],[55,14,22,12],[55,15,22,13,"scale"],[55,20,22,18],[55,25,22,23,"undefined"],[55,34,22,32],[55,38,22,36,"styles"],[55,44,22,42],[55,45,22,43,"scale"],[55,50,22,48],[55,55,22,53],[55,61,22,59],[55,63,22,61],[56,6,23,4],[56,12,23,10,"scales"],[56,18,23,16],[56,21,23,19,"styles"],[56,27,23,25],[56,28,23,26,"scale"],[56,33,23,31],[56,34,23,32,"split"],[56,39,23,37],[56,40,23,38],[56,43,23,41],[56,44,23,42],[57,6,24,4],[57,10,24,8,"scales"],[57,16,24,14],[57,17,24,15],[57,18,24,16],[57,19,24,17],[57,21,24,19],[58,8,25,6,"resultScales"],[58,20,25,18],[58,21,25,19,"scaleX"],[58,27,25,25],[58,30,25,28,"parseFloat"],[58,40,25,38],[58,41,25,39,"scales"],[58,47,25,45],[58,48,25,46],[58,49,25,47],[58,50,25,48],[58,51,25,49],[59,6,26,4],[60,6,27,4,"resultScales"],[60,18,27,16],[60,19,27,17,"scaleY"],[60,25,27,23],[60,28,27,26,"scales"],[60,34,27,32],[60,35,27,33],[60,36,27,34],[60,37,27,35],[60,40,27,38,"parseFloat"],[60,50,27,48],[60,51,27,49,"scales"],[60,57,27,55],[60,58,27,56],[60,59,27,57],[60,60,27,58],[60,61,27,59],[60,64,27,62,"parseFloat"],[60,74,27,72],[60,75,27,73,"scales"],[60,81,27,79],[60,82,27,80],[60,83,27,81],[60,84,27,82],[60,85,27,83],[61,4,28,2],[63,4,30,2],[64,4,31,2],[64,10,31,8,"matrixElements"],[64,24,31,22],[64,27,31,25],[64,31,31,29,"RegExp"],[64,37,31,35],[64,38,31,36],[64,54,31,52],[64,55,31,53],[64,56,31,54,"exec"],[64,60,31,58],[64,61,31,59,"styles"],[64,67,31,65],[64,68,31,66,"transform"],[64,77,31,75],[64,78,31,76],[64,81,31,79],[64,82,31,80],[64,83,31,81],[65,4,32,2],[65,8,32,6,"matrixElements"],[65,22,32,20],[65,24,32,22],[66,6,33,4],[66,12,33,10,"matrixElementsArray"],[66,31,33,29],[66,34,33,32,"matrixElements"],[66,48,33,46],[66,49,33,47,"split"],[66,54,33,52],[66,55,33,53],[66,59,33,57],[66,60,33,58],[67,6,34,4,"resultScales"],[67,18,34,16],[67,19,34,17,"scaleX"],[67,25,34,23],[67,29,34,27,"parseFloat"],[67,39,34,37],[67,40,34,38,"matrixElementsArray"],[67,59,34,57],[67,60,34,58],[67,61,34,59],[67,62,34,60],[67,63,34,61],[68,6,35,4,"resultScales"],[68,18,35,16],[68,19,35,17,"scaleY"],[68,25,35,23],[68,29,35,27,"parseFloat"],[68,39,35,37],[68,40,35,38,"matrixElementsArray"],[68,59,35,57],[68,60,35,58],[68,61,35,59],[68,62,35,60],[68,63,35,61],[69,4,36,2],[70,4,37,2],[70,11,37,9,"resultScales"],[70,23,37,21],[71,2,38,0],[72,2,39,7],[72,11,39,16,"tryExtractStylusData"],[72,31,39,36,"tryExtractStylusData"],[72,32,39,37,"event"],[72,37,39,42],[72,39,39,44],[73,4,40,2],[73,10,40,8,"pointerType"],[73,21,40,19],[73,24,40,22,"PointerTypeMapping"],[73,42,40,40],[73,43,40,41,"get"],[73,46,40,44],[73,47,40,45,"event"],[73,52,40,50],[73,53,40,51,"pointerType"],[73,64,40,62],[73,65,40,63],[74,4,41,2],[74,8,41,6,"pointerType"],[74,19,41,17],[74,24,41,22,"PointerType"],[74,36,41,33],[74,37,41,33,"PointerType"],[74,48,41,33],[74,49,41,34,"STYLUS"],[74,55,41,40],[74,57,41,42],[75,6,42,4],[76,4,43,2],[78,4,45,2],[79,4,46,2],[79,10,46,8,"eventAzimuthAngle"],[79,27,46,25],[79,30,46,28,"event"],[79,35,46,33],[79,36,46,34,"azimuthAngle"],[79,48,46,46],[80,4,47,2],[81,4,48,2],[81,10,48,8,"eventAltitudeAngle"],[81,28,48,26],[81,31,48,29,"event"],[81,36,48,34],[81,37,48,35,"altitudeAngle"],[81,50,48,48],[82,4,49,2],[82,8,49,6,"event"],[82,13,49,11],[82,14,49,12,"tiltX"],[82,19,49,17],[82,24,49,22],[82,25,49,23],[82,29,49,27,"event"],[82,34,49,32],[82,35,49,33,"tiltY"],[82,40,49,38],[82,45,49,43],[82,46,49,44],[82,48,49,46],[83,6,50,4],[84,6,51,4],[86,6,53,4],[87,6,54,4],[88,6,55,4],[88,10,55,8,"eventAzimuthAngle"],[88,27,55,25],[88,32,55,30,"undefined"],[88,41,55,39],[88,45,55,43,"eventAltitudeAngle"],[88,63,55,61],[88,68,55,66,"undefined"],[88,77,55,75],[88,79,55,77],[89,8,56,6],[89,15,56,13],[90,10,57,8,"tiltX"],[90,15,57,13],[90,17,57,15],[90,18,57,16],[91,10,58,8,"tiltY"],[91,15,58,13],[91,17,58,15],[91,18,58,16],[92,10,59,8,"azimuthAngle"],[92,22,59,20],[92,24,59,22,"Math"],[92,28,59,26],[92,29,59,27,"PI"],[92,31,59,29],[92,34,59,32],[92,35,59,33],[93,10,60,8,"altitudeAngle"],[93,23,60,21],[93,25,60,23,"Math"],[93,29,60,27],[93,30,60,28,"PI"],[93,32,60,30],[93,35,60,33],[93,36,60,34],[94,10,61,8,"pressure"],[94,18,61,16],[94,20,61,18,"event"],[94,25,61,23],[94,26,61,24,"pressure"],[95,8,62,6],[95,9,62,7],[96,6,63,4],[97,6,64,4],[97,12,64,10],[98,8,65,6,"tiltX"],[98,13,65,11],[99,8,66,6,"tiltY"],[100,6,67,4],[100,7,67,5],[100,10,67,8,"spherical2tilt"],[100,24,67,22],[100,25,67,23,"eventAltitudeAngle"],[100,43,67,41],[100,45,67,43,"eventAzimuthAngle"],[100,62,67,60],[100,63,67,61],[101,6,68,4],[101,13,68,11],[102,8,69,6,"tiltX"],[102,13,69,11],[103,8,70,6,"tiltY"],[103,13,70,11],[104,8,71,6,"azimuthAngle"],[104,20,71,18],[104,22,71,20,"eventAzimuthAngle"],[104,39,71,37],[105,8,72,6,"altitudeAngle"],[105,21,72,19],[105,23,72,21,"eventAltitudeAngle"],[105,41,72,39],[106,8,73,6,"pressure"],[106,16,73,14],[106,18,73,16,"event"],[106,23,73,21],[106,24,73,22,"pressure"],[107,6,74,4],[107,7,74,5],[108,4,75,2],[109,4,76,2],[109,10,76,8],[110,6,77,4,"altitudeAngle"],[110,19,77,17],[111,6,78,4,"azimuthAngle"],[112,4,79,2],[112,5,79,3],[112,8,79,6,"tilt2spherical"],[112,22,79,20],[112,23,79,21,"event"],[112,28,79,26],[112,29,79,27,"tiltX"],[112,34,79,32],[112,36,79,34,"event"],[112,41,79,39],[112,42,79,40,"tiltY"],[112,47,79,45],[112,48,79,46],[113,4,80,2],[113,11,80,9],[114,6,81,4,"tiltX"],[114,11,81,9],[114,13,81,11,"event"],[114,18,81,16],[114,19,81,17,"tiltX"],[114,24,81,22],[115,6,82,4,"tiltY"],[115,11,82,9],[115,13,82,11,"event"],[115,18,82,16],[115,19,82,17,"tiltY"],[115,24,82,22],[116,6,83,4,"azimuthAngle"],[116,18,83,16],[117,6,84,4,"altitudeAngle"],[117,19,84,17],[118,6,85,4,"pressure"],[118,14,85,12],[118,16,85,14,"event"],[118,21,85,19],[118,22,85,20,"pressure"],[119,4,86,2],[119,5,86,3],[120,2,87,0],[122,2,89,0],[123,2,90,0],[124,2,91,0],[125,2,92,0],[126,2,93,0],[126,11,93,9,"tilt2spherical"],[126,25,93,23,"tilt2spherical"],[126,26,93,24,"tiltX"],[126,31,93,29],[126,33,93,31,"tiltY"],[126,38,93,36],[126,40,93,38],[127,4,94,2],[127,10,94,8,"tiltXrad"],[127,18,94,16],[127,21,94,19,"tiltX"],[127,26,94,24],[127,29,94,27,"Math"],[127,33,94,31],[127,34,94,32,"PI"],[127,36,94,34],[127,39,94,37],[127,42,94,40],[128,4,95,2],[128,10,95,8,"tiltYrad"],[128,18,95,16],[128,21,95,19,"tiltY"],[128,26,95,24],[128,29,95,27,"Math"],[128,33,95,31],[128,34,95,32,"PI"],[128,36,95,34],[128,39,95,37],[128,42,95,40],[130,4,97,2],[131,4,98,2],[131,8,98,6,"azimuthAngle"],[131,20,98,18],[131,23,98,21],[131,24,98,22],[132,4,99,2],[132,8,99,6,"tiltX"],[132,13,99,11],[132,18,99,16],[132,19,99,17],[132,21,99,19],[133,6,100,4],[133,10,100,8,"tiltY"],[133,15,100,13],[133,18,100,16],[133,19,100,17],[133,21,100,19],[134,8,101,6,"azimuthAngle"],[134,20,101,18],[134,23,101,21,"Math"],[134,27,101,25],[134,28,101,26,"PI"],[134,30,101,28],[134,33,101,31],[134,34,101,32],[135,6,102,4],[135,7,102,5],[135,13,102,11],[135,17,102,15,"tiltY"],[135,22,102,20],[135,25,102,23],[135,26,102,24],[135,28,102,26],[136,8,103,6,"azimuthAngle"],[136,20,103,18],[136,23,103,21],[136,24,103,22],[136,27,103,25,"Math"],[136,31,103,29],[136,32,103,30,"PI"],[136,34,103,32],[136,37,103,35],[136,38,103,36],[137,6,104,4],[138,4,105,2],[138,5,105,3],[138,11,105,9],[138,15,105,13,"tiltY"],[138,20,105,18],[138,25,105,23],[138,26,105,24],[138,28,105,26],[139,6,106,4],[139,10,106,8,"tiltX"],[139,15,106,13],[139,18,106,16],[139,19,106,17],[139,21,106,19],[140,8,107,6,"azimuthAngle"],[140,20,107,18],[140,23,107,21,"Math"],[140,27,107,25],[140,28,107,26,"PI"],[140,30,107,28],[141,6,108,4],[142,4,109,2],[142,5,109,3],[142,11,109,9],[142,15,109,13,"Math"],[142,19,109,17],[142,20,109,18,"abs"],[142,23,109,21],[142,24,109,22,"tiltX"],[142,29,109,27],[142,30,109,28],[142,35,109,33],[142,37,109,35],[142,41,109,39,"Math"],[142,45,109,43],[142,46,109,44,"abs"],[142,49,109,47],[142,50,109,48,"tiltY"],[142,55,109,53],[142,56,109,54],[142,61,109,59],[142,63,109,61],[142,65,109,63],[143,6,110,4],[144,6,111,4,"azimuthAngle"],[144,18,111,16],[144,21,111,19],[144,22,111,20],[145,4,112,2],[145,5,112,3],[145,11,112,9],[146,6,113,4],[147,6,114,4],[147,12,114,10,"tanX"],[147,16,114,14],[147,19,114,17,"Math"],[147,23,114,21],[147,24,114,22,"tan"],[147,27,114,25],[147,28,114,26,"tiltXrad"],[147,36,114,34],[147,37,114,35],[148,6,115,4],[148,12,115,10,"tanY"],[148,16,115,14],[148,19,115,17,"Math"],[148,23,115,21],[148,24,115,22,"tan"],[148,27,115,25],[148,28,115,26,"tiltYrad"],[148,36,115,34],[148,37,115,35],[149,6,116,4,"azimuthAngle"],[149,18,116,16],[149,21,116,19,"Math"],[149,25,116,23],[149,26,116,24,"atan2"],[149,31,116,29],[149,32,116,30,"tanY"],[149,36,116,34],[149,38,116,36,"tanX"],[149,42,116,40],[149,43,116,41],[150,6,117,4],[150,10,117,8,"azimuthAngle"],[150,22,117,20],[150,25,117,23],[150,26,117,24],[150,28,117,26],[151,8,118,6,"azimuthAngle"],[151,20,118,18],[151,24,118,22],[151,25,118,23],[151,28,118,26,"Math"],[151,32,118,30],[151,33,118,31,"PI"],[151,35,118,33],[152,6,119,4],[153,4,120,2],[155,4,122,2],[156,4,123,2],[156,8,123,6,"altitudeAngle"],[156,21,123,19],[156,24,123,22],[156,25,123,23],[157,4,124,2],[157,8,124,6,"Math"],[157,12,124,10],[157,13,124,11,"abs"],[157,16,124,14],[157,17,124,15,"tiltX"],[157,22,124,20],[157,23,124,21],[157,28,124,26],[157,30,124,28],[157,34,124,32,"Math"],[157,38,124,36],[157,39,124,37,"abs"],[157,42,124,40],[157,43,124,41,"tiltY"],[157,48,124,46],[157,49,124,47],[157,54,124,52],[157,56,124,54],[157,58,124,56],[158,6,125,4,"altitudeAngle"],[158,19,125,17],[158,22,125,20],[158,23,125,21],[159,4,126,2],[159,5,126,3],[159,11,126,9],[159,15,126,13,"tiltX"],[159,20,126,18],[159,25,126,23],[159,26,126,24],[159,28,126,26],[160,6,127,4,"altitudeAngle"],[160,19,127,17],[160,22,127,20,"Math"],[160,26,127,24],[160,27,127,25,"PI"],[160,29,127,27],[160,32,127,30],[160,33,127,31],[160,36,127,34,"Math"],[160,40,127,38],[160,41,127,39,"abs"],[160,44,127,42],[160,45,127,43,"tiltYrad"],[160,53,127,51],[160,54,127,52],[161,4,128,2],[161,5,128,3],[161,11,128,9],[161,15,128,13,"tiltY"],[161,20,128,18],[161,25,128,23],[161,26,128,24],[161,28,128,26],[162,6,129,4,"altitudeAngle"],[162,19,129,17],[162,22,129,20,"Math"],[162,26,129,24],[162,27,129,25,"PI"],[162,29,129,27],[162,32,129,30],[162,33,129,31],[162,36,129,34,"Math"],[162,40,129,38],[162,41,129,39,"abs"],[162,44,129,42],[162,45,129,43,"tiltXrad"],[162,53,129,51],[162,54,129,52],[163,4,130,2],[163,5,130,3],[163,11,130,9],[164,6,131,4],[165,6,132,4,"altitudeAngle"],[165,19,132,17],[165,22,132,20,"Math"],[165,26,132,24],[165,27,132,25,"atan"],[165,31,132,29],[165,32,132,30],[165,35,132,33],[165,38,132,36,"Math"],[165,42,132,40],[165,43,132,41,"sqrt"],[165,47,132,45],[165,48,132,46,"Math"],[165,52,132,50],[165,53,132,51,"pow"],[165,56,132,54],[165,57,132,55,"Math"],[165,61,132,59],[165,62,132,60,"tan"],[165,65,132,63],[165,66,132,64,"tiltXrad"],[165,74,132,72],[165,75,132,73],[165,77,132,75],[165,78,132,76],[165,79,132,77],[165,82,132,80,"Math"],[165,86,132,84],[165,87,132,85,"pow"],[165,90,132,88],[165,91,132,89,"Math"],[165,95,132,93],[165,96,132,94,"tan"],[165,99,132,97],[165,100,132,98,"tiltYrad"],[165,108,132,106],[165,109,132,107],[165,111,132,109],[165,112,132,110],[165,113,132,111],[165,114,132,112],[165,115,132,113],[166,4,133,2],[167,4,134,2],[167,11,134,9],[168,6,135,4,"altitudeAngle"],[168,19,135,17],[168,21,135,19,"altitudeAngle"],[168,34,135,32],[169,6,136,4,"azimuthAngle"],[169,18,136,16],[169,20,136,18,"azimuthAngle"],[170,4,137,2],[170,5,137,3],[171,2,138,0],[173,2,140,0],[174,2,141,0],[175,2,142,0],[176,2,143,0],[176,11,143,9,"spherical2tilt"],[176,25,143,23,"spherical2tilt"],[176,26,143,24,"altitudeAngle"],[176,39,143,37],[176,41,143,39,"azimuthAngle"],[176,53,143,51],[176,55,143,53],[177,4,144,2],[177,10,144,8,"radToDeg"],[177,18,144,16],[177,21,144,19],[177,24,144,22],[177,27,144,25,"Math"],[177,31,144,29],[177,32,144,30,"PI"],[177,34,144,32],[178,4,145,2],[178,8,145,6,"tiltXrad"],[178,16,145,14],[178,19,145,17],[178,20,145,18],[179,4,146,2],[179,8,146,6,"tiltYrad"],[179,16,146,14],[179,19,146,17],[179,20,146,18],[180,4,147,2],[180,8,147,6,"altitudeAngle"],[180,21,147,19],[180,26,147,24],[180,27,147,25],[180,29,147,27],[181,6,148,4],[182,6,149,4],[182,10,149,8,"azimuthAngle"],[182,22,149,20],[182,27,149,25],[182,28,149,26],[182,32,149,30,"azimuthAngle"],[182,44,149,42],[182,49,149,47],[182,50,149,48],[182,53,149,51,"Math"],[182,57,149,55],[182,58,149,56,"PI"],[182,60,149,58],[182,62,149,60],[183,8,150,6],[184,8,151,6,"tiltXrad"],[184,16,151,14],[184,19,151,17,"Math"],[184,23,151,21],[184,24,151,22,"PI"],[184,26,151,24],[184,29,151,27],[184,30,151,28],[185,6,152,4],[186,6,153,4],[186,10,153,8,"azimuthAngle"],[186,22,153,20],[186,27,153,25,"Math"],[186,31,153,29],[186,32,153,30,"PI"],[186,34,153,32],[186,37,153,35],[186,38,153,36],[186,40,153,38],[187,8,154,6],[188,8,155,6,"tiltYrad"],[188,16,155,14],[188,19,155,17,"Math"],[188,23,155,21],[188,24,155,22,"PI"],[188,26,155,24],[188,29,155,27],[188,30,155,28],[189,6,156,4],[190,6,157,4],[190,10,157,8,"azimuthAngle"],[190,22,157,20],[190,27,157,25,"Math"],[190,31,157,29],[190,32,157,30,"PI"],[190,34,157,32],[190,36,157,34],[191,8,158,6],[192,8,159,6,"tiltXrad"],[192,16,159,14],[192,19,159,17],[192,20,159,18,"Math"],[192,24,159,22],[192,25,159,23,"PI"],[192,27,159,25],[192,30,159,28],[192,31,159,29],[193,6,160,4],[194,6,161,4],[194,10,161,8,"azimuthAngle"],[194,22,161,20],[194,27,161,25],[194,28,161,26],[194,31,161,29,"Math"],[194,35,161,33],[194,36,161,34,"PI"],[194,38,161,36],[194,41,161,39],[194,42,161,40],[194,44,161,42],[195,8,162,6],[196,8,163,6,"tiltYrad"],[196,16,163,14],[196,19,163,17],[196,20,163,18,"Math"],[196,24,163,22],[196,25,163,23,"PI"],[196,27,163,25],[196,30,163,28],[196,31,163,29],[197,6,164,4],[198,6,165,4],[198,10,165,8,"azimuthAngle"],[198,22,165,20],[198,25,165,23],[198,26,165,24],[198,30,165,28,"azimuthAngle"],[198,42,165,40],[198,45,165,43,"Math"],[198,49,165,47],[198,50,165,48,"PI"],[198,52,165,50],[198,55,165,53],[198,56,165,54],[198,58,165,56],[199,8,166,6,"tiltXrad"],[199,16,166,14],[199,19,166,17,"Math"],[199,23,166,21],[199,24,166,22,"PI"],[199,26,166,24],[199,29,166,27],[199,30,166,28],[200,8,167,6,"tiltYrad"],[200,16,167,14],[200,19,167,17,"Math"],[200,23,167,21],[200,24,167,22,"PI"],[200,26,167,24],[200,29,167,27],[200,30,167,28],[201,6,168,4],[202,6,169,4],[202,10,169,8,"azimuthAngle"],[202,22,169,20],[202,25,169,23,"Math"],[202,29,169,27],[202,30,169,28,"PI"],[202,32,169,30],[202,35,169,33],[202,36,169,34],[202,40,169,38,"azimuthAngle"],[202,52,169,50],[202,55,169,53,"Math"],[202,59,169,57],[202,60,169,58,"PI"],[202,62,169,60],[202,64,169,62],[203,8,170,6,"tiltXrad"],[203,16,170,14],[203,19,170,17],[203,20,170,18,"Math"],[203,24,170,22],[203,25,170,23,"PI"],[203,27,170,25],[203,30,170,28],[203,31,170,29],[204,8,171,6,"tiltYrad"],[204,16,171,14],[204,19,171,17,"Math"],[204,23,171,21],[204,24,171,22,"PI"],[204,26,171,24],[204,29,171,27],[204,30,171,28],[205,6,172,4],[206,6,173,4],[206,10,173,8,"azimuthAngle"],[206,22,173,20],[206,25,173,23,"Math"],[206,29,173,27],[206,30,173,28,"PI"],[206,32,173,30],[206,36,173,34,"azimuthAngle"],[206,48,173,46],[206,51,173,49],[206,52,173,50],[206,55,173,53,"Math"],[206,59,173,57],[206,60,173,58,"PI"],[206,62,173,60],[206,65,173,63],[206,66,173,64],[206,68,173,66],[207,8,174,6,"tiltXrad"],[207,16,174,14],[207,19,174,17],[207,20,174,18,"Math"],[207,24,174,22],[207,25,174,23,"PI"],[207,27,174,25],[207,30,174,28],[207,31,174,29],[208,8,175,6,"tiltYrad"],[208,16,175,14],[208,19,175,17],[208,20,175,18,"Math"],[208,24,175,22],[208,25,175,23,"PI"],[208,27,175,25],[208,30,175,28],[208,31,175,29],[209,6,176,4],[210,6,177,4],[210,10,177,8,"azimuthAngle"],[210,22,177,20],[210,25,177,23],[210,26,177,24],[210,29,177,27,"Math"],[210,33,177,31],[210,34,177,32,"PI"],[210,36,177,34],[210,39,177,37],[210,40,177,38],[210,44,177,42,"azimuthAngle"],[210,56,177,54],[210,59,177,57],[210,60,177,58],[210,63,177,61,"Math"],[210,67,177,65],[210,68,177,66,"PI"],[210,70,177,68],[210,72,177,70],[211,8,178,6,"tiltXrad"],[211,16,178,14],[211,19,178,17,"Math"],[211,23,178,21],[211,24,178,22,"PI"],[211,26,178,24],[211,29,178,27],[211,30,178,28],[212,8,179,6,"tiltYrad"],[212,16,179,14],[212,19,179,17],[212,20,179,18,"Math"],[212,24,179,22],[212,25,179,23,"PI"],[212,27,179,25],[212,30,179,28],[212,31,179,29],[213,6,180,4],[214,4,181,2],[215,4,182,2],[215,8,182,6,"altitudeAngle"],[215,21,182,19],[215,26,182,24],[215,27,182,25],[215,29,182,27],[216,6,183,4],[216,12,183,10,"tanAlt"],[216,18,183,16],[216,21,183,19,"Math"],[216,25,183,23],[216,26,183,24,"tan"],[216,29,183,27],[216,30,183,28,"altitudeAngle"],[216,43,183,41],[216,44,183,42],[217,6,184,4,"tiltXrad"],[217,14,184,12],[217,17,184,15,"Math"],[217,21,184,19],[217,22,184,20,"atan"],[217,26,184,24],[217,27,184,25,"Math"],[217,31,184,29],[217,32,184,30,"cos"],[217,35,184,33],[217,36,184,34,"azimuthAngle"],[217,48,184,46],[217,49,184,47],[217,52,184,50,"tanAlt"],[217,58,184,56],[217,59,184,57],[218,6,185,4,"tiltYrad"],[218,14,185,12],[218,17,185,15,"Math"],[218,21,185,19],[218,22,185,20,"atan"],[218,26,185,24],[218,27,185,25,"Math"],[218,31,185,29],[218,32,185,30,"sin"],[218,35,185,33],[218,36,185,34,"azimuthAngle"],[218,48,185,46],[218,49,185,47],[218,52,185,50,"tanAlt"],[218,58,185,56],[218,59,185,57],[219,4,186,2],[220,4,187,2],[220,10,187,8,"tiltX"],[220,15,187,13],[220,18,187,16,"Math"],[220,22,187,20],[220,23,187,21,"round"],[220,28,187,26],[220,29,187,27,"tiltXrad"],[220,37,187,35],[220,40,187,38,"radToDeg"],[220,48,187,46],[220,49,187,47],[221,4,188,2],[221,10,188,8,"tiltY"],[221,15,188,13],[221,18,188,16,"Math"],[221,22,188,20],[221,23,188,21,"round"],[221,28,188,26],[221,29,188,27,"tiltYrad"],[221,37,188,35],[221,40,188,38,"radToDeg"],[221,48,188,46],[221,49,188,47],[222,4,189,2],[222,11,189,9],[223,6,190,4,"tiltX"],[223,11,190,9],[224,6,191,4,"tiltY"],[225,4,192,2],[225,5,192,3],[226,2,193,0],[227,2,194,7],[227,8,194,13,"RNSVGElements"],[227,21,194,26],[227,24,194,29],[227,28,194,33,"Set"],[227,31,194,36],[227,32,194,37],[227,33,194,38],[227,41,194,46],[227,43,194,48],[227,53,194,58],[227,55,194,60],[227,64,194,69],[227,66,194,71],[227,81,194,86],[227,83,194,88],[227,86,194,91],[227,88,194,93],[227,95,194,100],[227,97,194,102],[227,103,194,108],[227,105,194,110],[227,113,194,118],[227,115,194,120],[227,121,194,126],[227,123,194,128],[227,129,194,134],[227,131,194,136],[227,140,194,145],[227,142,194,147],[227,151,194,156],[227,153,194,158],[227,163,194,168],[227,165,194,170],[227,171,194,176],[227,173,194,178],[227,178,194,183],[227,180,194,185],[227,188,194,193],[227,190,194,195],[227,197,194,202],[227,199,194,204],[227,205,194,210],[227,207,194,212],[227,217,194,222],[227,219,194,224],[227,224,194,229],[227,225,194,230],[227,226,194,231],[229,2,196,0],[230,2,197,0],[231,2,198,0],[232,2,199,0],[233,2,200,0],[234,2,201,0],[235,2,202,0],[236,2,203,0],[237,2,204,0],[238,2,205,7],[238,11,205,16,"isRNSVGElement"],[238,25,205,30,"isRNSVGElement"],[238,26,205,31,"viewRef"],[238,33,205,38],[238,35,205,40],[239,4,206,2],[239,10,206,8,"componentClassName"],[239,28,206,26],[239,31,206,29,"Object"],[239,37,206,35],[239,38,206,36,"getPrototypeOf"],[239,52,206,50],[239,53,206,51,"viewRef"],[239,60,206,58],[239,61,206,59],[239,62,206,60,"constructor"],[239,73,206,71],[239,74,206,72,"name"],[239,78,206,76],[240,4,207,2],[240,11,207,9,"RNSVGElements"],[240,24,207,22],[240,25,207,23,"has"],[240,28,207,26],[240,29,207,27,"componentClassName"],[240,47,207,45],[240,48,207,46],[240,52,207,50,"Object"],[240,58,207,56],[240,59,207,57,"hasOwn"],[240,65,207,63],[240,66,207,64,"viewRef"],[240,73,207,71],[240,75,207,73],[240,87,207,85],[240,88,207,86],[241,2,208,0],[243,2,210,0],[244,2,211,0],[245,2,212,0],[246,2,213,0],[247,2,214,0],[248,2,215,7],[248,11,215,16,"isRNSVGNode"],[248,22,215,27,"isRNSVGNode"],[248,23,215,28,"node"],[248,27,215,32],[248,29,215,34],[249,4,216,2],[250,4,217,2],[251,4,218,2],[251,8,218,6,"node"],[251,12,218,10],[251,13,218,11,"ref"],[251,16,218,14],[251,18,218,16,"rngh"],[251,22,218,20],[251,24,218,22],[252,6,219,4],[252,13,219,11],[252,18,219,16],[253,4,220,2],[254,4,221,2],[254,11,221,9,"Object"],[254,17,221,15],[254,18,221,16,"getPrototypeOf"],[254,32,221,30],[254,33,221,31,"node"],[254,37,221,35],[254,39,221,37,"type"],[254,43,221,41],[254,44,221,42],[254,46,221,44,"name"],[254,50,221,48],[254,55,221,53],[254,65,221,63],[254,69,221,67,"RNSVGElements"],[254,82,221,80],[254,83,221,81,"has"],[254,86,221,84],[254,87,221,85,"node"],[254,91,221,89],[254,93,221,91,"type"],[254,97,221,95],[254,99,221,97,"displayName"],[254,110,221,108],[254,111,221,109],[255,2,222,0],[256,0,222,1],[256,3]],"functionMap":{"names":["<global>","isPointerInBounds","degToRad","coneToDeviation","calculateViewScale","tryExtractStylusData","tilt2spherical","spherical2tilt","isRNSVGElement","isRNSVGNode"],"mappings":"AAA;OCG;CDM;wBEE,kCF;+BGC,0CH;OIC;CJwB;OKC;CLgD;AMM;CN6C;AOK;CPkD;OQY;CRG;OSO;CTO"},"hasCjsExports":false},"type":"js/module"}]}