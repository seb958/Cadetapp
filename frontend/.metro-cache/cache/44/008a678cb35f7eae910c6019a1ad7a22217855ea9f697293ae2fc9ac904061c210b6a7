{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":36,"index":143},"end":{"line":8,"column":52,"index":159}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":40,"index":203},"end":{"line":10,"column":60,"index":223}}],"key":"oQpL0Es3H146KnQH9ygFeHrzVP4=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/index","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"55efhPHw3gz2FoQtoN2yI1VuhbM=","exportNames":["*"],"imports":1}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":25,"index":297},"end":{"line":14,"column":65,"index":337}}],"key":"twOH2XyKrCgBSDUtf5FiFKYMu7g=","exportNames":["*"],"imports":1}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":25,"index":365},"end":{"line":16,"column":65,"index":405}}],"key":"4nIIZM1xVk9FiTD7igXG0GgovY4=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":13,"index":421},"end":{"line":18,"column":32,"index":440}}],"key":"6QJYsgIYyXDoX6Ak1wmI7AHik6U=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var React = _interopRequireWildcard(require(_dependencyMap[0], \"react\"));\n  var _invariant = _interopRequireDefault(require(_dependencyMap[1], \"invariant\"));\n  var _reactNative = require(_dependencyMap[2], \"react-native-web/dist/index\");\n  var _PanGestureHandler = require(_dependencyMap[3], \"../handlers/PanGestureHandler\");\n  var _TapGestureHandler = require(_dependencyMap[4], \"../handlers/TapGestureHandler\");\n  var _State = require(_dependencyMap[5], \"../State\");\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  function _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function () {\n      return cache;\n    };\n    return cache;\n  }\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n      return {\n        default: obj\n      };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n      return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n        if (desc && (desc.get || desc.set)) {\n          Object.defineProperty(newObj, key, desc);\n        } else {\n          newObj[key] = obj[key];\n        }\n      }\n    }\n    newObj.default = obj;\n    if (cache) {\n      cache.set(obj, newObj);\n    }\n    return newObj;\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  const DRAG_TOSS = 0.05;\n  const IDLE = 'Idle';\n  const DRAGGING = 'Dragging';\n  const SETTLING = 'Settling';\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  class DrawerLayout extends React.Component {\n    constructor(_props) {\n      super(_props);\n      _defineProperty(this, \"openValue\", void 0);\n      _defineProperty(this, \"onGestureEvent\", void 0);\n      _defineProperty(this, \"accessibilityIsModalView\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"pointerEventsView\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"panGestureHandler\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"drawerShown\", false);\n      _defineProperty(this, \"updateAnimatedEvent\", (props, state) => {\n        // Event definition is based on\n        const {\n          drawerPosition,\n          drawerWidth,\n          drawerType\n        } = props;\n        const {\n          dragX: dragXValue,\n          touchX: touchXValue,\n          drawerTranslation,\n          containerWidth\n        } = state;\n        let dragX = dragXValue;\n        let touchX = touchXValue;\n        if (drawerPosition !== 'left') {\n          // Most of the code is written in a way to handle left-side drawer. In\n          // order to handle right-side drawer the only thing we need to do is to\n          // reverse events coming from gesture handler in a way they emulate\n          // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n          // calulcated by subtracing real touchX from the width of the container\n          // (such that when touch happens at the right edge the value is simply 0)\n          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n\n          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        } // While closing the drawer when user starts gesture outside of its area (in greyed\n        // out part of the window), we want the drawer to follow only once finger reaches the\n        // edge of the drawer.\n        // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n        // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n        // an arrow pointing left\n        // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    +---------------+    +---------------+    +---------------+    +---------------+\n        //\n        // For the above to work properly we define animated value that will keep\n        // start position of the gesture. Then we use that value to calculate how\n        // much we need to subtract from the dragX. If the gesture started on the\n        // greyed out area we take the distance from the edge of the drawer to the\n        // start position. Otherwise we don't subtract at all and the drawer be\n        // pulled back as soon as you start the pan.\n        //\n        // This is used only when drawerType is \"front\"\n        //\n\n        let translationX = dragX;\n        if (drawerType === 'front') {\n          const startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n          const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n        }\n        this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        const gestureOptions = {\n          useNativeDriver: props.useNativeAnimations\n        };\n        if (this.props.onDrawerSlide) {\n          gestureOptions.listener = ev => {\n            var _this$props$onDrawerS, _this$props;\n            const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n            const position = translationX / this.state.containerWidth;\n            (_this$props$onDrawerS = (_this$props = this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n          };\n        }\n        this.onGestureEvent = _reactNative.Animated.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], gestureOptions);\n      });\n      _defineProperty(this, \"handleContainerLayout\", ({\n        nativeEvent\n      }) => {\n        this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      });\n      _defineProperty(this, \"emitStateChanged\", (newState, drawerWillShow) => {\n        var _this$props$onDrawerS2, _this$props2;\n        (_this$props$onDrawerS2 = (_this$props2 = this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n      });\n      _defineProperty(this, \"openingHandlerStateChange\", ({\n        nativeEvent\n      }) => {\n        if (nativeEvent.oldState === _State.State.ACTIVE) {\n          this.handleRelease({\n            nativeEvent\n          });\n        } else if (nativeEvent.state === _State.State.ACTIVE) {\n          this.emitStateChanged(DRAGGING, false);\n          this.setState({\n            drawerState: DRAGGING\n          });\n          if (this.props.keyboardDismissMode === 'on-drag') {\n            _reactNative.Keyboard.dismiss();\n          }\n          if (this.props.hideStatusBar) {\n            _reactNative.StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n          }\n        }\n      });\n      _defineProperty(this, \"onTapHandlerStateChange\", ({\n        nativeEvent\n      }) => {\n        if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n          this.closeDrawer();\n        }\n      });\n      _defineProperty(this, \"handleRelease\", ({\n        nativeEvent\n      }) => {\n        const {\n          drawerWidth,\n          drawerPosition,\n          drawerType\n        } = this.props;\n        const {\n          containerWidth\n        } = this.state;\n        let {\n          translationX: dragX,\n          velocityX,\n          x: touchX\n        } = nativeEvent;\n        if (drawerPosition !== 'left') {\n          // See description in _updateAnimatedEvent about why events are flipped\n          // for right-side drawer\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n        const gestureStartX = touchX - dragX;\n        let dragOffsetBasedOnStart = 0;\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n        const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n        const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        const shouldOpen = projOffsetX > drawerWidth / 2;\n        if (shouldOpen) {\n          this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          this.animateDrawer(startOffsetX, 0, velocityX);\n        }\n      });\n      _defineProperty(this, \"updateShowing\", showing => {\n        var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n        this.drawerShown = showing;\n        (_this$accessibilityIs = this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n          accessibilityViewIsModal: showing\n        });\n        (_this$pointerEventsVi = this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n          pointerEvents: showing ? 'auto' : 'none'\n        });\n        const {\n          drawerPosition,\n          minSwipeDistance,\n          edgeWidth\n        } = this.props;\n        const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n\n        const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n\n        const hitSlop = fromLeft ? {\n          left: 0,\n          width: showing ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: showing ? undefined : edgeWidth\n        }; // @ts-ignore internal API, maybe could be fixed in handler types\n\n        (_this$panGestureHandl = this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n          hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance\n        });\n      });\n      _defineProperty(this, \"animateDrawer\", (fromValue, toValue, velocity, speed) => {\n        this.state.dragX.setValue(0);\n        this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n        if (fromValue != null) {\n          let nextFramePosition = fromValue;\n          if (this.props.useNativeAnimations) {\n            // When using native driver, we predict the next position of the\n            // animation because it takes one frame of a roundtrip to pass RELEASE\n            // event from native driver to JS before we can start animating. Without\n            // it, it is more noticable that the frame is dropped.\n            if (fromValue < toValue && velocity > 0) {\n              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n            } else if (fromValue > toValue && velocity < 0) {\n              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n            }\n          }\n          this.state.drawerTranslation.setValue(nextFramePosition);\n        }\n        const willShow = toValue !== 0;\n        this.updateShowing(willShow);\n        this.emitStateChanged(SETTLING, willShow);\n        this.setState({\n          drawerState: SETTLING\n        });\n        if (this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n        }\n        _reactNative.Animated.spring(this.state.drawerTranslation, {\n          velocity,\n          bounciness: 0,\n          toValue,\n          useNativeDriver: this.props.useNativeAnimations,\n          speed: speed !== null && speed !== void 0 ? speed : undefined\n        }).start(({\n          finished\n        }) => {\n          if (finished) {\n            this.emitStateChanged(IDLE, willShow);\n            this.setState({\n              drawerOpened: willShow\n            });\n            if (this.state.drawerState !== DRAGGING) {\n              // It's possilbe that user started drag while the drawer\n              // was settling, don't override state in this case\n              this.setState({\n                drawerState: IDLE\n              });\n            }\n            if (willShow) {\n              var _this$props$onDrawerO, _this$props3;\n              (_this$props$onDrawerO = (_this$props3 = this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n            } else {\n              var _this$props$onDrawerC, _this$props4;\n              (_this$props$onDrawerC = (_this$props4 = this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n            }\n          }\n        });\n      });\n      _defineProperty(this, \"openDrawer\", (options = {}) => {\n        this.animateDrawer(\n        // TODO: decide if it should be null or undefined is the proper value\n        undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n        // it would not be clickable\n\n        this.forceUpdate();\n      });\n      _defineProperty(this, \"closeDrawer\", (options = {}) => {\n        // TODO: decide if it should be null or undefined is the proper value\n        this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n        // it would be still clickable\n\n        this.forceUpdate();\n      });\n      _defineProperty(this, \"renderOverlay\", () => {\n        /* Overlay styles */\n        (0, _invariant.default)(this.openValue, 'should be set');\n        let overlayOpacity;\n        if (this.state.drawerState !== IDLE) {\n          overlayOpacity = this.openValue;\n        } else {\n          overlayOpacity = this.state.drawerOpened ? 1 : 0;\n        }\n        const dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: this.props.overlayColor\n        };\n        return /*#__PURE__*/React.createElement(_TapGestureHandler.TapGestureHandler, {\n          onHandlerStateChange: this.onTapHandlerStateChange\n        }, /*#__PURE__*/React.createElement(_reactNative.Animated.View, {\n          pointerEvents: this.drawerShown ? 'auto' : 'none',\n          ref: this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        }));\n      });\n      _defineProperty(this, \"renderDrawer\", () => {\n        const {\n          drawerBackgroundColor,\n          drawerWidth,\n          drawerPosition,\n          drawerType,\n          drawerContainerStyle,\n          contentContainerStyle\n        } = this.props;\n        const fromLeft = drawerPosition === 'left';\n        const drawerSlide = drawerType !== 'back';\n        const containerSlide = drawerType !== 'front'; // We rely on row and row-reverse flex directions to position the drawer\n        // properly. Apparently for RTL these are flipped which requires us to use\n        // the opposite setting for the drawer to appear from left or right\n        // according to the drawerPosition prop\n\n        const reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n        const dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        const openValue = this.openValue;\n        (0, _invariant.default)(openValue, 'should be set');\n        let containerStyles;\n        if (containerSlide) {\n          const containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n        let drawerTranslateX = 0;\n        if (drawerSlide) {\n          const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          if (this.state.drawerState !== IDLE) {\n            drawerTranslateX = openValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [closedDrawerOffset, 0],\n              extrapolate: 'clamp'\n            });\n          } else {\n            drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n          }\n        }\n        const drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n        };\n        return /*#__PURE__*/React.createElement(_reactNative.Animated.View, {\n          style: styles.main,\n          onLayout: this.handleContainerLayout\n        }, /*#__PURE__*/React.createElement(_reactNative.Animated.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes'\n        }, typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()), /*#__PURE__*/React.createElement(_reactNative.Animated.View, {\n          pointerEvents: \"box-none\",\n          ref: this.accessibilityIsModalView,\n          accessibilityViewIsModal: this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n        }, /*#__PURE__*/React.createElement(_reactNative.View, {\n          style: dynamicDrawerStyles\n        }, this.props.renderNavigationView(this.openValue))));\n      });\n      _defineProperty(this, \"setPanGestureRef\", ref => {\n        var _this$props$onGesture, _this$props5;\n\n        // TODO(TS): make sure it is OK taken from\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n        this.panGestureHandler.current = ref;\n        (_this$props$onGesture = (_this$props5 = this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n      });\n      const _dragX = new _reactNative.Animated.Value(0);\n      const _touchX = new _reactNative.Animated.Value(0);\n      const _drawerTranslation = new _reactNative.Animated.Value(0);\n      this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      this.updateAnimatedEvent(_props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n    render() {\n      const {\n        drawerPosition,\n        drawerLockMode,\n        edgeWidth,\n        minSwipeDistance\n      } = this.props;\n      const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return /*#__PURE__*/React.createElement(_PanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n      , {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }\n  exports.default = DrawerLayout;\n  _defineProperty(DrawerLayout, \"defaultProps\", {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  });\n  _defineProperty(DrawerLayout, \"positions\", {\n    Left: 'left',\n    Right: 'right'\n  });\n  const styles = _reactNative.StyleSheet.create({\n    drawerContainer: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1001,\n      flexDirection: 'row'\n    },\n    containerInFront: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1002\n    },\n    containerOnBack: {\n      ..._reactNative.StyleSheet.absoluteFillObject\n    },\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1000\n    }\n  });\n});","lineCount":557,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,15],[7,20,6,18],[7,25,6,23],[7,26,6,24],[8,2,8,0],[8,6,8,4,"React"],[8,11,8,9],[8,14,8,12,"_interopRequireWildcard"],[8,37,8,35],[8,38,8,36,"require"],[8,45,8,43],[8,46,8,43,"_dependencyMap"],[8,60,8,43],[8,72,8,51],[8,73,8,52],[8,74,8,53],[9,2,10,0],[9,6,10,4,"_invariant"],[9,16,10,14],[9,19,10,17,"_interopRequireDefault"],[9,41,10,39],[9,42,10,40,"require"],[9,49,10,47],[9,50,10,47,"_dependencyMap"],[9,64,10,47],[9,80,10,59],[9,81,10,60],[9,82,10,61],[10,2,10,62],[10,6,10,62,"_reactNative"],[10,18,10,62],[10,21,10,62,"require"],[10,28,10,62],[10,29,10,62,"_dependencyMap"],[10,43,10,62],[11,2,14,0],[11,6,14,4,"_PanGestureHandler"],[11,24,14,22],[11,27,14,25,"require"],[11,34,14,32],[11,35,14,32,"_dependencyMap"],[11,49,14,32],[11,85,14,64],[11,86,14,65],[12,2,16,0],[12,6,16,4,"_TapGestureHandler"],[12,24,16,22],[12,27,16,25,"require"],[12,34,16,32],[12,35,16,32,"_dependencyMap"],[12,49,16,32],[12,85,16,64],[12,86,16,65],[13,2,18,0],[13,6,18,4,"_State"],[13,12,18,10],[13,15,18,13,"require"],[13,22,18,20],[13,23,18,20,"_dependencyMap"],[13,37,18,20],[13,52,18,31],[13,53,18,32],[14,2,20,0],[14,11,20,9,"_interopRequireDefault"],[14,33,20,31,"_interopRequireDefault"],[14,34,20,32,"obj"],[14,37,20,35],[14,39,20,37],[15,4,20,39],[15,11,20,46,"obj"],[15,14,20,49],[15,18,20,53,"obj"],[15,21,20,56],[15,22,20,57,"__esModule"],[15,32,20,67],[15,35,20,70,"obj"],[15,38,20,73],[15,41,20,76],[16,6,20,78,"default"],[16,13,20,85],[16,15,20,87,"obj"],[17,4,20,91],[17,5,20,92],[18,2,20,94],[19,2,22,0],[19,11,22,9,"_getRequireWildcardCache"],[19,35,22,33,"_getRequireWildcardCache"],[19,36,22,33],[19,38,22,36],[20,4,22,38],[20,8,22,42],[20,15,22,49,"WeakMap"],[20,22,22,56],[20,27,22,61],[20,37,22,71],[20,39,22,73],[20,46,22,80],[20,50,22,84],[21,4,22,86],[21,8,22,90,"cache"],[21,13,22,95],[21,16,22,98],[21,20,22,102,"WeakMap"],[21,27,22,109],[21,28,22,110],[21,29,22,111],[22,4,22,113,"_getRequireWildcardCache"],[22,28,22,137],[22,31,22,140],[22,40,22,140,"_getRequireWildcardCache"],[22,41,22,140],[22,43,22,152],[23,6,22,154],[23,13,22,161,"cache"],[23,18,22,166],[24,4,22,168],[24,5,22,169],[25,4,22,171],[25,11,22,178,"cache"],[25,16,22,183],[26,2,22,185],[27,2,24,0],[27,11,24,9,"_interopRequireWildcard"],[27,34,24,32,"_interopRequireWildcard"],[27,35,24,33,"obj"],[27,38,24,36],[27,40,24,38],[28,4,24,40],[28,8,24,44,"obj"],[28,11,24,47],[28,15,24,51,"obj"],[28,18,24,54],[28,19,24,55,"__esModule"],[28,29,24,65],[28,31,24,67],[29,6,24,69],[29,13,24,76,"obj"],[29,16,24,79],[30,4,24,81],[31,4,24,83],[31,8,24,87,"obj"],[31,11,24,90],[31,16,24,95],[31,20,24,99],[31,24,24,103],[31,31,24,110,"obj"],[31,34,24,113],[31,39,24,118],[31,47,24,126],[31,51,24,130],[31,58,24,137,"obj"],[31,61,24,140],[31,66,24,145],[31,76,24,155],[31,78,24,157],[32,6,24,159],[32,13,24,166],[33,8,24,168,"default"],[33,15,24,175],[33,17,24,177,"obj"],[34,6,24,181],[34,7,24,182],[35,4,24,184],[36,4,24,186],[36,8,24,190,"cache"],[36,13,24,195],[36,16,24,198,"_getRequireWildcardCache"],[36,40,24,222],[36,41,24,223],[36,42,24,224],[37,4,24,226],[37,8,24,230,"cache"],[37,13,24,235],[37,17,24,239,"cache"],[37,22,24,244],[37,23,24,245,"has"],[37,26,24,248],[37,27,24,249,"obj"],[37,30,24,252],[37,31,24,253],[37,33,24,255],[38,6,24,257],[38,13,24,264,"cache"],[38,18,24,269],[38,19,24,270,"get"],[38,22,24,273],[38,23,24,274,"obj"],[38,26,24,277],[38,27,24,278],[39,4,24,280],[40,4,24,282],[40,8,24,286,"newObj"],[40,14,24,292],[40,17,24,295],[40,18,24,296],[40,19,24,297],[41,4,24,299],[41,8,24,303,"hasPropertyDescriptor"],[41,29,24,324],[41,32,24,327,"Object"],[41,38,24,333],[41,39,24,334,"defineProperty"],[41,53,24,348],[41,57,24,352,"Object"],[41,63,24,358],[41,64,24,359,"getOwnPropertyDescriptor"],[41,88,24,383],[42,4,24,385],[42,9,24,390],[42,13,24,394,"key"],[42,16,24,397],[42,20,24,401,"obj"],[42,23,24,404],[42,25,24,406],[43,6,24,408],[43,10,24,412,"Object"],[43,16,24,418],[43,17,24,419,"prototype"],[43,26,24,428],[43,27,24,429,"hasOwnProperty"],[43,41,24,443],[43,42,24,444,"call"],[43,46,24,448],[43,47,24,449,"obj"],[43,50,24,452],[43,52,24,454,"key"],[43,55,24,457],[43,56,24,458],[43,58,24,460],[44,8,24,462],[44,12,24,466,"desc"],[44,16,24,470],[44,19,24,473,"hasPropertyDescriptor"],[44,40,24,494],[44,43,24,497,"Object"],[44,49,24,503],[44,50,24,504,"getOwnPropertyDescriptor"],[44,74,24,528],[44,75,24,529,"obj"],[44,78,24,532],[44,80,24,534,"key"],[44,83,24,537],[44,84,24,538],[44,87,24,541],[44,91,24,545],[45,8,24,547],[45,12,24,551,"desc"],[45,16,24,555],[45,21,24,560,"desc"],[45,25,24,564],[45,26,24,565,"get"],[45,29,24,568],[45,33,24,572,"desc"],[45,37,24,576],[45,38,24,577,"set"],[45,41,24,580],[45,42,24,581],[45,44,24,583],[46,10,24,585,"Object"],[46,16,24,591],[46,17,24,592,"defineProperty"],[46,31,24,606],[46,32,24,607,"newObj"],[46,38,24,613],[46,40,24,615,"key"],[46,43,24,618],[46,45,24,620,"desc"],[46,49,24,624],[46,50,24,625],[47,8,24,627],[47,9,24,628],[47,15,24,634],[48,10,24,636,"newObj"],[48,16,24,642],[48,17,24,643,"key"],[48,20,24,646],[48,21,24,647],[48,24,24,650,"obj"],[48,27,24,653],[48,28,24,654,"key"],[48,31,24,657],[48,32,24,658],[49,8,24,660],[50,6,24,662],[51,4,24,664],[52,4,24,666,"newObj"],[52,10,24,672],[52,11,24,673,"default"],[52,18,24,680],[52,21,24,683,"obj"],[52,24,24,686],[53,4,24,688],[53,8,24,692,"cache"],[53,13,24,697],[53,15,24,699],[54,6,24,701,"cache"],[54,11,24,706],[54,12,24,707,"set"],[54,15,24,710],[54,16,24,711,"obj"],[54,19,24,714],[54,21,24,716,"newObj"],[54,27,24,722],[54,28,24,723],[55,4,24,725],[56,4,24,727],[56,11,24,734,"newObj"],[56,17,24,740],[57,2,24,742],[58,2,26,0],[58,11,26,9,"_defineProperty"],[58,26,26,24,"_defineProperty"],[58,27,26,25,"obj"],[58,30,26,28],[58,32,26,30,"key"],[58,35,26,33],[58,37,26,35,"value"],[58,42,26,40],[58,44,26,42],[59,4,26,44],[59,8,26,48,"key"],[59,11,26,51],[59,15,26,55,"obj"],[59,18,26,58],[59,20,26,60],[60,6,26,62,"Object"],[60,12,26,68],[60,13,26,69,"defineProperty"],[60,27,26,83],[60,28,26,84,"obj"],[60,31,26,87],[60,33,26,89,"key"],[60,36,26,92],[60,38,26,94],[61,8,26,96,"value"],[61,13,26,101],[61,15,26,103,"value"],[61,20,26,108],[62,8,26,110,"enumerable"],[62,18,26,120],[62,20,26,122],[62,24,26,126],[63,8,26,128,"configurable"],[63,20,26,140],[63,22,26,142],[63,26,26,146],[64,8,26,148,"writable"],[64,16,26,156],[64,18,26,158],[65,6,26,163],[65,7,26,164],[65,8,26,165],[66,4,26,167],[66,5,26,168],[66,11,26,174],[67,6,26,176,"obj"],[67,9,26,179],[67,10,26,180,"key"],[67,13,26,183],[67,14,26,184],[67,17,26,187,"value"],[67,22,26,192],[68,4,26,194],[69,4,26,196],[69,11,26,203,"obj"],[69,14,26,206],[70,2,26,208],[71,2,28,0],[71,8,28,6,"DRAG_TOSS"],[71,17,28,15],[71,20,28,18],[71,24,28,22],[72,2,29,0],[72,8,29,6,"IDLE"],[72,12,29,10],[72,15,29,13],[72,21,29,19],[73,2,30,0],[73,8,30,6,"DRAGGING"],[73,16,30,14],[73,19,30,17],[73,29,30,27],[74,2,31,0],[74,8,31,6,"SETTLING"],[74,16,31,14],[74,19,31,17],[74,29,31,27],[75,2,32,0],[76,0,33,0],[77,0,34,0],[79,2,36,0],[80,0,37,0],[81,0,38,0],[82,2,39,0],[82,8,39,6,"DrawerLayout"],[82,20,39,18],[82,29,39,27,"React"],[82,34,39,32],[82,35,39,33,"Component"],[82,44,39,42],[82,45,39,43],[83,4,40,2,"constructor"],[83,15,40,13,"constructor"],[83,16,40,14,"_props"],[83,22,40,20],[83,24,40,22],[84,6,41,4],[84,11,41,9],[84,12,41,10,"_props"],[84,18,41,16],[84,19,41,17],[85,6,43,4,"_defineProperty"],[85,21,43,19],[85,22,43,20],[85,26,43,24],[85,28,43,26],[85,39,43,37],[85,41,43,39],[85,46,43,44],[85,47,43,45],[85,48,43,46],[86,6,45,4,"_defineProperty"],[86,21,45,19],[86,22,45,20],[86,26,45,24],[86,28,45,26],[86,44,45,42],[86,46,45,44],[86,51,45,49],[86,52,45,50],[86,53,45,51],[87,6,47,4,"_defineProperty"],[87,21,47,19],[87,22,47,20],[87,26,47,24],[87,28,47,26],[87,54,47,52],[87,56,47,54],[87,69,47,67,"React"],[87,74,47,72],[87,75,47,73,"createRef"],[87,84,47,82],[87,85,47,83],[87,86,47,84],[87,87,47,85],[88,6,49,4,"_defineProperty"],[88,21,49,19],[88,22,49,20],[88,26,49,24],[88,28,49,26],[88,47,49,45],[88,49,49,47],[88,62,49,60,"React"],[88,67,49,65],[88,68,49,66,"createRef"],[88,77,49,75],[88,78,49,76],[88,79,49,77],[88,80,49,78],[89,6,51,4,"_defineProperty"],[89,21,51,19],[89,22,51,20],[89,26,51,24],[89,28,51,26],[89,47,51,45],[89,49,51,47],[89,62,51,60,"React"],[89,67,51,65],[89,68,51,66,"createRef"],[89,77,51,75],[89,78,51,76],[89,79,51,77],[89,80,51,78],[90,6,53,4,"_defineProperty"],[90,21,53,19],[90,22,53,20],[90,26,53,24],[90,28,53,26],[90,41,53,39],[90,43,53,41],[90,48,53,46],[90,49,53,47],[91,6,55,4,"_defineProperty"],[91,21,55,19],[91,22,55,20],[91,26,55,24],[91,28,55,26],[91,49,55,47],[91,51,55,49],[91,52,55,50,"props"],[91,57,55,55],[91,59,55,57,"state"],[91,64,55,62],[91,69,55,67],[92,8,56,6],[93,8,57,6],[93,14,57,12],[94,10,58,8,"drawerPosition"],[94,24,58,22],[95,10,59,8,"drawerWidth"],[95,21,59,19],[96,10,60,8,"drawerType"],[97,8,61,6],[97,9,61,7],[97,12,61,10,"props"],[97,17,61,15],[98,8,62,6],[98,14,62,12],[99,10,63,8,"dragX"],[99,15,63,13],[99,17,63,15,"dragXValue"],[99,27,63,25],[100,10,64,8,"touchX"],[100,16,64,14],[100,18,64,16,"touchXValue"],[100,29,64,27],[101,10,65,8,"drawerTranslation"],[101,27,65,25],[102,10,66,8,"containerWidth"],[103,8,67,6],[103,9,67,7],[103,12,67,10,"state"],[103,17,67,15],[104,8,68,6],[104,12,68,10,"dragX"],[104,17,68,15],[104,20,68,18,"dragXValue"],[104,30,68,28],[105,8,69,6],[105,12,69,10,"touchX"],[105,18,69,16],[105,21,69,19,"touchXValue"],[105,32,69,30],[106,8,71,6],[106,12,71,10,"drawerPosition"],[106,26,71,24],[106,31,71,29],[106,37,71,35],[106,39,71,37],[107,10,72,8],[108,10,73,8],[109,10,74,8],[110,10,75,8],[111,10,76,8],[112,10,77,8],[113,10,78,8,"dragX"],[113,15,78,13],[113,18,78,16,"_reactNative"],[113,30,78,28],[113,31,78,29,"Animated"],[113,39,78,37],[113,40,78,38,"multiply"],[113,48,78,46],[113,49,78,47],[113,53,78,51,"_reactNative"],[113,65,78,63],[113,66,78,64,"Animated"],[113,74,78,72],[113,75,78,73,"Value"],[113,80,78,78],[113,81,78,79],[113,82,78,80],[113,83,78,81],[113,84,78,82],[113,86,78,84,"dragXValue"],[113,96,78,94],[113,97,78,95],[113,98,78,96],[113,99,78,97],[115,10,80,8,"touchX"],[115,16,80,14],[115,19,80,17,"_reactNative"],[115,31,80,29],[115,32,80,30,"Animated"],[115,40,80,38],[115,41,80,39,"add"],[115,44,80,42],[115,45,80,43],[115,49,80,47,"_reactNative"],[115,61,80,59],[115,62,80,60,"Animated"],[115,70,80,68],[115,71,80,69,"Value"],[115,76,80,74],[115,77,80,75,"containerWidth"],[115,91,80,89],[115,92,80,90],[115,94,80,92,"_reactNative"],[115,106,80,104],[115,107,80,105,"Animated"],[115,115,80,113],[115,116,80,114,"multiply"],[115,124,80,122],[115,125,80,123],[115,129,80,127,"_reactNative"],[115,141,80,139],[115,142,80,140,"Animated"],[115,150,80,148],[115,151,80,149,"Value"],[115,156,80,154],[115,157,80,155],[115,158,80,156],[115,159,80,157],[115,160,80,158],[115,162,80,160,"touchXValue"],[115,173,80,171],[115,174,80,172],[115,175,80,173],[115,176,80,174],[115,177,80,175],[117,10,82,8,"touchXValue"],[117,21,82,19],[117,22,82,20,"setValue"],[117,30,82,28],[117,31,82,29,"containerWidth"],[117,45,82,43],[117,46,82,44],[118,8,83,6],[118,9,83,7],[118,15,83,13],[119,10,84,8,"touchXValue"],[119,21,84,19],[119,22,84,20,"setValue"],[119,30,84,28],[119,31,84,29],[119,32,84,30],[119,33,84,31],[120,8,85,6],[120,9,85,7],[120,10,85,8],[121,8,86,6],[122,8,87,6],[123,8,88,6],[124,8,89,6],[125,8,90,6],[126,8,91,6],[127,8,92,6],[128,8,93,6],[129,8,94,6],[130,8,95,6],[131,8,96,6],[132,8,97,6],[133,8,98,6],[134,8,99,6],[135,8,100,6],[136,8,101,6],[137,8,102,6],[138,8,103,6],[139,8,104,6],[140,8,105,6],[141,8,106,6],[142,8,107,6],[143,8,108,6],[144,8,109,6],[146,8,112,6],[146,12,112,10,"translationX"],[146,24,112,22],[146,27,112,25,"dragX"],[146,32,112,30],[147,8,114,6],[147,12,114,10,"drawerType"],[147,22,114,20],[147,27,114,25],[147,34,114,32],[147,36,114,34],[148,10,115,8],[148,16,115,14,"startPositionX"],[148,30,115,28],[148,33,115,31,"_reactNative"],[148,45,115,43],[148,46,115,44,"Animated"],[148,54,115,52],[148,55,115,53,"add"],[148,58,115,56],[148,59,115,57,"touchX"],[148,65,115,63],[148,67,115,65,"_reactNative"],[148,79,115,77],[148,80,115,78,"Animated"],[148,88,115,86],[148,89,115,87,"multiply"],[148,97,115,95],[148,98,115,96],[148,102,115,100,"_reactNative"],[148,114,115,112],[148,115,115,113,"Animated"],[148,123,115,121],[148,124,115,122,"Value"],[148,129,115,127],[148,130,115,128],[148,131,115,129],[148,132,115,130],[148,133,115,131],[148,135,115,133,"dragX"],[148,140,115,138],[148,141,115,139],[148,142,115,140],[149,10,117,8],[149,16,117,14,"dragOffsetFromOnStartPosition"],[149,45,117,43],[149,48,117,46,"startPositionX"],[149,62,117,60],[149,63,117,61,"interpolate"],[149,74,117,72],[149,75,117,73],[150,12,118,10,"inputRange"],[150,22,118,20],[150,24,118,22],[150,25,118,23,"drawerWidth"],[150,36,118,34],[150,39,118,37],[150,40,118,38],[150,42,118,40,"drawerWidth"],[150,53,118,51],[150,55,118,53,"drawerWidth"],[150,66,118,64],[150,69,118,67],[150,70,118,68],[150,71,118,69],[151,12,119,10,"outputRange"],[151,23,119,21],[151,25,119,23],[151,26,119,24],[151,27,119,25],[151,29,119,27],[151,30,119,28],[151,32,119,30],[151,33,119,31],[152,10,120,8],[152,11,120,9],[152,12,120,10],[153,10,121,8,"translationX"],[153,22,121,20],[153,25,121,23,"_reactNative"],[153,37,121,35],[153,38,121,36,"Animated"],[153,46,121,44],[153,47,121,45,"add"],[153,50,121,48],[153,51,121,49,"dragX"],[153,56,121,54],[153,58,121,56,"dragOffsetFromOnStartPosition"],[153,87,121,85],[153,88,121,86],[153,89,121,87],[153,90,121,88],[154,8,122,6],[155,8,124,6],[155,12,124,10],[155,13,124,11,"openValue"],[155,22,124,20],[155,25,124,23,"_reactNative"],[155,37,124,35],[155,38,124,36,"Animated"],[155,46,124,44],[155,47,124,45,"add"],[155,50,124,48],[155,51,124,49,"translationX"],[155,63,124,61],[155,65,124,63,"drawerTranslation"],[155,82,124,80],[155,83,124,81],[155,84,124,82,"interpolate"],[155,95,124,93],[155,96,124,94],[156,10,125,8,"inputRange"],[156,20,125,18],[156,22,125,20],[156,23,125,21],[156,24,125,22],[156,26,125,24,"drawerWidth"],[156,37,125,35],[156,38,125,36],[157,10,126,8,"outputRange"],[157,21,126,19],[157,23,126,21],[157,24,126,22],[157,25,126,23],[157,27,126,25],[157,28,126,26],[157,29,126,27],[158,10,127,8,"extrapolate"],[158,21,127,19],[158,23,127,21],[159,8,128,6],[159,9,128,7],[159,10,128,8],[160,8,129,6],[160,14,129,12,"gestureOptions"],[160,28,129,26],[160,31,129,29],[161,10,130,8,"useNativeDriver"],[161,25,130,23],[161,27,130,25,"props"],[161,32,130,30],[161,33,130,31,"useNativeAnimations"],[162,8,131,6],[162,9,131,7],[163,8,133,6],[163,12,133,10],[163,16,133,14],[163,17,133,15,"props"],[163,22,133,20],[163,23,133,21,"onDrawerSlide"],[163,36,133,34],[163,38,133,36],[164,10,134,8,"gestureOptions"],[164,24,134,22],[164,25,134,23,"listener"],[164,33,134,31],[164,36,134,34,"ev"],[164,38,134,36],[164,42,134,40],[165,12,135,10],[165,16,135,14,"_this$props$onDrawerS"],[165,37,135,35],[165,39,135,37,"_this$props"],[165,50,135,48],[166,12,137,10],[166,18,137,16,"translationX"],[166,30,137,28],[166,33,137,31,"Math"],[166,37,137,35],[166,38,137,36,"floor"],[166,43,137,41],[166,44,137,42,"Math"],[166,48,137,46],[166,49,137,47,"abs"],[166,52,137,50],[166,53,137,51,"ev"],[166,55,137,53],[166,56,137,54,"nativeEvent"],[166,67,137,65],[166,68,137,66,"translationX"],[166,80,137,78],[166,81,137,79],[166,82,137,80],[167,12,138,10],[167,18,138,16,"position"],[167,26,138,24],[167,29,138,27,"translationX"],[167,41,138,39],[167,44,138,42],[167,48,138,46],[167,49,138,47,"state"],[167,54,138,52],[167,55,138,53,"containerWidth"],[167,69,138,67],[168,12,139,10],[168,13,139,11,"_this$props$onDrawerS"],[168,34,139,32],[168,37,139,35],[168,38,139,36,"_this$props"],[168,49,139,47],[168,52,139,50],[168,56,139,54],[168,57,139,55,"props"],[168,62,139,60],[168,64,139,62,"onDrawerSlide"],[168,77,139,75],[168,83,139,81],[168,87,139,85],[168,91,139,89,"_this$props$onDrawerS"],[168,112,139,110],[168,117,139,115],[168,122,139,120],[168,123,139,121],[168,126,139,124],[168,131,139,129],[168,132,139,130],[168,135,139,133,"_this$props$onDrawerS"],[168,156,139,154],[168,157,139,155,"call"],[168,161,139,159],[168,162,139,160,"_this$props"],[168,173,139,171],[168,175,139,173,"position"],[168,183,139,181],[168,184,139,182],[169,10,140,8],[169,11,140,9],[170,8,141,6],[171,8,143,6],[171,12,143,10],[171,13,143,11,"onGestureEvent"],[171,27,143,25],[171,30,143,28,"_reactNative"],[171,42,143,40],[171,43,143,41,"Animated"],[171,51,143,49],[171,52,143,50,"event"],[171,57,143,55],[171,58,143,56],[171,59,143,57],[172,10,144,8,"nativeEvent"],[172,21,144,19],[172,23,144,21],[173,12,145,10,"translationX"],[173,24,145,22],[173,26,145,24,"dragXValue"],[173,36,145,34],[174,12,146,10,"x"],[174,13,146,11],[174,15,146,13,"touchXValue"],[175,10,147,8],[176,8,148,6],[176,9,148,7],[176,10,148,8],[176,12,148,10,"gestureOptions"],[176,26,148,24],[176,27,148,25],[177,6,149,4],[177,7,149,5],[177,8,149,6],[178,6,151,4,"_defineProperty"],[178,21,151,19],[178,22,151,20],[178,26,151,24],[178,28,151,26],[178,51,151,49],[178,53,151,51],[178,54,151,52],[179,8,152,6,"nativeEvent"],[180,6,153,4],[180,7,153,5],[180,12,153,10],[181,8,154,6],[181,12,154,10],[181,13,154,11,"setState"],[181,21,154,19],[181,22,154,20],[182,10,155,8,"containerWidth"],[182,24,155,22],[182,26,155,24,"nativeEvent"],[182,37,155,35],[182,38,155,36,"layout"],[182,44,155,42],[182,45,155,43,"width"],[183,8,156,6],[183,9,156,7],[183,10,156,8],[184,6,157,4],[184,7,157,5],[184,8,157,6],[185,6,159,4,"_defineProperty"],[185,21,159,19],[185,22,159,20],[185,26,159,24],[185,28,159,26],[185,46,159,44],[185,48,159,46],[185,49,159,47,"newState"],[185,57,159,55],[185,59,159,57,"drawerWillShow"],[185,73,159,71],[185,78,159,76],[186,8,160,6],[186,12,160,10,"_this$props$onDrawerS2"],[186,34,160,32],[186,36,160,34,"_this$props2"],[186,48,160,46],[187,8,162,6],[187,9,162,7,"_this$props$onDrawerS2"],[187,31,162,29],[187,34,162,32],[187,35,162,33,"_this$props2"],[187,47,162,45],[187,50,162,48],[187,54,162,52],[187,55,162,53,"props"],[187,60,162,58],[187,62,162,60,"onDrawerStateChanged"],[187,82,162,80],[187,88,162,86],[187,92,162,90],[187,96,162,94,"_this$props$onDrawerS2"],[187,118,162,116],[187,123,162,121],[187,128,162,126],[187,129,162,127],[187,132,162,130],[187,137,162,135],[187,138,162,136],[187,141,162,139,"_this$props$onDrawerS2"],[187,163,162,161],[187,164,162,162,"call"],[187,168,162,166],[187,169,162,167,"_this$props2"],[187,181,162,179],[187,183,162,181,"newState"],[187,191,162,189],[187,193,162,191,"drawerWillShow"],[187,207,162,205],[187,208,162,206],[188,6,163,4],[188,7,163,5],[188,8,163,6],[189,6,165,4,"_defineProperty"],[189,21,165,19],[189,22,165,20],[189,26,165,24],[189,28,165,26],[189,55,165,53],[189,57,165,55],[189,58,165,56],[190,8,166,6,"nativeEvent"],[191,6,167,4],[191,7,167,5],[191,12,167,10],[192,8,168,6],[192,12,168,10,"nativeEvent"],[192,23,168,21],[192,24,168,22,"oldState"],[192,32,168,30],[192,37,168,35,"_State"],[192,43,168,41],[192,44,168,42,"State"],[192,49,168,47],[192,50,168,48,"ACTIVE"],[192,56,168,54],[192,58,168,56],[193,10,169,8],[193,14,169,12],[193,15,169,13,"handleRelease"],[193,28,169,26],[193,29,169,27],[194,12,170,10,"nativeEvent"],[195,10,171,8],[195,11,171,9],[195,12,171,10],[196,8,172,6],[196,9,172,7],[196,15,172,13],[196,19,172,17,"nativeEvent"],[196,30,172,28],[196,31,172,29,"state"],[196,36,172,34],[196,41,172,39,"_State"],[196,47,172,45],[196,48,172,46,"State"],[196,53,172,51],[196,54,172,52,"ACTIVE"],[196,60,172,58],[196,62,172,60],[197,10,173,8],[197,14,173,12],[197,15,173,13,"emitStateChanged"],[197,31,173,29],[197,32,173,30,"DRAGGING"],[197,40,173,38],[197,42,173,40],[197,47,173,45],[197,48,173,46],[198,10,174,8],[198,14,174,12],[198,15,174,13,"setState"],[198,23,174,21],[198,24,174,22],[199,12,175,10,"drawerState"],[199,23,175,21],[199,25,175,23,"DRAGGING"],[200,10,176,8],[200,11,176,9],[200,12,176,10],[201,10,178,8],[201,14,178,12],[201,18,178,16],[201,19,178,17,"props"],[201,24,178,22],[201,25,178,23,"keyboardDismissMode"],[201,44,178,42],[201,49,178,47],[201,58,178,56],[201,60,178,58],[202,12,179,10,"_reactNative"],[202,24,179,22],[202,25,179,23,"Keyboard"],[202,33,179,31],[202,34,179,32,"dismiss"],[202,41,179,39],[202,42,179,40],[202,43,179,41],[203,10,180,8],[204,10,182,8],[204,14,182,12],[204,18,182,16],[204,19,182,17,"props"],[204,24,182,22],[204,25,182,23,"hideStatusBar"],[204,38,182,36],[204,40,182,38],[205,12,183,10,"_reactNative"],[205,24,183,22],[205,25,183,23,"StatusBar"],[205,34,183,32],[205,35,183,33,"setHidden"],[205,44,183,42],[205,45,183,43],[205,49,183,47],[205,51,183,49],[205,55,183,53],[205,56,183,54,"props"],[205,61,183,59],[205,62,183,60,"statusBarAnimation"],[205,80,183,78],[205,84,183,82],[205,91,183,89],[205,92,183,90],[206,10,184,8],[207,8,185,6],[208,6,186,4],[208,7,186,5],[208,8,186,6],[209,6,188,4,"_defineProperty"],[209,21,188,19],[209,22,188,20],[209,26,188,24],[209,28,188,26],[209,53,188,51],[209,55,188,53],[209,56,188,54],[210,8,189,6,"nativeEvent"],[211,6,190,4],[211,7,190,5],[211,12,190,10],[212,8,191,6],[212,12,191,10],[212,16,191,14],[212,17,191,15,"drawerShown"],[212,28,191,26],[212,32,191,30,"nativeEvent"],[212,43,191,41],[212,44,191,42,"oldState"],[212,52,191,50],[212,57,191,55,"_State"],[212,63,191,61],[212,64,191,62,"State"],[212,69,191,67],[212,70,191,68,"ACTIVE"],[212,76,191,74],[212,80,191,78],[212,84,191,82],[212,85,191,83,"props"],[212,90,191,88],[212,91,191,89,"drawerLockMode"],[212,105,191,103],[212,110,191,108],[212,123,191,121],[212,125,191,123],[213,10,192,8],[213,14,192,12],[213,15,192,13,"closeDrawer"],[213,26,192,24],[213,27,192,25],[213,28,192,26],[214,8,193,6],[215,6,194,4],[215,7,194,5],[215,8,194,6],[216,6,196,4,"_defineProperty"],[216,21,196,19],[216,22,196,20],[216,26,196,24],[216,28,196,26],[216,43,196,41],[216,45,196,43],[216,46,196,44],[217,8,197,6,"nativeEvent"],[218,6,198,4],[218,7,198,5],[218,12,198,10],[219,8,199,6],[219,14,199,12],[220,10,200,8,"drawerWidth"],[220,21,200,19],[221,10,201,8,"drawerPosition"],[221,24,201,22],[222,10,202,8,"drawerType"],[223,8,203,6],[223,9,203,7],[223,12,203,10],[223,16,203,14],[223,17,203,15,"props"],[223,22,203,20],[224,8,204,6],[224,14,204,12],[225,10,205,8,"containerWidth"],[226,8,206,6],[226,9,206,7],[226,12,206,10],[226,16,206,14],[226,17,206,15,"state"],[226,22,206,20],[227,8,207,6],[227,12,207,10],[228,10,208,8,"translationX"],[228,22,208,20],[228,24,208,22,"dragX"],[228,29,208,27],[229,10,209,8,"velocityX"],[229,19,209,17],[230,10,210,8,"x"],[230,11,210,9],[230,13,210,11,"touchX"],[231,8,211,6],[231,9,211,7],[231,12,211,10,"nativeEvent"],[231,23,211,21],[232,8,213,6],[232,12,213,10,"drawerPosition"],[232,26,213,24],[232,31,213,29],[232,37,213,35],[232,39,213,37],[233,10,214,8],[234,10,215,8],[235,10,216,8,"dragX"],[235,15,216,13],[235,18,216,16],[235,19,216,17,"dragX"],[235,24,216,22],[236,10,217,8,"touchX"],[236,16,217,14],[236,19,217,17,"containerWidth"],[236,33,217,31],[236,36,217,34,"touchX"],[236,42,217,40],[237,10,218,8,"velocityX"],[237,19,218,17],[237,22,218,20],[237,23,218,21,"velocityX"],[237,32,218,30],[238,8,219,6],[239,8,221,6],[239,14,221,12,"gestureStartX"],[239,27,221,25],[239,30,221,28,"touchX"],[239,36,221,34],[239,39,221,37,"dragX"],[239,44,221,42],[240,8,222,6],[240,12,222,10,"dragOffsetBasedOnStart"],[240,34,222,32],[240,37,222,35],[240,38,222,36],[241,8,224,6],[241,12,224,10,"drawerType"],[241,22,224,20],[241,27,224,25],[241,34,224,32],[241,36,224,34],[242,10,225,8,"dragOffsetBasedOnStart"],[242,32,225,30],[242,35,225,33,"gestureStartX"],[242,48,225,46],[242,51,225,49,"drawerWidth"],[242,62,225,60],[242,65,225,63,"gestureStartX"],[242,78,225,76],[242,81,225,79,"drawerWidth"],[242,92,225,90],[242,95,225,93],[242,96,225,94],[243,8,226,6],[244,8,228,6],[244,14,228,12,"startOffsetX"],[244,26,228,24],[244,29,228,27,"dragX"],[244,34,228,32],[244,37,228,35,"dragOffsetBasedOnStart"],[244,59,228,57],[244,63,228,61],[244,67,228,65],[244,68,228,66,"drawerShown"],[244,79,228,77],[244,82,228,80,"drawerWidth"],[244,93,228,91],[244,96,228,94],[244,97,228,95],[244,98,228,96],[245,8,229,6],[245,14,229,12,"projOffsetX"],[245,25,229,23],[245,28,229,26,"startOffsetX"],[245,40,229,38],[245,43,229,41,"DRAG_TOSS"],[245,52,229,50],[245,55,229,53,"velocityX"],[245,64,229,62],[246,8,230,6],[246,14,230,12,"shouldOpen"],[246,24,230,22],[246,27,230,25,"projOffsetX"],[246,38,230,36],[246,41,230,39,"drawerWidth"],[246,52,230,50],[246,55,230,53],[246,56,230,54],[247,8,232,6],[247,12,232,10,"shouldOpen"],[247,22,232,20],[247,24,232,22],[248,10,233,8],[248,14,233,12],[248,15,233,13,"animateDrawer"],[248,28,233,26],[248,29,233,27,"startOffsetX"],[248,41,233,39],[248,43,233,41,"drawerWidth"],[248,54,233,52],[248,56,233,54,"velocityX"],[248,65,233,63],[248,66,233,64],[249,8,234,6],[249,9,234,7],[249,15,234,13],[250,10,235,8],[250,14,235,12],[250,15,235,13,"animateDrawer"],[250,28,235,26],[250,29,235,27,"startOffsetX"],[250,41,235,39],[250,43,235,41],[250,44,235,42],[250,46,235,44,"velocityX"],[250,55,235,53],[250,56,235,54],[251,8,236,6],[252,6,237,4],[252,7,237,5],[252,8,237,6],[253,6,239,4,"_defineProperty"],[253,21,239,19],[253,22,239,20],[253,26,239,24],[253,28,239,26],[253,43,239,41],[253,45,239,43,"showing"],[253,52,239,50],[253,56,239,54],[254,8,240,6],[254,12,240,10,"_this$accessibilityIs"],[254,33,240,31],[254,35,240,33,"_this$pointerEventsVi"],[254,56,240,54],[254,58,240,56,"_this$panGestureHandl"],[254,79,240,77],[255,8,242,6],[255,12,242,10],[255,13,242,11,"drawerShown"],[255,24,242,22],[255,27,242,25,"showing"],[255,34,242,32],[256,8,243,6],[256,9,243,7,"_this$accessibilityIs"],[256,30,243,28],[256,33,243,31],[256,37,243,35],[256,38,243,36,"accessibilityIsModalView"],[256,62,243,60],[256,63,243,61,"current"],[256,70,243,68],[256,76,243,74],[256,80,243,78],[256,84,243,82,"_this$accessibilityIs"],[256,105,243,103],[256,110,243,108],[256,115,243,113],[256,116,243,114],[256,119,243,117],[256,124,243,122],[256,125,243,123],[256,128,243,126,"_this$accessibilityIs"],[256,149,243,147],[256,150,243,148,"setNativeProps"],[256,164,243,162],[256,165,243,163],[257,10,244,8,"accessibilityViewIsModal"],[257,34,244,32],[257,36,244,34,"showing"],[258,8,245,6],[258,9,245,7],[258,10,245,8],[259,8,246,6],[259,9,246,7,"_this$pointerEventsVi"],[259,30,246,28],[259,33,246,31],[259,37,246,35],[259,38,246,36,"pointerEventsView"],[259,55,246,53],[259,56,246,54,"current"],[259,63,246,61],[259,69,246,67],[259,73,246,71],[259,77,246,75,"_this$pointerEventsVi"],[259,98,246,96],[259,103,246,101],[259,108,246,106],[259,109,246,107],[259,112,246,110],[259,117,246,115],[259,118,246,116],[259,121,246,119,"_this$pointerEventsVi"],[259,142,246,140],[259,143,246,141,"setNativeProps"],[259,157,246,155],[259,158,246,156],[260,10,247,8,"pointerEvents"],[260,23,247,21],[260,25,247,23,"showing"],[260,32,247,30],[260,35,247,33],[260,41,247,39],[260,44,247,42],[261,8,248,6],[261,9,248,7],[261,10,248,8],[262,8,249,6],[262,14,249,12],[263,10,250,8,"drawerPosition"],[263,24,250,22],[264,10,251,8,"minSwipeDistance"],[264,26,251,24],[265,10,252,8,"edgeWidth"],[266,8,253,6],[266,9,253,7],[266,12,253,10],[266,16,253,14],[266,17,253,15,"props"],[266,22,253,20],[267,8,254,6],[267,14,254,12,"fromLeft"],[267,22,254,20],[267,25,254,23,"drawerPosition"],[267,39,254,37],[267,44,254,42],[267,50,254,48],[267,51,254,49],[267,52,254,50],[268,8,255,6],[269,8,256,6],[271,8,258,6],[271,14,258,12,"gestureOrientation"],[271,32,258,30],[271,35,258,33],[271,36,258,34,"fromLeft"],[271,44,258,42],[271,47,258,45],[271,48,258,46],[271,51,258,49],[271,52,258,50],[271,53,258,51],[271,58,258,56],[271,62,258,60],[271,63,258,61,"drawerShown"],[271,74,258,72],[271,77,258,75],[271,78,258,76],[271,79,258,77],[271,82,258,80],[271,83,258,81],[271,84,258,82],[271,85,258,83],[271,86,258,84],[272,8,259,6],[273,8,260,6],[275,8,262,6],[275,14,262,12,"hitSlop"],[275,21,262,19],[275,24,262,22,"fromLeft"],[275,32,262,30],[275,35,262,33],[276,10,263,8,"left"],[276,14,263,12],[276,16,263,14],[276,17,263,15],[277,10,264,8,"width"],[277,15,264,13],[277,17,264,15,"showing"],[277,24,264,22],[277,27,264,25,"undefined"],[277,36,264,34],[277,39,264,37,"edgeWidth"],[278,8,265,6],[278,9,265,7],[278,12,265,10],[279,10,266,8,"right"],[279,15,266,13],[279,17,266,15],[279,18,266,16],[280,10,267,8,"width"],[280,15,267,13],[280,17,267,15,"showing"],[280,24,267,22],[280,27,267,25,"undefined"],[280,36,267,34],[280,39,267,37,"edgeWidth"],[281,8,268,6],[281,9,268,7],[281,10,268,8],[281,11,268,9],[283,8,270,6],[283,9,270,7,"_this$panGestureHandl"],[283,30,270,28],[283,33,270,31],[283,37,270,35],[283,38,270,36,"panGestureHandler"],[283,55,270,53],[283,56,270,54,"current"],[283,63,270,61],[283,69,270,67],[283,73,270,71],[283,77,270,75,"_this$panGestureHandl"],[283,98,270,96],[283,103,270,101],[283,108,270,106],[283,109,270,107],[283,112,270,110],[283,117,270,115],[283,118,270,116],[283,121,270,119,"_this$panGestureHandl"],[283,142,270,140],[283,143,270,141,"setNativeProps"],[283,157,270,155],[283,158,270,156],[284,10,271,8,"hitSlop"],[284,17,271,15],[285,10,272,8,"activeOffsetX"],[285,23,272,21],[285,25,272,23,"gestureOrientation"],[285,43,272,41],[285,46,272,44,"minSwipeDistance"],[286,8,273,6],[286,9,273,7],[286,10,273,8],[287,6,274,4],[287,7,274,5],[287,8,274,6],[288,6,276,4,"_defineProperty"],[288,21,276,19],[288,22,276,20],[288,26,276,24],[288,28,276,26],[288,43,276,41],[288,45,276,43],[288,46,276,44,"fromValue"],[288,55,276,53],[288,57,276,55,"toValue"],[288,64,276,62],[288,66,276,64,"velocity"],[288,74,276,72],[288,76,276,74,"speed"],[288,81,276,79],[288,86,276,84],[289,8,277,6],[289,12,277,10],[289,13,277,11,"state"],[289,18,277,16],[289,19,277,17,"dragX"],[289,24,277,22],[289,25,277,23,"setValue"],[289,33,277,31],[289,34,277,32],[289,35,277,33],[289,36,277,34],[290,8,278,6],[290,12,278,10],[290,13,278,11,"state"],[290,18,278,16],[290,19,278,17,"touchX"],[290,25,278,23],[290,26,278,24,"setValue"],[290,34,278,32],[290,35,278,33],[290,39,278,37],[290,40,278,38,"props"],[290,45,278,43],[290,46,278,44,"drawerPosition"],[290,60,278,58],[290,65,278,63],[290,71,278,69],[290,74,278,72],[290,75,278,73],[290,78,278,76],[290,82,278,80],[290,83,278,81,"state"],[290,88,278,86],[290,89,278,87,"containerWidth"],[290,103,278,101],[290,104,278,102],[291,8,280,6],[291,12,280,10,"fromValue"],[291,21,280,19],[291,25,280,23],[291,29,280,27],[291,31,280,29],[292,10,281,8],[292,14,281,12,"nextFramePosition"],[292,31,281,29],[292,34,281,32,"fromValue"],[292,43,281,41],[293,10,283,8],[293,14,283,12],[293,18,283,16],[293,19,283,17,"props"],[293,24,283,22],[293,25,283,23,"useNativeAnimations"],[293,44,283,42],[293,46,283,44],[294,12,284,10],[295,12,285,10],[296,12,286,10],[297,12,287,10],[298,12,288,10],[298,16,288,14,"fromValue"],[298,25,288,23],[298,28,288,26,"toValue"],[298,35,288,33],[298,39,288,37,"velocity"],[298,47,288,45],[298,50,288,48],[298,51,288,49],[298,53,288,51],[299,14,289,12,"nextFramePosition"],[299,31,289,29],[299,34,289,32,"Math"],[299,38,289,36],[299,39,289,37,"min"],[299,42,289,40],[299,43,289,41,"fromValue"],[299,52,289,50],[299,55,289,53,"velocity"],[299,63,289,61],[299,66,289,64],[299,70,289,68],[299,72,289,70,"toValue"],[299,79,289,77],[299,80,289,78],[300,12,290,10],[300,13,290,11],[300,19,290,17],[300,23,290,21,"fromValue"],[300,32,290,30],[300,35,290,33,"toValue"],[300,42,290,40],[300,46,290,44,"velocity"],[300,54,290,52],[300,57,290,55],[300,58,290,56],[300,60,290,58],[301,14,291,12,"nextFramePosition"],[301,31,291,29],[301,34,291,32,"Math"],[301,38,291,36],[301,39,291,37,"max"],[301,42,291,40],[301,43,291,41,"fromValue"],[301,52,291,50],[301,55,291,53,"velocity"],[301,63,291,61],[301,66,291,64],[301,70,291,68],[301,72,291,70,"toValue"],[301,79,291,77],[301,80,291,78],[302,12,292,10],[303,10,293,8],[304,10,295,8],[304,14,295,12],[304,15,295,13,"state"],[304,20,295,18],[304,21,295,19,"drawerTranslation"],[304,38,295,36],[304,39,295,37,"setValue"],[304,47,295,45],[304,48,295,46,"nextFramePosition"],[304,65,295,63],[304,66,295,64],[305,8,296,6],[306,8,298,6],[306,14,298,12,"willShow"],[306,22,298,20],[306,25,298,23,"toValue"],[306,32,298,30],[306,37,298,35],[306,38,298,36],[307,8,299,6],[307,12,299,10],[307,13,299,11,"updateShowing"],[307,26,299,24],[307,27,299,25,"willShow"],[307,35,299,33],[307,36,299,34],[308,8,300,6],[308,12,300,10],[308,13,300,11,"emitStateChanged"],[308,29,300,27],[308,30,300,28,"SETTLING"],[308,38,300,36],[308,40,300,38,"willShow"],[308,48,300,46],[308,49,300,47],[309,8,301,6],[309,12,301,10],[309,13,301,11,"setState"],[309,21,301,19],[309,22,301,20],[310,10,302,8,"drawerState"],[310,21,302,19],[310,23,302,21,"SETTLING"],[311,8,303,6],[311,9,303,7],[311,10,303,8],[312,8,305,6],[312,12,305,10],[312,16,305,14],[312,17,305,15,"props"],[312,22,305,20],[312,23,305,21,"hideStatusBar"],[312,36,305,34],[312,38,305,36],[313,10,306,8,"_reactNative"],[313,22,306,20],[313,23,306,21,"StatusBar"],[313,32,306,30],[313,33,306,31,"setHidden"],[313,42,306,40],[313,43,306,41,"willShow"],[313,51,306,49],[313,53,306,51],[313,57,306,55],[313,58,306,56,"props"],[313,63,306,61],[313,64,306,62,"statusBarAnimation"],[313,82,306,80],[313,86,306,84],[313,93,306,91],[313,94,306,92],[314,8,307,6],[315,8,309,6,"_reactNative"],[315,20,309,18],[315,21,309,19,"Animated"],[315,29,309,27],[315,30,309,28,"spring"],[315,36,309,34],[315,37,309,35],[315,41,309,39],[315,42,309,40,"state"],[315,47,309,45],[315,48,309,46,"drawerTranslation"],[315,65,309,63],[315,67,309,65],[316,10,310,8,"velocity"],[316,18,310,16],[317,10,311,8,"bounciness"],[317,20,311,18],[317,22,311,20],[317,23,311,21],[318,10,312,8,"toValue"],[318,17,312,15],[319,10,313,8,"useNativeDriver"],[319,25,313,23],[319,27,313,25],[319,31,313,29],[319,32,313,30,"props"],[319,37,313,35],[319,38,313,36,"useNativeAnimations"],[319,57,313,55],[320,10,314,8,"speed"],[320,15,314,13],[320,17,314,15,"speed"],[320,22,314,20],[320,27,314,25],[320,31,314,29],[320,35,314,33,"speed"],[320,40,314,38],[320,45,314,43],[320,50,314,48],[320,51,314,49],[320,54,314,52,"speed"],[320,59,314,57],[320,62,314,60,"undefined"],[321,8,315,6],[321,9,315,7],[321,10,315,8],[321,11,315,9,"start"],[321,16,315,14],[321,17,315,15],[321,18,315,16],[322,10,316,8,"finished"],[323,8,317,6],[323,9,317,7],[323,14,317,12],[324,10,318,8],[324,14,318,12,"finished"],[324,22,318,20],[324,24,318,22],[325,12,319,10],[325,16,319,14],[325,17,319,15,"emitStateChanged"],[325,33,319,31],[325,34,319,32,"IDLE"],[325,38,319,36],[325,40,319,38,"willShow"],[325,48,319,46],[325,49,319,47],[326,12,320,10],[326,16,320,14],[326,17,320,15,"setState"],[326,25,320,23],[326,26,320,24],[327,14,321,12,"drawerOpened"],[327,26,321,24],[327,28,321,26,"willShow"],[328,12,322,10],[328,13,322,11],[328,14,322,12],[329,12,324,10],[329,16,324,14],[329,20,324,18],[329,21,324,19,"state"],[329,26,324,24],[329,27,324,25,"drawerState"],[329,38,324,36],[329,43,324,41,"DRAGGING"],[329,51,324,49],[329,53,324,51],[330,14,325,12],[331,14,326,12],[332,14,327,12],[332,18,327,16],[332,19,327,17,"setState"],[332,27,327,25],[332,28,327,26],[333,16,328,14,"drawerState"],[333,27,328,25],[333,29,328,27,"IDLE"],[334,14,329,12],[334,15,329,13],[334,16,329,14],[335,12,330,10],[336,12,332,10],[336,16,332,14,"willShow"],[336,24,332,22],[336,26,332,24],[337,14,333,12],[337,18,333,16,"_this$props$onDrawerO"],[337,39,333,37],[337,41,333,39,"_this$props3"],[337,53,333,51],[338,14,335,12],[338,15,335,13,"_this$props$onDrawerO"],[338,36,335,34],[338,39,335,37],[338,40,335,38,"_this$props3"],[338,52,335,50],[338,55,335,53],[338,59,335,57],[338,60,335,58,"props"],[338,65,335,63],[338,67,335,65,"onDrawerOpen"],[338,79,335,77],[338,85,335,83],[338,89,335,87],[338,93,335,91,"_this$props$onDrawerO"],[338,114,335,112],[338,119,335,117],[338,124,335,122],[338,125,335,123],[338,128,335,126],[338,133,335,131],[338,134,335,132],[338,137,335,135,"_this$props$onDrawerO"],[338,158,335,156],[338,159,335,157,"call"],[338,163,335,161],[338,164,335,162,"_this$props3"],[338,176,335,174],[338,177,335,175],[339,12,336,10],[339,13,336,11],[339,19,336,17],[340,14,337,12],[340,18,337,16,"_this$props$onDrawerC"],[340,39,337,37],[340,41,337,39,"_this$props4"],[340,53,337,51],[341,14,339,12],[341,15,339,13,"_this$props$onDrawerC"],[341,36,339,34],[341,39,339,37],[341,40,339,38,"_this$props4"],[341,52,339,50],[341,55,339,53],[341,59,339,57],[341,60,339,58,"props"],[341,65,339,63],[341,67,339,65,"onDrawerClose"],[341,80,339,78],[341,86,339,84],[341,90,339,88],[341,94,339,92,"_this$props$onDrawerC"],[341,115,339,113],[341,120,339,118],[341,125,339,123],[341,126,339,124],[341,129,339,127],[341,134,339,132],[341,135,339,133],[341,138,339,136,"_this$props$onDrawerC"],[341,159,339,157],[341,160,339,158,"call"],[341,164,339,162],[341,165,339,163,"_this$props4"],[341,177,339,175],[341,178,339,176],[342,12,340,10],[343,10,341,8],[344,8,342,6],[344,9,342,7],[344,10,342,8],[345,6,343,4],[345,7,343,5],[345,8,343,6],[346,6,345,4,"_defineProperty"],[346,21,345,19],[346,22,345,20],[346,26,345,24],[346,28,345,26],[346,40,345,38],[346,42,345,40],[346,43,345,41,"options"],[346,50,345,48],[346,53,345,51],[346,54,345,52],[346,55,345,53],[346,60,345,58],[347,8,346,6],[347,12,346,10],[347,13,346,11,"animateDrawer"],[347,26,346,24],[348,8,346,26],[349,8,347,6,"undefined"],[349,17,347,15],[349,19,347,17],[349,23,347,21],[349,24,347,22,"props"],[349,29,347,27],[349,30,347,28,"drawerWidth"],[349,41,347,39],[349,43,347,41,"options"],[349,50,347,48],[349,51,347,49,"velocity"],[349,59,347,57],[349,62,347,60,"options"],[349,69,347,67],[349,70,347,68,"velocity"],[349,78,347,76],[349,81,347,79],[349,82,347,80],[349,84,347,82,"options"],[349,91,347,89],[349,92,347,90,"speed"],[349,97,347,95],[349,98,347,96],[349,99,347,97],[349,100,347,98],[350,8,348,6],[352,8,350,6],[352,12,350,10],[352,13,350,11,"forceUpdate"],[352,24,350,22],[352,25,350,23],[352,26,350,24],[353,6,351,4],[353,7,351,5],[353,8,351,6],[354,6,353,4,"_defineProperty"],[354,21,353,19],[354,22,353,20],[354,26,353,24],[354,28,353,26],[354,41,353,39],[354,43,353,41],[354,44,353,42,"options"],[354,51,353,49],[354,54,353,52],[354,55,353,53],[354,56,353,54],[354,61,353,59],[355,8,354,6],[356,8,355,6],[356,12,355,10],[356,13,355,11,"animateDrawer"],[356,26,355,24],[356,27,355,25,"undefined"],[356,36,355,34],[356,38,355,36],[356,39,355,37],[356,41,355,39,"options"],[356,48,355,46],[356,49,355,47,"velocity"],[356,57,355,55],[356,60,355,58,"options"],[356,67,355,65],[356,68,355,66,"velocity"],[356,76,355,74],[356,79,355,77],[356,80,355,78],[356,82,355,80,"options"],[356,89,355,87],[356,90,355,88,"speed"],[356,95,355,93],[356,96,355,94],[356,97,355,95],[356,98,355,96],[357,8,356,6],[359,8,358,6],[359,12,358,10],[359,13,358,11,"forceUpdate"],[359,24,358,22],[359,25,358,23],[359,26,358,24],[360,6,359,4],[360,7,359,5],[360,8,359,6],[361,6,361,4,"_defineProperty"],[361,21,361,19],[361,22,361,20],[361,26,361,24],[361,28,361,26],[361,43,361,41],[361,45,361,43],[361,51,361,49],[362,8,362,6],[363,8,363,6],[363,9,363,7],[363,10,363,8],[363,12,363,10,"_invariant"],[363,22,363,20],[363,23,363,21,"default"],[363,30,363,28],[363,32,363,30],[363,36,363,34],[363,37,363,35,"openValue"],[363,46,363,44],[363,48,363,46],[363,63,363,61],[363,64,363,62],[364,8,364,6],[364,12,364,10,"overlayOpacity"],[364,26,364,24],[365,8,366,6],[365,12,366,10],[365,16,366,14],[365,17,366,15,"state"],[365,22,366,20],[365,23,366,21,"drawerState"],[365,34,366,32],[365,39,366,37,"IDLE"],[365,43,366,41],[365,45,366,43],[366,10,367,8,"overlayOpacity"],[366,24,367,22],[366,27,367,25],[366,31,367,29],[366,32,367,30,"openValue"],[366,41,367,39],[367,8,368,6],[367,9,368,7],[367,15,368,13],[368,10,369,8,"overlayOpacity"],[368,24,369,22],[368,27,369,25],[368,31,369,29],[368,32,369,30,"state"],[368,37,369,35],[368,38,369,36,"drawerOpened"],[368,50,369,48],[368,53,369,51],[368,54,369,52],[368,57,369,55],[368,58,369,56],[369,8,370,6],[370,8,372,6],[370,14,372,12,"dynamicOverlayStyles"],[370,34,372,32],[370,37,372,35],[371,10,373,8,"opacity"],[371,17,373,15],[371,19,373,17,"overlayOpacity"],[371,33,373,31],[372,10,374,8,"backgroundColor"],[372,25,374,23],[372,27,374,25],[372,31,374,29],[372,32,374,30,"props"],[372,37,374,35],[372,38,374,36,"overlayColor"],[373,8,375,6],[373,9,375,7],[374,8,376,6],[374,15,376,13],[374,28,376,26,"React"],[374,33,376,31],[374,34,376,32,"createElement"],[374,47,376,45],[374,48,376,46,"_TapGestureHandler"],[374,66,376,64],[374,67,376,65,"TapGestureHandler"],[374,84,376,82],[374,86,376,84],[375,10,377,8,"onHandlerStateChange"],[375,30,377,28],[375,32,377,30],[375,36,377,34],[375,37,377,35,"onTapHandlerStateChange"],[376,8,378,6],[376,9,378,7],[376,11,378,9],[376,24,378,22,"React"],[376,29,378,27],[376,30,378,28,"createElement"],[376,43,378,41],[376,44,378,42,"_reactNative"],[376,56,378,54],[376,57,378,55,"Animated"],[376,65,378,63],[376,66,378,64,"View"],[376,70,378,68],[376,72,378,70],[377,10,379,8,"pointerEvents"],[377,23,379,21],[377,25,379,23],[377,29,379,27],[377,30,379,28,"drawerShown"],[377,41,379,39],[377,44,379,42],[377,50,379,48],[377,53,379,51],[377,59,379,57],[378,10,380,8,"ref"],[378,13,380,11],[378,15,380,13],[378,19,380,17],[378,20,380,18,"pointerEventsView"],[378,37,380,35],[379,10,381,8,"style"],[379,15,381,13],[379,17,381,15],[379,18,381,16,"styles"],[379,24,381,22],[379,25,381,23,"overlay"],[379,32,381,30],[379,34,381,32,"dynamicOverlayStyles"],[379,54,381,52],[380,8,382,6],[380,9,382,7],[380,10,382,8],[380,11,382,9],[381,6,383,4],[381,7,383,5],[381,8,383,6],[382,6,385,4,"_defineProperty"],[382,21,385,19],[382,22,385,20],[382,26,385,24],[382,28,385,26],[382,42,385,40],[382,44,385,42],[382,50,385,48],[383,8,386,6],[383,14,386,12],[384,10,387,8,"drawerBackgroundColor"],[384,31,387,29],[385,10,388,8,"drawerWidth"],[385,21,388,19],[386,10,389,8,"drawerPosition"],[386,24,389,22],[387,10,390,8,"drawerType"],[387,20,390,18],[388,10,391,8,"drawerContainerStyle"],[388,30,391,28],[389,10,392,8,"contentContainerStyle"],[390,8,393,6],[390,9,393,7],[390,12,393,10],[390,16,393,14],[390,17,393,15,"props"],[390,22,393,20],[391,8,394,6],[391,14,394,12,"fromLeft"],[391,22,394,20],[391,25,394,23,"drawerPosition"],[391,39,394,37],[391,44,394,42],[391,50,394,48],[392,8,395,6],[392,14,395,12,"drawerSlide"],[392,25,395,23],[392,28,395,26,"drawerType"],[392,38,395,36],[392,43,395,41],[392,49,395,47],[393,8,396,6],[393,14,396,12,"containerSlide"],[393,28,396,26],[393,31,396,29,"drawerType"],[393,41,396,39],[393,46,396,44],[393,53,396,51],[393,54,396,52],[393,55,396,53],[394,8,397,6],[395,8,398,6],[396,8,399,6],[398,8,401,6],[398,14,401,12,"reverseContentDirection"],[398,37,401,35],[398,40,401,38,"_reactNative"],[398,52,401,50],[398,53,401,51,"I18nManager"],[398,64,401,62],[398,65,401,63,"isRTL"],[398,70,401,68],[398,73,401,71,"fromLeft"],[398,81,401,79],[398,84,401,82],[398,85,401,83,"fromLeft"],[398,93,401,91],[399,8,402,6],[399,14,402,12,"dynamicDrawerStyles"],[399,33,402,31],[399,36,402,34],[400,10,403,8,"backgroundColor"],[400,25,403,23],[400,27,403,25,"drawerBackgroundColor"],[400,48,403,46],[401,10,404,8,"width"],[401,15,404,13],[401,17,404,15,"drawerWidth"],[402,8,405,6],[402,9,405,7],[403,8,406,6],[403,14,406,12,"openValue"],[403,23,406,21],[403,26,406,24],[403,30,406,28],[403,31,406,29,"openValue"],[403,40,406,38],[404,8,407,6],[404,9,407,7],[404,10,407,8],[404,12,407,10,"_invariant"],[404,22,407,20],[404,23,407,21,"default"],[404,30,407,28],[404,32,407,30,"openValue"],[404,41,407,39],[404,43,407,41],[404,58,407,56],[404,59,407,57],[405,8,408,6],[405,12,408,10,"containerStyles"],[405,27,408,25],[406,8,410,6],[406,12,410,10,"containerSlide"],[406,26,410,24],[406,28,410,26],[407,10,411,8],[407,16,411,14,"containerTranslateX"],[407,35,411,33],[407,38,411,36,"openValue"],[407,47,411,45],[407,48,411,46,"interpolate"],[407,59,411,57],[407,60,411,58],[408,12,412,10,"inputRange"],[408,22,412,20],[408,24,412,22],[408,25,412,23],[408,26,412,24],[408,28,412,26],[408,29,412,27],[408,30,412,28],[409,12,413,10,"outputRange"],[409,23,413,21],[409,25,413,23,"fromLeft"],[409,33,413,31],[409,36,413,34],[409,37,413,35],[409,38,413,36],[409,40,413,38,"drawerWidth"],[409,51,413,49],[409,52,413,50],[409,55,413,53],[409,56,413,54],[409,57,413,55],[409,59,413,57],[409,60,413,58,"drawerWidth"],[409,71,413,69],[409,72,413,70],[410,12,414,10,"extrapolate"],[410,23,414,21],[410,25,414,23],[411,10,415,8],[411,11,415,9],[411,12,415,10],[412,10,416,8,"containerStyles"],[412,25,416,23],[412,28,416,26],[413,12,417,10,"transform"],[413,21,417,19],[413,23,417,21],[413,24,417,22],[414,14,418,12,"translateX"],[414,24,418,22],[414,26,418,24,"containerTranslateX"],[415,12,419,10],[415,13,419,11],[416,10,420,8],[416,11,420,9],[417,8,421,6],[418,8,423,6],[418,12,423,10,"drawerTranslateX"],[418,28,423,26],[418,31,423,29],[418,32,423,30],[419,8,425,6],[419,12,425,10,"drawerSlide"],[419,23,425,21],[419,25,425,23],[420,10,426,8],[420,16,426,14,"closedDrawerOffset"],[420,34,426,32],[420,37,426,35,"fromLeft"],[420,45,426,43],[420,48,426,46],[420,49,426,47,"drawerWidth"],[420,60,426,58],[420,63,426,61,"drawerWidth"],[420,74,426,72],[421,10,428,8],[421,14,428,12],[421,18,428,16],[421,19,428,17,"state"],[421,24,428,22],[421,25,428,23,"drawerState"],[421,36,428,34],[421,41,428,39,"IDLE"],[421,45,428,43],[421,47,428,45],[422,12,429,10,"drawerTranslateX"],[422,28,429,26],[422,31,429,29,"openValue"],[422,40,429,38],[422,41,429,39,"interpolate"],[422,52,429,50],[422,53,429,51],[423,14,430,12,"inputRange"],[423,24,430,22],[423,26,430,24],[423,27,430,25],[423,28,430,26],[423,30,430,28],[423,31,430,29],[423,32,430,30],[424,14,431,12,"outputRange"],[424,25,431,23],[424,27,431,25],[424,28,431,26,"closedDrawerOffset"],[424,46,431,44],[424,48,431,46],[424,49,431,47],[424,50,431,48],[425,14,432,12,"extrapolate"],[425,25,432,23],[425,27,432,25],[426,12,433,10],[426,13,433,11],[426,14,433,12],[427,10,434,8],[427,11,434,9],[427,17,434,15],[428,12,435,10,"drawerTranslateX"],[428,28,435,26],[428,31,435,29],[428,35,435,33],[428,36,435,34,"state"],[428,41,435,39],[428,42,435,40,"drawerOpened"],[428,54,435,52],[428,57,435,55],[428,58,435,56],[428,61,435,59,"closedDrawerOffset"],[428,79,435,77],[429,10,436,8],[430,8,437,6],[431,8,439,6],[431,14,439,12,"drawerStyles"],[431,26,439,24],[431,29,439,27],[432,10,440,8,"transform"],[432,19,440,17],[432,21,440,19],[432,22,440,20],[433,12,441,10,"translateX"],[433,22,441,20],[433,24,441,22,"drawerTranslateX"],[434,10,442,8],[434,11,442,9],[434,12,442,10],[435,10,443,8,"flexDirection"],[435,23,443,21],[435,25,443,23,"reverseContentDirection"],[435,48,443,46],[435,51,443,49],[435,64,443,62],[435,67,443,65],[436,8,444,6],[436,9,444,7],[437,8,445,6],[437,15,445,13],[437,28,445,26,"React"],[437,33,445,31],[437,34,445,32,"createElement"],[437,47,445,45],[437,48,445,46,"_reactNative"],[437,60,445,58],[437,61,445,59,"Animated"],[437,69,445,67],[437,70,445,68,"View"],[437,74,445,72],[437,76,445,74],[438,10,446,8,"style"],[438,15,446,13],[438,17,446,15,"styles"],[438,23,446,21],[438,24,446,22,"main"],[438,28,446,26],[439,10,447,8,"onLayout"],[439,18,447,16],[439,20,447,18],[439,24,447,22],[439,25,447,23,"handleContainerLayout"],[440,8,448,6],[440,9,448,7],[440,11,448,9],[440,24,448,22,"React"],[440,29,448,27],[440,30,448,28,"createElement"],[440,43,448,41],[440,44,448,42,"_reactNative"],[440,56,448,54],[440,57,448,55,"Animated"],[440,65,448,63],[440,66,448,64,"View"],[440,70,448,68],[440,72,448,70],[441,10,449,8,"style"],[441,15,449,13],[441,17,449,15],[441,18,449,16,"drawerType"],[441,28,449,26],[441,33,449,31],[441,40,449,38],[441,43,449,41,"styles"],[441,49,449,47],[441,50,449,48,"containerOnBack"],[441,65,449,63],[441,68,449,66,"styles"],[441,74,449,72],[441,75,449,73,"containerInFront"],[441,91,449,89],[441,93,449,91,"containerStyles"],[441,108,449,106],[441,110,449,108,"contentContainerStyle"],[441,131,449,129],[441,132,449,130],[442,10,450,8,"importantForAccessibility"],[442,35,450,33],[442,37,450,35],[442,41,450,39],[442,42,450,40,"drawerShown"],[442,53,450,51],[442,56,450,54],[442,77,450,75],[442,80,450,78],[443,8,451,6],[443,9,451,7],[443,11,451,9],[443,18,451,16],[443,22,451,20],[443,23,451,21,"props"],[443,28,451,26],[443,29,451,27,"children"],[443,37,451,35],[443,42,451,40],[443,52,451,50],[443,55,451,53],[443,59,451,57],[443,60,451,58,"props"],[443,65,451,63],[443,66,451,64,"children"],[443,74,451,72],[443,75,451,73],[443,79,451,77],[443,80,451,78,"openValue"],[443,89,451,87],[443,90,451,88],[443,93,451,91],[443,97,451,95],[443,98,451,96,"props"],[443,103,451,101],[443,104,451,102,"children"],[443,112,451,110],[443,114,451,112],[443,118,451,116],[443,119,451,117,"renderOverlay"],[443,132,451,130],[443,133,451,131],[443,134,451,132],[443,135,451,133],[443,137,451,135],[443,150,451,148,"React"],[443,155,451,153],[443,156,451,154,"createElement"],[443,169,451,167],[443,170,451,168,"_reactNative"],[443,182,451,180],[443,183,451,181,"Animated"],[443,191,451,189],[443,192,451,190,"View"],[443,196,451,194],[443,198,451,196],[444,10,452,8,"pointerEvents"],[444,23,452,21],[444,25,452,23],[444,35,452,33],[445,10,453,8,"ref"],[445,13,453,11],[445,15,453,13],[445,19,453,17],[445,20,453,18,"accessibilityIsModalView"],[445,44,453,42],[446,10,454,8,"accessibilityViewIsModal"],[446,34,454,32],[446,36,454,34],[446,40,454,38],[446,41,454,39,"drawerShown"],[446,52,454,50],[447,10,455,8,"style"],[447,15,455,13],[447,17,455,15],[447,18,455,16,"styles"],[447,24,455,22],[447,25,455,23,"drawerContainer"],[447,40,455,38],[447,42,455,40,"drawerStyles"],[447,54,455,52],[447,56,455,54,"drawerContainerStyle"],[447,76,455,74],[448,8,456,6],[448,9,456,7],[448,11,456,9],[448,24,456,22,"React"],[448,29,456,27],[448,30,456,28,"createElement"],[448,43,456,41],[448,44,456,42,"_reactNative"],[448,56,456,54],[448,57,456,55,"View"],[448,61,456,59],[448,63,456,61],[449,10,457,8,"style"],[449,15,457,13],[449,17,457,15,"dynamicDrawerStyles"],[450,8,458,6],[450,9,458,7],[450,11,458,9],[450,15,458,13],[450,16,458,14,"props"],[450,21,458,19],[450,22,458,20,"renderNavigationView"],[450,42,458,40],[450,43,458,41],[450,47,458,45],[450,48,458,46,"openValue"],[450,57,458,55],[450,58,458,56],[450,59,458,57],[450,60,458,58],[450,61,458,59],[451,6,459,4],[451,7,459,5],[451,8,459,6],[452,6,461,4,"_defineProperty"],[452,21,461,19],[452,22,461,20],[452,26,461,24],[452,28,461,26],[452,46,461,44],[452,48,461,46,"ref"],[452,51,461,49],[452,55,461,53],[453,8,462,6],[453,12,462,10,"_this$props$onGesture"],[453,33,462,31],[453,35,462,33,"_this$props5"],[453,47,462,45],[455,8,464,6],[456,8,465,6],[457,8,466,6],[457,12,466,10],[457,13,466,11,"panGestureHandler"],[457,30,466,28],[457,31,466,29,"current"],[457,38,466,36],[457,41,466,39,"ref"],[457,44,466,42],[458,8,467,6],[458,9,467,7,"_this$props$onGesture"],[458,30,467,28],[458,33,467,31],[458,34,467,32,"_this$props5"],[458,46,467,44],[458,49,467,47],[458,53,467,51],[458,54,467,52,"props"],[458,59,467,57],[458,61,467,59,"onGestureRef"],[458,73,467,71],[458,79,467,77],[458,83,467,81],[458,87,467,85,"_this$props$onGesture"],[458,108,467,106],[458,113,467,111],[458,118,467,116],[458,119,467,117],[458,122,467,120],[458,127,467,125],[458,128,467,126],[458,131,467,129,"_this$props$onGesture"],[458,152,467,150],[458,153,467,151,"call"],[458,157,467,155],[458,158,467,156,"_this$props5"],[458,170,467,168],[458,172,467,170,"ref"],[458,175,467,173],[458,176,467,174],[459,6,468,4],[459,7,468,5],[459,8,468,6],[460,6,470,4],[460,12,470,10,"_dragX"],[460,18,470,16],[460,21,470,19],[460,25,470,23,"_reactNative"],[460,37,470,35],[460,38,470,36,"Animated"],[460,46,470,44],[460,47,470,45,"Value"],[460,52,470,50],[460,53,470,51],[460,54,470,52],[460,55,470,53],[461,6,472,4],[461,12,472,10,"_touchX"],[461,19,472,17],[461,22,472,20],[461,26,472,24,"_reactNative"],[461,38,472,36],[461,39,472,37,"Animated"],[461,47,472,45],[461,48,472,46,"Value"],[461,53,472,51],[461,54,472,52],[461,55,472,53],[461,56,472,54],[462,6,474,4],[462,12,474,10,"_drawerTranslation"],[462,30,474,28],[462,33,474,31],[462,37,474,35,"_reactNative"],[462,49,474,47],[462,50,474,48,"Animated"],[462,58,474,56],[462,59,474,57,"Value"],[462,64,474,62],[462,65,474,63],[462,66,474,64],[462,67,474,65],[463,6,476,4],[463,10,476,8],[463,11,476,9,"state"],[463,16,476,14],[463,19,476,17],[464,8,477,6,"dragX"],[464,13,477,11],[464,15,477,13,"_dragX"],[464,21,477,19],[465,8,478,6,"touchX"],[465,14,478,12],[465,16,478,14,"_touchX"],[465,23,478,21],[466,8,479,6,"drawerTranslation"],[466,25,479,23],[466,27,479,25,"_drawerTranslation"],[466,45,479,43],[467,8,480,6,"containerWidth"],[467,22,480,20],[467,24,480,22],[467,25,480,23],[468,8,481,6,"drawerState"],[468,19,481,17],[468,21,481,19,"IDLE"],[468,25,481,23],[469,8,482,6,"drawerOpened"],[469,20,482,18],[469,22,482,20],[470,6,483,4],[470,7,483,5],[471,6,484,4],[471,10,484,8],[471,11,484,9,"updateAnimatedEvent"],[471,30,484,28],[471,31,484,29,"_props"],[471,37,484,35],[471,39,484,37],[471,43,484,41],[471,44,484,42,"state"],[471,49,484,47],[471,50,484,48],[472,4,485,2],[473,4,487,2,"shouldComponentUpdate"],[473,25,487,23,"shouldComponentUpdate"],[473,26,487,24,"props"],[473,31,487,29],[473,33,487,31,"state"],[473,38,487,36],[473,40,487,38],[474,6,488,4],[474,10,488,8],[474,14,488,12],[474,15,488,13,"props"],[474,20,488,18],[474,21,488,19,"drawerPosition"],[474,35,488,33],[474,40,488,38,"props"],[474,45,488,43],[474,46,488,44,"drawerPosition"],[474,60,488,58],[474,64,488,62],[474,68,488,66],[474,69,488,67,"props"],[474,74,488,72],[474,75,488,73,"drawerWidth"],[474,86,488,84],[474,91,488,89,"props"],[474,96,488,94],[474,97,488,95,"drawerWidth"],[474,108,488,106],[474,112,488,110],[474,116,488,114],[474,117,488,115,"props"],[474,122,488,120],[474,123,488,121,"drawerType"],[474,133,488,131],[474,138,488,136,"props"],[474,143,488,141],[474,144,488,142,"drawerType"],[474,154,488,152],[474,158,488,156],[474,162,488,160],[474,163,488,161,"state"],[474,168,488,166],[474,169,488,167,"containerWidth"],[474,183,488,181],[474,188,488,186,"state"],[474,193,488,191],[474,194,488,192,"containerWidth"],[474,208,488,206],[474,210,488,208],[475,8,489,6],[475,12,489,10],[475,13,489,11,"updateAnimatedEvent"],[475,32,489,30],[475,33,489,31,"props"],[475,38,489,36],[475,40,489,38,"state"],[475,45,489,43],[475,46,489,44],[476,6,490,4],[477,6,492,4],[477,13,492,11],[477,17,492,15],[478,4,493,2],[479,4,495,2,"render"],[479,10,495,8,"render"],[479,11,495,8],[479,13,495,11],[480,6,496,4],[480,12,496,10],[481,8,497,6,"drawerPosition"],[481,22,497,20],[482,8,498,6,"drawerLockMode"],[482,22,498,20],[483,8,499,6,"edgeWidth"],[483,17,499,15],[484,8,500,6,"minSwipeDistance"],[485,6,501,4],[485,7,501,5],[485,10,501,8],[485,14,501,12],[485,15,501,13,"props"],[485,20,501,18],[486,6,502,4],[486,12,502,10,"fromLeft"],[486,20,502,18],[486,23,502,21,"drawerPosition"],[486,37,502,35],[486,42,502,40],[486,48,502,46],[486,49,502,47],[486,50,502,48],[487,6,503,4],[488,6,504,4],[490,6,506,4],[490,12,506,10,"gestureOrientation"],[490,30,506,28],[490,33,506,31],[490,34,506,32,"fromLeft"],[490,42,506,40],[490,45,506,43],[490,46,506,44],[490,49,506,47],[490,50,506,48],[490,51,506,49],[490,56,506,54],[490,60,506,58],[490,61,506,59,"drawerShown"],[490,72,506,70],[490,75,506,73],[490,76,506,74],[490,77,506,75],[490,80,506,78],[490,81,506,79],[490,82,506,80],[490,83,506,81],[490,84,506,82],[491,6,507,4],[492,6,508,4],[494,6,510,4],[494,12,510,10,"hitSlop"],[494,19,510,17],[494,22,510,20,"fromLeft"],[494,30,510,28],[494,33,510,31],[495,8,511,6,"left"],[495,12,511,10],[495,14,511,12],[495,15,511,13],[496,8,512,6,"width"],[496,13,512,11],[496,15,512,13],[496,19,512,17],[496,20,512,18,"drawerShown"],[496,31,512,29],[496,34,512,32,"undefined"],[496,43,512,41],[496,46,512,44,"edgeWidth"],[497,6,513,4],[497,7,513,5],[497,10,513,8],[498,8,514,6,"right"],[498,13,514,11],[498,15,514,13],[498,16,514,14],[499,8,515,6,"width"],[499,13,515,11],[499,15,515,13],[499,19,515,17],[499,20,515,18,"drawerShown"],[499,31,515,29],[499,34,515,32,"undefined"],[499,43,515,41],[499,46,515,44,"edgeWidth"],[500,6,516,4],[500,7,516,5],[501,6,517,4],[501,13,517,11],[501,26,517,24,"React"],[501,31,517,29],[501,32,517,30,"createElement"],[501,45,517,43],[501,46,517,44,"_PanGestureHandler"],[501,64,517,62],[501,65,517,63,"PanGestureHandler"],[501,82,517,80],[501,83,517,81],[502,6,517,81],[502,8,518,6],[503,8,519,6,"userSelect"],[503,18,519,16],[503,20,519,18],[503,24,519,22],[503,25,519,23,"props"],[503,30,519,28],[503,31,519,29,"userSelect"],[503,41,519,39],[504,8,520,6,"activeCursor"],[504,20,520,18],[504,22,520,20],[504,26,520,24],[504,27,520,25,"props"],[504,32,520,30],[504,33,520,31,"activeCursor"],[504,45,520,43],[505,8,521,6,"mouseButton"],[505,19,521,17],[505,21,521,19],[505,25,521,23],[505,26,521,24,"props"],[505,31,521,29],[505,32,521,30,"mouseButton"],[505,43,521,41],[506,8,522,6,"enableContextMenu"],[506,25,522,23],[506,27,522,25],[506,31,522,29],[506,32,522,30,"props"],[506,37,522,35],[506,38,522,36,"enableContextMenu"],[506,55,522,53],[507,8,523,6,"ref"],[507,11,523,9],[507,13,523,11],[507,17,523,15],[507,18,523,16,"setPanGestureRef"],[507,34,523,32],[508,8,524,6,"hitSlop"],[508,15,524,13],[508,17,524,15,"hitSlop"],[508,24,524,22],[509,8,525,6,"activeOffsetX"],[509,21,525,19],[509,23,525,21,"gestureOrientation"],[509,41,525,39],[509,44,525,42,"minSwipeDistance"],[509,60,525,58],[510,8,526,6,"failOffsetY"],[510,19,526,17],[510,21,526,19],[510,22,526,20],[510,23,526,21],[510,25,526,23],[510,27,526,25],[510,29,526,27],[510,30,526,28],[511,8,527,6,"onGestureEvent"],[511,22,527,20],[511,24,527,22],[511,28,527,26],[511,29,527,27,"onGestureEvent"],[511,43,527,41],[512,8,528,6,"onHandlerStateChange"],[512,28,528,26],[512,30,528,28],[512,34,528,32],[512,35,528,33,"openingHandlerStateChange"],[512,60,528,58],[513,8,529,6,"enableTrackpadTwoFingerGesture"],[513,38,529,36],[513,40,529,38],[513,44,529,42],[513,45,529,43,"props"],[513,50,529,48],[513,51,529,49,"enableTrackpadTwoFingerGesture"],[513,81,529,79],[514,8,530,6,"enabled"],[514,15,530,13],[514,17,530,15,"drawerLockMode"],[514,31,530,29],[514,36,530,34],[514,51,530,49],[514,55,530,53,"drawerLockMode"],[514,69,530,67],[514,74,530,72],[515,6,531,4],[515,7,531,5],[515,9,531,7],[515,13,531,11],[515,14,531,12,"renderDrawer"],[515,26,531,24],[515,27,531,25],[515,28,531,26],[515,29,531,27],[516,4,532,2],[517,2,534,0],[518,2,536,0,"exports"],[518,9,536,7],[518,10,536,8,"default"],[518,17,536,15],[518,20,536,18,"DrawerLayout"],[518,32,536,30],[519,2,538,0,"_defineProperty"],[519,17,538,15],[519,18,538,16,"DrawerLayout"],[519,30,538,28],[519,32,538,30],[519,46,538,44],[519,48,538,46],[520,4,539,2,"drawerWidth"],[520,15,539,13],[520,17,539,15],[520,20,539,18],[521,4,540,2,"drawerPosition"],[521,18,540,16],[521,20,540,18],[521,26,540,24],[522,4,541,2,"useNativeAnimations"],[522,23,541,21],[522,25,541,23],[522,29,541,27],[523,4,542,2,"drawerType"],[523,14,542,12],[523,16,542,14],[523,23,542,21],[524,4,543,2,"edgeWidth"],[524,13,543,11],[524,15,543,13],[524,17,543,15],[525,4,544,2,"minSwipeDistance"],[525,20,544,18],[525,22,544,20],[525,23,544,21],[526,4,545,2,"overlayColor"],[526,16,545,14],[526,18,545,16],[526,38,545,36],[527,4,546,2,"drawerLockMode"],[527,18,546,16],[527,20,546,18],[527,30,546,28],[528,4,547,2,"enableTrackpadTwoFingerGesture"],[528,34,547,32],[528,36,547,34],[529,2,548,0],[529,3,548,1],[529,4,548,2],[530,2,550,0,"_defineProperty"],[530,17,550,15],[530,18,550,16,"DrawerLayout"],[530,30,550,28],[530,32,550,30],[530,43,550,41],[530,45,550,43],[531,4,551,2,"Left"],[531,8,551,6],[531,10,551,8],[531,16,551,14],[532,4,552,2,"Right"],[532,9,552,7],[532,11,552,9],[533,2,553,0],[533,3,553,1],[533,4,553,2],[534,2,555,0],[534,8,555,6,"styles"],[534,14,555,12],[534,17,555,15,"_reactNative"],[534,29,555,27],[534,30,555,28,"StyleSheet"],[534,40,555,38],[534,41,555,39,"create"],[534,47,555,45],[534,48,555,46],[535,4,556,2,"drawerContainer"],[535,19,556,17],[535,21,556,19],[536,6,556,21],[536,9,556,24,"_reactNative"],[536,21,556,36],[536,22,556,37,"StyleSheet"],[536,32,556,47],[536,33,556,48,"absoluteFillObject"],[536,51,556,66],[537,6,557,4,"zIndex"],[537,12,557,10],[537,14,557,12],[537,18,557,16],[538,6,558,4,"flexDirection"],[538,19,558,17],[538,21,558,19],[539,4,559,2],[539,5,559,3],[540,4,560,2,"containerInFront"],[540,20,560,18],[540,22,560,20],[541,6,560,22],[541,9,560,25,"_reactNative"],[541,21,560,37],[541,22,560,38,"StyleSheet"],[541,32,560,48],[541,33,560,49,"absoluteFillObject"],[541,51,560,67],[542,6,561,4,"zIndex"],[542,12,561,10],[542,14,561,12],[543,4,562,2],[543,5,562,3],[544,4,563,2,"containerOnBack"],[544,19,563,17],[544,21,563,19],[545,6,563,21],[545,9,563,24,"_reactNative"],[545,21,563,36],[545,22,563,37,"StyleSheet"],[545,32,563,47],[545,33,563,48,"absoluteFillObject"],[546,4,564,2],[546,5,564,3],[547,4,565,2,"main"],[547,8,565,6],[547,10,565,8],[548,6,566,4,"flex"],[548,10,566,8],[548,12,566,10],[548,13,566,11],[549,6,567,4,"zIndex"],[549,12,567,10],[549,14,567,12],[549,15,567,13],[550,6,568,4,"overflow"],[550,14,568,12],[550,16,568,14],[551,4,569,2],[551,5,569,3],[552,4,570,2,"overlay"],[552,11,570,9],[552,13,570,11],[553,6,570,13],[553,9,570,16,"_reactNative"],[553,21,570,28],[553,22,570,29,"StyleSheet"],[553,32,570,39],[553,33,570,40,"absoluteFillObject"],[553,51,570,58],[554,6,571,4,"zIndex"],[554,12,571,10],[554,14,571,12],[555,4,572,2],[556,2,573,0],[556,3,573,1],[556,4,573,2],[557,0,573,3],[557,3]],"functionMap":{"names":["<global>","_interopRequireDefault","_getRequireWildcardCache","_interopRequireWildcard","_defineProperty","DrawerLayout","constructor","_defineProperty$argument_2","gestureOptions.listener","_reactNative.Animated.spring.start$argument_0","shouldComponentUpdate","render"],"mappings":"AAA;ACmB,+FD;AEE,0LF;AGE,uuBH;AIE,iNJ;AKa;ECC;iDCe;kCC+E;SDM;KDS;mDCE;KDM;8CCE;KDI;uDCE;KDqB;qDCE;KDM;2CCE;KDyC;2CCE;KDmC;2CCE;eEuC;OF2B;KDC;wCCE;KDM;yCCE;KDM;2CCE;KDsB;0CCE;KD0E;8CCE;KDO;GDiB;EKE;GLM;EME;GNqC;CLE"},"hasCjsExports":true},"type":"js/module"}]}