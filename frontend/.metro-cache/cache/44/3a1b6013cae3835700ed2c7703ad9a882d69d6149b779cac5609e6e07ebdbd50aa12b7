{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":37,"index":143},"end":{"line":7,"column":53,"index":159}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":40,"index":222},"end":{"line":9,"column":60,"index":242}}],"key":"oQpL0Es3H146KnQH9ygFeHrzVP4=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/index","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"55efhPHw3gz2FoQtoN2yI1VuhbM=","exportNames":["*"],"imports":1}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":25,"index":314},"end":{"line":11,"column":65,"index":354}}],"key":"twOH2XyKrCgBSDUtf5FiFKYMu7g=","exportNames":["*"],"imports":1}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":25,"index":381},"end":{"line":12,"column":65,"index":421}}],"key":"4nIIZM1xVk9FiTD7igXG0GgovY4=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":13,"index":436},"end":{"line":13,"column":32,"index":455}}],"key":"6QJYsgIYyXDoX6Ak1wmI7AHik6U=","exportNames":["*"],"imports":1}},{"name":"react/jsx-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":18,"index":475},"end":{"line":14,"column":46,"index":503}}],"key":"3suYSPX9nHbHZ1xNTsKXtKj0atE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _react = _interopRequireWildcard(require(_dependencyMap[0], \"react\"));\n  var React = _react;\n  var _invariant = _interopRequireDefault(require(_dependencyMap[1], \"invariant\"));\n  var _reactNative = require(_dependencyMap[2], \"react-native-web/dist/index\");\n  var _PanGestureHandler = require(_dependencyMap[3], \"../handlers/PanGestureHandler\");\n  var _TapGestureHandler = require(_dependencyMap[4], \"../handlers/TapGestureHandler\");\n  var _State = require(_dependencyMap[5], \"../State\");\n  var _jsxRuntime = require(_dependencyMap[6], \"react/jsx-runtime\");\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopRequireWildcard(e, t) {\n    if (\"function\" == typeof WeakMap) var r = new WeakMap(),\n      n = new WeakMap();\n    return (_interopRequireWildcard = function (e, t) {\n      if (!t && e && e.__esModule) return e;\n      var o,\n        i,\n        f = {\n          __proto__: null,\n          default: e\n        };\n      if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f;\n      if (o = t ? n : r) {\n        if (o.has(e)) return o.get(e);\n        o.set(e, f);\n      }\n      for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]);\n      return f;\n    })(e, t);\n  }\n  // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n\n  const DRAG_TOSS = 0.05;\n  const IDLE = 'Idle';\n  const DRAGGING = 'Dragging';\n  const SETTLING = 'Settling';\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  // Animated.AnimatedInterpolation has been converted to a generic type\n  // in @types/react-native 0.70. This way we can maintain compatibility\n  // with all versions of @types/react-native`\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  class DrawerLayout extends _react.Component {\n    static defaultProps = {\n      drawerWidth: 200,\n      drawerPosition: 'left',\n      useNativeAnimations: true,\n      drawerType: 'front',\n      edgeWidth: 20,\n      minSwipeDistance: 3,\n      overlayColor: 'rgba(0, 0, 0, 0.7)',\n      drawerLockMode: 'unlocked',\n      enableTrackpadTwoFingerGesture: false\n    };\n    constructor(props) {\n      super(props);\n      const dragX = new _reactNative.Animated.Value(0);\n      const touchX = new _reactNative.Animated.Value(0);\n      const drawerTranslation = new _reactNative.Animated.Value(0);\n      this.state = {\n        dragX,\n        touchX,\n        drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      this.updateAnimatedEvent(props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n    accessibilityIsModalView = /*#__PURE__*/React.createRef();\n    pointerEventsView = /*#__PURE__*/React.createRef();\n    panGestureHandler = /*#__PURE__*/React.createRef();\n    drawerShown = false;\n    static positions = {\n      Left: 'left',\n      Right: 'right'\n    };\n    updateAnimatedEvent = (props, state) => {\n      // Event definition is based on\n      const {\n        drawerPosition,\n        drawerWidth,\n        drawerType\n      } = props;\n      const {\n        dragX: dragXValue,\n        touchX: touchXValue,\n        drawerTranslation,\n        containerWidth\n      } = state;\n      let dragX = dragXValue;\n      let touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        // Most of the code is written in a way to handle left-side drawer. In\n        // order to handle right-side drawer the only thing we need to do is to\n        // reverse events coming from gesture handler in a way they emulate\n        // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n        // calulcated by subtracing real touchX from the width of the container\n        // (such that when touch happens at the right edge the value is simply 0)\n        dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n        touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      // While closing the drawer when user starts gesture outside of its area (in greyed\n      // out part of the window), we want the drawer to follow only once finger reaches the\n      // edge of the drawer.\n      // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n      // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n      // an arrow pointing left\n      // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    +---------------+    +---------------+    +---------------+    +---------------+\n      //\n      // For the above to work properly we define animated value that will keep\n      // start position of the gesture. Then we use that value to calculate how\n      // much we need to subtract from the dragX. If the gesture started on the\n      // greyed out area we take the distance from the edge of the drawer to the\n      // start position. Otherwise we don't subtract at all and the drawer be\n      // pulled back as soon as you start the pan.\n      //\n      // This is used only when drawerType is \"front\"\n      //\n      let translationX = dragX;\n      if (drawerType === 'front') {\n        const startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n        const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n      }\n      this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      const gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (this.props.onDrawerSlide) {\n        gestureOptions.listener = ev => {\n          const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          const position = translationX / this.state.containerWidth;\n          this.props.onDrawerSlide?.(position);\n        };\n      }\n      this.onGestureEvent = _reactNative.Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    };\n    handleContainerLayout = ({\n      nativeEvent\n    }) => {\n      this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n    emitStateChanged = (newState, drawerWillShow) => {\n      this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n    };\n    openingHandlerStateChange = ({\n      nativeEvent\n    }) => {\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        this.handleRelease({\n          nativeEvent\n        });\n      } else if (nativeEvent.state === _State.State.ACTIVE) {\n        this.emitStateChanged(DRAGGING, false);\n        this.setState({\n          drawerState: DRAGGING\n        });\n        if (this.props.keyboardDismissMode === 'on-drag') {\n          _reactNative.Keyboard.dismiss();\n        }\n        if (this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n    onTapHandlerStateChange = ({\n      nativeEvent\n    }) => {\n      if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n        this.closeDrawer();\n      }\n    };\n    handleRelease = ({\n      nativeEvent\n    }) => {\n      const {\n        drawerWidth,\n        drawerPosition,\n        drawerType\n      } = this.props;\n      const {\n        containerWidth\n      } = this.state;\n      let {\n        translationX: dragX,\n        velocityX,\n        x: touchX\n      } = nativeEvent;\n      if (drawerPosition !== 'left') {\n        // See description in _updateAnimatedEvent about why events are flipped\n        // for right-side drawer\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      const gestureStartX = touchX - dragX;\n      let dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n      const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      const shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n    updateShowing = showing => {\n      this.drawerShown = showing;\n      this.accessibilityIsModalView.current?.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      this.pointerEventsView.current?.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      const {\n        drawerPosition,\n        minSwipeDistance,\n        edgeWidth\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      // @ts-ignore internal API, maybe could be fixed in handler types\n      this.panGestureHandler.current?.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n    animateDrawer = (fromValue, toValue, velocity, speed) => {\n      this.state.dragX.setValue(0);\n      this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n      if (fromValue != null) {\n        let nextFramePosition = fromValue;\n        if (this.props.useNativeAnimations) {\n          // When using native driver, we predict the next position of the\n          // animation because it takes one frame of a roundtrip to pass RELEASE\n          // event from native driver to JS before we can start animating. Without\n          // it, it is more noticable that the frame is dropped.\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      const willShow = toValue !== 0;\n      this.updateShowing(willShow);\n      this.emitStateChanged(SETTLING, willShow);\n      this.setState({\n        drawerState: SETTLING\n      });\n      if (this.props.hideStatusBar) {\n        _reactNative.StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n      _reactNative.Animated.spring(this.state.drawerTranslation, {\n        velocity,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations,\n        speed: speed ?? undefined\n      }).start(({\n        finished\n      }) => {\n        if (finished) {\n          this.emitStateChanged(IDLE, willShow);\n          this.setState({\n            drawerOpened: willShow\n          });\n          if (this.state.drawerState !== DRAGGING) {\n            // It's possilbe that user started drag while the drawer\n            // was settling, don't override state in this case\n            this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            this.props.onDrawerOpen?.();\n          } else {\n            this.props.onDrawerClose?.();\n          }\n        }\n      });\n    };\n\n    // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n    openDrawer = (options = {}) => {\n      this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n      // We need to force the update, otherwise the overlay is not rerendered and\n      // it would not be clickable\n      this.forceUpdate();\n    };\n    closeDrawer = (options = {}) => {\n      // TODO: decide if it should be null or undefined is the proper value\n      this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n      // We need to force the update, otherwise the overlay is not rerendered and\n      // it would be still clickable\n      this.forceUpdate();\n    };\n    renderOverlay = () => {\n      /* Overlay styles */\n      (0, _invariant.default)(this.openValue, 'should be set');\n      let overlayOpacity;\n      if (this.state.drawerState !== IDLE) {\n        overlayOpacity = this.openValue;\n      } else {\n        overlayOpacity = this.state.drawerOpened ? 1 : 0;\n      }\n      const dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: this.props.overlayColor\n      };\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_TapGestureHandler.TapGestureHandler, {\n        onHandlerStateChange: this.onTapHandlerStateChange,\n        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {\n          pointerEvents: this.drawerShown ? 'auto' : 'none',\n          ref: this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        })\n      });\n    };\n    renderDrawer = () => {\n      const {\n        drawerBackgroundColor,\n        drawerWidth,\n        drawerPosition,\n        drawerType,\n        drawerContainerStyle,\n        contentContainerStyle\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      const drawerSlide = drawerType !== 'back';\n      const containerSlide = drawerType !== 'front';\n\n      // We rely on row and row-reverse flex directions to position the drawer\n      // properly. Apparently for RTL these are flipped which requires us to use\n      // the opposite setting for the drawer to appear from left or right\n      // according to the drawerPosition prop\n      const reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n      const dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      const openValue = this.openValue;\n      (0, _invariant.default)(openValue, 'should be set');\n      let containerStyles;\n      if (containerSlide) {\n        const containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      let drawerTranslateX = 0;\n      if (drawerSlide) {\n        const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      const drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {\n        style: styles.main,\n        onLayout: this.handleContainerLayout,\n        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes',\n          children: [typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()]\n        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {\n          pointerEvents: \"box-none\",\n          ref: this.accessibilityIsModalView,\n          accessibilityViewIsModal: this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {\n            style: dynamicDrawerStyles,\n            children: this.props.renderNavigationView(this.openValue)\n          })\n        })]\n      });\n    };\n    setPanGestureRef = ref => {\n      // TODO(TS): make sure it is OK taken from\n      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n      this.panGestureHandler.current = ref;\n      this.props.onGestureRef?.(ref);\n    };\n    render() {\n      const {\n        drawerPosition,\n        drawerLockMode,\n        edgeWidth,\n        minSwipeDistance\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n\n      // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n      // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PanGestureHandler.PanGestureHandler\n      // @ts-ignore could be fixed in handler types\n      , {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        children: this.renderDrawer()\n      });\n    }\n  }\n  exports.default = DrawerLayout;\n  const styles = _reactNative.StyleSheet.create({\n    drawerContainer: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1001,\n      flexDirection: 'row'\n    },\n    containerInFront: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1002\n    },\n    containerOnBack: {\n      ..._reactNative.StyleSheet.absoluteFillObject\n    },\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: {\n      ..._reactNative.StyleSheet.absoluteFillObject,\n      zIndex: 1000\n    }\n  });\n});","lineCount":572,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,15],[7,20,6,18],[7,25,6,23],[7,26,6,24],[8,2,7,0],[8,6,7,4,"_react"],[8,12,7,10],[8,15,7,13,"_interopRequireWildcard"],[8,38,7,36],[8,39,7,37,"require"],[8,46,7,44],[8,47,7,44,"_dependencyMap"],[8,61,7,44],[8,73,7,52],[8,74,7,53],[8,75,7,54],[9,2,8,0],[9,6,8,4,"React"],[9,11,8,9],[9,14,8,12,"_react"],[9,20,8,18],[10,2,9,0],[10,6,9,4,"_invariant"],[10,16,9,14],[10,19,9,17,"_interopRequireDefault"],[10,41,9,39],[10,42,9,40,"require"],[10,49,9,47],[10,50,9,47,"_dependencyMap"],[10,64,9,47],[10,80,9,59],[10,81,9,60],[10,82,9,61],[11,2,9,62],[11,6,9,62,"_reactNative"],[11,18,9,62],[11,21,9,62,"require"],[11,28,9,62],[11,29,9,62,"_dependencyMap"],[11,43,9,62],[12,2,11,0],[12,6,11,4,"_PanGestureHandler"],[12,24,11,22],[12,27,11,25,"require"],[12,34,11,32],[12,35,11,32,"_dependencyMap"],[12,49,11,32],[12,85,11,64],[12,86,11,65],[13,2,12,0],[13,6,12,4,"_TapGestureHandler"],[13,24,12,22],[13,27,12,25,"require"],[13,34,12,32],[13,35,12,32,"_dependencyMap"],[13,49,12,32],[13,85,12,64],[13,86,12,65],[14,2,13,0],[14,6,13,4,"_State"],[14,12,13,10],[14,15,13,13,"require"],[14,22,13,20],[14,23,13,20,"_dependencyMap"],[14,37,13,20],[14,52,13,31],[14,53,13,32],[15,2,14,0],[15,6,14,4,"_jsxRuntime"],[15,17,14,15],[15,20,14,18,"require"],[15,27,14,25],[15,28,14,25,"_dependencyMap"],[15,42,14,25],[15,66,14,45],[15,67,14,46],[16,2,15,0],[16,11,15,9,"_interopRequireDefault"],[16,33,15,31,"_interopRequireDefault"],[16,34,15,32,"e"],[16,35,15,33],[16,37,15,35],[17,4,15,37],[17,11,15,44,"e"],[17,12,15,45],[17,16,15,49,"e"],[17,17,15,50],[17,18,15,51,"__esModule"],[17,28,15,61],[17,31,15,64,"e"],[17,32,15,65],[17,35,15,68],[18,6,15,70,"default"],[18,13,15,77],[18,15,15,79,"e"],[19,4,15,81],[19,5,15,82],[20,2,15,84],[21,2,16,0],[21,11,16,9,"_interopRequireWildcard"],[21,34,16,32,"_interopRequireWildcard"],[21,35,16,33,"e"],[21,36,16,34],[21,38,16,36,"t"],[21,39,16,37],[21,41,16,39],[22,4,16,41],[22,8,16,45],[22,18,16,55],[22,22,16,59],[22,29,16,66,"WeakMap"],[22,36,16,73],[22,38,16,75],[22,42,16,79,"r"],[22,43,16,80],[22,46,16,83],[22,50,16,87,"WeakMap"],[22,57,16,94],[22,58,16,95],[22,59,16,96],[23,6,16,98,"n"],[23,7,16,99],[23,10,16,102],[23,14,16,106,"WeakMap"],[23,21,16,113],[23,22,16,114],[23,23,16,115],[24,4,16,117],[24,11,16,124],[24,12,16,125,"_interopRequireWildcard"],[24,35,16,148],[24,38,16,151],[24,47,16,151,"_interopRequireWildcard"],[24,48,16,161,"e"],[24,49,16,162],[24,51,16,164,"t"],[24,52,16,165],[24,54,16,167],[25,6,16,169],[25,10,16,173],[25,11,16,174,"t"],[25,12,16,175],[25,16,16,179,"e"],[25,17,16,180],[25,21,16,184,"e"],[25,22,16,185],[25,23,16,186,"__esModule"],[25,33,16,196],[25,35,16,198],[25,42,16,205,"e"],[25,43,16,206],[26,6,16,208],[26,10,16,212,"o"],[26,11,16,213],[27,8,16,215,"i"],[27,9,16,216],[28,8,16,218,"f"],[28,9,16,219],[28,12,16,222],[29,10,16,224,"__proto__"],[29,19,16,233],[29,21,16,235],[29,25,16,239],[30,10,16,241,"default"],[30,17,16,248],[30,19,16,250,"e"],[31,8,16,252],[31,9,16,253],[32,6,16,255],[32,10,16,259],[32,14,16,263],[32,19,16,268,"e"],[32,20,16,269],[32,24,16,273],[32,32,16,281],[32,36,16,285],[32,43,16,292,"e"],[32,44,16,293],[32,48,16,297],[32,58,16,307],[32,62,16,311],[32,69,16,318,"e"],[32,70,16,319],[32,72,16,321],[32,79,16,328,"f"],[32,80,16,329],[33,6,16,331],[33,10,16,335,"o"],[33,11,16,336],[33,14,16,339,"t"],[33,15,16,340],[33,18,16,343,"n"],[33,19,16,344],[33,22,16,347,"r"],[33,23,16,348],[33,25,16,350],[34,8,16,352],[34,12,16,356,"o"],[34,13,16,357],[34,14,16,358,"has"],[34,17,16,361],[34,18,16,362,"e"],[34,19,16,363],[34,20,16,364],[34,22,16,366],[34,29,16,373,"o"],[34,30,16,374],[34,31,16,375,"get"],[34,34,16,378],[34,35,16,379,"e"],[34,36,16,380],[34,37,16,381],[35,8,16,383,"o"],[35,9,16,384],[35,10,16,385,"set"],[35,13,16,388],[35,14,16,389,"e"],[35,15,16,390],[35,17,16,392,"f"],[35,18,16,393],[35,19,16,394],[36,6,16,396],[37,6,16,398],[37,11,16,403],[37,17,16,409,"t"],[37,18,16,410],[37,22,16,414,"e"],[37,23,16,415],[37,25,16,417],[37,34,16,426],[37,39,16,431,"t"],[37,40,16,432],[37,44,16,436],[37,45,16,437],[37,46,16,438],[37,47,16,439,"hasOwnProperty"],[37,61,16,453],[37,62,16,454,"call"],[37,66,16,458],[37,67,16,459,"e"],[37,68,16,460],[37,70,16,462,"t"],[37,71,16,463],[37,72,16,464],[37,77,16,469],[37,78,16,470,"i"],[37,79,16,471],[37,82,16,474],[37,83,16,475,"o"],[37,84,16,476],[37,87,16,479,"Object"],[37,93,16,485],[37,94,16,486,"defineProperty"],[37,108,16,500],[37,113,16,505,"Object"],[37,119,16,511],[37,120,16,512,"getOwnPropertyDescriptor"],[37,144,16,536],[37,145,16,537,"e"],[37,146,16,538],[37,148,16,540,"t"],[37,149,16,541],[37,150,16,542],[37,156,16,548,"i"],[37,157,16,549],[37,158,16,550,"get"],[37,161,16,553],[37,165,16,557,"i"],[37,166,16,558],[37,167,16,559,"set"],[37,170,16,562],[37,171,16,563],[37,174,16,566,"o"],[37,175,16,567],[37,176,16,568,"f"],[37,177,16,569],[37,179,16,571,"t"],[37,180,16,572],[37,182,16,574,"i"],[37,183,16,575],[37,184,16,576],[37,187,16,579,"f"],[37,188,16,580],[37,189,16,581,"t"],[37,190,16,582],[37,191,16,583],[37,194,16,586,"e"],[37,195,16,587],[37,196,16,588,"t"],[37,197,16,589],[37,198,16,590],[37,199,16,591],[38,6,16,593],[38,13,16,600,"f"],[38,14,16,601],[39,4,16,603],[39,5,16,604],[39,7,16,606,"e"],[39,8,16,607],[39,10,16,609,"t"],[39,11,16,610],[39,12,16,611],[40,2,16,613],[41,2,17,0],[42,2,18,0],[43,2,19,0],[44,2,20,0],[45,2,21,0],[46,2,22,0],[47,2,23,0],[49,2,25,0],[49,8,25,6,"DRAG_TOSS"],[49,17,25,15],[49,20,25,18],[49,24,25,22],[50,2,26,0],[50,8,26,6,"IDLE"],[50,12,26,10],[50,15,26,13],[50,21,26,19],[51,2,27,0],[51,8,27,6,"DRAGGING"],[51,16,27,14],[51,19,27,17],[51,29,27,27],[52,2,28,0],[52,8,28,6,"SETTLING"],[52,16,28,14],[52,19,28,17],[52,29,28,27],[54,2,30,0],[55,0,31,0],[56,0,32,0],[58,2,34,0],[59,0,35,0],[60,0,36,0],[62,2,38,0],[63,0,39,0],[64,0,40,0],[66,2,42,0],[67,0,43,0],[68,0,44,0],[70,2,46,0],[71,0,47,0],[72,0,48,0],[74,2,50,0],[75,2,51,0],[76,2,52,0],[78,2,54,0],[79,0,55,0],[80,0,56,0],[82,2,58,0],[83,0,59,0],[84,0,60,0],[86,2,62,0],[87,0,63,0],[88,0,64,0],[90,2,66,0],[91,0,67,0],[92,0,68,0],[93,2,69,0],[93,8,69,6,"DrawerLayout"],[93,20,69,18],[93,29,69,27,"_react"],[93,35,69,33],[93,36,69,34,"Component"],[93,45,69,43],[93,46,69,44],[94,4,70,2],[94,11,70,9,"defaultProps"],[94,23,70,21],[94,26,70,24],[95,6,71,4,"drawerWidth"],[95,17,71,15],[95,19,71,17],[95,22,71,20],[96,6,72,4,"drawerPosition"],[96,20,72,18],[96,22,72,20],[96,28,72,26],[97,6,73,4,"useNativeAnimations"],[97,25,73,23],[97,27,73,25],[97,31,73,29],[98,6,74,4,"drawerType"],[98,16,74,14],[98,18,74,16],[98,25,74,23],[99,6,75,4,"edgeWidth"],[99,15,75,13],[99,17,75,15],[99,19,75,17],[100,6,76,4,"minSwipeDistance"],[100,22,76,20],[100,24,76,22],[100,25,76,23],[101,6,77,4,"overlayColor"],[101,18,77,16],[101,20,77,18],[101,40,77,38],[102,6,78,4,"drawerLockMode"],[102,20,78,18],[102,22,78,20],[102,32,78,30],[103,6,79,4,"enableTrackpadTwoFingerGesture"],[103,36,79,34],[103,38,79,36],[104,4,80,2],[104,5,80,3],[105,4,81,2,"constructor"],[105,15,81,13,"constructor"],[105,16,81,14,"props"],[105,21,81,19],[105,23,81,21],[106,6,82,4],[106,11,82,9],[106,12,82,10,"props"],[106,17,82,15],[106,18,82,16],[107,6,83,4],[107,12,83,10,"dragX"],[107,17,83,15],[107,20,83,18],[107,24,83,22,"_reactNative"],[107,36,83,34],[107,37,83,35,"Animated"],[107,45,83,43],[107,46,83,44,"Value"],[107,51,83,49],[107,52,83,50],[107,53,83,51],[107,54,83,52],[108,6,84,4],[108,12,84,10,"touchX"],[108,18,84,16],[108,21,84,19],[108,25,84,23,"_reactNative"],[108,37,84,35],[108,38,84,36,"Animated"],[108,46,84,44],[108,47,84,45,"Value"],[108,52,84,50],[108,53,84,51],[108,54,84,52],[108,55,84,53],[109,6,85,4],[109,12,85,10,"drawerTranslation"],[109,29,85,27],[109,32,85,30],[109,36,85,34,"_reactNative"],[109,48,85,46],[109,49,85,47,"Animated"],[109,57,85,55],[109,58,85,56,"Value"],[109,63,85,61],[109,64,85,62],[109,65,85,63],[109,66,85,64],[110,6,86,4],[110,10,86,8],[110,11,86,9,"state"],[110,16,86,14],[110,19,86,17],[111,8,87,6,"dragX"],[111,13,87,11],[112,8,88,6,"touchX"],[112,14,88,12],[113,8,89,6,"drawerTranslation"],[113,25,89,23],[114,8,90,6,"containerWidth"],[114,22,90,20],[114,24,90,22],[114,25,90,23],[115,8,91,6,"drawerState"],[115,19,91,17],[115,21,91,19,"IDLE"],[115,25,91,23],[116,8,92,6,"drawerOpened"],[116,20,92,18],[116,22,92,20],[117,6,93,4],[117,7,93,5],[118,6,94,4],[118,10,94,8],[118,11,94,9,"updateAnimatedEvent"],[118,30,94,28],[118,31,94,29,"props"],[118,36,94,34],[118,38,94,36],[118,42,94,40],[118,43,94,41,"state"],[118,48,94,46],[118,49,94,47],[119,4,95,2],[120,4,96,2,"shouldComponentUpdate"],[120,25,96,23,"shouldComponentUpdate"],[120,26,96,24,"props"],[120,31,96,29],[120,33,96,31,"state"],[120,38,96,36],[120,40,96,38],[121,6,97,4],[121,10,97,8],[121,14,97,12],[121,15,97,13,"props"],[121,20,97,18],[121,21,97,19,"drawerPosition"],[121,35,97,33],[121,40,97,38,"props"],[121,45,97,43],[121,46,97,44,"drawerPosition"],[121,60,97,58],[121,64,97,62],[121,68,97,66],[121,69,97,67,"props"],[121,74,97,72],[121,75,97,73,"drawerWidth"],[121,86,97,84],[121,91,97,89,"props"],[121,96,97,94],[121,97,97,95,"drawerWidth"],[121,108,97,106],[121,112,97,110],[121,116,97,114],[121,117,97,115,"props"],[121,122,97,120],[121,123,97,121,"drawerType"],[121,133,97,131],[121,138,97,136,"props"],[121,143,97,141],[121,144,97,142,"drawerType"],[121,154,97,152],[121,158,97,156],[121,162,97,160],[121,163,97,161,"state"],[121,168,97,166],[121,169,97,167,"containerWidth"],[121,183,97,181],[121,188,97,186,"state"],[121,193,97,191],[121,194,97,192,"containerWidth"],[121,208,97,206],[121,210,97,208],[122,8,98,6],[122,12,98,10],[122,13,98,11,"updateAnimatedEvent"],[122,32,98,30],[122,33,98,31,"props"],[122,38,98,36],[122,40,98,38,"state"],[122,45,98,43],[122,46,98,44],[123,6,99,4],[124,6,100,4],[124,13,100,11],[124,17,100,15],[125,4,101,2],[126,4,102,2,"accessibilityIsModalView"],[126,28,102,26],[126,31,102,29],[126,44,102,42,"React"],[126,49,102,47],[126,50,102,48,"createRef"],[126,59,102,57],[126,60,102,58],[126,61,102,59],[127,4,103,2,"pointerEventsView"],[127,21,103,19],[127,24,103,22],[127,37,103,35,"React"],[127,42,103,40],[127,43,103,41,"createRef"],[127,52,103,50],[127,53,103,51],[127,54,103,52],[128,4,104,2,"panGestureHandler"],[128,21,104,19],[128,24,104,22],[128,37,104,35,"React"],[128,42,104,40],[128,43,104,41,"createRef"],[128,52,104,50],[128,53,104,51],[128,54,104,52],[129,4,105,2,"drawerShown"],[129,15,105,13],[129,18,105,16],[129,23,105,21],[130,4,106,2],[130,11,106,9,"positions"],[130,20,106,18],[130,23,106,21],[131,6,107,4,"Left"],[131,10,107,8],[131,12,107,10],[131,18,107,16],[132,6,108,4,"Right"],[132,11,108,9],[132,13,108,11],[133,4,109,2],[133,5,109,3],[134,4,110,2,"updateAnimatedEvent"],[134,23,110,21],[134,26,110,24,"updateAnimatedEvent"],[134,27,110,25,"props"],[134,32,110,30],[134,34,110,32,"state"],[134,39,110,37],[134,44,110,42],[135,6,111,4],[136,6,112,4],[136,12,112,10],[137,8,113,6,"drawerPosition"],[137,22,113,20],[138,8,114,6,"drawerWidth"],[138,19,114,17],[139,8,115,6,"drawerType"],[140,6,116,4],[140,7,116,5],[140,10,116,8,"props"],[140,15,116,13],[141,6,117,4],[141,12,117,10],[142,8,118,6,"dragX"],[142,13,118,11],[142,15,118,13,"dragXValue"],[142,25,118,23],[143,8,119,6,"touchX"],[143,14,119,12],[143,16,119,14,"touchXValue"],[143,27,119,25],[144,8,120,6,"drawerTranslation"],[144,25,120,23],[145,8,121,6,"containerWidth"],[146,6,122,4],[146,7,122,5],[146,10,122,8,"state"],[146,15,122,13],[147,6,123,4],[147,10,123,8,"dragX"],[147,15,123,13],[147,18,123,16,"dragXValue"],[147,28,123,26],[148,6,124,4],[148,10,124,8,"touchX"],[148,16,124,14],[148,19,124,17,"touchXValue"],[148,30,124,28],[149,6,125,4],[149,10,125,8,"drawerPosition"],[149,24,125,22],[149,29,125,27],[149,35,125,33],[149,37,125,35],[150,8,126,6],[151,8,127,6],[152,8,128,6],[153,8,129,6],[154,8,130,6],[155,8,131,6],[156,8,132,6,"dragX"],[156,13,132,11],[156,16,132,14,"_reactNative"],[156,28,132,26],[156,29,132,27,"Animated"],[156,37,132,35],[156,38,132,36,"multiply"],[156,46,132,44],[156,47,132,45],[156,51,132,49,"_reactNative"],[156,63,132,61],[156,64,132,62,"Animated"],[156,72,132,70],[156,73,132,71,"Value"],[156,78,132,76],[156,79,132,77],[156,80,132,78],[156,81,132,79],[156,82,132,80],[156,84,132,82,"dragXValue"],[156,94,132,92],[156,95,132,93],[156,96,132,94],[156,97,132,95],[157,8,133,6,"touchX"],[157,14,133,12],[157,17,133,15,"_reactNative"],[157,29,133,27],[157,30,133,28,"Animated"],[157,38,133,36],[157,39,133,37,"add"],[157,42,133,40],[157,43,133,41],[157,47,133,45,"_reactNative"],[157,59,133,57],[157,60,133,58,"Animated"],[157,68,133,66],[157,69,133,67,"Value"],[157,74,133,72],[157,75,133,73,"containerWidth"],[157,89,133,87],[157,90,133,88],[157,92,133,90,"_reactNative"],[157,104,133,102],[157,105,133,103,"Animated"],[157,113,133,111],[157,114,133,112,"multiply"],[157,122,133,120],[157,123,133,121],[157,127,133,125,"_reactNative"],[157,139,133,137],[157,140,133,138,"Animated"],[157,148,133,146],[157,149,133,147,"Value"],[157,154,133,152],[157,155,133,153],[157,156,133,154],[157,157,133,155],[157,158,133,156],[157,160,133,158,"touchXValue"],[157,171,133,169],[157,172,133,170],[157,173,133,171],[157,174,133,172],[157,175,133,173],[158,8,134,6,"touchXValue"],[158,19,134,17],[158,20,134,18,"setValue"],[158,28,134,26],[158,29,134,27,"containerWidth"],[158,43,134,41],[158,44,134,42],[159,6,135,4],[159,7,135,5],[159,13,135,11],[160,8,136,6,"touchXValue"],[160,19,136,17],[160,20,136,18,"setValue"],[160,28,136,26],[160,29,136,27],[160,30,136,28],[160,31,136,29],[161,6,137,4],[163,6,139,4],[164,6,140,4],[165,6,141,4],[166,6,142,4],[167,6,143,4],[168,6,144,4],[169,6,145,4],[170,6,146,4],[171,6,147,4],[172,6,148,4],[173,6,149,4],[174,6,150,4],[175,6,151,4],[176,6,152,4],[177,6,153,4],[178,6,154,4],[179,6,155,4],[180,6,156,4],[181,6,157,4],[182,6,158,4],[183,6,159,4],[184,6,160,4],[185,6,161,4],[186,6,162,4],[187,6,163,4],[188,6,164,4],[188,10,164,8,"translationX"],[188,22,164,20],[188,25,164,23,"dragX"],[188,30,164,28],[189,6,165,4],[189,10,165,8,"drawerType"],[189,20,165,18],[189,25,165,23],[189,32,165,30],[189,34,165,32],[190,8,166,6],[190,14,166,12,"startPositionX"],[190,28,166,26],[190,31,166,29,"_reactNative"],[190,43,166,41],[190,44,166,42,"Animated"],[190,52,166,50],[190,53,166,51,"add"],[190,56,166,54],[190,57,166,55,"touchX"],[190,63,166,61],[190,65,166,63,"_reactNative"],[190,77,166,75],[190,78,166,76,"Animated"],[190,86,166,84],[190,87,166,85,"multiply"],[190,95,166,93],[190,96,166,94],[190,100,166,98,"_reactNative"],[190,112,166,110],[190,113,166,111,"Animated"],[190,121,166,119],[190,122,166,120,"Value"],[190,127,166,125],[190,128,166,126],[190,129,166,127],[190,130,166,128],[190,131,166,129],[190,133,166,131,"dragX"],[190,138,166,136],[190,139,166,137],[190,140,166,138],[191,8,167,6],[191,14,167,12,"dragOffsetFromOnStartPosition"],[191,43,167,41],[191,46,167,44,"startPositionX"],[191,60,167,58],[191,61,167,59,"interpolate"],[191,72,167,70],[191,73,167,71],[192,10,168,8,"inputRange"],[192,20,168,18],[192,22,168,20],[192,23,168,21,"drawerWidth"],[192,34,168,32],[192,37,168,35],[192,38,168,36],[192,40,168,38,"drawerWidth"],[192,51,168,49],[192,53,168,51,"drawerWidth"],[192,64,168,62],[192,67,168,65],[192,68,168,66],[192,69,168,67],[193,10,169,8,"outputRange"],[193,21,169,19],[193,23,169,21],[193,24,169,22],[193,25,169,23],[193,27,169,25],[193,28,169,26],[193,30,169,28],[193,31,169,29],[194,8,170,6],[194,9,170,7],[194,10,170,8],[195,8,171,6,"translationX"],[195,20,171,18],[195,23,171,21,"_reactNative"],[195,35,171,33],[195,36,171,34,"Animated"],[195,44,171,42],[195,45,171,43,"add"],[195,48,171,46],[195,49,171,47,"dragX"],[195,54,171,52],[195,56,171,54,"dragOffsetFromOnStartPosition"],[195,85,171,83],[195,86,171,84],[195,87,171,85],[195,88,171,86],[196,6,172,4],[197,6,173,4],[197,10,173,8],[197,11,173,9,"openValue"],[197,20,173,18],[197,23,173,21,"_reactNative"],[197,35,173,33],[197,36,173,34,"Animated"],[197,44,173,42],[197,45,173,43,"add"],[197,48,173,46],[197,49,173,47,"translationX"],[197,61,173,59],[197,63,173,61,"drawerTranslation"],[197,80,173,78],[197,81,173,79],[197,82,173,80,"interpolate"],[197,93,173,91],[197,94,173,92],[198,8,174,6,"inputRange"],[198,18,174,16],[198,20,174,18],[198,21,174,19],[198,22,174,20],[198,24,174,22,"drawerWidth"],[198,35,174,33],[198,36,174,34],[199,8,175,6,"outputRange"],[199,19,175,17],[199,21,175,19],[199,22,175,20],[199,23,175,21],[199,25,175,23],[199,26,175,24],[199,27,175,25],[200,8,176,6,"extrapolate"],[200,19,176,17],[200,21,176,19],[201,6,177,4],[201,7,177,5],[201,8,177,6],[202,6,178,4],[202,12,178,10,"gestureOptions"],[202,26,178,24],[202,29,178,27],[203,8,179,6,"useNativeDriver"],[203,23,179,21],[203,25,179,23,"props"],[203,30,179,28],[203,31,179,29,"useNativeAnimations"],[204,6,180,4],[204,7,180,5],[205,6,181,4],[205,10,181,8],[205,14,181,12],[205,15,181,13,"props"],[205,20,181,18],[205,21,181,19,"onDrawerSlide"],[205,34,181,32],[205,36,181,34],[206,8,182,6,"gestureOptions"],[206,22,182,20],[206,23,182,21,"listener"],[206,31,182,29],[206,34,182,32,"ev"],[206,36,182,34],[206,40,182,38],[207,10,183,8],[207,16,183,14,"translationX"],[207,28,183,26],[207,31,183,29,"Math"],[207,35,183,33],[207,36,183,34,"floor"],[207,41,183,39],[207,42,183,40,"Math"],[207,46,183,44],[207,47,183,45,"abs"],[207,50,183,48],[207,51,183,49,"ev"],[207,53,183,51],[207,54,183,52,"nativeEvent"],[207,65,183,63],[207,66,183,64,"translationX"],[207,78,183,76],[207,79,183,77],[207,80,183,78],[208,10,184,8],[208,16,184,14,"position"],[208,24,184,22],[208,27,184,25,"translationX"],[208,39,184,37],[208,42,184,40],[208,46,184,44],[208,47,184,45,"state"],[208,52,184,50],[208,53,184,51,"containerWidth"],[208,67,184,65],[209,10,185,8],[209,14,185,12],[209,15,185,13,"props"],[209,20,185,18],[209,21,185,19,"onDrawerSlide"],[209,34,185,32],[209,37,185,35,"position"],[209,45,185,43],[209,46,185,44],[210,8,186,6],[210,9,186,7],[211,6,187,4],[212,6,188,4],[212,10,188,8],[212,11,188,9,"onGestureEvent"],[212,25,188,23],[212,28,188,26,"_reactNative"],[212,40,188,38],[212,41,188,39,"Animated"],[212,49,188,47],[212,50,188,48,"event"],[212,55,188,53],[212,56,188,54],[212,57,188,55],[213,8,189,6,"nativeEvent"],[213,19,189,17],[213,21,189,19],[214,10,190,8,"translationX"],[214,22,190,20],[214,24,190,22,"dragXValue"],[214,34,190,32],[215,10,191,8,"x"],[215,11,191,9],[215,13,191,11,"touchXValue"],[216,8,192,6],[217,6,193,4],[217,7,193,5],[217,8,193,6],[217,10,193,8,"gestureOptions"],[217,24,193,22],[217,25,193,23],[218,4,194,2],[218,5,194,3],[219,4,195,2,"handleContainerLayout"],[219,25,195,23],[219,28,195,26,"handleContainerLayout"],[219,29,195,27],[220,6,196,4,"nativeEvent"],[221,4,197,2],[221,5,197,3],[221,10,197,8],[222,6,198,4],[222,10,198,8],[222,11,198,9,"setState"],[222,19,198,17],[222,20,198,18],[223,8,199,6,"containerWidth"],[223,22,199,20],[223,24,199,22,"nativeEvent"],[223,35,199,33],[223,36,199,34,"layout"],[223,42,199,40],[223,43,199,41,"width"],[224,6,200,4],[224,7,200,5],[224,8,200,6],[225,4,201,2],[225,5,201,3],[226,4,202,2,"emitStateChanged"],[226,20,202,18],[226,23,202,21,"emitStateChanged"],[226,24,202,22,"newState"],[226,32,202,30],[226,34,202,32,"drawerWillShow"],[226,48,202,46],[226,53,202,51],[227,6,203,4],[227,10,203,8],[227,11,203,9,"props"],[227,16,203,14],[227,17,203,15,"onDrawerStateChanged"],[227,37,203,35],[227,40,203,38,"newState"],[227,48,203,46],[227,50,203,48,"drawerWillShow"],[227,64,203,62],[227,65,203,63],[228,4,204,2],[228,5,204,3],[229,4,205,2,"openingHandlerStateChange"],[229,29,205,27],[229,32,205,30,"openingHandlerStateChange"],[229,33,205,31],[230,6,206,4,"nativeEvent"],[231,4,207,2],[231,5,207,3],[231,10,207,8],[232,6,208,4],[232,10,208,8,"nativeEvent"],[232,21,208,19],[232,22,208,20,"oldState"],[232,30,208,28],[232,35,208,33,"_State"],[232,41,208,39],[232,42,208,40,"State"],[232,47,208,45],[232,48,208,46,"ACTIVE"],[232,54,208,52],[232,56,208,54],[233,8,209,6],[233,12,209,10],[233,13,209,11,"handleRelease"],[233,26,209,24],[233,27,209,25],[234,10,210,8,"nativeEvent"],[235,8,211,6],[235,9,211,7],[235,10,211,8],[236,6,212,4],[236,7,212,5],[236,13,212,11],[236,17,212,15,"nativeEvent"],[236,28,212,26],[236,29,212,27,"state"],[236,34,212,32],[236,39,212,37,"_State"],[236,45,212,43],[236,46,212,44,"State"],[236,51,212,49],[236,52,212,50,"ACTIVE"],[236,58,212,56],[236,60,212,58],[237,8,213,6],[237,12,213,10],[237,13,213,11,"emitStateChanged"],[237,29,213,27],[237,30,213,28,"DRAGGING"],[237,38,213,36],[237,40,213,38],[237,45,213,43],[237,46,213,44],[238,8,214,6],[238,12,214,10],[238,13,214,11,"setState"],[238,21,214,19],[238,22,214,20],[239,10,215,8,"drawerState"],[239,21,215,19],[239,23,215,21,"DRAGGING"],[240,8,216,6],[240,9,216,7],[240,10,216,8],[241,8,217,6],[241,12,217,10],[241,16,217,14],[241,17,217,15,"props"],[241,22,217,20],[241,23,217,21,"keyboardDismissMode"],[241,42,217,40],[241,47,217,45],[241,56,217,54],[241,58,217,56],[242,10,218,8,"_reactNative"],[242,22,218,20],[242,23,218,21,"Keyboard"],[242,31,218,29],[242,32,218,30,"dismiss"],[242,39,218,37],[242,40,218,38],[242,41,218,39],[243,8,219,6],[244,8,220,6],[244,12,220,10],[244,16,220,14],[244,17,220,15,"props"],[244,22,220,20],[244,23,220,21,"hideStatusBar"],[244,36,220,34],[244,38,220,36],[245,10,221,8,"_reactNative"],[245,22,221,20],[245,23,221,21,"StatusBar"],[245,32,221,30],[245,33,221,31,"setHidden"],[245,42,221,40],[245,43,221,41],[245,47,221,45],[245,49,221,47],[245,53,221,51],[245,54,221,52,"props"],[245,59,221,57],[245,60,221,58,"statusBarAnimation"],[245,78,221,76],[245,82,221,80],[245,89,221,87],[245,90,221,88],[246,8,222,6],[247,6,223,4],[248,4,224,2],[248,5,224,3],[249,4,225,2,"onTapHandlerStateChange"],[249,27,225,25],[249,30,225,28,"onTapHandlerStateChange"],[249,31,225,29],[250,6,226,4,"nativeEvent"],[251,4,227,2],[251,5,227,3],[251,10,227,8],[252,6,228,4],[252,10,228,8],[252,14,228,12],[252,15,228,13,"drawerShown"],[252,26,228,24],[252,30,228,28,"nativeEvent"],[252,41,228,39],[252,42,228,40,"oldState"],[252,50,228,48],[252,55,228,53,"_State"],[252,61,228,59],[252,62,228,60,"State"],[252,67,228,65],[252,68,228,66,"ACTIVE"],[252,74,228,72],[252,78,228,76],[252,82,228,80],[252,83,228,81,"props"],[252,88,228,86],[252,89,228,87,"drawerLockMode"],[252,103,228,101],[252,108,228,106],[252,121,228,119],[252,123,228,121],[253,8,229,6],[253,12,229,10],[253,13,229,11,"closeDrawer"],[253,24,229,22],[253,25,229,23],[253,26,229,24],[254,6,230,4],[255,4,231,2],[255,5,231,3],[256,4,232,2,"handleRelease"],[256,17,232,15],[256,20,232,18,"handleRelease"],[256,21,232,19],[257,6,233,4,"nativeEvent"],[258,4,234,2],[258,5,234,3],[258,10,234,8],[259,6,235,4],[259,12,235,10],[260,8,236,6,"drawerWidth"],[260,19,236,17],[261,8,237,6,"drawerPosition"],[261,22,237,20],[262,8,238,6,"drawerType"],[263,6,239,4],[263,7,239,5],[263,10,239,8],[263,14,239,12],[263,15,239,13,"props"],[263,20,239,18],[264,6,240,4],[264,12,240,10],[265,8,241,6,"containerWidth"],[266,6,242,4],[266,7,242,5],[266,10,242,8],[266,14,242,12],[266,15,242,13,"state"],[266,20,242,18],[267,6,243,4],[267,10,243,8],[268,8,244,6,"translationX"],[268,20,244,18],[268,22,244,20,"dragX"],[268,27,244,25],[269,8,245,6,"velocityX"],[269,17,245,15],[270,8,246,6,"x"],[270,9,246,7],[270,11,246,9,"touchX"],[271,6,247,4],[271,7,247,5],[271,10,247,8,"nativeEvent"],[271,21,247,19],[272,6,248,4],[272,10,248,8,"drawerPosition"],[272,24,248,22],[272,29,248,27],[272,35,248,33],[272,37,248,35],[273,8,249,6],[274,8,250,6],[275,8,251,6,"dragX"],[275,13,251,11],[275,16,251,14],[275,17,251,15,"dragX"],[275,22,251,20],[276,8,252,6,"touchX"],[276,14,252,12],[276,17,252,15,"containerWidth"],[276,31,252,29],[276,34,252,32,"touchX"],[276,40,252,38],[277,8,253,6,"velocityX"],[277,17,253,15],[277,20,253,18],[277,21,253,19,"velocityX"],[277,30,253,28],[278,6,254,4],[279,6,255,4],[279,12,255,10,"gestureStartX"],[279,25,255,23],[279,28,255,26,"touchX"],[279,34,255,32],[279,37,255,35,"dragX"],[279,42,255,40],[280,6,256,4],[280,10,256,8,"dragOffsetBasedOnStart"],[280,32,256,30],[280,35,256,33],[280,36,256,34],[281,6,257,4],[281,10,257,8,"drawerType"],[281,20,257,18],[281,25,257,23],[281,32,257,30],[281,34,257,32],[282,8,258,6,"dragOffsetBasedOnStart"],[282,30,258,28],[282,33,258,31,"gestureStartX"],[282,46,258,44],[282,49,258,47,"drawerWidth"],[282,60,258,58],[282,63,258,61,"gestureStartX"],[282,76,258,74],[282,79,258,77,"drawerWidth"],[282,90,258,88],[282,93,258,91],[282,94,258,92],[283,6,259,4],[284,6,260,4],[284,12,260,10,"startOffsetX"],[284,24,260,22],[284,27,260,25,"dragX"],[284,32,260,30],[284,35,260,33,"dragOffsetBasedOnStart"],[284,57,260,55],[284,61,260,59],[284,65,260,63],[284,66,260,64,"drawerShown"],[284,77,260,75],[284,80,260,78,"drawerWidth"],[284,91,260,89],[284,94,260,92],[284,95,260,93],[284,96,260,94],[285,6,261,4],[285,12,261,10,"projOffsetX"],[285,23,261,21],[285,26,261,24,"startOffsetX"],[285,38,261,36],[285,41,261,39,"DRAG_TOSS"],[285,50,261,48],[285,53,261,51,"velocityX"],[285,62,261,60],[286,6,262,4],[286,12,262,10,"shouldOpen"],[286,22,262,20],[286,25,262,23,"projOffsetX"],[286,36,262,34],[286,39,262,37,"drawerWidth"],[286,50,262,48],[286,53,262,51],[286,54,262,52],[287,6,263,4],[287,10,263,8,"shouldOpen"],[287,20,263,18],[287,22,263,20],[288,8,264,6],[288,12,264,10],[288,13,264,11,"animateDrawer"],[288,26,264,24],[288,27,264,25,"startOffsetX"],[288,39,264,37],[288,41,264,39,"drawerWidth"],[288,52,264,50],[288,54,264,52,"velocityX"],[288,63,264,61],[288,64,264,62],[289,6,265,4],[289,7,265,5],[289,13,265,11],[290,8,266,6],[290,12,266,10],[290,13,266,11,"animateDrawer"],[290,26,266,24],[290,27,266,25,"startOffsetX"],[290,39,266,37],[290,41,266,39],[290,42,266,40],[290,44,266,42,"velocityX"],[290,53,266,51],[290,54,266,52],[291,6,267,4],[292,4,268,2],[292,5,268,3],[293,4,269,2,"updateShowing"],[293,17,269,15],[293,20,269,18,"showing"],[293,27,269,25],[293,31,269,29],[294,6,270,4],[294,10,270,8],[294,11,270,9,"drawerShown"],[294,22,270,20],[294,25,270,23,"showing"],[294,32,270,30],[295,6,271,4],[295,10,271,8],[295,11,271,9,"accessibilityIsModalView"],[295,35,271,33],[295,36,271,34,"current"],[295,43,271,41],[295,45,271,43,"setNativeProps"],[295,59,271,57],[295,60,271,58],[296,8,272,6,"accessibilityViewIsModal"],[296,32,272,30],[296,34,272,32,"showing"],[297,6,273,4],[297,7,273,5],[297,8,273,6],[298,6,274,4],[298,10,274,8],[298,11,274,9,"pointerEventsView"],[298,28,274,26],[298,29,274,27,"current"],[298,36,274,34],[298,38,274,36,"setNativeProps"],[298,52,274,50],[298,53,274,51],[299,8,275,6,"pointerEvents"],[299,21,275,19],[299,23,275,21,"showing"],[299,30,275,28],[299,33,275,31],[299,39,275,37],[299,42,275,40],[300,6,276,4],[300,7,276,5],[300,8,276,6],[301,6,277,4],[301,12,277,10],[302,8,278,6,"drawerPosition"],[302,22,278,20],[303,8,279,6,"minSwipeDistance"],[303,24,279,22],[304,8,280,6,"edgeWidth"],[305,6,281,4],[305,7,281,5],[305,10,281,8],[305,14,281,12],[305,15,281,13,"props"],[305,20,281,18],[306,6,282,4],[306,12,282,10,"fromLeft"],[306,20,282,18],[306,23,282,21,"drawerPosition"],[306,37,282,35],[306,42,282,40],[306,48,282,46],[307,6,283,4],[308,6,284,4],[309,6,285,4],[310,6,286,4],[310,12,286,10,"gestureOrientation"],[310,30,286,28],[310,33,286,31],[310,34,286,32,"fromLeft"],[310,42,286,40],[310,45,286,43],[310,46,286,44],[310,49,286,47],[310,50,286,48],[310,51,286,49],[310,56,286,54],[310,60,286,58],[310,61,286,59,"drawerShown"],[310,72,286,70],[310,75,286,73],[310,76,286,74],[310,77,286,75],[310,80,286,78],[310,81,286,79],[310,82,286,80],[311,6,287,4],[312,6,288,4],[313,6,289,4],[314,6,290,4],[314,12,290,10,"hitSlop"],[314,19,290,17],[314,22,290,20,"fromLeft"],[314,30,290,28],[314,33,290,31],[315,8,291,6,"left"],[315,12,291,10],[315,14,291,12],[315,15,291,13],[316,8,292,6,"width"],[316,13,292,11],[316,15,292,13,"showing"],[316,22,292,20],[316,25,292,23,"undefined"],[316,34,292,32],[316,37,292,35,"edgeWidth"],[317,6,293,4],[317,7,293,5],[317,10,293,8],[318,8,294,6,"right"],[318,13,294,11],[318,15,294,13],[318,16,294,14],[319,8,295,6,"width"],[319,13,295,11],[319,15,295,13,"showing"],[319,22,295,20],[319,25,295,23,"undefined"],[319,34,295,32],[319,37,295,35,"edgeWidth"],[320,6,296,4],[320,7,296,5],[321,6,297,4],[322,6,298,4],[322,10,298,8],[322,11,298,9,"panGestureHandler"],[322,28,298,26],[322,29,298,27,"current"],[322,36,298,34],[322,38,298,36,"setNativeProps"],[322,52,298,50],[322,53,298,51],[323,8,299,6,"hitSlop"],[323,15,299,13],[324,8,300,6,"activeOffsetX"],[324,21,300,19],[324,23,300,21,"gestureOrientation"],[324,41,300,39],[324,44,300,42,"minSwipeDistance"],[325,6,301,4],[325,7,301,5],[325,8,301,6],[326,4,302,2],[326,5,302,3],[327,4,303,2,"animateDrawer"],[327,17,303,15],[327,20,303,18,"animateDrawer"],[327,21,303,19,"fromValue"],[327,30,303,28],[327,32,303,30,"toValue"],[327,39,303,37],[327,41,303,39,"velocity"],[327,49,303,47],[327,51,303,49,"speed"],[327,56,303,54],[327,61,303,59],[328,6,304,4],[328,10,304,8],[328,11,304,9,"state"],[328,16,304,14],[328,17,304,15,"dragX"],[328,22,304,20],[328,23,304,21,"setValue"],[328,31,304,29],[328,32,304,30],[328,33,304,31],[328,34,304,32],[329,6,305,4],[329,10,305,8],[329,11,305,9,"state"],[329,16,305,14],[329,17,305,15,"touchX"],[329,23,305,21],[329,24,305,22,"setValue"],[329,32,305,30],[329,33,305,31],[329,37,305,35],[329,38,305,36,"props"],[329,43,305,41],[329,44,305,42,"drawerPosition"],[329,58,305,56],[329,63,305,61],[329,69,305,67],[329,72,305,70],[329,73,305,71],[329,76,305,74],[329,80,305,78],[329,81,305,79,"state"],[329,86,305,84],[329,87,305,85,"containerWidth"],[329,101,305,99],[329,102,305,100],[330,6,306,4],[330,10,306,8,"fromValue"],[330,19,306,17],[330,23,306,21],[330,27,306,25],[330,29,306,27],[331,8,307,6],[331,12,307,10,"nextFramePosition"],[331,29,307,27],[331,32,307,30,"fromValue"],[331,41,307,39],[332,8,308,6],[332,12,308,10],[332,16,308,14],[332,17,308,15,"props"],[332,22,308,20],[332,23,308,21,"useNativeAnimations"],[332,42,308,40],[332,44,308,42],[333,10,309,8],[334,10,310,8],[335,10,311,8],[336,10,312,8],[337,10,313,8],[337,14,313,12,"fromValue"],[337,23,313,21],[337,26,313,24,"toValue"],[337,33,313,31],[337,37,313,35,"velocity"],[337,45,313,43],[337,48,313,46],[337,49,313,47],[337,51,313,49],[338,12,314,10,"nextFramePosition"],[338,29,314,27],[338,32,314,30,"Math"],[338,36,314,34],[338,37,314,35,"min"],[338,40,314,38],[338,41,314,39,"fromValue"],[338,50,314,48],[338,53,314,51,"velocity"],[338,61,314,59],[338,64,314,62],[338,68,314,66],[338,70,314,68,"toValue"],[338,77,314,75],[338,78,314,76],[339,10,315,8],[339,11,315,9],[339,17,315,15],[339,21,315,19,"fromValue"],[339,30,315,28],[339,33,315,31,"toValue"],[339,40,315,38],[339,44,315,42,"velocity"],[339,52,315,50],[339,55,315,53],[339,56,315,54],[339,58,315,56],[340,12,316,10,"nextFramePosition"],[340,29,316,27],[340,32,316,30,"Math"],[340,36,316,34],[340,37,316,35,"max"],[340,40,316,38],[340,41,316,39,"fromValue"],[340,50,316,48],[340,53,316,51,"velocity"],[340,61,316,59],[340,64,316,62],[340,68,316,66],[340,70,316,68,"toValue"],[340,77,316,75],[340,78,316,76],[341,10,317,8],[342,8,318,6],[343,8,319,6],[343,12,319,10],[343,13,319,11,"state"],[343,18,319,16],[343,19,319,17,"drawerTranslation"],[343,36,319,34],[343,37,319,35,"setValue"],[343,45,319,43],[343,46,319,44,"nextFramePosition"],[343,63,319,61],[343,64,319,62],[344,6,320,4],[345,6,321,4],[345,12,321,10,"willShow"],[345,20,321,18],[345,23,321,21,"toValue"],[345,30,321,28],[345,35,321,33],[345,36,321,34],[346,6,322,4],[346,10,322,8],[346,11,322,9,"updateShowing"],[346,24,322,22],[346,25,322,23,"willShow"],[346,33,322,31],[346,34,322,32],[347,6,323,4],[347,10,323,8],[347,11,323,9,"emitStateChanged"],[347,27,323,25],[347,28,323,26,"SETTLING"],[347,36,323,34],[347,38,323,36,"willShow"],[347,46,323,44],[347,47,323,45],[348,6,324,4],[348,10,324,8],[348,11,324,9,"setState"],[348,19,324,17],[348,20,324,18],[349,8,325,6,"drawerState"],[349,19,325,17],[349,21,325,19,"SETTLING"],[350,6,326,4],[350,7,326,5],[350,8,326,6],[351,6,327,4],[351,10,327,8],[351,14,327,12],[351,15,327,13,"props"],[351,20,327,18],[351,21,327,19,"hideStatusBar"],[351,34,327,32],[351,36,327,34],[352,8,328,6,"_reactNative"],[352,20,328,18],[352,21,328,19,"StatusBar"],[352,30,328,28],[352,31,328,29,"setHidden"],[352,40,328,38],[352,41,328,39,"willShow"],[352,49,328,47],[352,51,328,49],[352,55,328,53],[352,56,328,54,"props"],[352,61,328,59],[352,62,328,60,"statusBarAnimation"],[352,80,328,78],[352,84,328,82],[352,91,328,89],[352,92,328,90],[353,6,329,4],[354,6,330,4,"_reactNative"],[354,18,330,16],[354,19,330,17,"Animated"],[354,27,330,25],[354,28,330,26,"spring"],[354,34,330,32],[354,35,330,33],[354,39,330,37],[354,40,330,38,"state"],[354,45,330,43],[354,46,330,44,"drawerTranslation"],[354,63,330,61],[354,65,330,63],[355,8,331,6,"velocity"],[355,16,331,14],[356,8,332,6,"bounciness"],[356,18,332,16],[356,20,332,18],[356,21,332,19],[357,8,333,6,"toValue"],[357,15,333,13],[358,8,334,6,"useNativeDriver"],[358,23,334,21],[358,25,334,23],[358,29,334,27],[358,30,334,28,"props"],[358,35,334,33],[358,36,334,34,"useNativeAnimations"],[358,55,334,53],[359,8,335,6,"speed"],[359,13,335,11],[359,15,335,13,"speed"],[359,20,335,18],[359,24,335,22,"undefined"],[360,6,336,4],[360,7,336,5],[360,8,336,6],[360,9,336,7,"start"],[360,14,336,12],[360,15,336,13],[360,16,336,14],[361,8,337,6,"finished"],[362,6,338,4],[362,7,338,5],[362,12,338,10],[363,8,339,6],[363,12,339,10,"finished"],[363,20,339,18],[363,22,339,20],[364,10,340,8],[364,14,340,12],[364,15,340,13,"emitStateChanged"],[364,31,340,29],[364,32,340,30,"IDLE"],[364,36,340,34],[364,38,340,36,"willShow"],[364,46,340,44],[364,47,340,45],[365,10,341,8],[365,14,341,12],[365,15,341,13,"setState"],[365,23,341,21],[365,24,341,22],[366,12,342,10,"drawerOpened"],[366,24,342,22],[366,26,342,24,"willShow"],[367,10,343,8],[367,11,343,9],[367,12,343,10],[368,10,344,8],[368,14,344,12],[368,18,344,16],[368,19,344,17,"state"],[368,24,344,22],[368,25,344,23,"drawerState"],[368,36,344,34],[368,41,344,39,"DRAGGING"],[368,49,344,47],[368,51,344,49],[369,12,345,10],[370,12,346,10],[371,12,347,10],[371,16,347,14],[371,17,347,15,"setState"],[371,25,347,23],[371,26,347,24],[372,14,348,12,"drawerState"],[372,25,348,23],[372,27,348,25,"IDLE"],[373,12,349,10],[373,13,349,11],[373,14,349,12],[374,10,350,8],[375,10,351,8],[375,14,351,12,"willShow"],[375,22,351,20],[375,24,351,22],[376,12,352,10],[376,16,352,14],[376,17,352,15,"props"],[376,22,352,20],[376,23,352,21,"onDrawerOpen"],[376,35,352,33],[376,38,352,36],[376,39,352,37],[377,10,353,8],[377,11,353,9],[377,17,353,15],[378,12,354,10],[378,16,354,14],[378,17,354,15,"props"],[378,22,354,20],[378,23,354,21,"onDrawerClose"],[378,36,354,34],[378,39,354,37],[378,40,354,38],[379,10,355,8],[380,8,356,6],[381,6,357,4],[381,7,357,5],[381,8,357,6],[382,4,358,2],[382,5,358,3],[384,4,360,2],[385,4,361,2,"openDrawer"],[385,14,361,12],[385,17,361,15,"openDrawer"],[385,18,361,16,"options"],[385,25,361,23],[385,28,361,26],[385,29,361,27],[385,30,361,28],[385,35,361,33],[386,6,362,4],[386,10,362,8],[386,11,362,9,"animateDrawer"],[386,24,362,22],[387,6,363,4],[388,6,364,4,"undefined"],[388,15,364,13],[388,17,364,15],[388,21,364,19],[388,22,364,20,"props"],[388,27,364,25],[388,28,364,26,"drawerWidth"],[388,39,364,37],[388,41,364,39,"options"],[388,48,364,46],[388,49,364,47,"velocity"],[388,57,364,55],[388,60,364,58,"options"],[388,67,364,65],[388,68,364,66,"velocity"],[388,76,364,74],[388,79,364,77],[388,80,364,78],[388,82,364,80,"options"],[388,89,364,87],[388,90,364,88,"speed"],[388,95,364,93],[388,96,364,94],[390,6,366,4],[391,6,367,4],[392,6,368,4],[392,10,368,8],[392,11,368,9,"forceUpdate"],[392,22,368,20],[392,23,368,21],[392,24,368,22],[393,4,369,2],[393,5,369,3],[394,4,370,2,"closeDrawer"],[394,15,370,13],[394,18,370,16,"closeDrawer"],[394,19,370,17,"options"],[394,26,370,24],[394,29,370,27],[394,30,370,28],[394,31,370,29],[394,36,370,34],[395,6,371,4],[396,6,372,4],[396,10,372,8],[396,11,372,9,"animateDrawer"],[396,24,372,22],[396,25,372,23,"undefined"],[396,34,372,32],[396,36,372,34],[396,37,372,35],[396,39,372,37,"options"],[396,46,372,44],[396,47,372,45,"velocity"],[396,55,372,53],[396,58,372,56,"options"],[396,65,372,63],[396,66,372,64,"velocity"],[396,74,372,72],[396,77,372,75],[396,78,372,76],[396,80,372,78,"options"],[396,87,372,85],[396,88,372,86,"speed"],[396,93,372,91],[396,94,372,92],[398,6,374,4],[399,6,375,4],[400,6,376,4],[400,10,376,8],[400,11,376,9,"forceUpdate"],[400,22,376,20],[400,23,376,21],[400,24,376,22],[401,4,377,2],[401,5,377,3],[402,4,378,2,"renderOverlay"],[402,17,378,15],[402,20,378,18,"renderOverlay"],[402,21,378,18],[402,26,378,24],[403,6,379,4],[404,6,380,4],[404,7,380,5],[404,8,380,6],[404,10,380,8,"_invariant"],[404,20,380,18],[404,21,380,19,"default"],[404,28,380,26],[404,30,380,28],[404,34,380,32],[404,35,380,33,"openValue"],[404,44,380,42],[404,46,380,44],[404,61,380,59],[404,62,380,60],[405,6,381,4],[405,10,381,8,"overlayOpacity"],[405,24,381,22],[406,6,382,4],[406,10,382,8],[406,14,382,12],[406,15,382,13,"state"],[406,20,382,18],[406,21,382,19,"drawerState"],[406,32,382,30],[406,37,382,35,"IDLE"],[406,41,382,39],[406,43,382,41],[407,8,383,6,"overlayOpacity"],[407,22,383,20],[407,25,383,23],[407,29,383,27],[407,30,383,28,"openValue"],[407,39,383,37],[408,6,384,4],[408,7,384,5],[408,13,384,11],[409,8,385,6,"overlayOpacity"],[409,22,385,20],[409,25,385,23],[409,29,385,27],[409,30,385,28,"state"],[409,35,385,33],[409,36,385,34,"drawerOpened"],[409,48,385,46],[409,51,385,49],[409,52,385,50],[409,55,385,53],[409,56,385,54],[410,6,386,4],[411,6,387,4],[411,12,387,10,"dynamicOverlayStyles"],[411,32,387,30],[411,35,387,33],[412,8,388,6,"opacity"],[412,15,388,13],[412,17,388,15,"overlayOpacity"],[412,31,388,29],[413,8,389,6,"backgroundColor"],[413,23,389,21],[413,25,389,23],[413,29,389,27],[413,30,389,28,"props"],[413,35,389,33],[413,36,389,34,"overlayColor"],[414,6,390,4],[414,7,390,5],[415,6,391,4],[415,13,391,11],[415,26,391,24],[415,27,391,25],[415,28,391,26],[415,30,391,28,"_jsxRuntime"],[415,41,391,39],[415,42,391,40,"jsx"],[415,45,391,43],[415,47,391,45,"_TapGestureHandler"],[415,65,391,63],[415,66,391,64,"TapGestureHandler"],[415,83,391,81],[415,85,391,83],[416,8,392,6,"onHandlerStateChange"],[416,28,392,26],[416,30,392,28],[416,34,392,32],[416,35,392,33,"onTapHandlerStateChange"],[416,58,392,56],[417,8,393,6,"children"],[417,16,393,14],[417,18,393,16],[417,31,393,29],[417,32,393,30],[417,33,393,31],[417,35,393,33,"_jsxRuntime"],[417,46,393,44],[417,47,393,45,"jsx"],[417,50,393,48],[417,52,393,50,"_reactNative"],[417,64,393,62],[417,65,393,63,"Animated"],[417,73,393,71],[417,74,393,72,"View"],[417,78,393,76],[417,80,393,78],[418,10,394,8,"pointerEvents"],[418,23,394,21],[418,25,394,23],[418,29,394,27],[418,30,394,28,"drawerShown"],[418,41,394,39],[418,44,394,42],[418,50,394,48],[418,53,394,51],[418,59,394,57],[419,10,395,8,"ref"],[419,13,395,11],[419,15,395,13],[419,19,395,17],[419,20,395,18,"pointerEventsView"],[419,37,395,35],[420,10,396,8,"style"],[420,15,396,13],[420,17,396,15],[420,18,396,16,"styles"],[420,24,396,22],[420,25,396,23,"overlay"],[420,32,396,30],[420,34,396,32,"dynamicOverlayStyles"],[420,54,396,52],[421,8,397,6],[421,9,397,7],[422,6,398,4],[422,7,398,5],[422,8,398,6],[423,4,399,2],[423,5,399,3],[424,4,400,2,"renderDrawer"],[424,16,400,14],[424,19,400,17,"renderDrawer"],[424,20,400,17],[424,25,400,23],[425,6,401,4],[425,12,401,10],[426,8,402,6,"drawerBackgroundColor"],[426,29,402,27],[427,8,403,6,"drawerWidth"],[427,19,403,17],[428,8,404,6,"drawerPosition"],[428,22,404,20],[429,8,405,6,"drawerType"],[429,18,405,16],[430,8,406,6,"drawerContainerStyle"],[430,28,406,26],[431,8,407,6,"contentContainerStyle"],[432,6,408,4],[432,7,408,5],[432,10,408,8],[432,14,408,12],[432,15,408,13,"props"],[432,20,408,18],[433,6,409,4],[433,12,409,10,"fromLeft"],[433,20,409,18],[433,23,409,21,"drawerPosition"],[433,37,409,35],[433,42,409,40],[433,48,409,46],[434,6,410,4],[434,12,410,10,"drawerSlide"],[434,23,410,21],[434,26,410,24,"drawerType"],[434,36,410,34],[434,41,410,39],[434,47,410,45],[435,6,411,4],[435,12,411,10,"containerSlide"],[435,26,411,24],[435,29,411,27,"drawerType"],[435,39,411,37],[435,44,411,42],[435,51,411,49],[437,6,413,4],[438,6,414,4],[439,6,415,4],[440,6,416,4],[441,6,417,4],[441,12,417,10,"reverseContentDirection"],[441,35,417,33],[441,38,417,36,"_reactNative"],[441,50,417,48],[441,51,417,49,"I18nManager"],[441,62,417,60],[441,63,417,61,"isRTL"],[441,68,417,66],[441,71,417,69,"fromLeft"],[441,79,417,77],[441,82,417,80],[441,83,417,81,"fromLeft"],[441,91,417,89],[442,6,418,4],[442,12,418,10,"dynamicDrawerStyles"],[442,31,418,29],[442,34,418,32],[443,8,419,6,"backgroundColor"],[443,23,419,21],[443,25,419,23,"drawerBackgroundColor"],[443,46,419,44],[444,8,420,6,"width"],[444,13,420,11],[444,15,420,13,"drawerWidth"],[445,6,421,4],[445,7,421,5],[446,6,422,4],[446,12,422,10,"openValue"],[446,21,422,19],[446,24,422,22],[446,28,422,26],[446,29,422,27,"openValue"],[446,38,422,36],[447,6,423,4],[447,7,423,5],[447,8,423,6],[447,10,423,8,"_invariant"],[447,20,423,18],[447,21,423,19,"default"],[447,28,423,26],[447,30,423,28,"openValue"],[447,39,423,37],[447,41,423,39],[447,56,423,54],[447,57,423,55],[448,6,424,4],[448,10,424,8,"containerStyles"],[448,25,424,23],[449,6,425,4],[449,10,425,8,"containerSlide"],[449,24,425,22],[449,26,425,24],[450,8,426,6],[450,14,426,12,"containerTranslateX"],[450,33,426,31],[450,36,426,34,"openValue"],[450,45,426,43],[450,46,426,44,"interpolate"],[450,57,426,55],[450,58,426,56],[451,10,427,8,"inputRange"],[451,20,427,18],[451,22,427,20],[451,23,427,21],[451,24,427,22],[451,26,427,24],[451,27,427,25],[451,28,427,26],[452,10,428,8,"outputRange"],[452,21,428,19],[452,23,428,21,"fromLeft"],[452,31,428,29],[452,34,428,32],[452,35,428,33],[452,36,428,34],[452,38,428,36,"drawerWidth"],[452,49,428,47],[452,50,428,48],[452,53,428,51],[452,54,428,52],[452,55,428,53],[452,57,428,55],[452,58,428,56,"drawerWidth"],[452,69,428,67],[452,70,428,68],[453,10,429,8,"extrapolate"],[453,21,429,19],[453,23,429,21],[454,8,430,6],[454,9,430,7],[454,10,430,8],[455,8,431,6,"containerStyles"],[455,23,431,21],[455,26,431,24],[456,10,432,8,"transform"],[456,19,432,17],[456,21,432,19],[456,22,432,20],[457,12,433,10,"translateX"],[457,22,433,20],[457,24,433,22,"containerTranslateX"],[458,10,434,8],[458,11,434,9],[459,8,435,6],[459,9,435,7],[460,6,436,4],[461,6,437,4],[461,10,437,8,"drawerTranslateX"],[461,26,437,24],[461,29,437,27],[461,30,437,28],[462,6,438,4],[462,10,438,8,"drawerSlide"],[462,21,438,19],[462,23,438,21],[463,8,439,6],[463,14,439,12,"closedDrawerOffset"],[463,32,439,30],[463,35,439,33,"fromLeft"],[463,43,439,41],[463,46,439,44],[463,47,439,45,"drawerWidth"],[463,58,439,56],[463,61,439,59,"drawerWidth"],[463,72,439,70],[464,8,440,6],[464,12,440,10],[464,16,440,14],[464,17,440,15,"state"],[464,22,440,20],[464,23,440,21,"drawerState"],[464,34,440,32],[464,39,440,37,"IDLE"],[464,43,440,41],[464,45,440,43],[465,10,441,8,"drawerTranslateX"],[465,26,441,24],[465,29,441,27,"openValue"],[465,38,441,36],[465,39,441,37,"interpolate"],[465,50,441,48],[465,51,441,49],[466,12,442,10,"inputRange"],[466,22,442,20],[466,24,442,22],[466,25,442,23],[466,26,442,24],[466,28,442,26],[466,29,442,27],[466,30,442,28],[467,12,443,10,"outputRange"],[467,23,443,21],[467,25,443,23],[467,26,443,24,"closedDrawerOffset"],[467,44,443,42],[467,46,443,44],[467,47,443,45],[467,48,443,46],[468,12,444,10,"extrapolate"],[468,23,444,21],[468,25,444,23],[469,10,445,8],[469,11,445,9],[469,12,445,10],[470,8,446,6],[470,9,446,7],[470,15,446,13],[471,10,447,8,"drawerTranslateX"],[471,26,447,24],[471,29,447,27],[471,33,447,31],[471,34,447,32,"state"],[471,39,447,37],[471,40,447,38,"drawerOpened"],[471,52,447,50],[471,55,447,53],[471,56,447,54],[471,59,447,57,"closedDrawerOffset"],[471,77,447,75],[472,8,448,6],[473,6,449,4],[474,6,450,4],[474,12,450,10,"drawerStyles"],[474,24,450,22],[474,27,450,25],[475,8,451,6,"transform"],[475,17,451,15],[475,19,451,17],[475,20,451,18],[476,10,452,8,"translateX"],[476,20,452,18],[476,22,452,20,"drawerTranslateX"],[477,8,453,6],[477,9,453,7],[477,10,453,8],[478,8,454,6,"flexDirection"],[478,21,454,19],[478,23,454,21,"reverseContentDirection"],[478,46,454,44],[478,49,454,47],[478,62,454,60],[478,65,454,63],[479,6,455,4],[479,7,455,5],[480,6,456,4],[480,13,456,11],[480,26,456,24],[480,27,456,25],[480,28,456,26],[480,30,456,28,"_jsxRuntime"],[480,41,456,39],[480,42,456,40,"jsxs"],[480,46,456,44],[480,48,456,46,"_reactNative"],[480,60,456,58],[480,61,456,59,"Animated"],[480,69,456,67],[480,70,456,68,"View"],[480,74,456,72],[480,76,456,74],[481,8,457,6,"style"],[481,13,457,11],[481,15,457,13,"styles"],[481,21,457,19],[481,22,457,20,"main"],[481,26,457,24],[482,8,458,6,"onLayout"],[482,16,458,14],[482,18,458,16],[482,22,458,20],[482,23,458,21,"handleContainerLayout"],[482,44,458,42],[483,8,459,6,"children"],[483,16,459,14],[483,18,459,16],[483,19,459,17],[483,32,459,30],[483,33,459,31],[483,34,459,32],[483,36,459,34,"_jsxRuntime"],[483,47,459,45],[483,48,459,46,"jsxs"],[483,52,459,50],[483,54,459,52,"_reactNative"],[483,66,459,64],[483,67,459,65,"Animated"],[483,75,459,73],[483,76,459,74,"View"],[483,80,459,78],[483,82,459,80],[484,10,460,8,"style"],[484,15,460,13],[484,17,460,15],[484,18,460,16,"drawerType"],[484,28,460,26],[484,33,460,31],[484,40,460,38],[484,43,460,41,"styles"],[484,49,460,47],[484,50,460,48,"containerOnBack"],[484,65,460,63],[484,68,460,66,"styles"],[484,74,460,72],[484,75,460,73,"containerInFront"],[484,91,460,89],[484,93,460,91,"containerStyles"],[484,108,460,106],[484,110,460,108,"contentContainerStyle"],[484,131,460,129],[484,132,460,130],[485,10,461,8,"importantForAccessibility"],[485,35,461,33],[485,37,461,35],[485,41,461,39],[485,42,461,40,"drawerShown"],[485,53,461,51],[485,56,461,54],[485,77,461,75],[485,80,461,78],[485,85,461,83],[486,10,462,8,"children"],[486,18,462,16],[486,20,462,18],[486,21,462,19],[486,28,462,26],[486,32,462,30],[486,33,462,31,"props"],[486,38,462,36],[486,39,462,37,"children"],[486,47,462,45],[486,52,462,50],[486,62,462,60],[486,65,462,63],[486,69,462,67],[486,70,462,68,"props"],[486,75,462,73],[486,76,462,74,"children"],[486,84,462,82],[486,85,462,83],[486,89,462,87],[486,90,462,88,"openValue"],[486,99,462,97],[486,100,462,98],[486,103,462,101],[486,107,462,105],[486,108,462,106,"props"],[486,113,462,111],[486,114,462,112,"children"],[486,122,462,120],[486,124,462,122],[486,128,462,126],[486,129,462,127,"renderOverlay"],[486,142,462,140],[486,143,462,141],[486,144,462,142],[487,8,463,6],[487,9,463,7],[487,10,463,8],[487,12,463,10],[487,25,463,23],[487,26,463,24],[487,27,463,25],[487,29,463,27,"_jsxRuntime"],[487,40,463,38],[487,41,463,39,"jsx"],[487,44,463,42],[487,46,463,44,"_reactNative"],[487,58,463,56],[487,59,463,57,"Animated"],[487,67,463,65],[487,68,463,66,"View"],[487,72,463,70],[487,74,463,72],[488,10,464,8,"pointerEvents"],[488,23,464,21],[488,25,464,23],[488,35,464,33],[489,10,465,8,"ref"],[489,13,465,11],[489,15,465,13],[489,19,465,17],[489,20,465,18,"accessibilityIsModalView"],[489,44,465,42],[490,10,466,8,"accessibilityViewIsModal"],[490,34,466,32],[490,36,466,34],[490,40,466,38],[490,41,466,39,"drawerShown"],[490,52,466,50],[491,10,467,8,"style"],[491,15,467,13],[491,17,467,15],[491,18,467,16,"styles"],[491,24,467,22],[491,25,467,23,"drawerContainer"],[491,40,467,38],[491,42,467,40,"drawerStyles"],[491,54,467,52],[491,56,467,54,"drawerContainerStyle"],[491,76,467,74],[491,77,467,75],[492,10,468,8,"children"],[492,18,468,16],[492,20,468,18],[492,33,468,31],[492,34,468,32],[492,35,468,33],[492,37,468,35,"_jsxRuntime"],[492,48,468,46],[492,49,468,47,"jsx"],[492,52,468,50],[492,54,468,52,"_reactNative"],[492,66,468,64],[492,67,468,65,"View"],[492,71,468,69],[492,73,468,71],[493,12,469,10,"style"],[493,17,469,15],[493,19,469,17,"dynamicDrawerStyles"],[493,38,469,36],[494,12,470,10,"children"],[494,20,470,18],[494,22,470,20],[494,26,470,24],[494,27,470,25,"props"],[494,32,470,30],[494,33,470,31,"renderNavigationView"],[494,53,470,51],[494,54,470,52],[494,58,470,56],[494,59,470,57,"openValue"],[494,68,470,66],[495,10,471,8],[495,11,471,9],[496,8,472,6],[496,9,472,7],[496,10,472,8],[497,6,473,4],[497,7,473,5],[497,8,473,6],[498,4,474,2],[498,5,474,3],[499,4,475,2,"setPanGestureRef"],[499,20,475,18],[499,23,475,21,"ref"],[499,26,475,24],[499,30,475,28],[500,6,476,4],[501,6,477,4],[502,6,478,4],[502,10,478,8],[502,11,478,9,"panGestureHandler"],[502,28,478,26],[502,29,478,27,"current"],[502,36,478,34],[502,39,478,37,"ref"],[502,42,478,40],[503,6,479,4],[503,10,479,8],[503,11,479,9,"props"],[503,16,479,14],[503,17,479,15,"onGestureRef"],[503,29,479,27],[503,32,479,30,"ref"],[503,35,479,33],[503,36,479,34],[504,4,480,2],[504,5,480,3],[505,4,481,2,"render"],[505,10,481,8,"render"],[505,11,481,8],[505,13,481,11],[506,6,482,4],[506,12,482,10],[507,8,483,6,"drawerPosition"],[507,22,483,20],[508,8,484,6,"drawerLockMode"],[508,22,484,20],[509,8,485,6,"edgeWidth"],[509,17,485,15],[510,8,486,6,"minSwipeDistance"],[511,6,487,4],[511,7,487,5],[511,10,487,8],[511,14,487,12],[511,15,487,13,"props"],[511,20,487,18],[512,6,488,4],[512,12,488,10,"fromLeft"],[512,20,488,18],[512,23,488,21,"drawerPosition"],[512,37,488,35],[512,42,488,40],[512,48,488,46],[514,6,490,4],[515,6,491,4],[516,6,492,4],[517,6,493,4],[517,12,493,10,"gestureOrientation"],[517,30,493,28],[517,33,493,31],[517,34,493,32,"fromLeft"],[517,42,493,40],[517,45,493,43],[517,46,493,44],[517,49,493,47],[517,50,493,48],[517,51,493,49],[517,56,493,54],[517,60,493,58],[517,61,493,59,"drawerShown"],[517,72,493,70],[517,75,493,73],[517,76,493,74],[517,77,493,75],[517,80,493,78],[517,81,493,79],[517,82,493,80],[519,6,495,4],[520,6,496,4],[521,6,497,4],[522,6,498,4],[522,12,498,10,"hitSlop"],[522,19,498,17],[522,22,498,20,"fromLeft"],[522,30,498,28],[522,33,498,31],[523,8,499,6,"left"],[523,12,499,10],[523,14,499,12],[523,15,499,13],[524,8,500,6,"width"],[524,13,500,11],[524,15,500,13],[524,19,500,17],[524,20,500,18,"drawerShown"],[524,31,500,29],[524,34,500,32,"undefined"],[524,43,500,41],[524,46,500,44,"edgeWidth"],[525,6,501,4],[525,7,501,5],[525,10,501,8],[526,8,502,6,"right"],[526,13,502,11],[526,15,502,13],[526,16,502,14],[527,8,503,6,"width"],[527,13,503,11],[527,15,503,13],[527,19,503,17],[527,20,503,18,"drawerShown"],[527,31,503,29],[527,34,503,32,"undefined"],[527,43,503,41],[527,46,503,44,"edgeWidth"],[528,6,504,4],[528,7,504,5],[529,6,505,4],[529,13,505,11],[529,26,505,24],[529,27,505,25],[529,28,505,26],[529,30,505,28,"_jsxRuntime"],[529,41,505,39],[529,42,505,40,"jsx"],[529,45,505,43],[529,47,505,45,"_PanGestureHandler"],[529,65,505,63],[529,66,505,64,"PanGestureHandler"],[530,6,506,4],[531,6,506,4],[531,8,507,6],[532,8,508,6,"userSelect"],[532,18,508,16],[532,20,508,18],[532,24,508,22],[532,25,508,23,"props"],[532,30,508,28],[532,31,508,29,"userSelect"],[532,41,508,39],[533,8,509,6,"activeCursor"],[533,20,509,18],[533,22,509,20],[533,26,509,24],[533,27,509,25,"props"],[533,32,509,30],[533,33,509,31,"activeCursor"],[533,45,509,43],[534,8,510,6,"mouseButton"],[534,19,510,17],[534,21,510,19],[534,25,510,23],[534,26,510,24,"props"],[534,31,510,29],[534,32,510,30,"mouseButton"],[534,43,510,41],[535,8,511,6,"enableContextMenu"],[535,25,511,23],[535,27,511,25],[535,31,511,29],[535,32,511,30,"props"],[535,37,511,35],[535,38,511,36,"enableContextMenu"],[535,55,511,53],[536,8,512,6,"ref"],[536,11,512,9],[536,13,512,11],[536,17,512,15],[536,18,512,16,"setPanGestureRef"],[536,34,512,32],[537,8,513,6,"hitSlop"],[537,15,513,13],[537,17,513,15,"hitSlop"],[537,24,513,22],[538,8,514,6,"activeOffsetX"],[538,21,514,19],[538,23,514,21,"gestureOrientation"],[538,41,514,39],[538,44,514,42,"minSwipeDistance"],[538,60,514,58],[539,8,515,6,"failOffsetY"],[539,19,515,17],[539,21,515,19],[539,22,515,20],[539,23,515,21],[539,25,515,23],[539,27,515,25],[539,29,515,27],[539,30,515,28],[540,8,516,6,"onGestureEvent"],[540,22,516,20],[540,24,516,22],[540,28,516,26],[540,29,516,27,"onGestureEvent"],[540,43,516,41],[541,8,517,6,"onHandlerStateChange"],[541,28,517,26],[541,30,517,28],[541,34,517,32],[541,35,517,33,"openingHandlerStateChange"],[541,60,517,58],[542,8,518,6,"enableTrackpadTwoFingerGesture"],[542,38,518,36],[542,40,518,38],[542,44,518,42],[542,45,518,43,"props"],[542,50,518,48],[542,51,518,49,"enableTrackpadTwoFingerGesture"],[542,81,518,79],[543,8,519,6,"enabled"],[543,15,519,13],[543,17,519,15,"drawerLockMode"],[543,31,519,29],[543,36,519,34],[543,51,519,49],[543,55,519,53,"drawerLockMode"],[543,69,519,67],[543,74,519,72],[543,87,519,85],[544,8,520,6,"children"],[544,16,520,14],[544,18,520,16],[544,22,520,20],[544,23,520,21,"renderDrawer"],[544,35,520,33],[544,36,520,34],[545,6,521,4],[545,7,521,5],[545,8,521,6],[546,4,522,2],[547,2,523,0],[548,2,524,0,"exports"],[548,9,524,7],[548,10,524,8,"default"],[548,17,524,15],[548,20,524,18,"DrawerLayout"],[548,32,524,30],[549,2,525,0],[549,8,525,6,"styles"],[549,14,525,12],[549,17,525,15,"_reactNative"],[549,29,525,27],[549,30,525,28,"StyleSheet"],[549,40,525,38],[549,41,525,39,"create"],[549,47,525,45],[549,48,525,46],[550,4,526,2,"drawerContainer"],[550,19,526,17],[550,21,526,19],[551,6,527,4],[551,9,527,7,"_reactNative"],[551,21,527,19],[551,22,527,20,"StyleSheet"],[551,32,527,30],[551,33,527,31,"absoluteFillObject"],[551,51,527,49],[552,6,528,4,"zIndex"],[552,12,528,10],[552,14,528,12],[552,18,528,16],[553,6,529,4,"flexDirection"],[553,19,529,17],[553,21,529,19],[554,4,530,2],[554,5,530,3],[555,4,531,2,"containerInFront"],[555,20,531,18],[555,22,531,20],[556,6,532,4],[556,9,532,7,"_reactNative"],[556,21,532,19],[556,22,532,20,"StyleSheet"],[556,32,532,30],[556,33,532,31,"absoluteFillObject"],[556,51,532,49],[557,6,533,4,"zIndex"],[557,12,533,10],[557,14,533,12],[558,4,534,2],[558,5,534,3],[559,4,535,2,"containerOnBack"],[559,19,535,17],[559,21,535,19],[560,6,536,4],[560,9,536,7,"_reactNative"],[560,21,536,19],[560,22,536,20,"StyleSheet"],[560,32,536,30],[560,33,536,31,"absoluteFillObject"],[561,4,537,2],[561,5,537,3],[562,4,538,2,"main"],[562,8,538,6],[562,10,538,8],[563,6,539,4,"flex"],[563,10,539,8],[563,12,539,10],[563,13,539,11],[564,6,540,4,"zIndex"],[564,12,540,10],[564,14,540,12],[564,15,540,13],[565,6,541,4,"overflow"],[565,14,541,12],[565,16,541,14],[566,4,542,2],[566,5,542,3],[567,4,543,2,"overlay"],[567,11,543,9],[567,13,543,11],[568,6,544,4],[568,9,544,7,"_reactNative"],[568,21,544,19],[568,22,544,20,"StyleSheet"],[568,32,544,30],[568,33,544,31,"absoluteFillObject"],[568,51,544,49],[569,6,545,4,"zIndex"],[569,12,545,10],[569,14,545,12],[570,4,546,2],[571,2,547,0],[571,3,547,1],[571,4,547,2],[572,0,547,3],[572,3]],"functionMap":{"names":["<global>","_interopRequireDefault","_interopRequireWildcard","DrawerLayout","constructor","shouldComponentUpdate","updateAnimatedEvent","gestureOptions.listener","handleContainerLayout","emitStateChanged","openingHandlerStateChange","onTapHandlerStateChange","handleRelease","updateShowing","animateDrawer","_reactNative.Animated.spring.start$argument_0","openDrawer","closeDrawer","renderOverlay","renderDrawer","setPanGestureRef","render"],"mappings":"AAA;ACc,qFD;AEC,smBF;AGqD;ECY;GDc;EEC;GFK;wBGS;gCCwE;ODI;GHQ;0BKC;GLM;qBMC;GNE;8BOC;GPmB;4BQC;GRM;kBSC;GToC;kBUC;GViC;kBWC;aCiC;KDqB;GXC;eaG;GbQ;gBcC;GdO;kBeC;GfqB;iBgBC;GhB0E;qBiBC;GjBK;EkBC;GlByC;CHC"},"hasCjsExports":true},"type":"js/module"}]}