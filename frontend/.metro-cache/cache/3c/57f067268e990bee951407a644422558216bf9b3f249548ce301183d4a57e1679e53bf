{"dependencies":[{"name":"../../../utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":13,"index":140},"end":{"line":7,"column":38,"index":165}}],"key":"x1Vm2Nv1VpiRcEgyfVIlYEhsRJs=","exportNames":["*"],"imports":1}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":28,"index":195},"end":{"line":8,"column":68,"index":235}}],"key":"ea0WLkMaU0ZnRLlpV9Qt0HLqCKs=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":13,"index":250},"end":{"line":9,"column":29,"index":266}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":45,"index":313},"end":{"line":10,"column":79,"index":347}}],"key":"a+XNRBzAwRb1cOdipqWWj9NE1pA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[0], \"../../../utils\");\n  var _getShadowNodeFromRef = require(_dependencyMap[1], \"../../../getShadowNodeFromRef\");\n  var _react = require(_dependencyMap[2], \"react\");\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[3], \"../../../findNodeHandle\"));\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    const refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, _findNodeHandle.default)(state.viewRef);\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n      if (__DEV__ && (0, _utils.isFabric)() && global.isViewFlatteningDisabled) {\n        const node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":46,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"useViewRefHandler"],[7,27,6,25],[7,30,6,28,"useViewRefHandler"],[7,47,6,45],[8,2,7,0],[8,6,7,4,"_utils"],[8,12,7,10],[8,15,7,13,"require"],[8,22,7,20],[8,23,7,20,"_dependencyMap"],[8,37,7,20],[8,58,7,37],[8,59,7,38],[9,2,8,0],[9,6,8,4,"_getShadowNodeFromRef"],[9,27,8,25],[9,30,8,28,"require"],[9,37,8,35],[9,38,8,35,"_dependencyMap"],[9,52,8,35],[9,88,8,67],[9,89,8,68],[10,2,9,0],[10,6,9,4,"_react"],[10,12,9,10],[10,15,9,13,"require"],[10,22,9,20],[10,23,9,20,"_dependencyMap"],[10,37,9,20],[10,49,9,28],[10,50,9,29],[11,2,10,0],[11,6,10,4,"_findNodeHandle"],[11,21,10,19],[11,24,10,22,"_interopRequireDefault"],[11,46,10,44],[11,47,10,45,"require"],[11,54,10,52],[11,55,10,52,"_dependencyMap"],[11,69,10,52],[11,99,10,78],[11,100,10,79],[11,101,10,80],[12,2,11,0],[12,11,11,9,"_interopRequireDefault"],[12,33,11,31,"_interopRequireDefault"],[12,34,11,32,"e"],[12,35,11,33],[12,37,11,35],[13,4,11,37],[13,11,11,44,"e"],[13,12,11,45],[13,16,11,49,"e"],[13,17,11,50],[13,18,11,51,"__esModule"],[13,28,11,61],[13,31,11,64,"e"],[13,32,11,65],[13,35,11,68],[14,6,11,70,"default"],[14,13,11,77],[14,15,11,79,"e"],[15,4,11,81],[15,5,11,82],[16,2,11,84],[17,2,12,0],[18,2,13,0],[19,2,14,0],[20,2,15,0],[20,11,15,9,"useViewRefHandler"],[20,28,15,26,"useViewRefHandler"],[20,29,15,27,"state"],[20,34,15,32],[20,36,15,34,"updateAttachedGestures"],[20,58,15,56],[20,60,15,58],[21,4,16,2],[21,10,16,8,"refHandler"],[21,20,16,18],[21,23,16,21],[21,24,16,22],[21,25,16,23],[21,27,16,25,"_react"],[21,33,16,31],[21,34,16,32,"useCallback"],[21,45,16,43],[21,47,16,45,"ref"],[21,50,16,48],[21,54,16,52],[22,6,17,4],[22,10,17,8,"ref"],[22,13,17,11],[22,18,17,16],[22,22,17,20],[22,24,17,22],[23,8,18,6],[24,6,19,4],[25,6,20,4,"state"],[25,11,20,9],[25,12,20,10,"viewRef"],[25,19,20,17],[25,22,20,20,"ref"],[25,25,20,23],[27,6,22,4],[28,6,23,4],[28,10,23,8,"state"],[28,15,23,13],[28,16,23,14,"previousViewTag"],[28,31,23,29],[28,36,23,34],[28,37,23,35],[28,38,23,36],[28,40,23,38],[29,8,24,6,"state"],[29,13,24,11],[29,14,24,12,"previousViewTag"],[29,29,24,27],[29,32,24,30],[29,33,24,31],[29,34,24,32],[29,36,24,34,"_findNodeHandle"],[29,51,24,49],[29,52,24,50,"default"],[29,59,24,57],[29,61,24,59,"state"],[29,66,24,64],[29,67,24,65,"viewRef"],[29,74,24,72],[29,75,24,73],[30,6,25,4],[32,6,27,4],[33,6,28,4],[34,6,29,4],[34,10,29,8],[34,11,29,9,"state"],[34,16,29,14],[34,17,29,15,"firstRender"],[34,28,29,26],[34,30,29,28],[35,8,30,6,"updateAttachedGestures"],[35,30,30,28],[35,31,30,29],[35,35,30,33],[35,36,30,34],[36,6,31,4],[37,6,32,4],[37,10,32,8,"__DEV__"],[37,17,32,15],[37,21,32,19],[37,22,32,20],[37,23,32,21],[37,25,32,23,"_utils"],[37,31,32,29],[37,32,32,30,"isFabric"],[37,40,32,38],[37,42,32,40],[37,43,32,41],[37,47,32,45,"global"],[37,53,32,51],[37,54,32,52,"isViewFlatteningDisabled"],[37,78,32,76],[37,80,32,78],[38,8,33,6],[38,14,33,12,"node"],[38,18,33,16],[38,21,33,19],[38,22,33,20],[38,23,33,21],[38,25,33,23,"_getShadowNodeFromRef"],[38,46,33,44],[38,47,33,45,"getShadowNodeFromRef"],[38,67,33,65],[38,69,33,67,"ref"],[38,72,33,70],[38,73,33,71],[39,8,34,6],[39,12,34,10,"global"],[39,18,34,16],[39,19,34,17,"isViewFlatteningDisabled"],[39,43,34,41],[39,44,34,42,"node"],[39,48,34,46],[39,49,34,47],[39,54,34,52],[39,59,34,57],[39,61,34,59],[40,10,35,8,"console"],[40,17,35,15],[40,18,35,16,"error"],[40,23,35,21],[40,24,35,22],[40,25,35,23],[40,26,35,24],[40,28,35,26,"_utils"],[40,34,35,32],[40,35,35,33,"tagMessage"],[40,45,35,43],[40,47,35,45],[40,115,35,113],[40,118,35,116],[40,216,35,214],[40,217,35,215],[40,218,35,216],[41,8,36,6],[42,6,37,4],[43,4,38,2],[43,5,38,3],[43,7,38,5],[43,8,38,6,"state"],[43,13,38,11],[43,15,38,13,"updateAttachedGestures"],[43,37,38,35],[43,38,38,36],[43,39,38,37],[44,4,39,2],[44,11,39,9,"refHandler"],[44,21,39,19],[45,2,40,0],[46,0,40,1],[46,3]],"functionMap":{"names":["<global>","_interopRequireDefault","useViewRefHandler","<anonymous>"],"mappings":"AAA;ACU,qFD;AEI;6CCC;GDsB;CFE"},"hasCjsExports":true},"type":"js/module"}]}