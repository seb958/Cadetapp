{"dependencies":[{"name":"../../../utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":13,"index":141},"end":{"line":8,"column":38,"index":166}}],"key":"x1Vm2Nv1VpiRcEgyfVIlYEhsRJs=","exportNames":["*"],"imports":1}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":28,"index":197},"end":{"line":10,"column":68,"index":237}}],"key":"ea0WLkMaU0ZnRLlpV9Qt0HLqCKs=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":13,"index":253},"end":{"line":12,"column":29,"index":269}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"],"imports":1}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":45,"index":317},"end":{"line":14,"column":79,"index":351}}],"key":"a+XNRBzAwRb1cOdipqWWj9NE1pA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[0], \"../../../utils\");\n  var _getShadowNodeFromRef = require(_dependencyMap[1], \"../../../getShadowNodeFromRef\");\n  var _react = require(_dependencyMap[2], \"react\");\n  var _findNodeHandle = _interopRequireDefault(require(_dependencyMap[3], \"../../../findNodeHandle\"));\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    const refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref; // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, _findNodeHandle.default)(state.viewRef);\n      } // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n      if (__DEV__ && (0, _utils.isFabric)() && global.isViewFlatteningDisabled) {\n        const node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":45,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"useViewRefHandler"],[7,27,6,25],[7,30,6,28,"useViewRefHandler"],[7,47,6,45],[8,2,8,0],[8,6,8,4,"_utils"],[8,12,8,10],[8,15,8,13,"require"],[8,22,8,20],[8,23,8,20,"_dependencyMap"],[8,37,8,20],[8,58,8,37],[8,59,8,38],[9,2,10,0],[9,6,10,4,"_getShadowNodeFromRef"],[9,27,10,25],[9,30,10,28,"require"],[9,37,10,35],[9,38,10,35,"_dependencyMap"],[9,52,10,35],[9,88,10,67],[9,89,10,68],[10,2,12,0],[10,6,12,4,"_react"],[10,12,12,10],[10,15,12,13,"require"],[10,22,12,20],[10,23,12,20,"_dependencyMap"],[10,37,12,20],[10,49,12,28],[10,50,12,29],[11,2,14,0],[11,6,14,4,"_findNodeHandle"],[11,21,14,19],[11,24,14,22,"_interopRequireDefault"],[11,46,14,44],[11,47,14,45,"require"],[11,54,14,52],[11,55,14,52,"_dependencyMap"],[11,69,14,52],[11,99,14,78],[11,100,14,79],[11,101,14,80],[12,2,16,0],[12,11,16,9,"_interopRequireDefault"],[12,33,16,31,"_interopRequireDefault"],[12,34,16,32,"obj"],[12,37,16,35],[12,39,16,37],[13,4,16,39],[13,11,16,46,"obj"],[13,14,16,49],[13,18,16,53,"obj"],[13,21,16,56],[13,22,16,57,"__esModule"],[13,32,16,67],[13,35,16,70,"obj"],[13,38,16,73],[13,41,16,76],[14,6,16,78,"default"],[14,13,16,85],[14,15,16,87,"obj"],[15,4,16,91],[15,5,16,92],[16,2,16,94],[18,2,18,0],[19,2,19,0],[20,2,20,0],[21,2,21,0],[21,11,21,9,"useViewRefHandler"],[21,28,21,26,"useViewRefHandler"],[21,29,21,27,"state"],[21,34,21,32],[21,36,21,34,"updateAttachedGestures"],[21,58,21,56],[21,60,21,58],[22,4,22,2],[22,10,22,8,"refHandler"],[22,20,22,18],[22,23,22,21],[22,24,22,22],[22,25,22,23],[22,27,22,25,"_react"],[22,33,22,31],[22,34,22,32,"useCallback"],[22,45,22,43],[22,47,22,45,"ref"],[22,50,22,48],[22,54,22,52],[23,6,23,4],[23,10,23,8,"ref"],[23,13,23,11],[23,18,23,16],[23,22,23,20],[23,24,23,22],[24,8,24,6],[25,6,25,4],[26,6,27,4,"state"],[26,11,27,9],[26,12,27,10,"viewRef"],[26,19,27,17],[26,22,27,20,"ref"],[26,25,27,23],[26,26,27,24],[26,27,27,25],[28,6,29,4],[28,10,29,8,"state"],[28,15,29,13],[28,16,29,14,"previousViewTag"],[28,31,29,29],[28,36,29,34],[28,37,29,35],[28,38,29,36],[28,40,29,38],[29,8,30,6,"state"],[29,13,30,11],[29,14,30,12,"previousViewTag"],[29,29,30,27],[29,32,30,30],[29,33,30,31],[29,34,30,32],[29,36,30,34,"_findNodeHandle"],[29,51,30,49],[29,52,30,50,"default"],[29,59,30,57],[29,61,30,59,"state"],[29,66,30,64],[29,67,30,65,"viewRef"],[29,74,30,72],[29,75,30,73],[30,6,31,4],[30,7,31,5],[30,8,31,6],[31,6,32,4],[33,6,35,4],[33,10,35,8],[33,11,35,9,"state"],[33,16,35,14],[33,17,35,15,"firstRender"],[33,28,35,26],[33,30,35,28],[34,8,36,6,"updateAttachedGestures"],[34,30,36,28],[34,31,36,29],[34,35,36,33],[34,36,36,34],[35,6,37,4],[36,6,39,4],[36,10,39,8,"__DEV__"],[36,17,39,15],[36,21,39,19],[36,22,39,20],[36,23,39,21],[36,25,39,23,"_utils"],[36,31,39,29],[36,32,39,30,"isFabric"],[36,40,39,38],[36,42,39,40],[36,43,39,41],[36,47,39,45,"global"],[36,53,39,51],[36,54,39,52,"isViewFlatteningDisabled"],[36,78,39,76],[36,80,39,78],[37,8,40,6],[37,14,40,12,"node"],[37,18,40,16],[37,21,40,19],[37,22,40,20],[37,23,40,21],[37,25,40,23,"_getShadowNodeFromRef"],[37,46,40,44],[37,47,40,45,"getShadowNodeFromRef"],[37,67,40,65],[37,69,40,67,"ref"],[37,72,40,70],[37,73,40,71],[38,8,42,6],[38,12,42,10,"global"],[38,18,42,16],[38,19,42,17,"isViewFlatteningDisabled"],[38,43,42,41],[38,44,42,42,"node"],[38,48,42,46],[38,49,42,47],[38,54,42,52],[38,59,42,57],[38,61,42,59],[39,10,43,8,"console"],[39,17,43,15],[39,18,43,16,"error"],[39,23,43,21],[39,24,43,22],[39,25,43,23],[39,26,43,24],[39,28,43,26,"_utils"],[39,34,43,32],[39,35,43,33,"tagMessage"],[39,45,43,43],[39,47,43,45],[39,115,43,113],[39,118,43,116],[39,216,43,214],[39,217,43,215],[39,218,43,216],[40,8,44,6],[41,6,45,4],[42,4,46,2],[42,5,46,3],[42,7,46,5],[42,8,46,6,"state"],[42,13,46,11],[42,15,46,13,"updateAttachedGestures"],[42,37,46,35],[42,38,46,36],[42,39,46,37],[43,4,47,2],[43,11,47,9,"refHandler"],[43,21,47,19],[44,2,48,0],[45,0,48,1],[45,3]],"functionMap":{"names":["<global>","_interopRequireDefault","useViewRefHandler","<anonymous>"],"mappings":"AAA;ACe,+FD;AEK;6CCC;GDwB;CFE"},"hasCjsExports":true},"type":"js/module"}]}