{"dependencies":[{"name":"../getNextHandlerTag","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":57,"index":72}}],"key":"xPiMMdBr7viMwno5RpgPsKrTYT4=","exportNames":["*"],"imports":1}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":73},"end":{"line":4,"column":55,"index":128}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"CALLBACK_TYPE\", {\n    enumerable: true,\n    get: function () {\n      return CALLBACK_TYPE;\n    }\n  });\n  Object.defineProperty(exports, \"Gesture\", {\n    enumerable: true,\n    get: function () {\n      return Gesture;\n    }\n  });\n  Object.defineProperty(exports, \"BaseGesture\", {\n    enumerable: true,\n    get: function () {\n      return BaseGesture;\n    }\n  });\n  Object.defineProperty(exports, \"ContinousBaseGesture\", {\n    enumerable: true,\n    get: function () {\n      return ContinousBaseGesture;\n    }\n  });\n  var _getNextHandlerTag = require(_dependencyMap[0], \"../getNextHandlerTag\");\n  var _utils = require(_dependencyMap[1], \"../../utils\");\n  // Allow adding a ref to a gesture handler\n\n  const CALLBACK_TYPE = {\n    UNDEFINED: 0,\n    BEGAN: 1,\n    START: 2,\n    UPDATE: 3,\n    CHANGE: 4,\n    END: 5,\n    FINALIZE: 6,\n    TOUCHES_DOWN: 7,\n    TOUCHES_MOVE: 8,\n    TOUCHES_UP: 9,\n    TOUCHES_CANCELLED: 10\n  };\n\n  // Allow using CALLBACK_TYPE as object and type\n  // eslint-disable-next-line @typescript-eslint/no-redeclare\n\n  class Gesture {}\n  let nextGestureId = 0;\n  class BaseGesture extends Gesture {\n    gestureId = -1;\n    handlerTag = -1;\n    handlerName = '';\n    config = {};\n    handlers = {\n      gestureId: -1,\n      handlerTag: -1,\n      isWorklet: []\n    };\n    constructor() {\n      super();\n\n      // Used to check whether the gesture config has been updated when wrapping it\n      // with `useMemo`. Since every config will have a unique id, when the dependencies\n      // don't change, the config won't be recreated and the id will stay the same.\n      // If the id is different, it means that the config has changed and the gesture\n      // needs to be updated.\n      this.gestureId = nextGestureId++;\n      this.handlers.gestureId = this.gestureId;\n    }\n    addDependency(key, gesture) {\n      const value = this.config[key];\n      this.config[key] = value ? Array().concat(value, gesture) : [gesture];\n    }\n\n    /**\n     * Sets a `ref` to the gesture object, allowing for interoperability with the old API.\n     * @param ref\n     */\n    withRef(ref) {\n      this.config.ref = ref;\n      return this;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    isWorklet(callback) {\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      return callback.__workletHash !== undefined;\n    }\n\n    /**\n     * Set the callback that is being called when given gesture handler starts receiving touches.\n     * At the moment of this callback the handler is in `BEGAN` state and we don't know yet if it will recognize the gesture at all.\n     * @param callback\n     */\n    onBegin(callback) {\n      this.handlers.onBegin = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the gesture is recognized by the handler and it transitions to the `ACTIVE` state.\n     * @param callback\n     */\n    onStart(callback) {\n      this.handlers.onStart = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the gesture that was recognized by the handler finishes and handler reaches `END` state.\n     * It will be called only if the handler was previously in the `ACTIVE` state.\n     * @param callback\n     */\n    onEnd(callback) {\n      this.handlers.onEnd = callback;\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the handler finalizes handling gesture - the gesture was recognized and has finished or it failed to recognize.\n     * @param callback\n     */\n    onFinalize(callback) {\n      this.handlers.onFinalize = callback;\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesDown` callback which is called every time a pointer is placed on the screen.\n     * @param callback\n     */\n    onTouchesDown(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesDown = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesMove` callback which is called every time a pointer is moved on the screen.\n     * @param callback\n     */\n    onTouchesMove(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesMove = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesUp` callback which is called every time a pointer is lifted from the screen.\n     * @param callback\n     */\n    onTouchesUp(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesUp = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesCancelled` callback which is called every time a pointer stops being tracked, for example when the gesture finishes.\n     * @param callback\n     */\n    onTouchesCancelled(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesCancelled = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Indicates whether the given handler should be analyzing stream of touch events or not.\n     * @param enabled\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#enabledvalue-boolean\n     */\n    enabled(enabled) {\n      this.config.enabled = enabled;\n      return this;\n    }\n\n    /**\n     * When true the handler will cancel or fail recognition (depending on its current state) whenever the finger leaves the area of the connected view.\n     * @param value\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#shouldcancelwhenoutsidevalue-boolean\n     */\n    shouldCancelWhenOutside(value) {\n      this.config.shouldCancelWhenOutside = value;\n      return this;\n    }\n\n    /**\n     * This parameter enables control over what part of the connected view area can be used to begin recognizing the gesture.\n     * When a negative number is provided the bounds of the view will reduce the area by the given number of points in each of the sides evenly.\n     * @param hitSlop\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#hitslopsettings\n     */\n    hitSlop(hitSlop) {\n      this.config.hitSlop = hitSlop;\n      return this;\n    }\n\n    /**\n     * #### Web only\n     * This parameter allows to specify which `cursor` should be used when gesture activates.\n     * Supports all CSS cursor values (e.g. `\"grab\"`, `\"zoom-in\"`). Default value is set to `\"auto\"`.\n     * @param activeCursor\n     */\n    activeCursor(activeCursor) {\n      this.config.activeCursor = activeCursor;\n      return this;\n    }\n\n    /**\n     * #### Web & Android only\n     * Allows users to choose which mouse button should handler respond to.\n     * Arguments can be combined using `|` operator, e.g. `mouseButton(MouseButton.LEFT | MouseButton.RIGHT)`.\n     * Default value is set to `MouseButton.LEFT`.\n     * @param mouseButton\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#mousebuttonvalue-mousebutton-web--android-only\n     */\n    mouseButton(mouseButton) {\n      this.config.mouseButton = mouseButton;\n      return this;\n    }\n\n    /**\n     * When `react-native-reanimated` is installed, the callbacks passed to the gestures are automatically workletized and run on the UI thread when called.\n     * This option allows for changing this behavior: when `true`, all the callbacks will be run on the JS thread instead of the UI thread, regardless of whether they are worklets or not.\n     * Defaults to `false`.\n     * @param runOnJS\n     */\n    runOnJS(runOnJS) {\n      this.config.runOnJS = runOnJS;\n      return this;\n    }\n\n    /**\n     * Allows gestures across different components to be recognized simultaneously.\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneouswithexternalgesture\n     */\n    simultaneousWithExternalGesture(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('simultaneousWith', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Allows to delay activation of the handler until all handlers passed as arguments to this method fail (or don't begin at all).\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#requireexternalgesturetofail\n     */\n    requireExternalGestureToFail(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('requireToFail', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Works similarily to `requireExternalGestureToFail` but the direction of the relation is reversed - instead of being one-to-many relation, it's many-to-one.\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#blocksexternalgesture\n     */\n    blocksExternalGesture(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('blocksHandlers', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Sets a `testID` property for gesture object, allowing for querying for it in tests.\n     * @param id\n     */\n    withTestId(id) {\n      this.config.testId = id;\n      return this;\n    }\n\n    /**\n     * #### iOS only\n     * When `true`, the handler will cancel touches for native UI components (`UIButton`, `UISwitch`, etc) it's attached to when it becomes `ACTIVE`.\n     * Default value is `true`.\n     * @param value\n     */\n    cancelsTouchesInView(value) {\n      this.config.cancelsTouchesInView = value;\n      return this;\n    }\n    initialize() {\n      this.handlerTag = (0, _getNextHandlerTag.getNextHandlerTag)();\n      this.handlers = Object.assign({}, this.handlers, {\n        handlerTag: this.handlerTag\n      });\n      if (this.config.ref) {\n        this.config.ref.current = this;\n      }\n    }\n    toGestureArray() {\n      return [this];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    prepare() {}\n    get shouldUseReanimated() {\n      // Use Reanimated when runOnJS isn't set explicitly,\n      // all defined callbacks are worklets\n      // and remote debugging is disabled\n      return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !(0, _utils.isRemoteDebuggingEnabled)();\n    }\n  }\n  class ContinousBaseGesture extends BaseGesture {\n    /**\n     * Set the callback that is being called every time the gesture receives an update while it's active.\n     * @param callback\n     */\n    onUpdate(callback) {\n      this.handlers.onUpdate = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called every time the gesture receives an update while it's active.\n     * This callback will receive information about change in value in relation to the last received event.\n     * @param callback\n     */\n    onChange(callback) {\n      this.handlers.onChange = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * When `true` the handler will not activate by itself even if its activation criteria are met.\n     * Instead you can manipulate its state using state manager.\n     * @param manualActivation\n     */\n    manualActivation(manualActivation) {\n      this.config.manualActivation = manualActivation;\n      return this;\n    }\n  }\n});","lineCount":358,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,8,0,"Object"],[7,8,8,0],[7,9,8,0,"defineProperty"],[7,23,8,0],[7,24,8,0,"exports"],[7,31,8,0],[8,4,8,0,"enumerable"],[8,14,8,0],[9,4,8,0,"get"],[9,7,8,0],[9,18,8,0,"get"],[9,19,8,0],[10,6,8,0],[10,13,8,0,"CALLBACK_TYPE"],[10,26,8,0],[11,4,8,0],[12,2,8,0],[13,2,25,0,"Object"],[13,8,25,0],[13,9,25,0,"defineProperty"],[13,23,25,0],[13,24,25,0,"exports"],[13,31,25,0],[14,4,25,0,"enumerable"],[14,14,25,0],[15,4,25,0,"get"],[15,7,25,0],[15,18,25,0,"get"],[15,19,25,0],[16,6,25,0],[16,13,25,0,"Gesture"],[16,20,25,0],[17,4,25,0],[18,2,25,0],[19,2,27,0,"Object"],[19,8,27,0],[19,9,27,0,"defineProperty"],[19,23,27,0],[19,24,27,0,"exports"],[19,31,27,0],[20,4,27,0,"enumerable"],[20,14,27,0],[21,4,27,0,"get"],[21,7,27,0],[21,18,27,0,"get"],[21,19,27,0],[22,6,27,0],[22,13,27,0,"BaseGesture"],[22,24,27,0],[23,4,27,0],[24,2,27,0],[25,2,300,0,"Object"],[25,8,300,0],[25,9,300,0,"defineProperty"],[25,23,300,0],[25,24,300,0,"exports"],[25,31,300,0],[26,4,300,0,"enumerable"],[26,14,300,0],[27,4,300,0,"get"],[27,7,300,0],[27,18,300,0,"get"],[27,19,300,0],[28,6,300,0],[28,13,300,0,"ContinousBaseGesture"],[28,33,300,0],[29,4,300,0],[30,2,300,0],[31,2,3,0],[31,6,3,0,"_getNextHandlerTag"],[31,24,3,0],[31,27,3,0,"require"],[31,34,3,0],[31,35,3,0,"_dependencyMap"],[31,49,3,0],[32,2,4,0],[32,6,4,0,"_utils"],[32,12,4,0],[32,15,4,0,"require"],[32,22,4,0],[32,23,4,0,"_dependencyMap"],[32,37,4,0],[33,2,6,0],[35,2,8,7],[35,8,8,13,"CALLBACK_TYPE"],[35,21,8,26],[35,24,8,29],[36,4,9,2,"UNDEFINED"],[36,13,9,11],[36,15,9,13],[36,16,9,14],[37,4,10,2,"BEGAN"],[37,9,10,7],[37,11,10,9],[37,12,10,10],[38,4,11,2,"START"],[38,9,11,7],[38,11,11,9],[38,12,11,10],[39,4,12,2,"UPDATE"],[39,10,12,8],[39,12,12,10],[39,13,12,11],[40,4,13,2,"CHANGE"],[40,10,13,8],[40,12,13,10],[40,13,13,11],[41,4,14,2,"END"],[41,7,14,5],[41,9,14,7],[41,10,14,8],[42,4,15,2,"FINALIZE"],[42,12,15,10],[42,14,15,12],[42,15,15,13],[43,4,16,2,"TOUCHES_DOWN"],[43,16,16,14],[43,18,16,16],[43,19,16,17],[44,4,17,2,"TOUCHES_MOVE"],[44,16,17,14],[44,18,17,16],[44,19,17,17],[45,4,18,2,"TOUCHES_UP"],[45,14,18,12],[45,16,18,14],[45,17,18,15],[46,4,19,2,"TOUCHES_CANCELLED"],[46,21,19,19],[46,23,19,21],[47,2,20,0],[47,3,20,1],[49,2,22,0],[50,2,23,0],[52,2,25,7],[52,8,25,13,"Gesture"],[52,15,25,20],[52,16,25,21],[53,2,26,0],[53,6,26,4,"nextGestureId"],[53,19,26,17],[53,22,26,20],[53,23,26,21],[54,2,27,7],[54,8,27,13,"BaseGesture"],[54,19,27,24],[54,28,27,33,"Gesture"],[54,35,27,40],[54,36,27,41],[55,4,28,2,"gestureId"],[55,13,28,11],[55,16,28,14],[55,17,28,15],[55,18,28,16],[56,4,29,2,"handlerTag"],[56,14,29,12],[56,17,29,15],[56,18,29,16],[56,19,29,17],[57,4,30,2,"handlerName"],[57,15,30,13],[57,18,30,16],[57,20,30,18],[58,4,31,2,"config"],[58,10,31,8],[58,13,31,11],[58,14,31,12],[58,15,31,13],[59,4,32,2,"handlers"],[59,12,32,10],[59,15,32,13],[60,6,33,4,"gestureId"],[60,15,33,13],[60,17,33,15],[60,18,33,16],[60,19,33,17],[61,6,34,4,"handlerTag"],[61,16,34,14],[61,18,34,16],[61,19,34,17],[61,20,34,18],[62,6,35,4,"isWorklet"],[62,15,35,13],[62,17,35,15],[63,4,36,2],[63,5,36,3],[64,4,37,2,"constructor"],[64,15,37,13,"constructor"],[64,16,37,13],[64,18,37,16],[65,6,38,4],[65,11,38,9],[65,12,38,10],[65,13,38,11],[67,6,40,4],[68,6,41,4],[69,6,42,4],[70,6,43,4],[71,6,44,4],[72,6,45,4],[72,10,45,8],[72,11,45,9,"gestureId"],[72,20,45,18],[72,23,45,21,"nextGestureId"],[72,36,45,34],[72,38,45,36],[73,6,46,4],[73,10,46,8],[73,11,46,9,"handlers"],[73,19,46,17],[73,20,46,18,"gestureId"],[73,29,46,27],[73,32,46,30],[73,36,46,34],[73,37,46,35,"gestureId"],[73,46,46,44],[74,4,47,2],[75,4,48,2,"addDependency"],[75,17,48,15,"addDependency"],[75,18,48,16,"key"],[75,21,48,19],[75,23,48,21,"gesture"],[75,30,48,28],[75,32,48,30],[76,6,49,4],[76,12,49,10,"value"],[76,17,49,15],[76,20,49,18],[76,24,49,22],[76,25,49,23,"config"],[76,31,49,29],[76,32,49,30,"key"],[76,35,49,33],[76,36,49,34],[77,6,50,4],[77,10,50,8],[77,11,50,9,"config"],[77,17,50,15],[77,18,50,16,"key"],[77,21,50,19],[77,22,50,20],[77,25,50,23,"value"],[77,30,50,28],[77,33,50,31,"Array"],[77,38,50,36],[77,39,50,37],[77,40,50,38],[77,41,50,39,"concat"],[77,47,50,45],[77,48,50,46,"value"],[77,53,50,51],[77,55,50,53,"gesture"],[77,62,50,60],[77,63,50,61],[77,66,50,64],[77,67,50,65,"gesture"],[77,74,50,72],[77,75,50,73],[78,4,51,2],[80,4,53,2],[81,0,54,0],[82,0,55,0],[83,0,56,0],[84,4,57,2,"withRef"],[84,11,57,9,"withRef"],[84,12,57,10,"ref"],[84,15,57,13],[84,17,57,15],[85,6,58,4],[85,10,58,8],[85,11,58,9,"config"],[85,17,58,15],[85,18,58,16,"ref"],[85,21,58,19],[85,24,58,22,"ref"],[85,27,58,25],[86,6,59,4],[86,13,59,11],[86,17,59,15],[87,4,60,2],[89,4,62,2],[90,4,63,2,"isWorklet"],[90,13,63,11,"isWorklet"],[90,14,63,12,"callback"],[90,22,63,20],[90,24,63,22],[91,6,64,4],[92,6,65,4],[92,13,65,11,"callback"],[92,21,65,19],[92,22,65,20,"__workletHash"],[92,35,65,33],[92,40,65,38,"undefined"],[92,49,65,47],[93,4,66,2],[95,4,68,2],[96,0,69,0],[97,0,70,0],[98,0,71,0],[99,0,72,0],[100,4,73,2,"onBegin"],[100,11,73,9,"onBegin"],[100,12,73,10,"callback"],[100,20,73,18],[100,22,73,20],[101,6,74,4],[101,10,74,8],[101,11,74,9,"handlers"],[101,19,74,17],[101,20,74,18,"onBegin"],[101,27,74,25],[101,30,74,28,"callback"],[101,38,74,36],[102,6,75,4],[102,10,75,8],[102,11,75,9,"handlers"],[102,19,75,17],[102,20,75,18,"isWorklet"],[102,29,75,27],[102,30,75,28,"CALLBACK_TYPE"],[102,43,75,41],[102,44,75,42,"BEGAN"],[102,49,75,47],[102,50,75,48],[102,53,75,51],[102,57,75,55],[102,58,75,56,"isWorklet"],[102,67,75,65],[102,68,75,66,"callback"],[102,76,75,74],[102,77,75,75],[103,6,76,4],[103,13,76,11],[103,17,76,15],[104,4,77,2],[106,4,79,2],[107,0,80,0],[108,0,81,0],[109,0,82,0],[110,4,83,2,"onStart"],[110,11,83,9,"onStart"],[110,12,83,10,"callback"],[110,20,83,18],[110,22,83,20],[111,6,84,4],[111,10,84,8],[111,11,84,9,"handlers"],[111,19,84,17],[111,20,84,18,"onStart"],[111,27,84,25],[111,30,84,28,"callback"],[111,38,84,36],[112,6,85,4],[112,10,85,8],[112,11,85,9,"handlers"],[112,19,85,17],[112,20,85,18,"isWorklet"],[112,29,85,27],[112,30,85,28,"CALLBACK_TYPE"],[112,43,85,41],[112,44,85,42,"START"],[112,49,85,47],[112,50,85,48],[112,53,85,51],[112,57,85,55],[112,58,85,56,"isWorklet"],[112,67,85,65],[112,68,85,66,"callback"],[112,76,85,74],[112,77,85,75],[113,6,86,4],[113,13,86,11],[113,17,86,15],[114,4,87,2],[116,4,89,2],[117,0,90,0],[118,0,91,0],[119,0,92,0],[120,0,93,0],[121,4,94,2,"onEnd"],[121,9,94,7,"onEnd"],[121,10,94,8,"callback"],[121,18,94,16],[121,20,94,18],[122,6,95,4],[122,10,95,8],[122,11,95,9,"handlers"],[122,19,95,17],[122,20,95,18,"onEnd"],[122,25,95,23],[122,28,95,26,"callback"],[122,36,95,34],[123,6,96,4],[124,6,97,4],[124,10,97,8],[124,11,97,9,"handlers"],[124,19,97,17],[124,20,97,18,"isWorklet"],[124,29,97,27],[124,30,97,28,"CALLBACK_TYPE"],[124,43,97,41],[124,44,97,42,"END"],[124,47,97,45],[124,48,97,46],[124,51,97,49],[124,55,97,53],[124,56,97,54,"isWorklet"],[124,65,97,63],[124,66,97,64,"callback"],[124,74,97,72],[124,75,97,73],[125,6,98,4],[125,13,98,11],[125,17,98,15],[126,4,99,2],[128,4,101,2],[129,0,102,0],[130,0,103,0],[131,0,104,0],[132,4,105,2,"onFinalize"],[132,14,105,12,"onFinalize"],[132,15,105,13,"callback"],[132,23,105,21],[132,25,105,23],[133,6,106,4],[133,10,106,8],[133,11,106,9,"handlers"],[133,19,106,17],[133,20,106,18,"onFinalize"],[133,30,106,28],[133,33,106,31,"callback"],[133,41,106,39],[134,6,107,4],[135,6,108,4],[135,10,108,8],[135,11,108,9,"handlers"],[135,19,108,17],[135,20,108,18,"isWorklet"],[135,29,108,27],[135,30,108,28,"CALLBACK_TYPE"],[135,43,108,41],[135,44,108,42,"FINALIZE"],[135,52,108,50],[135,53,108,51],[135,56,108,54],[135,60,108,58],[135,61,108,59,"isWorklet"],[135,70,108,68],[135,71,108,69,"callback"],[135,79,108,77],[135,80,108,78],[136,6,109,4],[136,13,109,11],[136,17,109,15],[137,4,110,2],[139,4,112,2],[140,0,113,0],[141,0,114,0],[142,0,115,0],[143,4,116,2,"onTouchesDown"],[143,17,116,15,"onTouchesDown"],[143,18,116,16,"callback"],[143,26,116,24],[143,28,116,26],[144,6,117,4],[144,10,117,8],[144,11,117,9,"config"],[144,17,117,15],[144,18,117,16,"needsPointerData"],[144,34,117,32],[144,37,117,35],[144,41,117,39],[145,6,118,4],[145,10,118,8],[145,11,118,9,"handlers"],[145,19,118,17],[145,20,118,18,"onTouchesDown"],[145,33,118,31],[145,36,118,34,"callback"],[145,44,118,42],[146,6,119,4],[146,10,119,8],[146,11,119,9,"handlers"],[146,19,119,17],[146,20,119,18,"isWorklet"],[146,29,119,27],[146,30,119,28,"CALLBACK_TYPE"],[146,43,119,41],[146,44,119,42,"TOUCHES_DOWN"],[146,56,119,54],[146,57,119,55],[146,60,119,58],[146,64,119,62],[146,65,119,63,"isWorklet"],[146,74,119,72],[146,75,119,73,"callback"],[146,83,119,81],[146,84,119,82],[147,6,120,4],[147,13,120,11],[147,17,120,15],[148,4,121,2],[150,4,123,2],[151,0,124,0],[152,0,125,0],[153,0,126,0],[154,4,127,2,"onTouchesMove"],[154,17,127,15,"onTouchesMove"],[154,18,127,16,"callback"],[154,26,127,24],[154,28,127,26],[155,6,128,4],[155,10,128,8],[155,11,128,9,"config"],[155,17,128,15],[155,18,128,16,"needsPointerData"],[155,34,128,32],[155,37,128,35],[155,41,128,39],[156,6,129,4],[156,10,129,8],[156,11,129,9,"handlers"],[156,19,129,17],[156,20,129,18,"onTouchesMove"],[156,33,129,31],[156,36,129,34,"callback"],[156,44,129,42],[157,6,130,4],[157,10,130,8],[157,11,130,9,"handlers"],[157,19,130,17],[157,20,130,18,"isWorklet"],[157,29,130,27],[157,30,130,28,"CALLBACK_TYPE"],[157,43,130,41],[157,44,130,42,"TOUCHES_MOVE"],[157,56,130,54],[157,57,130,55],[157,60,130,58],[157,64,130,62],[157,65,130,63,"isWorklet"],[157,74,130,72],[157,75,130,73,"callback"],[157,83,130,81],[157,84,130,82],[158,6,131,4],[158,13,131,11],[158,17,131,15],[159,4,132,2],[161,4,134,2],[162,0,135,0],[163,0,136,0],[164,0,137,0],[165,4,138,2,"onTouchesUp"],[165,15,138,13,"onTouchesUp"],[165,16,138,14,"callback"],[165,24,138,22],[165,26,138,24],[166,6,139,4],[166,10,139,8],[166,11,139,9,"config"],[166,17,139,15],[166,18,139,16,"needsPointerData"],[166,34,139,32],[166,37,139,35],[166,41,139,39],[167,6,140,4],[167,10,140,8],[167,11,140,9,"handlers"],[167,19,140,17],[167,20,140,18,"onTouchesUp"],[167,31,140,29],[167,34,140,32,"callback"],[167,42,140,40],[168,6,141,4],[168,10,141,8],[168,11,141,9,"handlers"],[168,19,141,17],[168,20,141,18,"isWorklet"],[168,29,141,27],[168,30,141,28,"CALLBACK_TYPE"],[168,43,141,41],[168,44,141,42,"TOUCHES_UP"],[168,54,141,52],[168,55,141,53],[168,58,141,56],[168,62,141,60],[168,63,141,61,"isWorklet"],[168,72,141,70],[168,73,141,71,"callback"],[168,81,141,79],[168,82,141,80],[169,6,142,4],[169,13,142,11],[169,17,142,15],[170,4,143,2],[172,4,145,2],[173,0,146,0],[174,0,147,0],[175,0,148,0],[176,4,149,2,"onTouchesCancelled"],[176,22,149,20,"onTouchesCancelled"],[176,23,149,21,"callback"],[176,31,149,29],[176,33,149,31],[177,6,150,4],[177,10,150,8],[177,11,150,9,"config"],[177,17,150,15],[177,18,150,16,"needsPointerData"],[177,34,150,32],[177,37,150,35],[177,41,150,39],[178,6,151,4],[178,10,151,8],[178,11,151,9,"handlers"],[178,19,151,17],[178,20,151,18,"onTouchesCancelled"],[178,38,151,36],[178,41,151,39,"callback"],[178,49,151,47],[179,6,152,4],[179,10,152,8],[179,11,152,9,"handlers"],[179,19,152,17],[179,20,152,18,"isWorklet"],[179,29,152,27],[179,30,152,28,"CALLBACK_TYPE"],[179,43,152,41],[179,44,152,42,"TOUCHES_CANCELLED"],[179,61,152,59],[179,62,152,60],[179,65,152,63],[179,69,152,67],[179,70,152,68,"isWorklet"],[179,79,152,77],[179,80,152,78,"callback"],[179,88,152,86],[179,89,152,87],[180,6,153,4],[180,13,153,11],[180,17,153,15],[181,4,154,2],[183,4,156,2],[184,0,157,0],[185,0,158,0],[186,0,159,0],[187,0,160,0],[188,4,161,2,"enabled"],[188,11,161,9,"enabled"],[188,12,161,10,"enabled"],[188,19,161,17],[188,21,161,19],[189,6,162,4],[189,10,162,8],[189,11,162,9,"config"],[189,17,162,15],[189,18,162,16,"enabled"],[189,25,162,23],[189,28,162,26,"enabled"],[189,35,162,33],[190,6,163,4],[190,13,163,11],[190,17,163,15],[191,4,164,2],[193,4,166,2],[194,0,167,0],[195,0,168,0],[196,0,169,0],[197,0,170,0],[198,4,171,2,"shouldCancelWhenOutside"],[198,27,171,25,"shouldCancelWhenOutside"],[198,28,171,26,"value"],[198,33,171,31],[198,35,171,33],[199,6,172,4],[199,10,172,8],[199,11,172,9,"config"],[199,17,172,15],[199,18,172,16,"shouldCancelWhenOutside"],[199,41,172,39],[199,44,172,42,"value"],[199,49,172,47],[200,6,173,4],[200,13,173,11],[200,17,173,15],[201,4,174,2],[203,4,176,2],[204,0,177,0],[205,0,178,0],[206,0,179,0],[207,0,180,0],[208,0,181,0],[209,4,182,2,"hitSlop"],[209,11,182,9,"hitSlop"],[209,12,182,10,"hitSlop"],[209,19,182,17],[209,21,182,19],[210,6,183,4],[210,10,183,8],[210,11,183,9,"config"],[210,17,183,15],[210,18,183,16,"hitSlop"],[210,25,183,23],[210,28,183,26,"hitSlop"],[210,35,183,33],[211,6,184,4],[211,13,184,11],[211,17,184,15],[212,4,185,2],[214,4,187,2],[215,0,188,0],[216,0,189,0],[217,0,190,0],[218,0,191,0],[219,0,192,0],[220,4,193,2,"activeCursor"],[220,16,193,14,"activeCursor"],[220,17,193,15,"activeCursor"],[220,29,193,27],[220,31,193,29],[221,6,194,4],[221,10,194,8],[221,11,194,9,"config"],[221,17,194,15],[221,18,194,16,"activeCursor"],[221,30,194,28],[221,33,194,31,"activeCursor"],[221,45,194,43],[222,6,195,4],[222,13,195,11],[222,17,195,15],[223,4,196,2],[225,4,198,2],[226,0,199,0],[227,0,200,0],[228,0,201,0],[229,0,202,0],[230,0,203,0],[231,0,204,0],[232,0,205,0],[233,4,206,2,"mouseButton"],[233,15,206,13,"mouseButton"],[233,16,206,14,"mouseButton"],[233,27,206,25],[233,29,206,27],[234,6,207,4],[234,10,207,8],[234,11,207,9,"config"],[234,17,207,15],[234,18,207,16,"mouseButton"],[234,29,207,27],[234,32,207,30,"mouseButton"],[234,43,207,41],[235,6,208,4],[235,13,208,11],[235,17,208,15],[236,4,209,2],[238,4,211,2],[239,0,212,0],[240,0,213,0],[241,0,214,0],[242,0,215,0],[243,0,216,0],[244,4,217,2,"runOnJS"],[244,11,217,9,"runOnJS"],[244,12,217,10,"runOnJS"],[244,19,217,17],[244,21,217,19],[245,6,218,4],[245,10,218,8],[245,11,218,9,"config"],[245,17,218,15],[245,18,218,16,"runOnJS"],[245,25,218,23],[245,28,218,26,"runOnJS"],[245,35,218,33],[246,6,219,4],[246,13,219,11],[246,17,219,15],[247,4,220,2],[249,4,222,2],[250,0,223,0],[251,0,224,0],[252,0,225,0],[253,0,226,0],[254,4,227,2,"simultaneousWithExternalGesture"],[254,35,227,33,"simultaneousWithExternalGesture"],[254,36,227,34],[254,39,227,37,"gestures"],[254,47,227,45],[254,49,227,47],[255,6,228,4],[255,11,228,9],[255,17,228,15,"gesture"],[255,24,228,22],[255,28,228,26,"gestures"],[255,36,228,34],[255,38,228,36],[256,8,229,6],[256,12,229,10],[256,13,229,11,"addDependency"],[256,26,229,24],[256,27,229,25],[256,45,229,43],[256,47,229,45,"gesture"],[256,54,229,52],[256,55,229,53],[257,6,230,4],[258,6,231,4],[258,13,231,11],[258,17,231,15],[259,4,232,2],[261,4,234,2],[262,0,235,0],[263,0,236,0],[264,0,237,0],[265,0,238,0],[266,4,239,2,"requireExternalGestureToFail"],[266,32,239,30,"requireExternalGestureToFail"],[266,33,239,31],[266,36,239,34,"gestures"],[266,44,239,42],[266,46,239,44],[267,6,240,4],[267,11,240,9],[267,17,240,15,"gesture"],[267,24,240,22],[267,28,240,26,"gestures"],[267,36,240,34],[267,38,240,36],[268,8,241,6],[268,12,241,10],[268,13,241,11,"addDependency"],[268,26,241,24],[268,27,241,25],[268,42,241,40],[268,44,241,42,"gesture"],[268,51,241,49],[268,52,241,50],[269,6,242,4],[270,6,243,4],[270,13,243,11],[270,17,243,15],[271,4,244,2],[273,4,246,2],[274,0,247,0],[275,0,248,0],[276,0,249,0],[277,0,250,0],[278,4,251,2,"blocksExternalGesture"],[278,25,251,23,"blocksExternalGesture"],[278,26,251,24],[278,29,251,27,"gestures"],[278,37,251,35],[278,39,251,37],[279,6,252,4],[279,11,252,9],[279,17,252,15,"gesture"],[279,24,252,22],[279,28,252,26,"gestures"],[279,36,252,34],[279,38,252,36],[280,8,253,6],[280,12,253,10],[280,13,253,11,"addDependency"],[280,26,253,24],[280,27,253,25],[280,43,253,41],[280,45,253,43,"gesture"],[280,52,253,50],[280,53,253,51],[281,6,254,4],[282,6,255,4],[282,13,255,11],[282,17,255,15],[283,4,256,2],[285,4,258,2],[286,0,259,0],[287,0,260,0],[288,0,261,0],[289,4,262,2,"withTestId"],[289,14,262,12,"withTestId"],[289,15,262,13,"id"],[289,17,262,15],[289,19,262,17],[290,6,263,4],[290,10,263,8],[290,11,263,9,"config"],[290,17,263,15],[290,18,263,16,"testId"],[290,24,263,22],[290,27,263,25,"id"],[290,29,263,27],[291,6,264,4],[291,13,264,11],[291,17,264,15],[292,4,265,2],[294,4,267,2],[295,0,268,0],[296,0,269,0],[297,0,270,0],[298,0,271,0],[299,0,272,0],[300,4,273,2,"cancelsTouchesInView"],[300,24,273,22,"cancelsTouchesInView"],[300,25,273,23,"value"],[300,30,273,28],[300,32,273,30],[301,6,274,4],[301,10,274,8],[301,11,274,9,"config"],[301,17,274,15],[301,18,274,16,"cancelsTouchesInView"],[301,38,274,36],[301,41,274,39,"value"],[301,46,274,44],[302,6,275,4],[302,13,275,11],[302,17,275,15],[303,4,276,2],[304,4,277,2,"initialize"],[304,14,277,12,"initialize"],[304,15,277,12],[304,17,277,15],[305,6,278,4],[305,10,278,8],[305,11,278,9,"handlerTag"],[305,21,278,19],[305,24,278,22],[305,28,278,22,"getNextHandlerTag"],[305,46,278,39],[305,47,278,39,"getNextHandlerTag"],[305,64,278,39],[305,66,278,40],[305,67,278,41],[306,6,279,4],[306,10,279,8],[306,11,279,9,"handlers"],[306,19,279,17],[306,22,279,17,"Object"],[306,28,279,17],[306,29,279,17,"assign"],[306,35,279,17],[306,40,280,9],[306,44,280,13],[306,45,280,14,"handlers"],[306,53,280,22],[307,8,281,6,"handlerTag"],[307,18,281,16],[307,20,281,18],[307,24,281,22],[307,25,281,23,"handlerTag"],[308,6,281,33],[308,8,282,5],[309,6,283,4],[309,10,283,8],[309,14,283,12],[309,15,283,13,"config"],[309,21,283,19],[309,22,283,20,"ref"],[309,25,283,23],[309,27,283,25],[310,8,284,6],[310,12,284,10],[310,13,284,11,"config"],[310,19,284,17],[310,20,284,18,"ref"],[310,23,284,21],[310,24,284,22,"current"],[310,31,284,29],[310,34,284,32],[310,38,284,36],[311,6,285,4],[312,4,286,2],[313,4,287,2,"toGestureArray"],[313,18,287,16,"toGestureArray"],[313,19,287,16],[313,21,287,19],[314,6,288,4],[314,13,288,11],[314,14,288,12],[314,18,288,16],[314,19,288,17],[315,4,289,2],[317,4,291,2],[318,4,292,2,"prepare"],[318,11,292,9,"prepare"],[318,12,292,9],[318,14,292,12],[318,15,292,13],[319,4,293,2],[319,8,293,6,"shouldUseReanimated"],[319,27,293,25,"shouldUseReanimated"],[319,28,293,25],[319,30,293,28],[320,6,294,4],[321,6,295,4],[322,6,296,4],[323,6,297,4],[323,13,297,11],[323,17,297,15],[323,18,297,16,"config"],[323,24,297,22],[323,25,297,23,"runOnJS"],[323,32,297,30],[323,37,297,35],[323,41,297,39],[323,45,297,43],[323,46,297,44],[323,50,297,48],[323,51,297,49,"handlers"],[323,59,297,57],[323,60,297,58,"isWorklet"],[323,69,297,67],[323,70,297,68,"includes"],[323,78,297,76],[323,79,297,77],[323,84,297,82],[323,85,297,83],[323,89,297,87],[323,90,297,88],[323,94,297,88,"isRemoteDebuggingEnabled"],[323,100,297,112],[323,101,297,112,"isRemoteDebuggingEnabled"],[323,125,297,112],[323,127,297,113],[323,128,297,114],[324,4,298,2],[325,2,299,0],[326,2,300,7],[326,8,300,13,"ContinousBaseGesture"],[326,28,300,33],[326,37,300,42,"BaseGesture"],[326,48,300,53],[326,49,300,54],[327,4,301,2],[328,0,302,0],[329,0,303,0],[330,0,304,0],[331,4,305,2,"onUpdate"],[331,12,305,10,"onUpdate"],[331,13,305,11,"callback"],[331,21,305,19],[331,23,305,21],[332,6,306,4],[332,10,306,8],[332,11,306,9,"handlers"],[332,19,306,17],[332,20,306,18,"onUpdate"],[332,28,306,26],[332,31,306,29,"callback"],[332,39,306,37],[333,6,307,4],[333,10,307,8],[333,11,307,9,"handlers"],[333,19,307,17],[333,20,307,18,"isWorklet"],[333,29,307,27],[333,30,307,28,"CALLBACK_TYPE"],[333,43,307,41],[333,44,307,42,"UPDATE"],[333,50,307,48],[333,51,307,49],[333,54,307,52],[333,58,307,56],[333,59,307,57,"isWorklet"],[333,68,307,66],[333,69,307,67,"callback"],[333,77,307,75],[333,78,307,76],[334,6,308,4],[334,13,308,11],[334,17,308,15],[335,4,309,2],[337,4,311,2],[338,0,312,0],[339,0,313,0],[340,0,314,0],[341,0,315,0],[342,4,316,2,"onChange"],[342,12,316,10,"onChange"],[342,13,316,11,"callback"],[342,21,316,19],[342,23,316,21],[343,6,317,4],[343,10,317,8],[343,11,317,9,"handlers"],[343,19,317,17],[343,20,317,18,"onChange"],[343,28,317,26],[343,31,317,29,"callback"],[343,39,317,37],[344,6,318,4],[344,10,318,8],[344,11,318,9,"handlers"],[344,19,318,17],[344,20,318,18,"isWorklet"],[344,29,318,27],[344,30,318,28,"CALLBACK_TYPE"],[344,43,318,41],[344,44,318,42,"CHANGE"],[344,50,318,48],[344,51,318,49],[344,54,318,52],[344,58,318,56],[344,59,318,57,"isWorklet"],[344,68,318,66],[344,69,318,67,"callback"],[344,77,318,75],[344,78,318,76],[345,6,319,4],[345,13,319,11],[345,17,319,15],[346,4,320,2],[348,4,322,2],[349,0,323,0],[350,0,324,0],[351,0,325,0],[352,0,326,0],[353,4,327,2,"manualActivation"],[353,20,327,18,"manualActivation"],[353,21,327,19,"manualActivation"],[353,37,327,35],[353,39,327,37],[354,6,328,4],[354,10,328,8],[354,11,328,9,"config"],[354,17,328,15],[354,18,328,16,"manualActivation"],[354,34,328,32],[354,37,328,35,"manualActivation"],[354,53,328,51],[355,6,329,4],[355,13,329,11],[355,17,329,15],[356,4,330,2],[357,2,331,0],[358,0,331,1],[358,3]],"functionMap":{"names":["<global>","Gesture","BaseGesture","BaseGesture#constructor","BaseGesture#addDependency","BaseGesture#withRef","BaseGesture#isWorklet","BaseGesture#onBegin","BaseGesture#onStart","BaseGesture#onEnd","BaseGesture#onFinalize","BaseGesture#onTouchesDown","BaseGesture#onTouchesMove","BaseGesture#onTouchesUp","BaseGesture#onTouchesCancelled","BaseGesture#enabled","BaseGesture#shouldCancelWhenOutside","BaseGesture#hitSlop","BaseGesture#activeCursor","BaseGesture#mouseButton","BaseGesture#runOnJS","BaseGesture#simultaneousWithExternalGesture","BaseGesture#requireExternalGestureToFail","BaseGesture#blocksExternalGesture","BaseGesture#withTestId","BaseGesture#cancelsTouchesInView","BaseGesture#initialize","BaseGesture#toGestureArray","BaseGesture#prepare","BaseGesture#get__shouldUseReanimated","ContinousBaseGesture","ContinousBaseGesture#onUpdate","ContinousBaseGesture#onChange","ContinousBaseGesture#manualActivation"],"mappings":"AAA;OCwB,gBD;OEE;ECU;GDU;EEC;GFG;EGM;GHG;EIG;GJG;EKO;GLI;EMM;GNI;EOO;GPK;EQM;GRK;ESM;GTK;EUM;GVK;EWM;GXK;EYM;GZK;EaO;GbG;EcO;GdG;EeQ;GfG;EgBQ;GhBG;EiBU;GjBG;EkBQ;GlBG;EmBO;GnBK;EoBO;GpBK;EqBO;GrBK;EsBM;GtBG;EuBQ;GvBG;EwBC;GxBS;EyBC;GzBE;E0BG,Y1B;E2BC;G3BK;CFC;O8BC;ECK;GDI;EEO;GFI;EGO;GHG;C9BC"},"hasCjsExports":false},"type":"js/module"}]}