{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  // Implementation taken from Flutter's LeastSquareSolver\n  // https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n  class Vector {\n    constructor(length) {\n      _defineProperty(this, \"offset\", void 0);\n      _defineProperty(this, \"length\", void 0);\n      _defineProperty(this, \"elements\", void 0);\n      this.offset = 0;\n      this.length = length;\n      this.elements = new Array(length);\n    }\n    static fromVOL(values, offset, length) {\n      const result = new Vector(0);\n      result.offset = offset;\n      result.length = length;\n      result.elements = values;\n      return result;\n    }\n    get(index) {\n      return this.elements[this.offset + index];\n    }\n    set(index, value) {\n      this.elements[this.offset + index] = value;\n    }\n    dot(other) {\n      let result = 0;\n      for (let i = 0; i < this.length; i++) {\n        result += this.get(i) * other.get(i);\n      }\n      return result;\n    }\n    norm() {\n      return Math.sqrt(this.dot(this));\n    }\n  }\n  class Matrix {\n    constructor(rows, columns) {\n      _defineProperty(this, \"columns\", void 0);\n      _defineProperty(this, \"elements\", void 0);\n      this.columns = columns;\n      this.elements = new Array(rows * columns);\n    }\n    get(row, column) {\n      return this.elements[row * this.columns + column];\n    }\n    set(row, column, value) {\n      this.elements[row * this.columns + column] = value;\n    }\n    getRow(row) {\n      return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n    }\n  } // An nth degree polynomial fit to a dataset.\n\n  class PolynomialFit {\n    // The polynomial coefficients of the fit.\n    //\n    // For each `i`, the element `coefficients[i]` is the coefficient of\n    // the `i`-th power of the variable.\n    // Creates a polynomial fit of the given degree.\n    //\n    // There are n + 1 coefficients in a fit of degree n.\n    constructor(degree) {\n      _defineProperty(this, \"coefficients\", void 0);\n      this.coefficients = new Array(degree + 1);\n    }\n  }\n  const precisionErrorTolerance = 1e-10; // Uses the least-squares algorithm to fit a polynomial to a set of data.\n\n  class LeastSquareSolver {\n    // The x-coordinates of each data point.\n    // The y-coordinates of each data point.\n    // The weight to use for each data point.\n    // Creates a least-squares solver.\n    //\n    // The [x], [y], and [w] arguments must not be null.\n    constructor(x, y, w) {\n      _defineProperty(this, \"x\", void 0);\n      _defineProperty(this, \"y\", void 0);\n      _defineProperty(this, \"w\", void 0);\n      this.x = x;\n      this.y = y;\n      this.w = w;\n    } // Fits a polynomial of the given degree to the data points.\n    //\n    // When there is not enough data to fit a curve null is returned.\n\n    solve(degree) {\n      if (degree > this.x.length) {\n        // Not enough data to fit a curve.\n        return null;\n      }\n      const result = new PolynomialFit(degree); // Shorthands for the purpose of notation equivalence to original C++ code.\n\n      const m = this.x.length;\n      const n = degree + 1; // Expand the X vector to a matrix A, pre-multiplied by the weights.\n\n      const a = new Matrix(n, m);\n      for (let h = 0; h < m; h++) {\n        a.set(0, h, this.w[h]);\n        for (let i = 1; i < n; i++) {\n          a.set(i, h, a.get(i - 1, h) * this.x[h]);\n        }\n      } // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n      // Orthonormal basis, column-major ordVectorer.\n\n      const q = new Matrix(n, m); // Upper triangular matrix, row-major order.\n\n      const r = new Matrix(n, m);\n      for (let j = 0; j < n; j += 1) {\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, a.get(j, h));\n        }\n        for (let i = 0; i < j; i += 1) {\n          const dot = q.getRow(j).dot(q.getRow(i));\n          for (let h = 0; h < m; h += 1) {\n            q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n          }\n        }\n        const norm = q.getRow(j).norm();\n        if (norm < precisionErrorTolerance) {\n          // Vectors are linearly dependent or zero so no solution.\n          return null;\n        }\n        const inverseNorm = 1.0 / norm;\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) * inverseNorm);\n        }\n        for (let i = 0; i < n; i += 1) {\n          r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n        }\n      } // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n      // We just work from bottom-right to top-left calculating B's coefficients.\n\n      const wy = new Vector(m);\n      for (let h = 0; h < m; h += 1) {\n        wy.set(h, this.y[h] * this.w[h]);\n      }\n      for (let i = n - 1; i >= 0; i -= 1) {\n        result.coefficients[i] = q.getRow(i).dot(wy);\n        for (let j = n - 1; j > i; j -= 1) {\n          result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n        }\n        result.coefficients[i] /= r.get(i, i);\n      }\n      return result;\n    }\n  }\n  exports.default = LeastSquareSolver;\n});","lineCount":170,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,15],[7,20,6,18],[7,25,6,23],[7,26,6,24],[8,2,8,0],[8,11,8,9,"_defineProperty"],[8,26,8,24,"_defineProperty"],[8,27,8,25,"obj"],[8,30,8,28],[8,32,8,30,"key"],[8,35,8,33],[8,37,8,35,"value"],[8,42,8,40],[8,44,8,42],[9,4,8,44],[9,8,8,48,"key"],[9,11,8,51],[9,15,8,55,"obj"],[9,18,8,58],[9,20,8,60],[10,6,8,62,"Object"],[10,12,8,68],[10,13,8,69,"defineProperty"],[10,27,8,83],[10,28,8,84,"obj"],[10,31,8,87],[10,33,8,89,"key"],[10,36,8,92],[10,38,8,94],[11,8,8,96,"value"],[11,13,8,101],[11,15,8,103,"value"],[11,20,8,108],[12,8,8,110,"enumerable"],[12,18,8,120],[12,20,8,122],[12,24,8,126],[13,8,8,128,"configurable"],[13,20,8,140],[13,22,8,142],[13,26,8,146],[14,8,8,148,"writable"],[14,16,8,156],[14,18,8,158],[15,6,8,163],[15,7,8,164],[15,8,8,165],[16,4,8,167],[16,5,8,168],[16,11,8,174],[17,6,8,176,"obj"],[17,9,8,179],[17,10,8,180,"key"],[17,13,8,183],[17,14,8,184],[17,17,8,187,"value"],[17,22,8,192],[18,4,8,194],[19,4,8,196],[19,11,8,203,"obj"],[19,14,8,206],[20,2,8,208],[22,2,10,0],[23,2,11,0],[24,2,12,0],[24,8,12,6,"Vector"],[24,14,12,12],[24,15,12,13],[25,4,13,2,"constructor"],[25,15,13,13,"constructor"],[25,16,13,14,"length"],[25,22,13,20],[25,24,13,22],[26,6,14,4,"_defineProperty"],[26,21,14,19],[26,22,14,20],[26,26,14,24],[26,28,14,26],[26,36,14,34],[26,38,14,36],[26,43,14,41],[26,44,14,42],[26,45,14,43],[27,6,16,4,"_defineProperty"],[27,21,16,19],[27,22,16,20],[27,26,16,24],[27,28,16,26],[27,36,16,34],[27,38,16,36],[27,43,16,41],[27,44,16,42],[27,45,16,43],[28,6,18,4,"_defineProperty"],[28,21,18,19],[28,22,18,20],[28,26,18,24],[28,28,18,26],[28,38,18,36],[28,40,18,38],[28,45,18,43],[28,46,18,44],[28,47,18,45],[29,6,20,4],[29,10,20,8],[29,11,20,9,"offset"],[29,17,20,15],[29,20,20,18],[29,21,20,19],[30,6,21,4],[30,10,21,8],[30,11,21,9,"length"],[30,17,21,15],[30,20,21,18,"length"],[30,26,21,24],[31,6,22,4],[31,10,22,8],[31,11,22,9,"elements"],[31,19,22,17],[31,22,22,20],[31,26,22,24,"Array"],[31,31,22,29],[31,32,22,30,"length"],[31,38,22,36],[31,39,22,37],[32,4,23,2],[33,4,25,2],[33,11,25,9,"fromVOL"],[33,18,25,16,"fromVOL"],[33,19,25,17,"values"],[33,25,25,23],[33,27,25,25,"offset"],[33,33,25,31],[33,35,25,33,"length"],[33,41,25,39],[33,43,25,41],[34,6,26,4],[34,12,26,10,"result"],[34,18,26,16],[34,21,26,19],[34,25,26,23,"Vector"],[34,31,26,29],[34,32,26,30],[34,33,26,31],[34,34,26,32],[35,6,27,4,"result"],[35,12,27,10],[35,13,27,11,"offset"],[35,19,27,17],[35,22,27,20,"offset"],[35,28,27,26],[36,6,28,4,"result"],[36,12,28,10],[36,13,28,11,"length"],[36,19,28,17],[36,22,28,20,"length"],[36,28,28,26],[37,6,29,4,"result"],[37,12,29,10],[37,13,29,11,"elements"],[37,21,29,19],[37,24,29,22,"values"],[37,30,29,28],[38,6,30,4],[38,13,30,11,"result"],[38,19,30,17],[39,4,31,2],[40,4,33,2,"get"],[40,7,33,5,"get"],[40,8,33,6,"index"],[40,13,33,11],[40,15,33,13],[41,6,34,4],[41,13,34,11],[41,17,34,15],[41,18,34,16,"elements"],[41,26,34,24],[41,27,34,25],[41,31,34,29],[41,32,34,30,"offset"],[41,38,34,36],[41,41,34,39,"index"],[41,46,34,44],[41,47,34,45],[42,4,35,2],[43,4,37,2,"set"],[43,7,37,5,"set"],[43,8,37,6,"index"],[43,13,37,11],[43,15,37,13,"value"],[43,20,37,18],[43,22,37,20],[44,6,38,4],[44,10,38,8],[44,11,38,9,"elements"],[44,19,38,17],[44,20,38,18],[44,24,38,22],[44,25,38,23,"offset"],[44,31,38,29],[44,34,38,32,"index"],[44,39,38,37],[44,40,38,38],[44,43,38,41,"value"],[44,48,38,46],[45,4,39,2],[46,4,41,2,"dot"],[46,7,41,5,"dot"],[46,8,41,6,"other"],[46,13,41,11],[46,15,41,13],[47,6,42,4],[47,10,42,8,"result"],[47,16,42,14],[47,19,42,17],[47,20,42,18],[48,6,44,4],[48,11,44,9],[48,15,44,13,"i"],[48,16,44,14],[48,19,44,17],[48,20,44,18],[48,22,44,20,"i"],[48,23,44,21],[48,26,44,24],[48,30,44,28],[48,31,44,29,"length"],[48,37,44,35],[48,39,44,37,"i"],[48,40,44,38],[48,42,44,40],[48,44,44,42],[49,8,45,6,"result"],[49,14,45,12],[49,18,45,16],[49,22,45,20],[49,23,45,21,"get"],[49,26,45,24],[49,27,45,25,"i"],[49,28,45,26],[49,29,45,27],[49,32,45,30,"other"],[49,37,45,35],[49,38,45,36,"get"],[49,41,45,39],[49,42,45,40,"i"],[49,43,45,41],[49,44,45,42],[50,6,46,4],[51,6,48,4],[51,13,48,11,"result"],[51,19,48,17],[52,4,49,2],[53,4,51,2,"norm"],[53,8,51,6,"norm"],[53,9,51,6],[53,11,51,9],[54,6,52,4],[54,13,52,11,"Math"],[54,17,52,15],[54,18,52,16,"sqrt"],[54,22,52,20],[54,23,52,21],[54,27,52,25],[54,28,52,26,"dot"],[54,31,52,29],[54,32,52,30],[54,36,52,34],[54,37,52,35],[54,38,52,36],[55,4,53,2],[56,2,55,0],[57,2,57,0],[57,8,57,6,"Matrix"],[57,14,57,12],[57,15,57,13],[58,4,58,2,"constructor"],[58,15,58,13,"constructor"],[58,16,58,14,"rows"],[58,20,58,18],[58,22,58,20,"columns"],[58,29,58,27],[58,31,58,29],[59,6,59,4,"_defineProperty"],[59,21,59,19],[59,22,59,20],[59,26,59,24],[59,28,59,26],[59,37,59,35],[59,39,59,37],[59,44,59,42],[59,45,59,43],[59,46,59,44],[60,6,61,4,"_defineProperty"],[60,21,61,19],[60,22,61,20],[60,26,61,24],[60,28,61,26],[60,38,61,36],[60,40,61,38],[60,45,61,43],[60,46,61,44],[60,47,61,45],[61,6,63,4],[61,10,63,8],[61,11,63,9,"columns"],[61,18,63,16],[61,21,63,19,"columns"],[61,28,63,26],[62,6,64,4],[62,10,64,8],[62,11,64,9,"elements"],[62,19,64,17],[62,22,64,20],[62,26,64,24,"Array"],[62,31,64,29],[62,32,64,30,"rows"],[62,36,64,34],[62,39,64,37,"columns"],[62,46,64,44],[62,47,64,45],[63,4,65,2],[64,4,67,2,"get"],[64,7,67,5,"get"],[64,8,67,6,"row"],[64,11,67,9],[64,13,67,11,"column"],[64,19,67,17],[64,21,67,19],[65,6,68,4],[65,13,68,11],[65,17,68,15],[65,18,68,16,"elements"],[65,26,68,24],[65,27,68,25,"row"],[65,30,68,28],[65,33,68,31],[65,37,68,35],[65,38,68,36,"columns"],[65,45,68,43],[65,48,68,46,"column"],[65,54,68,52],[65,55,68,53],[66,4,69,2],[67,4,71,2,"set"],[67,7,71,5,"set"],[67,8,71,6,"row"],[67,11,71,9],[67,13,71,11,"column"],[67,19,71,17],[67,21,71,19,"value"],[67,26,71,24],[67,28,71,26],[68,6,72,4],[68,10,72,8],[68,11,72,9,"elements"],[68,19,72,17],[68,20,72,18,"row"],[68,23,72,21],[68,26,72,24],[68,30,72,28],[68,31,72,29,"columns"],[68,38,72,36],[68,41,72,39,"column"],[68,47,72,45],[68,48,72,46],[68,51,72,49,"value"],[68,56,72,54],[69,4,73,2],[70,4,75,2,"getRow"],[70,10,75,8,"getRow"],[70,11,75,9,"row"],[70,14,75,12],[70,16,75,14],[71,6,76,4],[71,13,76,11,"Vector"],[71,19,76,17],[71,20,76,18,"fromVOL"],[71,27,76,25],[71,28,76,26],[71,32,76,30],[71,33,76,31,"elements"],[71,41,76,39],[71,43,76,41,"row"],[71,46,76,44],[71,49,76,47],[71,53,76,51],[71,54,76,52,"columns"],[71,61,76,59],[71,63,76,61],[71,67,76,65],[71,68,76,66,"columns"],[71,75,76,73],[71,76,76,74],[72,4,77,2],[73,2,79,0],[73,3,79,1],[73,4,79,2],[75,2,82,0],[75,8,82,6,"PolynomialFit"],[75,21,82,19],[75,22,82,20],[76,4,83,2],[77,4,84,2],[78,4,85,2],[79,4,86,2],[80,4,87,2],[81,4,88,2],[82,4,89,2],[83,4,90,2,"constructor"],[83,15,90,13,"constructor"],[83,16,90,14,"degree"],[83,22,90,20],[83,24,90,22],[84,6,91,4,"_defineProperty"],[84,21,91,19],[84,22,91,20],[84,26,91,24],[84,28,91,26],[84,42,91,40],[84,44,91,42],[84,49,91,47],[84,50,91,48],[84,51,91,49],[85,6,93,4],[85,10,93,8],[85,11,93,9,"coefficients"],[85,23,93,21],[85,26,93,24],[85,30,93,28,"Array"],[85,35,93,33],[85,36,93,34,"degree"],[85,42,93,40],[85,45,93,43],[85,46,93,44],[85,47,93,45],[86,4,94,2],[87,2,96,0],[88,2,98,0],[88,8,98,6,"precisionErrorTolerance"],[88,31,98,29],[88,34,98,32],[88,39,98,37],[88,40,98,38],[88,41,98,39],[90,2,100,0],[90,8,100,6,"LeastSquareSolver"],[90,25,100,23],[90,26,100,24],[91,4,101,2],[92,4,102,2],[93,4,103,2],[94,4,104,2],[95,4,105,2],[96,4,106,2],[97,4,107,2,"constructor"],[97,15,107,13,"constructor"],[97,16,107,14,"x"],[97,17,107,15],[97,19,107,17,"y"],[97,20,107,18],[97,22,107,20,"w"],[97,23,107,21],[97,25,107,23],[98,6,108,4,"_defineProperty"],[98,21,108,19],[98,22,108,20],[98,26,108,24],[98,28,108,26],[98,31,108,29],[98,33,108,31],[98,38,108,36],[98,39,108,37],[98,40,108,38],[99,6,110,4,"_defineProperty"],[99,21,110,19],[99,22,110,20],[99,26,110,24],[99,28,110,26],[99,31,110,29],[99,33,110,31],[99,38,110,36],[99,39,110,37],[99,40,110,38],[100,6,112,4,"_defineProperty"],[100,21,112,19],[100,22,112,20],[100,26,112,24],[100,28,112,26],[100,31,112,29],[100,33,112,31],[100,38,112,36],[100,39,112,37],[100,40,112,38],[101,6,114,4],[101,10,114,8],[101,11,114,9,"x"],[101,12,114,10],[101,15,114,13,"x"],[101,16,114,14],[102,6,115,4],[102,10,115,8],[102,11,115,9,"y"],[102,12,115,10],[102,15,115,13,"y"],[102,16,115,14],[103,6,116,4],[103,10,116,8],[103,11,116,9,"w"],[103,12,116,10],[103,15,116,13,"w"],[103,16,116,14],[104,4,117,2],[104,5,117,3],[104,6,117,4],[105,4,118,2],[106,4,119,2],[108,4,122,2,"solve"],[108,9,122,7,"solve"],[108,10,122,8,"degree"],[108,16,122,14],[108,18,122,16],[109,6,123,4],[109,10,123,8,"degree"],[109,16,123,14],[109,19,123,17],[109,23,123,21],[109,24,123,22,"x"],[109,25,123,23],[109,26,123,24,"length"],[109,32,123,30],[109,34,123,32],[110,8,124,6],[111,8,125,6],[111,15,125,13],[111,19,125,17],[112,6,126,4],[113,6,128,4],[113,12,128,10,"result"],[113,18,128,16],[113,21,128,19],[113,25,128,23,"PolynomialFit"],[113,38,128,36],[113,39,128,37,"degree"],[113,45,128,43],[113,46,128,44],[113,47,128,45],[113,48,128,46],[115,6,130,4],[115,12,130,10,"m"],[115,13,130,11],[115,16,130,14],[115,20,130,18],[115,21,130,19,"x"],[115,22,130,20],[115,23,130,21,"length"],[115,29,130,27],[116,6,131,4],[116,12,131,10,"n"],[116,13,131,11],[116,16,131,14,"degree"],[116,22,131,20],[116,25,131,23],[116,26,131,24],[116,27,131,25],[116,28,131,26],[118,6,133,4],[118,12,133,10,"a"],[118,13,133,11],[118,16,133,14],[118,20,133,18,"Matrix"],[118,26,133,24],[118,27,133,25,"n"],[118,28,133,26],[118,30,133,28,"m"],[118,31,133,29],[118,32,133,30],[119,6,135,4],[119,11,135,9],[119,15,135,13,"h"],[119,16,135,14],[119,19,135,17],[119,20,135,18],[119,22,135,20,"h"],[119,23,135,21],[119,26,135,24,"m"],[119,27,135,25],[119,29,135,27,"h"],[119,30,135,28],[119,32,135,30],[119,34,135,32],[120,8,136,6,"a"],[120,9,136,7],[120,10,136,8,"set"],[120,13,136,11],[120,14,136,12],[120,15,136,13],[120,17,136,15,"h"],[120,18,136,16],[120,20,136,18],[120,24,136,22],[120,25,136,23,"w"],[120,26,136,24],[120,27,136,25,"h"],[120,28,136,26],[120,29,136,27],[120,30,136,28],[121,8,138,6],[121,13,138,11],[121,17,138,15,"i"],[121,18,138,16],[121,21,138,19],[121,22,138,20],[121,24,138,22,"i"],[121,25,138,23],[121,28,138,26,"n"],[121,29,138,27],[121,31,138,29,"i"],[121,32,138,30],[121,34,138,32],[121,36,138,34],[122,10,139,8,"a"],[122,11,139,9],[122,12,139,10,"set"],[122,15,139,13],[122,16,139,14,"i"],[122,17,139,15],[122,19,139,17,"h"],[122,20,139,18],[122,22,139,20,"a"],[122,23,139,21],[122,24,139,22,"get"],[122,27,139,25],[122,28,139,26,"i"],[122,29,139,27],[122,32,139,30],[122,33,139,31],[122,35,139,33,"h"],[122,36,139,34],[122,37,139,35],[122,40,139,38],[122,44,139,42],[122,45,139,43,"x"],[122,46,139,44],[122,47,139,45,"h"],[122,48,139,46],[122,49,139,47],[122,50,139,48],[123,8,140,6],[124,6,141,4],[124,7,141,5],[124,8,141,6],[125,6,142,4],[127,6,145,4],[127,12,145,10,"q"],[127,13,145,11],[127,16,145,14],[127,20,145,18,"Matrix"],[127,26,145,24],[127,27,145,25,"n"],[127,28,145,26],[127,30,145,28,"m"],[127,31,145,29],[127,32,145,30],[127,33,145,31],[127,34,145,32],[129,6,147,4],[129,12,147,10,"r"],[129,13,147,11],[129,16,147,14],[129,20,147,18,"Matrix"],[129,26,147,24],[129,27,147,25,"n"],[129,28,147,26],[129,30,147,28,"m"],[129,31,147,29],[129,32,147,30],[130,6,149,4],[130,11,149,9],[130,15,149,13,"j"],[130,16,149,14],[130,19,149,17],[130,20,149,18],[130,22,149,20,"j"],[130,23,149,21],[130,26,149,24,"n"],[130,27,149,25],[130,29,149,27,"j"],[130,30,149,28],[130,34,149,32],[130,35,149,33],[130,37,149,35],[131,8,150,6],[131,13,150,11],[131,17,150,15,"h"],[131,18,150,16],[131,21,150,19],[131,22,150,20],[131,24,150,22,"h"],[131,25,150,23],[131,28,150,26,"m"],[131,29,150,27],[131,31,150,29,"h"],[131,32,150,30],[131,36,150,34],[131,37,150,35],[131,39,150,37],[132,10,151,8,"q"],[132,11,151,9],[132,12,151,10,"set"],[132,15,151,13],[132,16,151,14,"j"],[132,17,151,15],[132,19,151,17,"h"],[132,20,151,18],[132,22,151,20,"a"],[132,23,151,21],[132,24,151,22,"get"],[132,27,151,25],[132,28,151,26,"j"],[132,29,151,27],[132,31,151,29,"h"],[132,32,151,30],[132,33,151,31],[132,34,151,32],[133,8,152,6],[134,8,154,6],[134,13,154,11],[134,17,154,15,"i"],[134,18,154,16],[134,21,154,19],[134,22,154,20],[134,24,154,22,"i"],[134,25,154,23],[134,28,154,26,"j"],[134,29,154,27],[134,31,154,29,"i"],[134,32,154,30],[134,36,154,34],[134,37,154,35],[134,39,154,37],[135,10,155,8],[135,16,155,14,"dot"],[135,19,155,17],[135,22,155,20,"q"],[135,23,155,21],[135,24,155,22,"getRow"],[135,30,155,28],[135,31,155,29,"j"],[135,32,155,30],[135,33,155,31],[135,34,155,32,"dot"],[135,37,155,35],[135,38,155,36,"q"],[135,39,155,37],[135,40,155,38,"getRow"],[135,46,155,44],[135,47,155,45,"i"],[135,48,155,46],[135,49,155,47],[135,50,155,48],[136,10,157,8],[136,15,157,13],[136,19,157,17,"h"],[136,20,157,18],[136,23,157,21],[136,24,157,22],[136,26,157,24,"h"],[136,27,157,25],[136,30,157,28,"m"],[136,31,157,29],[136,33,157,31,"h"],[136,34,157,32],[136,38,157,36],[136,39,157,37],[136,41,157,39],[137,12,158,10,"q"],[137,13,158,11],[137,14,158,12,"set"],[137,17,158,15],[137,18,158,16,"j"],[137,19,158,17],[137,21,158,19,"h"],[137,22,158,20],[137,24,158,22,"q"],[137,25,158,23],[137,26,158,24,"get"],[137,29,158,27],[137,30,158,28,"j"],[137,31,158,29],[137,33,158,31,"h"],[137,34,158,32],[137,35,158,33],[137,38,158,36,"dot"],[137,41,158,39],[137,44,158,42,"q"],[137,45,158,43],[137,46,158,44,"get"],[137,49,158,47],[137,50,158,48,"i"],[137,51,158,49],[137,53,158,51,"h"],[137,54,158,52],[137,55,158,53],[137,56,158,54],[138,10,159,8],[139,8,160,6],[140,8,162,6],[140,14,162,12,"norm"],[140,18,162,16],[140,21,162,19,"q"],[140,22,162,20],[140,23,162,21,"getRow"],[140,29,162,27],[140,30,162,28,"j"],[140,31,162,29],[140,32,162,30],[140,33,162,31,"norm"],[140,37,162,35],[140,38,162,36],[140,39,162,37],[141,8,164,6],[141,12,164,10,"norm"],[141,16,164,14],[141,19,164,17,"precisionErrorTolerance"],[141,42,164,40],[141,44,164,42],[142,10,165,8],[143,10,166,8],[143,17,166,15],[143,21,166,19],[144,8,167,6],[145,8,169,6],[145,14,169,12,"inverseNorm"],[145,25,169,23],[145,28,169,26],[145,31,169,29],[145,34,169,32,"norm"],[145,38,169,36],[146,8,171,6],[146,13,171,11],[146,17,171,15,"h"],[146,18,171,16],[146,21,171,19],[146,22,171,20],[146,24,171,22,"h"],[146,25,171,23],[146,28,171,26,"m"],[146,29,171,27],[146,31,171,29,"h"],[146,32,171,30],[146,36,171,34],[146,37,171,35],[146,39,171,37],[147,10,172,8,"q"],[147,11,172,9],[147,12,172,10,"set"],[147,15,172,13],[147,16,172,14,"j"],[147,17,172,15],[147,19,172,17,"h"],[147,20,172,18],[147,22,172,20,"q"],[147,23,172,21],[147,24,172,22,"get"],[147,27,172,25],[147,28,172,26,"j"],[147,29,172,27],[147,31,172,29,"h"],[147,32,172,30],[147,33,172,31],[147,36,172,34,"inverseNorm"],[147,47,172,45],[147,48,172,46],[148,8,173,6],[149,8,175,6],[149,13,175,11],[149,17,175,15,"i"],[149,18,175,16],[149,21,175,19],[149,22,175,20],[149,24,175,22,"i"],[149,25,175,23],[149,28,175,26,"n"],[149,29,175,27],[149,31,175,29,"i"],[149,32,175,30],[149,36,175,34],[149,37,175,35],[149,39,175,37],[150,10,176,8,"r"],[150,11,176,9],[150,12,176,10,"set"],[150,15,176,13],[150,16,176,14,"j"],[150,17,176,15],[150,19,176,17,"i"],[150,20,176,18],[150,22,176,20,"i"],[150,23,176,21],[150,26,176,24,"j"],[150,27,176,25],[150,30,176,28],[150,33,176,31],[150,36,176,34,"q"],[150,37,176,35],[150,38,176,36,"getRow"],[150,44,176,42],[150,45,176,43,"j"],[150,46,176,44],[150,47,176,45],[150,48,176,46,"dot"],[150,51,176,49],[150,52,176,50,"a"],[150,53,176,51],[150,54,176,52,"getRow"],[150,60,176,58],[150,61,176,59,"i"],[150,62,176,60],[150,63,176,61],[150,64,176,62],[150,65,176,63],[151,8,177,6],[152,6,178,4],[152,7,178,5],[152,8,178,6],[153,6,179,4],[155,6,182,4],[155,12,182,10,"wy"],[155,14,182,12],[155,17,182,15],[155,21,182,19,"Vector"],[155,27,182,25],[155,28,182,26,"m"],[155,29,182,27],[155,30,182,28],[156,6,184,4],[156,11,184,9],[156,15,184,13,"h"],[156,16,184,14],[156,19,184,17],[156,20,184,18],[156,22,184,20,"h"],[156,23,184,21],[156,26,184,24,"m"],[156,27,184,25],[156,29,184,27,"h"],[156,30,184,28],[156,34,184,32],[156,35,184,33],[156,37,184,35],[157,8,185,6,"wy"],[157,10,185,8],[157,11,185,9,"set"],[157,14,185,12],[157,15,185,13,"h"],[157,16,185,14],[157,18,185,16],[157,22,185,20],[157,23,185,21,"y"],[157,24,185,22],[157,25,185,23,"h"],[157,26,185,24],[157,27,185,25],[157,30,185,28],[157,34,185,32],[157,35,185,33,"w"],[157,36,185,34],[157,37,185,35,"h"],[157,38,185,36],[157,39,185,37],[157,40,185,38],[158,6,186,4],[159,6,188,4],[159,11,188,9],[159,15,188,13,"i"],[159,16,188,14],[159,19,188,17,"n"],[159,20,188,18],[159,23,188,21],[159,24,188,22],[159,26,188,24,"i"],[159,27,188,25],[159,31,188,29],[159,32,188,30],[159,34,188,32,"i"],[159,35,188,33],[159,39,188,37],[159,40,188,38],[159,42,188,40],[160,8,189,6,"result"],[160,14,189,12],[160,15,189,13,"coefficients"],[160,27,189,25],[160,28,189,26,"i"],[160,29,189,27],[160,30,189,28],[160,33,189,31,"q"],[160,34,189,32],[160,35,189,33,"getRow"],[160,41,189,39],[160,42,189,40,"i"],[160,43,189,41],[160,44,189,42],[160,45,189,43,"dot"],[160,48,189,46],[160,49,189,47,"wy"],[160,51,189,49],[160,52,189,50],[161,8,191,6],[161,13,191,11],[161,17,191,15,"j"],[161,18,191,16],[161,21,191,19,"n"],[161,22,191,20],[161,25,191,23],[161,26,191,24],[161,28,191,26,"j"],[161,29,191,27],[161,32,191,30,"i"],[161,33,191,31],[161,35,191,33,"j"],[161,36,191,34],[161,40,191,38],[161,41,191,39],[161,43,191,41],[162,10,192,8,"result"],[162,16,192,14],[162,17,192,15,"coefficients"],[162,29,192,27],[162,30,192,28,"i"],[162,31,192,29],[162,32,192,30],[162,36,192,34,"r"],[162,37,192,35],[162,38,192,36,"get"],[162,41,192,39],[162,42,192,40,"i"],[162,43,192,41],[162,45,192,43,"j"],[162,46,192,44],[162,47,192,45],[162,50,192,48,"result"],[162,56,192,54],[162,57,192,55,"coefficients"],[162,69,192,67],[162,70,192,68,"j"],[162,71,192,69],[162,72,192,70],[163,8,193,6],[164,8,195,6,"result"],[164,14,195,12],[164,15,195,13,"coefficients"],[164,27,195,25],[164,28,195,26,"i"],[164,29,195,27],[164,30,195,28],[164,34,195,32,"r"],[164,35,195,33],[164,36,195,34,"get"],[164,39,195,37],[164,40,195,38,"i"],[164,41,195,39],[164,43,195,41,"i"],[164,44,195,42],[164,45,195,43],[165,6,196,4],[166,6,198,4],[166,13,198,11,"result"],[166,19,198,17],[167,4,199,2],[168,2,201,0],[169,2,203,0,"exports"],[169,9,203,7],[169,10,203,8,"default"],[169,17,203,15],[169,20,203,18,"LeastSquareSolver"],[169,37,203,35],[170,0,203,36],[170,3]],"functionMap":{"names":["<global>","_defineProperty","Vector","Vector#constructor","Vector.fromVOL","Vector#get","Vector#set","Vector#dot","Vector#norm","Matrix","Matrix#constructor","Matrix#get","Matrix#set","Matrix#getRow","PolynomialFit","PolynomialFit#constructor","LeastSquareSolver","constructor","solve"],"mappings":"AAA;ACO,iND;AEI;ECC;GDU;EEE;GFM;EGE;GHE;EIE;GJE;EKE;GLQ;EME;GNE;CFE;ASE;ECC;GDO;EEE;GFE;EGE;GHE;EIE;GJE;CTE;AcG;ECQ;GDI;CdE;AgBI;ECO;GDU;EEK;GF6E;ChBE"},"hasCjsExports":true},"type":"js/module"}]}