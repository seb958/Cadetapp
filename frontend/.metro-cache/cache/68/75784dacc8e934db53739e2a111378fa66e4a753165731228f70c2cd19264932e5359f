{"dependencies":[{"name":"./flingGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"h24ijk3pJCmeakiNLvaxhU4oD+0=","exportNames":["*"],"imports":1}},{"name":"./forceTouchGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":56,"index":103}}],"key":"1QIx9s/Hb/tSlS4sC64N+Adyv7M=","exportNames":["*"],"imports":1}},{"name":"./gestureComposition","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":104},"end":{"line":3,"column":94,"index":198}}],"key":"J0ugy1LMUGf5KgbYvNV+9auzxk4=","exportNames":["*"],"imports":1}},{"name":"./longPressGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":199},"end":{"line":4,"column":54,"index":253}}],"key":"1o89s2ZbLCAJzQNlPSeE8o2+cH8=","exportNames":["*"],"imports":1}},{"name":"./panGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":254},"end":{"line":5,"column":42,"index":296}}],"key":"aBzYQKsfDy415OM5yEWHEC+JvOM=","exportNames":["*"],"imports":1}},{"name":"./pinchGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":297},"end":{"line":6,"column":46,"index":343}}],"key":"Dpg/8aAltyIIC/a4wQAoQVMdkg4=","exportNames":["*"],"imports":1}},{"name":"./rotationGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":344},"end":{"line":7,"column":52,"index":396}}],"key":"/7dx2ayCyD336a+OWcSLUeam5aE=","exportNames":["*"],"imports":1}},{"name":"./tapGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":397},"end":{"line":8,"column":42,"index":439}}],"key":"0AhBYBLv6GsrGEF0r8aS4Nb6QGo=","exportNames":["*"],"imports":1}},{"name":"./nativeGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":440},"end":{"line":9,"column":48,"index":488}}],"key":"cjDWt0y1Cq1VxsEGc4geilXmt0Q=","exportNames":["*"],"imports":1}},{"name":"./manualGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":489},"end":{"line":10,"column":48,"index":537}}],"key":"HUWWiRL9QzXRRI3alfUEUrUAkqk=","exportNames":["*"],"imports":1}},{"name":"./hoverGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":538},"end":{"line":11,"column":46,"index":584}}],"key":"+OU9Hr4DiheWQiFQL42cwzfCmfI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"GestureObjects\", {\n    enumerable: true,\n    get: function () {\n      return GestureObjects;\n    }\n  });\n  var _flingGesture = require(_dependencyMap[0], \"./flingGesture\");\n  var _forceTouchGesture = require(_dependencyMap[1], \"./forceTouchGesture\");\n  var _gestureComposition = require(_dependencyMap[2], \"./gestureComposition\");\n  var _longPressGesture = require(_dependencyMap[3], \"./longPressGesture\");\n  var _panGesture = require(_dependencyMap[4], \"./panGesture\");\n  var _pinchGesture = require(_dependencyMap[5], \"./pinchGesture\");\n  var _rotationGesture = require(_dependencyMap[6], \"./rotationGesture\");\n  var _tapGesture = require(_dependencyMap[7], \"./tapGesture\");\n  var _nativeGesture = require(_dependencyMap[8], \"./nativeGesture\");\n  var _manualGesture = require(_dependencyMap[9], \"./manualGesture\");\n  var _hoverGesture = require(_dependencyMap[10], \"./hoverGesture\");\n  /**\n   * `Gesture` is the object that allows you to create and compose gestures.\n   *\n   * ### Remarks\n   * - Consider wrapping your gesture configurations with `useMemo`, as it will reduce the amount of work Gesture Handler has to do under the hood when updating gestures.\n   *\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/gesture\n   */\n\n  const GestureObjects = {\n    /**\n     * A discrete gesture that recognizes one or many taps.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture\n     */\n    Tap: () => {\n      return new _tapGesture.TapGesture();\n    },\n    /**\n     * A continuous gesture that can recognize a panning (dragging) gesture and track its movement.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture\n     */\n    Pan: () => {\n      return new _panGesture.PanGesture();\n    },\n    /**\n     * A continuous gesture that recognizes pinch gesture. It allows for tracking the distance between two fingers and use that information to scale or zoom your content.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pinch-gesture\n     */\n    Pinch: () => {\n      return new _pinchGesture.PinchGesture();\n    },\n    /**\n     * A continuous gesture that can recognize rotation and track its movement.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/rotation-gesture\n     */\n    Rotation: () => {\n      return new _rotationGesture.RotationGesture();\n    },\n    /**\n     * A discrete gesture that activates when the movement is sufficiently fast.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/fling-gesture\n     */\n    Fling: () => {\n      return new _flingGesture.FlingGesture();\n    },\n    /**\n     * A discrete gesture that activates when the corresponding view is pressed for a sufficiently long time.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/long-press-gesture\n     */\n    LongPress: () => {\n      return new _longPressGesture.LongPressGesture();\n    },\n    /**\n     * #### iOS only\n     * A continuous gesture that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/force-touch-gesture\n     */\n    ForceTouch: () => {\n      return new _forceTouchGesture.ForceTouchGesture();\n    },\n    /**\n     * A gesture that allows other touch handling components to participate in RNGH's gesture system.\n     * When used, the other component should be the direct child of a `GestureDetector`.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/native-gesture\n     */\n    Native: () => {\n      return new _nativeGesture.NativeGesture();\n    },\n    /**\n     * A plain gesture that has no specific activation criteria nor event data set.\n     * Its state has to be controlled manually using a state manager.\n     * It will not fail when all the pointers are lifted from the screen.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/manual-gesture\n     */\n    Manual: () => {\n      return new _manualGesture.ManualGesture();\n    },\n    /**\n     * A continuous gesture that can recognize hovering above the view it's attached to.\n     * The hover effect may be activated by moving a mouse or a stylus over the view.\n     *\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/hover-gesture\n     */\n    Hover: () => {\n      return new _hoverGesture.HoverGesture();\n    },\n    /**\n     * Builds a composed gesture consisting of gestures provided as parameters.\n     * The first one that becomes active cancels the rest of gestures.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#race\n     */\n    Race: (...gestures) => {\n      return new _gestureComposition.ComposedGesture(...gestures);\n    },\n    /**\n     * Builds a composed gesture that allows all base gestures to run simultaneously.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneous\n     */\n    Simultaneous(...gestures) {\n      return new _gestureComposition.SimultaneousGesture(...gestures);\n    },\n    /**\n     * Builds a composed gesture where only one of the provided gestures can become active.\n     * Priority is decided through the order of gestures: the first one has higher priority\n     * than the second one, second one has higher priority than the third one, and so on.\n     * For example, to make a gesture that recognizes both single and double tap you need\n     * to call Exclusive(doubleTap, singleTap).\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#exclusive\n     */\n    Exclusive(...gestures) {\n      return new _gestureComposition.ExclusiveGesture(...gestures);\n    }\n  };\n});","lineCount":137,"map":[[7,2,21,0,"Object"],[7,8,21,0],[7,9,21,0,"defineProperty"],[7,23,21,0],[7,24,21,0,"exports"],[7,31,21,0],[8,4,21,0,"enumerable"],[8,14,21,0],[9,4,21,0,"get"],[9,7,21,0],[9,18,21,0,"get"],[9,19,21,0],[10,6,21,0],[10,13,21,0,"GestureObjects"],[10,27,21,0],[11,4,21,0],[12,2,21,0],[13,2,1,0],[13,6,1,0,"_flingGesture"],[13,19,1,0],[13,22,1,0,"require"],[13,29,1,0],[13,30,1,0,"_dependencyMap"],[13,44,1,0],[14,2,2,0],[14,6,2,0,"_forceTouchGesture"],[14,24,2,0],[14,27,2,0,"require"],[14,34,2,0],[14,35,2,0,"_dependencyMap"],[14,49,2,0],[15,2,3,0],[15,6,3,0,"_gestureComposition"],[15,25,3,0],[15,28,3,0,"require"],[15,35,3,0],[15,36,3,0,"_dependencyMap"],[15,50,3,0],[16,2,4,0],[16,6,4,0,"_longPressGesture"],[16,23,4,0],[16,26,4,0,"require"],[16,33,4,0],[16,34,4,0,"_dependencyMap"],[16,48,4,0],[17,2,5,0],[17,6,5,0,"_panGesture"],[17,17,5,0],[17,20,5,0,"require"],[17,27,5,0],[17,28,5,0,"_dependencyMap"],[17,42,5,0],[18,2,6,0],[18,6,6,0,"_pinchGesture"],[18,19,6,0],[18,22,6,0,"require"],[18,29,6,0],[18,30,6,0,"_dependencyMap"],[18,44,6,0],[19,2,7,0],[19,6,7,0,"_rotationGesture"],[19,22,7,0],[19,25,7,0,"require"],[19,32,7,0],[19,33,7,0,"_dependencyMap"],[19,47,7,0],[20,2,8,0],[20,6,8,0,"_tapGesture"],[20,17,8,0],[20,20,8,0,"require"],[20,27,8,0],[20,28,8,0,"_dependencyMap"],[20,42,8,0],[21,2,9,0],[21,6,9,0,"_nativeGesture"],[21,20,9,0],[21,23,9,0,"require"],[21,30,9,0],[21,31,9,0,"_dependencyMap"],[21,45,9,0],[22,2,10,0],[22,6,10,0,"_manualGesture"],[22,20,10,0],[22,23,10,0,"require"],[22,30,10,0],[22,31,10,0,"_dependencyMap"],[22,45,10,0],[23,2,11,0],[23,6,11,0,"_hoverGesture"],[23,19,11,0],[23,22,11,0,"require"],[23,29,11,0],[23,30,11,0,"_dependencyMap"],[23,44,11,0],[24,2,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[33,2,21,7],[33,8,21,13,"GestureObjects"],[33,22,21,27],[33,25,21,30],[34,4,22,2],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,4,26,2,"Tap"],[38,7,26,5],[38,9,26,7,"Tap"],[38,10,26,7],[38,15,26,13],[39,6,27,4],[39,13,27,11],[39,17,27,15,"TapGesture"],[39,28,27,25],[39,29,27,25,"TapGesture"],[39,39,27,25],[39,40,27,26],[39,41,27,27],[40,4,28,2],[40,5,28,3],[41,4,30,2],[42,0,31,0],[43,0,32,0],[44,0,33,0],[45,4,34,2,"Pan"],[45,7,34,5],[45,9,34,7,"Pan"],[45,10,34,7],[45,15,34,13],[46,6,35,4],[46,13,35,11],[46,17,35,15,"PanGesture"],[46,28,35,25],[46,29,35,25,"PanGesture"],[46,39,35,25],[46,40,35,26],[46,41,35,27],[47,4,36,2],[47,5,36,3],[48,4,38,2],[49,0,39,0],[50,0,40,0],[51,0,41,0],[52,4,42,2,"Pinch"],[52,9,42,7],[52,11,42,9,"Pinch"],[52,12,42,9],[52,17,42,15],[53,6,43,4],[53,13,43,11],[53,17,43,15,"PinchGesture"],[53,30,43,27],[53,31,43,27,"PinchGesture"],[53,43,43,27],[53,44,43,28],[53,45,43,29],[54,4,44,2],[54,5,44,3],[55,4,46,2],[56,0,47,0],[57,0,48,0],[58,0,49,0],[59,4,50,2,"Rotation"],[59,12,50,10],[59,14,50,12,"Rotation"],[59,15,50,12],[59,20,50,18],[60,6,51,4],[60,13,51,11],[60,17,51,15,"RotationGesture"],[60,33,51,30],[60,34,51,30,"RotationGesture"],[60,49,51,30],[60,50,51,31],[60,51,51,32],[61,4,52,2],[61,5,52,3],[62,4,54,2],[63,0,55,0],[64,0,56,0],[65,0,57,0],[66,4,58,2,"Fling"],[66,9,58,7],[66,11,58,9,"Fling"],[66,12,58,9],[66,17,58,15],[67,6,59,4],[67,13,59,11],[67,17,59,15,"FlingGesture"],[67,30,59,27],[67,31,59,27,"FlingGesture"],[67,43,59,27],[67,44,59,28],[67,45,59,29],[68,4,60,2],[68,5,60,3],[69,4,62,2],[70,0,63,0],[71,0,64,0],[72,0,65,0],[73,4,66,2,"LongPress"],[73,13,66,11],[73,15,66,13,"LongPress"],[73,16,66,13],[73,21,66,19],[74,6,67,4],[74,13,67,11],[74,17,67,15,"LongPressGesture"],[74,34,67,31],[74,35,67,31,"LongPressGesture"],[74,51,67,31],[74,52,67,32],[74,53,67,33],[75,4,68,2],[75,5,68,3],[76,4,70,2],[77,0,71,0],[78,0,72,0],[79,0,73,0],[80,0,74,0],[81,4,75,2,"ForceTouch"],[81,14,75,12],[81,16,75,14,"ForceTouch"],[81,17,75,14],[81,22,75,20],[82,6,76,4],[82,13,76,11],[82,17,76,15,"ForceTouchGesture"],[82,35,76,32],[82,36,76,32,"ForceTouchGesture"],[82,53,76,32],[82,54,76,33],[82,55,76,34],[83,4,77,2],[83,5,77,3],[84,4,79,2],[85,0,80,0],[86,0,81,0],[87,0,82,0],[88,0,83,0],[89,4,84,2,"Native"],[89,10,84,8],[89,12,84,10,"Native"],[89,13,84,10],[89,18,84,16],[90,6,85,4],[90,13,85,11],[90,17,85,15,"NativeGesture"],[90,31,85,28],[90,32,85,28,"NativeGesture"],[90,45,85,28],[90,46,85,29],[90,47,85,30],[91,4,86,2],[91,5,86,3],[92,4,88,2],[93,0,89,0],[94,0,90,0],[95,0,91,0],[96,0,92,0],[97,0,93,0],[98,4,94,2,"Manual"],[98,10,94,8],[98,12,94,10,"Manual"],[98,13,94,10],[98,18,94,16],[99,6,95,4],[99,13,95,11],[99,17,95,15,"ManualGesture"],[99,31,95,28],[99,32,95,28,"ManualGesture"],[99,45,95,28],[99,46,95,29],[99,47,95,30],[100,4,96,2],[100,5,96,3],[101,4,98,2],[102,0,99,0],[103,0,100,0],[104,0,101,0],[105,0,102,0],[106,0,103,0],[107,4,104,2,"Hover"],[107,9,104,7],[107,11,104,9,"Hover"],[107,12,104,9],[107,17,104,15],[108,6,105,4],[108,13,105,11],[108,17,105,15,"HoverGesture"],[108,30,105,27],[108,31,105,27,"HoverGesture"],[108,43,105,27],[108,44,105,28],[108,45,105,29],[109,4,106,2],[109,5,106,3],[110,4,108,2],[111,0,109,0],[112,0,110,0],[113,0,111,0],[114,0,112,0],[115,4,113,2,"Race"],[115,8,113,6],[115,10,113,8,"Race"],[115,11,113,9],[115,14,113,12,"gestures"],[115,22,113,20],[115,27,113,25],[116,6,114,4],[116,13,114,11],[116,17,114,15,"ComposedGesture"],[116,36,114,30],[116,37,114,30,"ComposedGesture"],[116,52,114,30],[116,53,114,31],[116,56,114,34,"gestures"],[116,64,114,42],[116,65,114,43],[117,4,115,2],[117,5,115,3],[118,4,117,2],[119,0,118,0],[120,0,119,0],[121,0,120,0],[122,4,121,2,"Simultaneous"],[122,16,121,14,"Simultaneous"],[122,17,121,15],[122,20,121,18,"gestures"],[122,28,121,26],[122,30,121,28],[123,6,122,4],[123,13,122,11],[123,17,122,15,"SimultaneousGesture"],[123,36,122,34],[123,37,122,34,"SimultaneousGesture"],[123,56,122,34],[123,57,122,35],[123,60,122,38,"gestures"],[123,68,122,46],[123,69,122,47],[124,4,123,2],[124,5,123,3],[125,4,125,2],[126,0,126,0],[127,0,127,0],[128,0,128,0],[129,0,129,0],[130,0,130,0],[131,0,131,0],[132,0,132,0],[133,4,133,2,"Exclusive"],[133,13,133,11,"Exclusive"],[133,14,133,12],[133,17,133,15,"gestures"],[133,25,133,23],[133,27,133,25],[134,6,134,4],[134,13,134,11],[134,17,134,15,"ExclusiveGesture"],[134,36,134,31],[134,37,134,31,"ExclusiveGesture"],[134,53,134,31],[134,54,134,32],[134,57,134,35,"gestures"],[134,65,134,43],[134,66,134,44],[135,4,135,2],[136,2,137,0],[136,3,137,1],[137,0,137,2],[137,3]],"functionMap":{"names":["<global>","GestureObjects.Tap","GestureObjects.Pan","GestureObjects.Pinch","GestureObjects.Rotation","GestureObjects.Fling","GestureObjects.LongPress","GestureObjects.ForceTouch","GestureObjects.Native","GestureObjects.Manual","GestureObjects.Hover","GestureObjects.Race","GestureObjects.Simultaneous","GestureObjects.Exclusive"],"mappings":"AAA;OCyB;GDE;OEM;GFE;SGM;GHE;YIM;GJE;SKM;GLE;aMM;GNE;cOO;GPE;UQO;GRE;USQ;GTE;SUQ;GVE;QWO;GXE;EYM;GZE;EaU;GbE"},"hasCjsExports":false},"type":"js/module"}]}