{"dependencies":[{"name":"react-native-web/dist/exports/FlatList","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"DmaJKCBnIi5ZEPZkQdrt7FKBDEo=","exportNames":["*"],"imports":1}},{"name":"./web/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":41},"end":{"line":2,"column":45,"index":86}}],"key":"0QFKLjYfUp4whm+krxBKZT/mgNk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return findNodeHandle;\n    }\n  });\n  var _reactNativeWebDistExportsFlatList = require(_dependencyMap[0], \"react-native-web/dist/exports/FlatList\");\n  var FlatList = _interopDefault(_reactNativeWebDistExportsFlatList);\n  var _webUtils = require(_dependencyMap[1], \"./web/utils\");\n  function findNodeHandle(viewRef) {\n    // TODO: Remove this once we remove old API.\n    if (viewRef instanceof FlatList.default) {\n      // @ts-ignore This is the only way to get the scroll ref from FlatList.\n      return viewRef._listRef._scrollRef.firstChild;\n    } // Old API assumes that child handler is HTMLElement.\n    // However, if we nest handlers, we will get ref to another handler.\n    // In that case, we want to recursively call findNodeHandle with new handler viewTag (which can also be ref to another handler).\n\n    if ((viewRef === null || viewRef === void 0 ? void 0 : viewRef.viewTag) !== undefined) {\n      return findNodeHandle(viewRef.viewTag);\n    }\n    if (viewRef instanceof Element) {\n      if (viewRef.style.display === 'contents') {\n        return findNodeHandle(viewRef.firstChild);\n      }\n      return viewRef;\n    }\n    if ((0, _webUtils.isRNSVGElement)(viewRef)) {\n      return viewRef.elementRef.current;\n    } // In new API, we receive ref object which `current` field points to  wrapper `div` with `display: contents;`.\n    // We want to return the first descendant (in DFS order) that doesn't have this property.\n\n    let element = viewRef === null || viewRef === void 0 ? void 0 : viewRef.current;\n    while (element && element.style.display === 'contents') {\n      element = element.firstChild;\n    }\n    return element;\n  }\n});","lineCount":50,"map":[[12,2,3,15,"Object"],[12,8,3,15],[12,9,3,15,"defineProperty"],[12,23,3,15],[12,24,3,15,"exports"],[12,31,3,15],[13,4,3,15,"enumerable"],[13,14,3,15],[14,4,3,15,"get"],[14,7,3,15],[14,18,3,15,"get"],[14,19,3,15],[15,6,3,15],[15,13,3,15,"findNodeHandle"],[15,27,3,15],[16,4,3,15],[17,2,3,15],[18,2,38,1],[18,6,38,1,"_reactNativeWebDistExportsFlatList"],[18,40,38,1],[18,43,38,1,"require"],[18,50,38,1],[18,51,38,1,"_dependencyMap"],[18,65,38,1],[19,2,38,1],[19,6,38,1,"FlatList"],[19,14,38,1],[19,17,38,1,"_interopDefault"],[19,32,38,1],[19,33,38,1,"_reactNativeWebDistExportsFlatList"],[19,67,38,1],[20,2,2,0],[20,6,2,0,"_webUtils"],[20,15,2,0],[20,18,2,0,"require"],[20,25,2,0],[20,26,2,0,"_dependencyMap"],[20,40,2,0],[21,2,3,15],[21,11,3,24,"findNodeHandle"],[21,25,3,38,"findNodeHandle"],[21,26,3,39,"viewRef"],[21,33,3,46],[21,35,3,48],[22,4,4,2],[23,4,5,2],[23,8,5,6,"viewRef"],[23,15,5,13],[23,27,5,25,"FlatList"],[23,35,5,33],[23,36,5,33,"default"],[23,43,5,33],[23,45,5,35],[24,6,6,4],[25,6,7,4],[25,13,7,11,"viewRef"],[25,20,7,18],[25,21,7,19,"_listRef"],[25,29,7,27],[25,30,7,28,"_scrollRef"],[25,40,7,38],[25,41,7,39,"firstChild"],[25,51,7,49],[26,4,8,2],[26,5,8,3],[26,6,8,4],[27,4,9,2],[28,4,10,2],[30,4,13,2],[30,8,13,6],[30,9,13,7,"viewRef"],[30,16,13,14],[30,21,13,19],[30,25,13,23],[30,29,13,27,"viewRef"],[30,36,13,34],[30,41,13,39],[30,46,13,44],[30,47,13,45],[30,50,13,48],[30,55,13,53],[30,56,13,54],[30,59,13,57,"viewRef"],[30,66,13,64],[30,67,13,65,"viewTag"],[30,74,13,72],[30,80,13,78,"undefined"],[30,89,13,87],[30,91,13,89],[31,6,14,4],[31,13,14,11,"findNodeHandle"],[31,27,14,25],[31,28,14,26,"viewRef"],[31,35,14,33],[31,36,14,34,"viewTag"],[31,43,14,41],[31,44,14,42],[32,4,15,2],[33,4,17,2],[33,8,17,6,"viewRef"],[33,15,17,13],[33,27,17,25,"Element"],[33,34,17,32],[33,36,17,34],[34,6,18,4],[34,10,18,8,"viewRef"],[34,17,18,15],[34,18,18,16,"style"],[34,23,18,21],[34,24,18,22,"display"],[34,31,18,29],[34,36,18,34],[34,46,18,44],[34,48,18,46],[35,8,19,6],[35,15,19,13,"findNodeHandle"],[35,29,19,27],[35,30,19,28,"viewRef"],[35,37,19,35],[35,38,19,36,"firstChild"],[35,48,19,46],[35,49,19,47],[36,6,20,4],[37,6,22,4],[37,13,22,11,"viewRef"],[37,20,22,18],[38,4,23,2],[39,4,25,2],[39,8,25,6],[39,12,25,6,"isRNSVGElement"],[39,21,25,20],[39,22,25,20,"isRNSVGElement"],[39,36,25,20],[39,38,25,21,"viewRef"],[39,45,25,28],[39,46,25,29],[39,48,25,31],[40,6,26,4],[40,13,26,11,"viewRef"],[40,20,26,18],[40,21,26,19,"elementRef"],[40,31,26,29],[40,32,26,30,"current"],[40,39,26,37],[41,4,27,2],[41,5,27,3],[41,6,27,4],[42,4,28,2],[44,4,31,2],[44,8,31,6,"element"],[44,15,31,13],[44,18,31,16,"viewRef"],[44,25,31,23],[44,30,31,28],[44,34,31,32],[44,38,31,36,"viewRef"],[44,45,31,43],[44,50,31,48],[44,55,31,53],[44,56,31,54],[44,59,31,57],[44,64,31,62],[44,65,31,63],[44,68,31,66,"viewRef"],[44,75,31,73],[44,76,31,74,"current"],[44,83,31,81],[45,4,33,2],[45,11,33,9,"element"],[45,18,33,16],[45,22,33,20,"element"],[45,29,33,27],[45,30,33,28,"style"],[45,35,33,33],[45,36,33,34,"display"],[45,43,33,41],[45,48,33,46],[45,58,33,56],[45,60,33,58],[46,6,34,4,"element"],[46,13,34,11],[46,16,34,14,"element"],[46,23,34,21],[46,24,34,22,"firstChild"],[46,34,34,32],[47,4,35,2],[48,4,37,2],[48,11,37,9,"element"],[48,18,37,16],[49,2,38,0],[50,0,38,1],[50,3]],"functionMap":{"names":["<global>","findNodeHandle"],"mappings":"AAA;eCE;CDmC"},"hasCjsExports":false},"type":"js/module"}]}