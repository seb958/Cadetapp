{"dependencies":[{"name":"react-native-web/dist/index","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"55efhPHw3gz2FoQtoN2yI1VuhbM=","exportNames":["*"],"imports":1}},{"name":"./web/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":13,"index":173},"end":{"line":10,"column":35,"index":195}}],"key":"d+hM0IfRyWDRguoehmiB1LZIoD8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = findNodeHandle;\n  var _reactNative = require(_dependencyMap[0], \"react-native-web/dist/index\");\n  var _utils = require(_dependencyMap[1], \"./web/utils\");\n  function findNodeHandle(viewRef) {\n    // TODO: Remove this once we remove old API.\n    if (viewRef instanceof _reactNative.FlatList) {\n      // @ts-ignore This is the only way to get the scroll ref from FlatList.\n      return viewRef._listRef._scrollRef.firstChild;\n    } // Old API assumes that child handler is HTMLElement.\n    // However, if we nest handlers, we will get ref to another handler.\n    // In that case, we want to recursively call findNodeHandle with new handler viewTag (which can also be ref to another handler).\n\n    if ((viewRef === null || viewRef === void 0 ? void 0 : viewRef.viewTag) !== undefined) {\n      return findNodeHandle(viewRef.viewTag);\n    }\n    if (viewRef instanceof Element) {\n      if (viewRef.style.display === 'contents') {\n        return findNodeHandle(viewRef.firstChild);\n      }\n      return viewRef;\n    }\n    if ((0, _utils.isRNSVGElement)(viewRef)) {\n      return viewRef.elementRef.current;\n    } // In new API, we receive ref object which `current` field points to  wrapper `div` with `display: contents;`.\n    // We want to return the first descendant (in DFS order) that doesn't have this property.\n\n    let element = viewRef === null || viewRef === void 0 ? void 0 : viewRef.current;\n    while (element && element.style.display === 'contents') {\n      element = element.firstChild;\n    }\n    return element;\n  }\n});","lineCount":39,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,15],[7,20,6,18,"findNodeHandle"],[7,34,6,32],[8,2,6,33],[8,6,6,33,"_reactNative"],[8,18,6,33],[8,21,6,33,"require"],[8,28,6,33],[8,29,6,33,"_dependencyMap"],[8,43,6,33],[9,2,10,0],[9,6,10,4,"_utils"],[9,12,10,10],[9,15,10,13,"require"],[9,22,10,20],[9,23,10,20,"_dependencyMap"],[9,37,10,20],[9,55,10,34],[9,56,10,35],[10,2,12,0],[10,11,12,9,"findNodeHandle"],[10,25,12,23,"findNodeHandle"],[10,26,12,24,"viewRef"],[10,33,12,31],[10,35,12,33],[11,4,13,2],[12,4,14,2],[12,8,14,6,"viewRef"],[12,15,14,13],[12,27,14,25,"_reactNative"],[12,39,14,37],[12,40,14,38,"FlatList"],[12,48,14,46],[12,50,14,48],[13,6,15,4],[14,6,16,4],[14,13,16,11,"viewRef"],[14,20,16,18],[14,21,16,19,"_listRef"],[14,29,16,27],[14,30,16,28,"_scrollRef"],[14,40,16,38],[14,41,16,39,"firstChild"],[14,51,16,49],[15,4,17,2],[15,5,17,3],[15,6,17,4],[16,4,18,2],[17,4,19,2],[19,4,22,2],[19,8,22,6],[19,9,22,7,"viewRef"],[19,16,22,14],[19,21,22,19],[19,25,22,23],[19,29,22,27,"viewRef"],[19,36,22,34],[19,41,22,39],[19,46,22,44],[19,47,22,45],[19,50,22,48],[19,55,22,53],[19,56,22,54],[19,59,22,57,"viewRef"],[19,66,22,64],[19,67,22,65,"viewTag"],[19,74,22,72],[19,80,22,78,"undefined"],[19,89,22,87],[19,91,22,89],[20,6,23,4],[20,13,23,11,"findNodeHandle"],[20,27,23,25],[20,28,23,26,"viewRef"],[20,35,23,33],[20,36,23,34,"viewTag"],[20,43,23,41],[20,44,23,42],[21,4,24,2],[22,4,26,2],[22,8,26,6,"viewRef"],[22,15,26,13],[22,27,26,25,"Element"],[22,34,26,32],[22,36,26,34],[23,6,27,4],[23,10,27,8,"viewRef"],[23,17,27,15],[23,18,27,16,"style"],[23,23,27,21],[23,24,27,22,"display"],[23,31,27,29],[23,36,27,34],[23,46,27,44],[23,48,27,46],[24,8,28,6],[24,15,28,13,"findNodeHandle"],[24,29,28,27],[24,30,28,28,"viewRef"],[24,37,28,35],[24,38,28,36,"firstChild"],[24,48,28,46],[24,49,28,47],[25,6,29,4],[26,6,31,4],[26,13,31,11,"viewRef"],[26,20,31,18],[27,4,32,2],[28,4,34,2],[28,8,34,6],[28,9,34,7],[28,10,34,8],[28,12,34,10,"_utils"],[28,18,34,16],[28,19,34,17,"isRNSVGElement"],[28,33,34,31],[28,35,34,33,"viewRef"],[28,42,34,40],[28,43,34,41],[28,45,34,43],[29,6,35,4],[29,13,35,11,"viewRef"],[29,20,35,18],[29,21,35,19,"elementRef"],[29,31,35,29],[29,32,35,30,"current"],[29,39,35,37],[30,4,36,2],[30,5,36,3],[30,6,36,4],[31,4,37,2],[33,4,40,2],[33,8,40,6,"element"],[33,15,40,13],[33,18,40,16,"viewRef"],[33,25,40,23],[33,30,40,28],[33,34,40,32],[33,38,40,36,"viewRef"],[33,45,40,43],[33,50,40,48],[33,55,40,53],[33,56,40,54],[33,59,40,57],[33,64,40,62],[33,65,40,63],[33,68,40,66,"viewRef"],[33,75,40,73],[33,76,40,74,"current"],[33,83,40,81],[34,4,42,2],[34,11,42,9,"element"],[34,18,42,16],[34,22,42,20,"element"],[34,29,42,27],[34,30,42,28,"style"],[34,35,42,33],[34,36,42,34,"display"],[34,43,42,41],[34,48,42,46],[34,58,42,56],[34,60,42,58],[35,6,43,4,"element"],[35,13,43,11],[35,16,43,14,"element"],[35,23,43,21],[35,24,43,22,"firstChild"],[35,34,43,32],[36,4,44,2],[37,4,46,2],[37,11,46,9,"element"],[37,18,46,16],[38,2,47,0],[39,0,47,1],[39,3]],"functionMap":{"names":["<global>","findNodeHandle"],"mappings":"AAA;ACW;CDmC"},"hasCjsExports":true},"type":"js/module"}]}