{"dependencies":[{"name":"./flingGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":20,"index":133},"end":{"line":7,"column":45,"index":158}}],"key":"Qo2tLOG1OJl/6EwtGlRuX3dZXkg=","exportNames":["*"],"imports":1}},{"name":"./forceTouchGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":25,"index":185},"end":{"line":8,"column":55,"index":215}}],"key":"FQEHpuyTwsIk4ZGTvolDI9Uggr8=","exportNames":["*"],"imports":1}},{"name":"./gestureComposition","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":26,"index":243},"end":{"line":9,"column":57,"index":274}}],"key":"CzaLaXaAjnbh3Y7D5eZmMDqRqAo=","exportNames":["*"],"imports":1}},{"name":"./longPressGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":24,"index":300},"end":{"line":10,"column":53,"index":329}}],"key":"5Z+RW/IQ/CGIVGVFijh7QxVgiOQ=","exportNames":["*"],"imports":1}},{"name":"./panGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":18,"index":349},"end":{"line":11,"column":41,"index":372}}],"key":"FewYScBwJxagHvVm5wao6gIdrD4=","exportNames":["*"],"imports":1}},{"name":"./pinchGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":20,"index":394},"end":{"line":12,"column":45,"index":419}}],"key":"wLAuWCaDSh+9YlB6lAJaBUSgLEo=","exportNames":["*"],"imports":1}},{"name":"./rotationGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":23,"index":444},"end":{"line":13,"column":51,"index":472}}],"key":"fMkPnpy9RBZmM8GaQ3raypOXoJU=","exportNames":["*"],"imports":1}},{"name":"./tapGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":18,"index":492},"end":{"line":14,"column":41,"index":515}}],"key":"wowBsYoaXBg5S6nfjJdljX0xK64=","exportNames":["*"],"imports":1}},{"name":"./nativeGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":21,"index":538},"end":{"line":15,"column":47,"index":564}}],"key":"S+p7eSZgZpvo85svVpwXNxpdenU=","exportNames":["*"],"imports":1}},{"name":"./manualGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":21,"index":587},"end":{"line":16,"column":47,"index":613}}],"key":"ptvMrM2Ns5ezi+xfRMQPHhI0VFA=","exportNames":["*"],"imports":1}},{"name":"./hoverGesture","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":20,"index":635},"end":{"line":17,"column":45,"index":660}}],"key":"xvkC+casoq/9tEiez+vwITQC3ZA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.GestureObjects = void 0;\n  var _flingGesture = require(_dependencyMap[0], \"./flingGesture\");\n  var _forceTouchGesture = require(_dependencyMap[1], \"./forceTouchGesture\");\n  var _gestureComposition = require(_dependencyMap[2], \"./gestureComposition\");\n  var _longPressGesture = require(_dependencyMap[3], \"./longPressGesture\");\n  var _panGesture = require(_dependencyMap[4], \"./panGesture\");\n  var _pinchGesture = require(_dependencyMap[5], \"./pinchGesture\");\n  var _rotationGesture = require(_dependencyMap[6], \"./rotationGesture\");\n  var _tapGesture = require(_dependencyMap[7], \"./tapGesture\");\n  var _nativeGesture = require(_dependencyMap[8], \"./nativeGesture\");\n  var _manualGesture = require(_dependencyMap[9], \"./manualGesture\");\n  var _hoverGesture = require(_dependencyMap[10], \"./hoverGesture\");\n  /**\n   * `Gesture` is the object that allows you to create and compose gestures.\n   *\n   * ### Remarks\n   * - Consider wrapping your gesture configurations with `useMemo`, as it will reduce the amount of work Gesture Handler has to do under the hood when updating gestures.\n   *\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/gesture\n   */\n  const GestureObjects = exports.GestureObjects = {\n    /**\n     * A discrete gesture that recognizes one or many taps.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture\n     */\n    Tap: () => {\n      return new _tapGesture.TapGesture();\n    },\n    /**\n     * A continuous gesture that can recognize a panning (dragging) gesture and track its movement.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture\n     */\n    Pan: () => {\n      return new _panGesture.PanGesture();\n    },\n    /**\n     * A continuous gesture that recognizes pinch gesture. It allows for tracking the distance between two fingers and use that information to scale or zoom your content.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pinch-gesture\n     */\n    Pinch: () => {\n      return new _pinchGesture.PinchGesture();\n    },\n    /**\n     * A continuous gesture that can recognize rotation and track its movement.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/rotation-gesture\n     */\n    Rotation: () => {\n      return new _rotationGesture.RotationGesture();\n    },\n    /**\n     * A discrete gesture that activates when the movement is sufficiently fast.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/fling-gesture\n     */\n    Fling: () => {\n      return new _flingGesture.FlingGesture();\n    },\n    /**\n     * A discrete gesture that activates when the corresponding view is pressed for a sufficiently long time.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/long-press-gesture\n     */\n    LongPress: () => {\n      return new _longPressGesture.LongPressGesture();\n    },\n    /**\n     * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n     *\n     *  #### iOS only\n     * A continuous gesture that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/force-touch-gesture\n     */\n    ForceTouch: () => {\n      return new _forceTouchGesture.ForceTouchGesture();\n    },\n    /**\n     * A gesture that allows other touch handling components to participate in RNGH's gesture system.\n     * When used, the other component should be the direct child of a `GestureDetector`.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/native-gesture\n     */\n    Native: () => {\n      return new _nativeGesture.NativeGesture();\n    },\n    /**\n     * A plain gesture that has no specific activation criteria nor event data set.\n     * Its state has to be controlled manually using a state manager.\n     * It will not fail when all the pointers are lifted from the screen.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/manual-gesture\n     */\n    Manual: () => {\n      return new _manualGesture.ManualGesture();\n    },\n    /**\n     * A continuous gesture that can recognize hovering above the view it's attached to.\n     * The hover effect may be activated by moving a mouse or a stylus over the view.\n     *\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/hover-gesture\n     */\n    Hover: () => {\n      return new _hoverGesture.HoverGesture();\n    },\n    /**\n     * Builds a composed gesture consisting of gestures provided as parameters.\n     * The first one that becomes active cancels the rest of gestures.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#race\n     */\n    Race: (...gestures) => {\n      return new _gestureComposition.ComposedGesture(...gestures);\n    },\n    /**\n     * Builds a composed gesture that allows all base gestures to run simultaneously.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneous\n     */\n    Simultaneous(...gestures) {\n      return new _gestureComposition.SimultaneousGesture(...gestures);\n    },\n    /**\n     * Builds a composed gesture where only one of the provided gestures can become active.\n     * Priority is decided through the order of gestures: the first one has higher priority\n     * than the second one, second one has higher priority than the third one, and so on.\n     * For example, to make a gesture that recognizes both single and double tap you need\n     * to call Exclusive(doubleTap, singleTap).\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#exclusive\n     */\n    Exclusive(...gestures) {\n      return new _gestureComposition.ExclusiveGesture(...gestures);\n    }\n  };\n});","lineCount":133,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"GestureObjects"],[7,24,6,22],[7,27,6,25],[7,32,6,30],[7,33,6,31],[8,2,7,0],[8,6,7,4,"_flingGesture"],[8,19,7,17],[8,22,7,20,"require"],[8,29,7,27],[8,30,7,27,"_dependencyMap"],[8,44,7,27],[8,65,7,44],[8,66,7,45],[9,2,8,0],[9,6,8,4,"_forceTouchGesture"],[9,24,8,22],[9,27,8,25,"require"],[9,34,8,32],[9,35,8,32,"_dependencyMap"],[9,49,8,32],[9,75,8,54],[9,76,8,55],[10,2,9,0],[10,6,9,4,"_gestureComposition"],[10,25,9,23],[10,28,9,26,"require"],[10,35,9,33],[10,36,9,33,"_dependencyMap"],[10,50,9,33],[10,77,9,56],[10,78,9,57],[11,2,10,0],[11,6,10,4,"_longPressGesture"],[11,23,10,21],[11,26,10,24,"require"],[11,33,10,31],[11,34,10,31,"_dependencyMap"],[11,48,10,31],[11,73,10,52],[11,74,10,53],[12,2,11,0],[12,6,11,4,"_panGesture"],[12,17,11,15],[12,20,11,18,"require"],[12,27,11,25],[12,28,11,25,"_dependencyMap"],[12,42,11,25],[12,61,11,40],[12,62,11,41],[13,2,12,0],[13,6,12,4,"_pinchGesture"],[13,19,12,17],[13,22,12,20,"require"],[13,29,12,27],[13,30,12,27,"_dependencyMap"],[13,44,12,27],[13,65,12,44],[13,66,12,45],[14,2,13,0],[14,6,13,4,"_rotationGesture"],[14,22,13,20],[14,25,13,23,"require"],[14,32,13,30],[14,33,13,30,"_dependencyMap"],[14,47,13,30],[14,71,13,50],[14,72,13,51],[15,2,14,0],[15,6,14,4,"_tapGesture"],[15,17,14,15],[15,20,14,18,"require"],[15,27,14,25],[15,28,14,25,"_dependencyMap"],[15,42,14,25],[15,61,14,40],[15,62,14,41],[16,2,15,0],[16,6,15,4,"_nativeGesture"],[16,20,15,18],[16,23,15,21,"require"],[16,30,15,28],[16,31,15,28,"_dependencyMap"],[16,45,15,28],[16,67,15,46],[16,68,15,47],[17,2,16,0],[17,6,16,4,"_manualGesture"],[17,20,16,18],[17,23,16,21,"require"],[17,30,16,28],[17,31,16,28,"_dependencyMap"],[17,45,16,28],[17,67,16,46],[17,68,16,47],[18,2,17,0],[18,6,17,4,"_hoverGesture"],[18,19,17,17],[18,22,17,20,"require"],[18,29,17,27],[18,30,17,27,"_dependencyMap"],[18,44,17,27],[18,66,17,44],[18,67,17,45],[19,2,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,2,26,0],[27,8,26,6,"GestureObjects"],[27,22,26,20],[27,25,26,23,"exports"],[27,32,26,30],[27,33,26,31,"GestureObjects"],[27,47,26,45],[27,50,26,48],[28,4,27,2],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,4,31,2,"Tap"],[32,7,31,5],[32,9,31,7,"Tap"],[32,10,31,7],[32,15,31,13],[33,6,32,4],[33,13,32,11],[33,17,32,15,"_tapGesture"],[33,28,32,26],[33,29,32,27,"TapGesture"],[33,39,32,37],[33,40,32,38],[33,41,32,39],[34,4,33,2],[34,5,33,3],[35,4,34,2],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,4,38,2,"Pan"],[39,7,38,5],[39,9,38,7,"Pan"],[39,10,38,7],[39,15,38,13],[40,6,39,4],[40,13,39,11],[40,17,39,15,"_panGesture"],[40,28,39,26],[40,29,39,27,"PanGesture"],[40,39,39,37],[40,40,39,38],[40,41,39,39],[41,4,40,2],[41,5,40,3],[42,4,41,2],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,4,45,2,"Pinch"],[46,9,45,7],[46,11,45,9,"Pinch"],[46,12,45,9],[46,17,45,15],[47,6,46,4],[47,13,46,11],[47,17,46,15,"_pinchGesture"],[47,30,46,28],[47,31,46,29,"PinchGesture"],[47,43,46,41],[47,44,46,42],[47,45,46,43],[48,4,47,2],[48,5,47,3],[49,4,48,2],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,4,52,2,"Rotation"],[53,12,52,10],[53,14,52,12,"Rotation"],[53,15,52,12],[53,20,52,18],[54,6,53,4],[54,13,53,11],[54,17,53,15,"_rotationGesture"],[54,33,53,31],[54,34,53,32,"RotationGesture"],[54,49,53,47],[54,50,53,48],[54,51,53,49],[55,4,54,2],[55,5,54,3],[56,4,55,2],[57,0,56,0],[58,0,57,0],[59,0,58,0],[60,4,59,2,"Fling"],[60,9,59,7],[60,11,59,9,"Fling"],[60,12,59,9],[60,17,59,15],[61,6,60,4],[61,13,60,11],[61,17,60,15,"_flingGesture"],[61,30,60,28],[61,31,60,29,"FlingGesture"],[61,43,60,41],[61,44,60,42],[61,45,60,43],[62,4,61,2],[62,5,61,3],[63,4,62,2],[64,0,63,0],[65,0,64,0],[66,0,65,0],[67,4,66,2,"LongPress"],[67,13,66,11],[67,15,66,13,"LongPress"],[67,16,66,13],[67,21,66,19],[68,6,67,4],[68,13,67,11],[68,17,67,15,"_longPressGesture"],[68,34,67,32],[68,35,67,33,"LongPressGesture"],[68,51,67,49],[68,52,67,50],[68,53,67,51],[69,4,68,2],[69,5,68,3],[70,4,69,2],[71,0,70,0],[72,0,71,0],[73,0,72,0],[74,0,73,0],[75,0,74,0],[76,0,75,0],[77,4,76,2,"ForceTouch"],[77,14,76,12],[77,16,76,14,"ForceTouch"],[77,17,76,14],[77,22,76,20],[78,6,77,4],[78,13,77,11],[78,17,77,15,"_forceTouchGesture"],[78,35,77,33],[78,36,77,34,"ForceTouchGesture"],[78,53,77,51],[78,54,77,52],[78,55,77,53],[79,4,78,2],[79,5,78,3],[80,4,79,2],[81,0,80,0],[82,0,81,0],[83,0,82,0],[84,0,83,0],[85,4,84,2,"Native"],[85,10,84,8],[85,12,84,10,"Native"],[85,13,84,10],[85,18,84,16],[86,6,85,4],[86,13,85,11],[86,17,85,15,"_nativeGesture"],[86,31,85,29],[86,32,85,30,"NativeGesture"],[86,45,85,43],[86,46,85,44],[86,47,85,45],[87,4,86,2],[87,5,86,3],[88,4,87,2],[89,0,88,0],[90,0,89,0],[91,0,90,0],[92,0,91,0],[93,0,92,0],[94,4,93,2,"Manual"],[94,10,93,8],[94,12,93,10,"Manual"],[94,13,93,10],[94,18,93,16],[95,6,94,4],[95,13,94,11],[95,17,94,15,"_manualGesture"],[95,31,94,29],[95,32,94,30,"ManualGesture"],[95,45,94,43],[95,46,94,44],[95,47,94,45],[96,4,95,2],[96,5,95,3],[97,4,96,2],[98,0,97,0],[99,0,98,0],[100,0,99,0],[101,0,100,0],[102,0,101,0],[103,4,102,2,"Hover"],[103,9,102,7],[103,11,102,9,"Hover"],[103,12,102,9],[103,17,102,15],[104,6,103,4],[104,13,103,11],[104,17,103,15,"_hoverGesture"],[104,30,103,28],[104,31,103,29,"HoverGesture"],[104,43,103,41],[104,44,103,42],[104,45,103,43],[105,4,104,2],[105,5,104,3],[106,4,105,2],[107,0,106,0],[108,0,107,0],[109,0,108,0],[110,0,109,0],[111,4,110,2,"Race"],[111,8,110,6],[111,10,110,8,"Race"],[111,11,110,9],[111,14,110,12,"gestures"],[111,22,110,20],[111,27,110,25],[112,6,111,4],[112,13,111,11],[112,17,111,15,"_gestureComposition"],[112,36,111,34],[112,37,111,35,"ComposedGesture"],[112,52,111,50],[112,53,111,51],[112,56,111,54,"gestures"],[112,64,111,62],[112,65,111,63],[113,4,112,2],[113,5,112,3],[114,4,113,2],[115,0,114,0],[116,0,115,0],[117,0,116,0],[118,4,117,2,"Simultaneous"],[118,16,117,14,"Simultaneous"],[118,17,117,15],[118,20,117,18,"gestures"],[118,28,117,26],[118,30,117,28],[119,6,118,4],[119,13,118,11],[119,17,118,15,"_gestureComposition"],[119,36,118,34],[119,37,118,35,"SimultaneousGesture"],[119,56,118,54],[119,57,118,55],[119,60,118,58,"gestures"],[119,68,118,66],[119,69,118,67],[120,4,119,2],[120,5,119,3],[121,4,120,2],[122,0,121,0],[123,0,122,0],[124,0,123,0],[125,0,124,0],[126,0,125,0],[127,0,126,0],[128,0,127,0],[129,4,128,2,"Exclusive"],[129,13,128,11,"Exclusive"],[129,14,128,12],[129,17,128,15,"gestures"],[129,25,128,23],[129,27,128,25],[130,6,129,4],[130,13,129,11],[130,17,129,15,"_gestureComposition"],[130,36,129,34],[130,37,129,35,"ExclusiveGesture"],[130,53,129,51],[130,54,129,52],[130,57,129,55,"gestures"],[130,65,129,63],[130,66,129,64],[131,4,130,2],[132,2,131,0],[132,3,131,1],[133,0,131,2],[133,3]],"functionMap":{"names":["<global>","exports.GestureObjects.Tap","exports.GestureObjects.Pan","exports.GestureObjects.Pinch","exports.GestureObjects.Rotation","exports.GestureObjects.Fling","exports.GestureObjects.LongPress","exports.GestureObjects.ForceTouch","exports.GestureObjects.Native","exports.GestureObjects.Manual","exports.GestureObjects.Hover","exports.GestureObjects.Race","exports.GestureObjects.Simultaneous","exports.GestureObjects.Exclusive"],"mappings":"AAA;OC8B;GDE;OEK;GFE;SGK;GHE;YIK;GJE;SKK;GLE;aMK;GNE;cOQ;GPE;UQM;GRE;USO;GTE;SUO;GVE;QWM;GXE;EYK;GZE;EaS;GbE"},"hasCjsExports":true},"type":"js/module"}]}