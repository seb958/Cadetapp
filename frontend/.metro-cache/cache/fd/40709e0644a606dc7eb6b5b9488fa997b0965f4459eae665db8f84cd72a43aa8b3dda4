{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"],"imports":1}},{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":291},"end":{"line":6,"column":36,"index":327}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":375},"end":{"line":8,"column":33,"index":408}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":409},"end":{"line":9,"column":39,"index":448}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":449},"end":{"line":10,"column":45,"index":494}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"],"imports":1}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":495},"end":{"line":11,"column":55,"index":550}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  const _excluded = [\"enabled\"];\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _babelRuntimeHelpersObjectWithoutPropertiesLoose = require(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\n  var _objectWithoutPropertiesLoose = _interopDefault(_babelRuntimeHelpersObjectWithoutPropertiesLoose);\n  var _egjsHammerjs = require(_dependencyMap[1], \"@egjs/hammerjs\");\n  var Hammer = _interopDefault(_egjsHammerjs);\n  var _reactNativeWebDistExportsFindNodeHandle = require(_dependencyMap[2], \"react-native-web/dist/exports/findNodeHandle\");\n  var findNodeHandle = _interopDefault(_reactNativeWebDistExportsFindNodeHandle);\n  var _State = require(_dependencyMap[3], \"../State\");\n  var _constants = require(_dependencyMap[4], \"./constants\");\n  var _NodeManager = require(_dependencyMap[5], \"./NodeManager\");\n  var NodeManager = _interopNamespace(_NodeManager);\n  var _ghQueueMicrotask = require(_dependencyMap[6], \"../ghQueueMicrotask\");\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  /* eslint-disable eslint-comments/no-unlimited-disable */\n\n  /* eslint-disable */\n\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\n  let gestureInstances = 0;\n  class GestureHandler {\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    } // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      _defineProperty(this, \"handlerTag\", void 0);\n      _defineProperty(this, \"isGestureRunning\", false);\n      _defineProperty(this, \"view\", null);\n      _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n      _defineProperty(this, \"hasGestureFailed\", false);\n      _defineProperty(this, \"hammer\", null);\n      _defineProperty(this, \"initialRotation\", null);\n      _defineProperty(this, \"__initialX\", void 0);\n      _defineProperty(this, \"__initialY\", void 0);\n      _defineProperty(this, \"config\", {});\n      _defineProperty(this, \"previousState\", _State.State.UNDETERMINED);\n      _defineProperty(this, \"pendingGestures\", {});\n      _defineProperty(this, \"oldState\", _State.State.UNDETERMINED);\n      _defineProperty(this, \"lastSentState\", null);\n      _defineProperty(this, \"gestureInstance\", void 0);\n      _defineProperty(this, \"_stillWaiting\", void 0);\n      _defineProperty(this, \"propsRef\", void 0);\n      _defineProperty(this, \"ref\", void 0);\n      _defineProperty(this, \"clearSelfAsPending\", () => {\n        if (Array.isArray(this.config.waitFor)) {\n          for (const gesture of this.config.waitFor) {\n            gesture.removePendingGesture(this.id);\n          }\n        }\n      });\n      _defineProperty(this, \"destroy\", () => {\n        this.clearSelfAsPending();\n        if (this.hammer) {\n          this.hammer.stop(false);\n          this.hammer.destroy();\n        }\n        this.hammer = null;\n      });\n      _defineProperty(this, \"isPointInView\", ({\n        x,\n        y\n      }) => {\n        // @ts-ignore FIXME(TS)\n        const rect = this.view.getBoundingClientRect();\n        const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n        return pointerInside;\n      });\n      _defineProperty(this, \"sendEvent\", nativeEvent => {\n        const {\n          onGestureHandlerEvent,\n          onGestureHandlerStateChange\n        } = this.propsRef.current;\n        const event = this.transformEventData(nativeEvent);\n        invokeNullableMethod(onGestureHandlerEvent, event);\n        if (this.lastSentState !== event.nativeEvent.state) {\n          this.lastSentState = event.nativeEvent.state;\n          invokeNullableMethod(onGestureHandlerStateChange, event);\n        }\n      });\n      _defineProperty(this, \"sync\", () => {\n        const gesture = this.hammer.get(this.name);\n        if (!gesture) return;\n        const enable = (recognizer, inputData) => {\n          if (!this.config.enabled) {\n            this.isGestureRunning = false;\n            this.hasGestureFailed = false;\n            return false;\n          } // Prevent events before the system is ready.\n\n          if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n            return this.shouldEnableGestureOnSetup;\n          }\n          if (this.hasGestureFailed) {\n            return false;\n          }\n          if (!this.isDiscrete) {\n            if (this.isGestureRunning) {\n              return true;\n            } // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n            // Only process if there are views to wait for.\n\n            this._stillWaiting = this._getPendingGestures(); // This gesture should continue waiting.\n\n            if (this._stillWaiting.length) {\n              // Check to see if one of the gestures you're waiting for has started.\n              // If it has then the gesture should fail.\n              for (const gesture of this._stillWaiting) {\n                // When the target gesture has started, this gesture must force fail.\n                if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                  this.hasGestureFailed = true;\n                  this.isGestureRunning = false;\n                  return false;\n                }\n              } // This gesture shouldn't start until the others have finished.\n\n              return false;\n            }\n          } // Use default behaviour\n\n          if (!this.hasCustomActivationCriteria) {\n            return true;\n          }\n          const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation; // @ts-ignore FIXME(TS)\n\n          const {\n            success,\n            failed\n          } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, Object.assign({}, inputData, {\n            deltaRotation\n          }));\n          if (failed) {\n            this.simulateCancelEvent(inputData);\n            this.hasGestureFailed = true;\n          }\n          return success;\n        };\n        const params = this.getHammerConfig(); // @ts-ignore FIXME(TS)\n\n        gesture.set(Object.assign({}, params, {\n          enable\n        }));\n      });\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    updateGestureConfig(_ref) {\n      let {\n          enabled = true\n        } = _ref,\n        props = (0, _objectWithoutPropertiesLoose.default)(_ref, _excluded);\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig(Object.assign({\n        enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event; // const direction = DirectionMap[ev.direction];\n\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      }); // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: Object.assign({\n          numberOfPointers,\n          state,\n          pointerInside\n        }, this.transformNativeEvent(event), {\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    } // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(Object.assign({}, event, {\n        eventType: Hammer.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      var _config$simultaneousH, _config$simultaneousH2;\n      return (_config$simultaneousH = (_config$simultaneousH2 = config.simultaneousHandlers) === null || _config$simultaneousH2 === void 0 ? void 0 : _config$simultaneousH2.some(handler => handler.isNative)) !== null && _config$simultaneousH !== void 0 ? _config$simultaneousH : false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      } // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = (0, findNodeHandle.default)(ref); // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new Hammer.default.Manager(this.view, {\n        inputClass: Hammer.default.TouchInput\n      }) : new Hammer.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this; // @ts-ignore TODO(TS)\n\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev); // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    simulateCancelEvent(_inputData) {} // Validate the props\n\n    ensureConfig(config) {\n      const props = Object.assign({}, config); // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  } // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = GestureHandler;\n});","lineCount":520,"map":[[28,2,562,0,"Object"],[28,8,562,0],[28,9,562,0,"defineProperty"],[28,23,562,0],[28,24,562,0,"exports"],[28,31,562,0],[29,4,562,0,"enumerable"],[29,14,562,0],[30,4,562,0,"get"],[30,7,562,0],[30,18,562,0,"get"],[30,19,562,0],[31,6,562,0],[31,13,562,0,"_default"],[31,21,562,0],[32,4,562,0],[33,2,562,0],[34,2,562,30],[34,6,562,30,"_babelRuntimeHelpersObjectWithoutPropertiesLoose"],[34,54,562,30],[34,57,562,30,"require"],[34,64,562,30],[34,65,562,30,"_dependencyMap"],[34,79,562,30],[35,2,562,30],[35,6,562,30,"_objectWithoutPropertiesLoose"],[35,35,562,30],[35,38,562,30,"_interopDefault"],[35,53,562,30],[35,54,562,30,"_babelRuntimeHelpersObjectWithoutPropertiesLoose"],[35,102,562,30],[36,2,6,0],[36,6,6,0,"_egjsHammerjs"],[36,19,6,0],[36,22,6,0,"require"],[36,29,6,0],[36,30,6,0,"_dependencyMap"],[36,44,6,0],[37,2,6,0],[37,6,6,0,"Hammer"],[37,12,6,0],[37,15,6,0,"_interopDefault"],[37,30,6,0],[37,31,6,0,"_egjsHammerjs"],[37,44,6,0],[38,2,6,36],[38,6,6,36,"_reactNativeWebDistExportsFindNodeHandle"],[38,46,6,36],[38,49,6,36,"require"],[38,56,6,36],[38,57,6,36,"_dependencyMap"],[38,71,6,36],[39,2,6,36],[39,6,6,36,"findNodeHandle"],[39,20,6,36],[39,23,6,36,"_interopDefault"],[39,38,6,36],[39,39,6,36,"_reactNativeWebDistExportsFindNodeHandle"],[39,79,6,36],[40,2,8,0],[40,6,8,0,"_State"],[40,12,8,0],[40,15,8,0,"require"],[40,22,8,0],[40,23,8,0,"_dependencyMap"],[40,37,8,0],[41,2,9,0],[41,6,9,0,"_constants"],[41,16,9,0],[41,19,9,0,"require"],[41,26,9,0],[41,27,9,0,"_dependencyMap"],[41,41,9,0],[42,2,10,0],[42,6,10,0,"_NodeManager"],[42,18,10,0],[42,21,10,0,"require"],[42,28,10,0],[42,29,10,0,"_dependencyMap"],[42,43,10,0],[43,2,10,0],[43,6,10,0,"NodeManager"],[43,17,10,0],[43,20,10,0,"_interopNamespace"],[43,37,10,0],[43,38,10,0,"_NodeManager"],[43,50,10,0],[44,2,11,0],[44,6,11,0,"_ghQueueMicrotask"],[44,23,11,0],[44,26,11,0,"require"],[44,33,11,0],[44,34,11,0,"_dependencyMap"],[44,48,11,0],[45,2,1,0],[45,11,1,9,"_defineProperty"],[45,26,1,24,"_defineProperty"],[45,27,1,25,"obj"],[45,30,1,28],[45,32,1,30,"key"],[45,35,1,33],[45,37,1,35,"value"],[45,42,1,40],[45,44,1,42],[46,4,1,44],[46,8,1,48,"key"],[46,11,1,51],[46,15,1,55,"obj"],[46,18,1,58],[46,20,1,60],[47,6,1,62,"Object"],[47,12,1,68],[47,13,1,69,"defineProperty"],[47,27,1,83],[47,28,1,84,"obj"],[47,31,1,87],[47,33,1,89,"key"],[47,36,1,92],[47,38,1,94],[48,8,1,96,"value"],[48,13,1,101],[48,15,1,103,"value"],[48,20,1,108],[49,8,1,110,"enumerable"],[49,18,1,120],[49,20,1,122],[49,24,1,126],[50,8,1,128,"configurable"],[50,20,1,140],[50,22,1,142],[50,26,1,146],[51,8,1,148,"writable"],[51,16,1,156],[51,18,1,158],[52,6,1,163],[52,7,1,164],[52,8,1,165],[53,4,1,167],[53,5,1,168],[53,11,1,174],[54,6,1,176,"obj"],[54,9,1,179],[54,10,1,180,"key"],[54,13,1,183],[54,14,1,184],[54,17,1,187,"value"],[54,22,1,192],[55,4,1,194],[56,4,1,196],[56,11,1,203,"obj"],[56,14,1,206],[57,2,1,208],[59,2,3,0],[61,2,5,0],[63,2,11,56],[65,2,13,0],[65,6,13,4,"gestureInstances"],[65,22,13,20],[65,25,13,23],[65,26,13,24],[66,2,15,0],[66,8,15,6,"GestureHandler"],[66,22,15,20],[66,23,15,21],[67,4,16,2],[67,8,16,6,"id"],[67,10,16,8,"id"],[67,11,16,8],[67,13,16,11],[68,6,17,4],[68,13,17,11],[68,16,17,14],[68,20,17,18],[68,21,17,19,"name"],[68,25,17,23],[68,28,17,26],[68,32,17,30],[68,33,17,31,"gestureInstance"],[68,48,17,46],[68,50,17,48],[69,4,18,2],[69,5,18,3],[69,6,18,4],[70,4,19,2],[72,4,22,2],[72,8,22,6,"isNative"],[72,16,22,14,"isNative"],[72,17,22,14],[72,19,22,17],[73,6,23,4],[73,13,23,11],[73,18,23,16],[74,4,24,2],[75,4,26,2],[75,8,26,6,"isDiscrete"],[75,18,26,16,"isDiscrete"],[75,19,26,16],[75,21,26,19],[76,6,27,4],[76,13,27,11],[76,18,27,16],[77,4,28,2],[78,4,30,2],[78,8,30,6,"shouldEnableGestureOnSetup"],[78,34,30,32,"shouldEnableGestureOnSetup"],[78,35,30,32],[78,37,30,35],[79,6,31,4],[79,12,31,10],[79,16,31,14,"Error"],[79,21,31,19],[79,22,31,20],[79,79,31,77],[79,80,31,78],[80,4,32,2],[81,4,34,2,"constructor"],[81,15,34,13,"constructor"],[81,16,34,13],[81,18,34,16],[82,6,35,4,"_defineProperty"],[82,21,35,19],[82,22,35,20],[82,26,35,24],[82,28,35,26],[82,40,35,38],[82,42,35,40],[82,47,35,45],[82,48,35,46],[82,49,35,47],[83,6,37,4,"_defineProperty"],[83,21,37,19],[83,22,37,20],[83,26,37,24],[83,28,37,26],[83,46,37,44],[83,48,37,46],[83,53,37,51],[83,54,37,52],[84,6,39,4,"_defineProperty"],[84,21,39,19],[84,22,39,20],[84,26,39,24],[84,28,39,26],[84,34,39,32],[84,36,39,34],[84,40,39,38],[84,41,39,39],[85,6,41,4,"_defineProperty"],[85,21,41,19],[85,22,41,20],[85,26,41,24],[85,28,41,26],[85,57,41,55],[85,59,41,57],[85,64,41,62],[85,65,41,63],[85,66,41,64],[86,6,43,4,"_defineProperty"],[86,21,43,19],[86,22,43,20],[86,26,43,24],[86,28,43,26],[86,46,43,44],[86,48,43,46],[86,53,43,51],[86,54,43,52],[87,6,45,4,"_defineProperty"],[87,21,45,19],[87,22,45,20],[87,26,45,24],[87,28,45,26],[87,36,45,34],[87,38,45,36],[87,42,45,40],[87,43,45,41],[88,6,47,4,"_defineProperty"],[88,21,47,19],[88,22,47,20],[88,26,47,24],[88,28,47,26],[88,45,47,43],[88,47,47,45],[88,51,47,49],[88,52,47,50],[89,6,49,4,"_defineProperty"],[89,21,49,19],[89,22,49,20],[89,26,49,24],[89,28,49,26],[89,40,49,38],[89,42,49,40],[89,47,49,45],[89,48,49,46],[89,49,49,47],[90,6,51,4,"_defineProperty"],[90,21,51,19],[90,22,51,20],[90,26,51,24],[90,28,51,26],[90,40,51,38],[90,42,51,40],[90,47,51,45],[90,48,51,46],[90,49,51,47],[91,6,53,4,"_defineProperty"],[91,21,53,19],[91,22,53,20],[91,26,53,24],[91,28,53,26],[91,36,53,34],[91,38,53,36],[91,39,53,37],[91,40,53,38],[91,41,53,39],[92,6,55,4,"_defineProperty"],[92,21,55,19],[92,22,55,20],[92,26,55,24],[92,28,55,26],[92,43,55,41],[92,45,55,43,"State"],[92,51,55,48],[92,52,55,48,"State"],[92,57,55,48],[92,58,55,49,"UNDETERMINED"],[92,70,55,61],[92,71,55,62],[93,6,57,4,"_defineProperty"],[93,21,57,19],[93,22,57,20],[93,26,57,24],[93,28,57,26],[93,45,57,43],[93,47,57,45],[93,48,57,46],[93,49,57,47],[93,50,57,48],[94,6,59,4,"_defineProperty"],[94,21,59,19],[94,22,59,20],[94,26,59,24],[94,28,59,26],[94,38,59,36],[94,40,59,38,"State"],[94,46,59,43],[94,47,59,43,"State"],[94,52,59,43],[94,53,59,44,"UNDETERMINED"],[94,65,59,56],[94,66,59,57],[95,6,61,4,"_defineProperty"],[95,21,61,19],[95,22,61,20],[95,26,61,24],[95,28,61,26],[95,43,61,41],[95,45,61,43],[95,49,61,47],[95,50,61,48],[96,6,63,4,"_defineProperty"],[96,21,63,19],[96,22,63,20],[96,26,63,24],[96,28,63,26],[96,45,63,43],[96,47,63,45],[96,52,63,50],[96,53,63,51],[96,54,63,52],[97,6,65,4,"_defineProperty"],[97,21,65,19],[97,22,65,20],[97,26,65,24],[97,28,65,26],[97,43,65,41],[97,45,65,43],[97,50,65,48],[97,51,65,49],[97,52,65,50],[98,6,67,4,"_defineProperty"],[98,21,67,19],[98,22,67,20],[98,26,67,24],[98,28,67,26],[98,38,67,36],[98,40,67,38],[98,45,67,43],[98,46,67,44],[98,47,67,45],[99,6,69,4,"_defineProperty"],[99,21,69,19],[99,22,69,20],[99,26,69,24],[99,28,69,26],[99,33,69,31],[99,35,69,33],[99,40,69,38],[99,41,69,39],[99,42,69,40],[100,6,71,4,"_defineProperty"],[100,21,71,19],[100,22,71,20],[100,26,71,24],[100,28,71,26],[100,48,71,46],[100,50,71,48],[100,56,71,54],[101,8,72,6],[101,12,72,10,"Array"],[101,17,72,15],[101,18,72,16,"isArray"],[101,25,72,23],[101,26,72,24],[101,30,72,28],[101,31,72,29,"config"],[101,37,72,35],[101,38,72,36,"waitFor"],[101,45,72,43],[101,46,72,44],[101,48,72,46],[102,10,73,8],[102,15,73,13],[102,21,73,19,"gesture"],[102,28,73,26],[102,32,73,30],[102,36,73,34],[102,37,73,35,"config"],[102,43,73,41],[102,44,73,42,"waitFor"],[102,51,73,49],[102,53,73,51],[103,12,74,10,"gesture"],[103,19,74,17],[103,20,74,18,"removePendingGesture"],[103,40,74,38],[103,41,74,39],[103,45,74,43],[103,46,74,44,"id"],[103,48,74,46],[103,49,74,47],[104,10,75,8],[105,8,76,6],[106,6,77,4],[106,7,77,5],[106,8,77,6],[107,6,79,4,"_defineProperty"],[107,21,79,19],[107,22,79,20],[107,26,79,24],[107,28,79,26],[107,37,79,35],[107,39,79,37],[107,45,79,43],[108,8,80,6],[108,12,80,10],[108,13,80,11,"clearSelfAsPending"],[108,31,80,29],[108,32,80,30],[108,33,80,31],[109,8,82,6],[109,12,82,10],[109,16,82,14],[109,17,82,15,"hammer"],[109,23,82,21],[109,25,82,23],[110,10,83,8],[110,14,83,12],[110,15,83,13,"hammer"],[110,21,83,19],[110,22,83,20,"stop"],[110,26,83,24],[110,27,83,25],[110,32,83,30],[110,33,83,31],[111,10,84,8],[111,14,84,12],[111,15,84,13,"hammer"],[111,21,84,19],[111,22,84,20,"destroy"],[111,29,84,27],[111,30,84,28],[111,31,84,29],[112,8,85,6],[113,8,87,6],[113,12,87,10],[113,13,87,11,"hammer"],[113,19,87,17],[113,22,87,20],[113,26,87,24],[114,6,88,4],[114,7,88,5],[114,8,88,6],[115,6,90,4,"_defineProperty"],[115,21,90,19],[115,22,90,20],[115,26,90,24],[115,28,90,26],[115,43,90,41],[115,45,90,43],[115,46,90,44],[116,8,91,6,"x"],[116,9,91,7],[117,8,92,6,"y"],[118,6,93,4],[118,7,93,5],[118,12,93,10],[119,8,94,6],[120,8,95,6],[120,14,95,12,"rect"],[120,18,95,16],[120,21,95,19],[120,25,95,23],[120,26,95,24,"view"],[120,30,95,28],[120,31,95,29,"getBoundingClientRect"],[120,52,95,50],[120,53,95,51],[120,54,95,52],[121,8,96,6],[121,14,96,12,"pointerInside"],[121,27,96,25],[121,30,96,28,"x"],[121,31,96,29],[121,35,96,33,"rect"],[121,39,96,37],[121,40,96,38,"left"],[121,44,96,42],[121,48,96,46,"x"],[121,49,96,47],[121,53,96,51,"rect"],[121,57,96,55],[121,58,96,56,"right"],[121,63,96,61],[121,67,96,65,"y"],[121,68,96,66],[121,72,96,70,"rect"],[121,76,96,74],[121,77,96,75,"top"],[121,80,96,78],[121,84,96,82,"y"],[121,85,96,83],[121,89,96,87,"rect"],[121,93,96,91],[121,94,96,92,"bottom"],[121,100,96,98],[122,8,97,6],[122,15,97,13,"pointerInside"],[122,28,97,26],[123,6,98,4],[123,7,98,5],[123,8,98,6],[124,6,100,4,"_defineProperty"],[124,21,100,19],[124,22,100,20],[124,26,100,24],[124,28,100,26],[124,39,100,37],[124,41,100,39,"nativeEvent"],[124,52,100,50],[124,56,100,54],[125,8,101,6],[125,14,101,12],[126,10,102,8,"onGestureHandlerEvent"],[126,31,102,29],[127,10,103,8,"onGestureHandlerStateChange"],[128,8,104,6],[128,9,104,7],[128,12,104,10],[128,16,104,14],[128,17,104,15,"propsRef"],[128,25,104,23],[128,26,104,24,"current"],[128,33,104,31],[129,8,105,6],[129,14,105,12,"event"],[129,19,105,17],[129,22,105,20],[129,26,105,24],[129,27,105,25,"transformEventData"],[129,45,105,43],[129,46,105,44,"nativeEvent"],[129,57,105,55],[129,58,105,56],[130,8,106,6,"invokeNullableMethod"],[130,28,106,26],[130,29,106,27,"onGestureHandlerEvent"],[130,50,106,48],[130,52,106,50,"event"],[130,57,106,55],[130,58,106,56],[131,8,108,6],[131,12,108,10],[131,16,108,14],[131,17,108,15,"lastSentState"],[131,30,108,28],[131,35,108,33,"event"],[131,40,108,38],[131,41,108,39,"nativeEvent"],[131,52,108,50],[131,53,108,51,"state"],[131,58,108,56],[131,60,108,58],[132,10,109,8],[132,14,109,12],[132,15,109,13,"lastSentState"],[132,28,109,26],[132,31,109,29,"event"],[132,36,109,34],[132,37,109,35,"nativeEvent"],[132,48,109,46],[132,49,109,47,"state"],[132,54,109,52],[133,10,110,8,"invokeNullableMethod"],[133,30,110,28],[133,31,110,29,"onGestureHandlerStateChange"],[133,58,110,56],[133,60,110,58,"event"],[133,65,110,63],[133,66,110,64],[134,8,111,6],[135,6,112,4],[135,7,112,5],[135,8,112,6],[136,6,114,4,"_defineProperty"],[136,21,114,19],[136,22,114,20],[136,26,114,24],[136,28,114,26],[136,34,114,32],[136,36,114,34],[136,42,114,40],[137,8,115,6],[137,14,115,12,"gesture"],[137,21,115,19],[137,24,115,22],[137,28,115,26],[137,29,115,27,"hammer"],[137,35,115,33],[137,36,115,34,"get"],[137,39,115,37],[137,40,115,38],[137,44,115,42],[137,45,115,43,"name"],[137,49,115,47],[137,50,115,48],[138,8,116,6],[138,12,116,10],[138,13,116,11,"gesture"],[138,20,116,18],[138,22,116,20],[139,8,118,6],[139,14,118,12,"enable"],[139,20,118,18],[139,23,118,21,"enable"],[139,24,118,22,"recognizer"],[139,34,118,32],[139,36,118,34,"inputData"],[139,45,118,43],[139,50,118,48],[140,10,119,8],[140,14,119,12],[140,15,119,13],[140,19,119,17],[140,20,119,18,"config"],[140,26,119,24],[140,27,119,25,"enabled"],[140,34,119,32],[140,36,119,34],[141,12,120,10],[141,16,120,14],[141,17,120,15,"isGestureRunning"],[141,33,120,31],[141,36,120,34],[141,41,120,39],[142,12,121,10],[142,16,121,14],[142,17,121,15,"hasGestureFailed"],[142,33,121,31],[142,36,121,34],[142,41,121,39],[143,12,122,10],[143,19,122,17],[143,24,122,22],[144,10,123,8],[144,11,123,9],[144,12,123,10],[146,10,126,8],[146,14,126,12],[146,15,126,13,"inputData"],[146,24,126,22],[146,28,126,26],[146,29,126,27,"recognizer"],[146,39,126,37],[146,40,126,38,"options"],[146,47,126,45],[146,51,126,49],[146,58,126,56,"inputData"],[146,67,126,65],[146,68,126,66,"maxPointers"],[146,79,126,77],[146,84,126,82],[146,95,126,93],[146,97,126,95],[147,12,127,10],[147,19,127,17],[147,23,127,21],[147,24,127,22,"shouldEnableGestureOnSetup"],[147,50,127,48],[148,10,128,8],[149,10,130,8],[149,14,130,12],[149,18,130,16],[149,19,130,17,"hasGestureFailed"],[149,35,130,33],[149,37,130,35],[150,12,131,10],[150,19,131,17],[150,24,131,22],[151,10,132,8],[152,10,134,8],[152,14,134,12],[152,15,134,13],[152,19,134,17],[152,20,134,18,"isDiscrete"],[152,30,134,28],[152,32,134,30],[153,12,135,10],[153,16,135,14],[153,20,135,18],[153,21,135,19,"isGestureRunning"],[153,37,135,35],[153,39,135,37],[154,14,136,12],[154,21,136,19],[154,25,136,23],[155,12,137,10],[155,13,137,11],[155,14,137,12],[156,12,138,10],[158,12,141,10],[158,16,141,14],[158,17,141,15,"_stillWaiting"],[158,30,141,28],[158,33,141,31],[158,37,141,35],[158,38,141,36,"_getPendingGestures"],[158,57,141,55],[158,58,141,56],[158,59,141,57],[158,60,141,58],[158,61,141,59],[160,12,143,10],[160,16,143,14],[160,20,143,18],[160,21,143,19,"_stillWaiting"],[160,34,143,32],[160,35,143,33,"length"],[160,41,143,39],[160,43,143,41],[161,14,144,12],[162,14,145,12],[163,14,146,12],[163,19,146,17],[163,25,146,23,"gesture"],[163,32,146,30],[163,36,146,34],[163,40,146,38],[163,41,146,39,"_stillWaiting"],[163,54,146,52],[163,56,146,54],[164,16,147,14],[165,16,148,14],[165,20,148,18],[165,21,148,19,"gesture"],[165,28,148,26],[165,29,148,27,"isDiscrete"],[165,39,148,37],[165,43,148,41,"gesture"],[165,50,148,48],[165,51,148,49,"isGestureRunning"],[165,67,148,65],[165,69,148,67],[166,18,149,16],[166,22,149,20],[166,23,149,21,"hasGestureFailed"],[166,39,149,37],[166,42,149,40],[166,46,149,44],[167,18,150,16],[167,22,150,20],[167,23,150,21,"isGestureRunning"],[167,39,150,37],[167,42,150,40],[167,47,150,45],[168,18,151,16],[168,25,151,23],[168,30,151,28],[169,16,152,14],[170,14,153,12],[170,15,153,13],[170,16,153,14],[172,14,156,12],[172,21,156,19],[172,26,156,24],[173,12,157,10],[174,10,158,8],[174,11,158,9],[174,12,158,10],[176,10,161,8],[176,14,161,12],[176,15,161,13],[176,19,161,17],[176,20,161,18,"hasCustomActivationCriteria"],[176,47,161,45],[176,49,161,47],[177,12,162,10],[177,19,162,17],[177,23,162,21],[178,10,163,8],[179,10,165,8],[179,16,165,14,"deltaRotation"],[179,29,165,27],[179,32,165,30],[179,36,165,34],[179,37,165,35,"initialRotation"],[179,52,165,50],[179,56,165,54],[179,60,165,58],[179,63,165,61],[179,64,165,62],[179,67,165,65,"inputData"],[179,76,165,74],[179,77,165,75,"rotation"],[179,85,165,83],[179,88,165,86],[179,92,165,90],[179,93,165,91,"initialRotation"],[179,108,165,106],[179,109,165,107],[179,110,165,108],[181,10,167,8],[181,16,167,14],[182,12,168,10,"success"],[182,19,168,17],[183,12,169,10,"failed"],[184,10,170,8],[184,11,170,9],[184,14,170,12],[184,18,170,16],[184,19,170,17,"isGestureEnabledForEvent"],[184,43,170,41],[184,44,170,42],[184,48,170,46],[184,49,170,47,"getConfig"],[184,58,170,56],[184,59,170,57],[184,60,170,58],[184,62,170,60,"recognizer"],[184,72,170,70],[184,74,170,70,"Object"],[184,80,170,70],[184,81,170,70,"assign"],[184,87,170,70],[184,92,170,77,"inputData"],[184,101,170,86],[185,12,171,10,"deltaRotation"],[186,10,171,23],[186,12,172,9],[186,13,172,10],[187,10,174,8],[187,14,174,12,"failed"],[187,20,174,18],[187,22,174,20],[188,12,175,10],[188,16,175,14],[188,17,175,15,"simulateCancelEvent"],[188,36,175,34],[188,37,175,35,"inputData"],[188,46,175,44],[188,47,175,45],[189,12,176,10],[189,16,176,14],[189,17,176,15,"hasGestureFailed"],[189,33,176,31],[189,36,176,34],[189,40,176,38],[190,10,177,8],[191,10,179,8],[191,17,179,15,"success"],[191,24,179,22],[192,8,180,6],[192,9,180,7],[193,8,182,6],[193,14,182,12,"params"],[193,20,182,18],[193,23,182,21],[193,27,182,25],[193,28,182,26,"getHammerConfig"],[193,43,182,41],[193,44,182,42],[193,45,182,43],[193,46,182,44],[193,47,182,45],[195,8,184,6,"gesture"],[195,15,184,13],[195,16,184,14,"set"],[195,19,184,17],[195,20,184,17,"Object"],[195,26,184,17],[195,27,184,17,"assign"],[195,33,184,17],[195,38,184,23,"params"],[195,44,184,29],[196,10,185,8,"enable"],[197,8,185,14],[197,10,186,7],[197,11,186,8],[198,6,187,4],[198,7,187,5],[198,8,187,6],[199,6,189,4],[199,10,189,8],[199,11,189,9,"gestureInstance"],[199,26,189,24],[199,29,189,27,"gestureInstances"],[199,45,189,43],[199,47,189,45],[200,6,190,4],[200,10,190,8],[200,11,190,9,"hasCustomActivationCriteria"],[200,38,190,36],[200,41,190,39],[200,46,190,44],[201,4,191,2],[202,4,193,2,"getConfig"],[202,13,193,11,"getConfig"],[202,14,193,11],[202,16,193,14],[203,6,194,4],[203,13,194,11],[203,17,194,15],[203,18,194,16,"config"],[203,24,194,22],[204,4,195,2],[205,4,197,2,"onWaitingEnded"],[205,18,197,16,"onWaitingEnded"],[205,19,197,17,"_gesture"],[205,27,197,25],[205,29,197,27],[205,30,197,28],[206,4,199,2,"removePendingGesture"],[206,24,199,22,"removePendingGesture"],[206,25,199,23,"id"],[206,27,199,25],[206,29,199,27],[207,6,200,4],[207,13,200,11],[207,17,200,15],[207,18,200,16,"pendingGestures"],[207,33,200,31],[207,34,200,32,"id"],[207,36,200,34],[207,37,200,35],[208,4,201,2],[209,4,203,2,"addPendingGesture"],[209,21,203,19,"addPendingGesture"],[209,22,203,20,"gesture"],[209,29,203,27],[209,31,203,29],[210,6,204,4],[210,10,204,8],[210,11,204,9,"pendingGestures"],[210,26,204,24],[210,27,204,25,"gesture"],[210,34,204,32],[210,35,204,33,"id"],[210,37,204,35],[210,38,204,36],[210,41,204,39,"gesture"],[210,48,204,46],[211,4,205,2],[212,4,207,2,"isGestureEnabledForEvent"],[212,28,207,26,"isGestureEnabledForEvent"],[212,29,207,27,"_config"],[212,36,207,34],[212,38,207,36,"_recognizer"],[212,49,207,47],[212,51,207,49,"_event"],[212,57,207,55],[212,59,207,57],[213,6,208,4],[213,13,208,11],[214,8,209,6,"success"],[214,15,209,13],[214,17,209,15],[215,6,210,4],[215,7,210,5],[216,4,211,2],[217,4,213,2],[217,8,213,6,"NativeGestureClass"],[217,26,213,24,"NativeGestureClass"],[217,27,213,24],[217,29,213,27],[218,6,214,4],[218,12,214,10],[218,16,214,14,"Error"],[218,21,214,19],[218,22,214,20],[218,71,214,69],[218,72,214,70],[219,4,215,2],[220,4,217,2,"updateHasCustomActivationCriteria"],[220,37,217,35,"updateHasCustomActivationCriteria"],[220,38,217,36,"_config"],[220,45,217,43],[220,47,217,45],[221,6,218,4],[221,13,218,11],[221,17,218,15],[222,4,219,2],[223,4,221,2,"updateGestureConfig"],[223,23,221,21,"updateGestureConfig"],[223,24,221,21,"_ref"],[223,28,221,21],[223,30,224,5],[224,6,224,5],[224,10,221,22],[225,10,222,4,"enabled"],[225,17,222,11],[225,20,222,14],[226,8,224,2],[226,9,224,3],[226,12,224,3,"_ref"],[226,16,224,3],[227,8,223,7,"props"],[227,13,223,12],[227,20,223,12,"_objectWithoutPropertiesLoose"],[227,49,223,12],[227,50,223,12,"default"],[227,57,223,12],[227,59,223,12,"_ref"],[227,63,223,12],[227,65,223,12,"_excluded"],[227,74,223,12],[228,6,225,4],[228,10,225,8],[228,11,225,9,"clearSelfAsPending"],[228,29,225,27],[228,30,225,28],[228,31,225,29],[229,6,226,4],[229,10,226,8],[229,11,226,9,"config"],[229,17,226,15],[229,20,226,18],[229,24,226,22],[229,25,226,23,"ensureConfig"],[229,37,226,35],[229,38,226,35,"Object"],[229,44,226,35],[229,45,226,35,"assign"],[229,51,226,35],[230,8,227,6,"enabled"],[231,6,227,13],[231,9,228,9,"props"],[231,14,228,14],[231,15,229,5],[231,16,229,6],[232,6,230,4],[232,10,230,8],[232,11,230,9,"hasCustomActivationCriteria"],[232,38,230,36],[232,41,230,39],[232,45,230,43],[232,46,230,44,"updateHasCustomActivationCriteria"],[232,79,230,77],[232,80,230,78],[232,84,230,82],[232,85,230,83,"config"],[232,91,230,89],[232,92,230,90],[233,6,232,4],[233,10,232,8,"Array"],[233,15,232,13],[233,16,232,14,"isArray"],[233,23,232,21],[233,24,232,22],[233,28,232,26],[233,29,232,27,"config"],[233,35,232,33],[233,36,232,34,"waitFor"],[233,43,232,41],[233,44,232,42],[233,46,232,44],[234,8,233,6],[234,13,233,11],[234,19,233,17,"gesture"],[234,26,233,24],[234,30,233,28],[234,34,233,32],[234,35,233,33,"config"],[234,41,233,39],[234,42,233,40,"waitFor"],[234,49,233,47],[234,51,233,49],[235,10,234,8,"gesture"],[235,17,234,15],[235,18,234,16,"addPendingGesture"],[235,35,234,33],[235,36,234,34],[235,40,234,38],[235,41,234,39],[236,8,235,6],[237,6,236,4],[238,6,238,4],[238,10,238,8],[238,14,238,12],[238,15,238,13,"hammer"],[238,21,238,19],[238,23,238,21],[239,8,239,6],[239,12,239,10],[239,13,239,11,"sync"],[239,17,239,15],[239,18,239,16],[239,19,239,17],[240,6,240,4],[241,6,242,4],[241,13,242,11],[241,17,242,15],[241,18,242,16,"config"],[241,24,242,22],[242,4,243,2],[243,4,245,2,"getState"],[243,12,245,10,"getState"],[243,13,245,11,"type"],[243,17,245,15],[243,19,245,17],[244,6,246,4],[245,6,247,4],[245,10,247,8,"type"],[245,14,247,12],[245,18,247,16],[245,19,247,17],[245,21,247,19],[246,8,248,6],[246,15,248,13],[246,16,248,14],[247,6,249,4],[248,6,251,4],[248,13,251,11,"EventMap"],[248,23,251,19],[248,24,251,19,"EventMap"],[248,32,251,19],[248,33,251,20,"type"],[248,37,251,24],[248,38,251,25],[249,4,252,2],[250,4,254,2,"transformEventData"],[250,22,254,20,"transformEventData"],[250,23,254,21,"event"],[250,28,254,26],[250,30,254,28],[251,6,255,4],[251,12,255,10],[252,8,256,6,"eventType"],[252,17,256,15],[253,8,257,6,"maxPointers"],[253,19,257,17],[253,21,257,19,"numberOfPointers"],[254,6,258,4],[254,7,258,5],[254,10,258,8,"event"],[254,15,258,13],[254,16,258,14],[254,17,258,15],[256,6,260,4],[256,12,260,10,"changedTouch"],[256,24,260,22],[256,27,260,25,"event"],[256,32,260,30],[256,33,260,31,"changedPointers"],[256,48,260,46],[256,49,260,47],[256,50,260,48],[256,51,260,49],[257,6,261,4],[257,12,261,10,"pointerInside"],[257,25,261,23],[257,28,261,26],[257,32,261,30],[257,33,261,31,"isPointInView"],[257,46,261,44],[257,47,261,45],[258,8,262,6,"x"],[258,9,262,7],[258,11,262,9,"changedTouch"],[258,23,262,21],[258,24,262,22,"clientX"],[258,31,262,29],[259,8,263,6,"y"],[259,9,263,7],[259,11,263,9,"changedTouch"],[259,23,263,21],[259,24,263,22,"clientY"],[260,6,264,4],[260,7,264,5],[260,8,264,6],[260,9,264,7],[260,10,264,8],[262,6,266,4],[262,12,266,10,"state"],[262,17,266,15],[262,20,266,18],[262,24,266,22],[262,25,266,23,"getState"],[262,33,266,31],[262,34,266,32,"eventType"],[262,43,266,41],[262,44,266,42],[263,6,268,4],[263,10,268,8,"state"],[263,15,268,13],[263,20,268,18],[263,24,268,22],[263,25,268,23,"previousState"],[263,38,268,36],[263,40,268,38],[264,8,269,6],[264,12,269,10],[264,13,269,11,"oldState"],[264,21,269,19],[264,24,269,22],[264,28,269,26],[264,29,269,27,"previousState"],[264,42,269,40],[265,8,270,6],[265,12,270,10],[265,13,270,11,"previousState"],[265,26,270,24],[265,29,270,27,"state"],[265,34,270,32],[266,6,271,4],[267,6,273,4],[267,13,273,11],[268,8,274,6,"nativeEvent"],[268,19,274,17],[268,21,274,17,"Object"],[268,27,274,17],[268,28,274,17,"assign"],[268,34,274,17],[269,10,275,8,"numberOfPointers"],[269,26,275,24],[270,10,276,8,"state"],[270,15,276,13],[271,10,277,8,"pointerInside"],[272,8,277,21],[272,11,278,11],[272,15,278,15],[272,16,278,16,"transformNativeEvent"],[272,36,278,36],[272,37,278,37,"event"],[272,42,278,42],[272,43,278,43],[273,10,279,8],[274,10,280,8,"handlerTag"],[274,20,280,18],[274,22,280,20],[274,26,280,24],[274,27,280,25,"handlerTag"],[274,37,280,35],[275,10,281,8,"target"],[275,16,281,14],[275,18,281,16],[275,22,281,20],[275,23,281,21,"ref"],[275,26,281,24],[276,10,282,8],[277,10,283,8],[278,10,284,8],[279,10,285,8,"oldState"],[279,18,285,16],[279,20,285,18,"state"],[279,25,285,23],[279,30,285,28],[279,34,285,32],[279,35,285,33,"previousState"],[279,48,285,46],[279,52,285,50,"state"],[279,57,285,55],[279,61,285,59],[279,62,285,60],[279,65,285,63],[279,69,285,67],[279,70,285,68,"oldState"],[279,78,285,76],[279,81,285,79,"undefined"],[280,8,285,88],[280,10,286,7],[281,8,287,6,"timeStamp"],[281,17,287,15],[281,19,287,17,"Date"],[281,23,287,21],[281,24,287,22,"now"],[281,27,287,25],[281,28,287,26],[282,6,288,4],[282,7,288,5],[283,4,289,2],[284,4,291,2,"transformNativeEvent"],[284,24,291,22,"transformNativeEvent"],[284,25,291,23,"_event"],[284,31,291,29],[284,33,291,31],[285,6,292,4],[285,13,292,11],[285,14,292,12],[285,15,292,13],[286,4,293,2],[287,4,295,2,"cancelPendingGestures"],[287,25,295,23,"cancelPendingGestures"],[287,26,295,24,"event"],[287,31,295,29],[287,33,295,31],[288,6,296,4],[288,11,296,9],[288,17,296,15,"gesture"],[288,24,296,22],[288,28,296,26,"Object"],[288,34,296,32],[288,35,296,33,"values"],[288,41,296,39],[288,42,296,40],[288,46,296,44],[288,47,296,45,"pendingGestures"],[288,62,296,60],[288,63,296,61],[288,65,296,63],[289,8,297,6],[289,12,297,10,"gesture"],[289,19,297,17],[289,23,297,21,"gesture"],[289,30,297,28],[289,31,297,29,"isGestureRunning"],[289,47,297,45],[289,49,297,47],[290,10,298,8,"gesture"],[290,17,298,15],[290,18,298,16,"hasGestureFailed"],[290,34,298,32],[290,37,298,35],[290,41,298,39],[291,10,299,8,"gesture"],[291,17,299,15],[291,18,299,16,"cancelEvent"],[291,29,299,27],[291,30,299,28,"event"],[291,35,299,33],[291,36,299,34],[292,8,300,6],[293,6,301,4],[294,4,302,2],[295,4,304,2,"notifyPendingGestures"],[295,25,304,23,"notifyPendingGestures"],[295,26,304,23],[295,28,304,26],[296,6,305,4],[296,11,305,9],[296,17,305,15,"gesture"],[296,24,305,22],[296,28,305,26,"Object"],[296,34,305,32],[296,35,305,33,"values"],[296,41,305,39],[296,42,305,40],[296,46,305,44],[296,47,305,45,"pendingGestures"],[296,62,305,60],[296,63,305,61],[296,65,305,63],[297,8,306,6],[297,12,306,10,"gesture"],[297,19,306,17],[297,21,306,19],[298,10,307,8,"gesture"],[298,17,307,15],[298,18,307,16,"onWaitingEnded"],[298,32,307,30],[298,33,307,31],[298,37,307,35],[298,38,307,36],[299,8,308,6],[300,6,309,4],[301,4,310,2],[301,5,310,3],[301,6,310,4],[303,4,313,2,"onGestureEnded"],[303,18,313,16,"onGestureEnded"],[303,19,313,17,"event"],[303,24,313,22],[303,26,313,24],[304,6,314,4],[304,10,314,8],[304,11,314,9,"isGestureRunning"],[304,27,314,25],[304,30,314,28],[304,35,314,33],[305,6,315,4],[305,10,315,8],[305,11,315,9,"cancelPendingGestures"],[305,32,315,30],[305,33,315,31,"event"],[305,38,315,36],[305,39,315,37],[306,4,316,2],[307,4,318,2,"forceInvalidate"],[307,19,318,17,"forceInvalidate"],[307,20,318,18,"event"],[307,25,318,23],[307,27,318,25],[308,6,319,4],[308,10,319,8],[308,14,319,12],[308,15,319,13,"isGestureRunning"],[308,31,319,29],[308,33,319,31],[309,8,320,6],[309,12,320,10],[309,13,320,11,"hasGestureFailed"],[309,29,320,27],[309,32,320,30],[309,36,320,34],[310,8,321,6],[310,12,321,10],[310,13,321,11,"cancelEvent"],[310,24,321,22],[310,25,321,23,"event"],[310,30,321,28],[310,31,321,29],[311,6,322,4],[312,4,323,2],[313,4,325,2,"cancelEvent"],[313,15,325,13,"cancelEvent"],[313,16,325,14,"event"],[313,21,325,19],[313,23,325,21],[314,6,326,4],[314,10,326,8],[314,11,326,9,"notifyPendingGestures"],[314,32,326,30],[314,33,326,31],[314,34,326,32],[315,6,327,4],[315,10,327,8],[315,11,327,9,"sendEvent"],[315,20,327,18],[315,21,327,18,"Object"],[315,27,327,18],[315,28,327,18,"assign"],[315,34,327,18],[315,39,327,24,"event"],[315,44,327,29],[316,8,328,6,"eventType"],[316,17,328,15],[316,19,328,17,"Hammer"],[316,25,328,23],[316,26,328,23,"default"],[316,33,328,23],[316,34,328,24,"INPUT_CANCEL"],[316,46,328,36],[317,8,329,6,"isFinal"],[317,15,329,13],[317,17,329,15],[318,6,329,19],[318,8,330,5],[318,9,330,6],[319,6,331,4],[319,10,331,8],[319,11,331,9,"onGestureEnded"],[319,25,331,23],[319,26,331,24,"event"],[319,31,331,29],[319,32,331,30],[320,4,332,2],[321,4,334,2,"onRawEvent"],[321,14,334,12,"onRawEvent"],[321,15,334,13],[322,6,335,4,"isFirst"],[323,4,336,2],[323,5,336,3],[323,7,336,5],[324,6,337,4],[324,10,337,8,"isFirst"],[324,17,337,15],[324,19,337,17],[325,8,338,6],[325,12,338,10],[325,13,338,11,"hasGestureFailed"],[325,29,338,27],[325,32,338,30],[325,37,338,35],[326,6,339,4],[327,4,340,2],[328,4,342,2,"shouldUseTouchEvents"],[328,24,342,22,"shouldUseTouchEvents"],[328,25,342,23,"config"],[328,31,342,29],[328,33,342,31],[329,6,343,4],[329,10,343,8,"_config$simultaneousH"],[329,31,343,29],[329,33,343,31,"_config$simultaneousH2"],[329,55,343,53],[330,6,345,4],[330,13,345,11],[330,14,345,12,"_config$simultaneousH"],[330,35,345,33],[330,38,345,36],[330,39,345,37,"_config$simultaneousH2"],[330,61,345,59],[330,64,345,62,"config"],[330,70,345,68],[330,71,345,69,"simultaneousHandlers"],[330,91,345,89],[330,97,345,95],[330,101,345,99],[330,105,345,103,"_config$simultaneousH2"],[330,127,345,125],[330,132,345,130],[330,137,345,135],[330,138,345,136],[330,141,345,139],[330,146,345,144],[330,147,345,145],[330,150,345,148,"_config$simultaneousH2"],[330,172,345,170],[330,173,345,171,"some"],[330,177,345,175],[330,178,345,176,"handler"],[330,185,345,183],[330,189,345,187,"handler"],[330,196,345,194],[330,197,345,195,"isNative"],[330,205,345,203],[330,206,345,204],[330,212,345,210],[330,216,345,214],[330,220,345,218,"_config$simultaneousH"],[330,241,345,239],[330,246,345,244],[330,251,345,249],[330,252,345,250],[330,255,345,253,"_config$simultaneousH"],[330,276,345,274],[330,279,345,277],[330,284,345,282],[331,4,346,2],[332,4,348,2,"setView"],[332,11,348,9,"setView"],[332,12,348,10,"ref"],[332,15,348,13],[332,17,348,15,"propsRef"],[332,25,348,23],[332,27,348,25],[333,6,349,4],[333,10,349,8,"ref"],[333,13,349,11],[333,17,349,15],[333,21,349,19],[333,23,349,21],[334,8,350,6],[334,12,350,10],[334,13,350,11,"destroy"],[334,20,350,18],[334,21,350,19],[334,22,350,20],[335,8,351,6],[335,12,351,10],[335,13,351,11,"view"],[335,17,351,15],[335,20,351,18],[335,24,351,22],[336,8,352,6],[337,6,353,4],[337,7,353,5],[337,8,353,6],[339,6,356,4],[339,12,356,10,"SUPPORTS_TOUCH"],[339,26,356,24],[339,29,356,28],[339,43,356,42],[339,47,356,46,"window"],[339,53,356,53],[340,6,357,4],[340,10,357,8],[340,11,357,9,"propsRef"],[340,19,357,17],[340,22,357,20,"propsRef"],[340,30,357,28],[341,6,358,4],[341,10,358,8],[341,11,358,9,"ref"],[341,14,358,12],[341,17,358,15,"ref"],[341,20,358,18],[342,6,359,4],[342,10,359,8],[342,11,359,9,"view"],[342,15,359,13],[342,18,359,16],[342,22,359,16,"findNodeHandle"],[342,36,359,30],[342,37,359,30,"default"],[342,44,359,30],[342,46,359,31,"ref"],[342,49,359,34],[342,50,359,35],[342,51,359,36],[342,52,359,37],[343,6,360,4],[344,6,361,4],[346,6,363,4],[346,10,363,8],[346,11,363,9,"hammer"],[346,17,363,15],[346,20,363,18,"SUPPORTS_TOUCH"],[346,34,363,32],[346,38,363,36],[346,42,363,40],[346,43,363,41,"shouldUseTouchEvents"],[346,63,363,61],[346,64,363,62],[346,68,363,66],[346,69,363,67,"config"],[346,75,363,73],[346,76,363,74],[346,79,363,77],[346,83,363,81,"Hammer"],[346,89,363,87],[346,90,363,87,"default"],[346,97,363,87],[346,98,363,88,"Manager"],[346,105,363,95],[346,106,363,96],[346,110,363,100],[346,111,363,101,"view"],[346,115,363,105],[346,117,363,107],[347,8,364,6,"inputClass"],[347,18,364,16],[347,20,364,18,"Hammer"],[347,26,364,24],[347,27,364,24,"default"],[347,34,364,24],[347,35,364,25,"TouchInput"],[348,6,365,4],[348,7,365,5],[348,8,365,6],[348,11,365,9],[348,15,365,13,"Hammer"],[348,21,365,19],[348,22,365,19,"default"],[348,29,365,19],[348,30,365,20,"Manager"],[348,37,365,27],[348,38,365,28],[348,42,365,32],[348,43,365,33,"view"],[348,47,365,37],[348,48,365,38],[349,6,366,4],[349,10,366,8],[349,11,366,9,"oldState"],[349,19,366,17],[349,22,366,20,"State"],[349,28,366,25],[349,29,366,25,"State"],[349,34,366,25],[349,35,366,26,"UNDETERMINED"],[349,47,366,38],[350,6,367,4],[350,10,367,8],[350,11,367,9,"previousState"],[350,24,367,22],[350,27,367,25,"State"],[350,33,367,30],[350,34,367,30,"State"],[350,39,367,30],[350,40,367,31,"UNDETERMINED"],[350,52,367,43],[351,6,368,4],[351,10,368,8],[351,11,368,9,"lastSentState"],[351,24,368,22],[351,27,368,25],[351,31,368,29],[352,6,369,4],[352,12,369,10],[353,8,370,6,"NativeGestureClass"],[354,6,371,4],[354,7,371,5],[354,10,371,8],[354,14,371,12],[354,15,371,13],[354,16,371,14],[356,6,373,4],[356,12,373,10,"gesture"],[356,19,373,17],[356,22,373,20],[356,26,373,24,"NativeGestureClass"],[356,44,373,42],[356,45,373,43],[356,49,373,47],[356,50,373,48,"getHammerConfig"],[356,65,373,63],[356,66,373,64],[356,67,373,65],[356,68,373,66],[357,6,374,4],[357,10,374,8],[357,11,374,9,"hammer"],[357,17,374,15],[357,18,374,16,"add"],[357,21,374,19],[357,22,374,20,"gesture"],[357,29,374,27],[357,30,374,28],[358,6,375,4],[358,10,375,8],[358,11,375,9,"hammer"],[358,17,375,15],[358,18,375,16,"on"],[358,20,375,18],[358,21,375,19],[358,35,375,33],[358,37,375,35,"ev"],[358,39,375,37],[358,43,375,41],[359,8,376,6],[359,12,376,10],[359,13,376,11],[359,17,376,15],[359,18,376,16,"config"],[359,24,376,22],[359,25,376,23,"enabled"],[359,32,376,30],[359,34,376,32],[360,10,377,8],[360,14,377,12],[360,15,377,13,"hasGestureFailed"],[360,31,377,29],[360,34,377,32],[360,39,377,37],[361,10,378,8],[361,14,378,12],[361,15,378,13,"isGestureRunning"],[361,31,378,29],[361,34,378,32],[361,39,378,37],[362,10,379,8],[363,8,380,6],[364,8,382,6],[364,12,382,10],[364,13,382,11,"onRawEvent"],[364,23,382,21],[364,24,382,22,"ev"],[364,26,382,24],[364,27,382,25],[364,28,382,26],[364,29,382,27],[365,8,383,6],[367,8,385,6],[367,12,385,10],[367,16,385,14],[367,17,385,15,"initialRotation"],[367,32,385,30],[367,37,385,35],[367,41,385,39],[367,45,385,43,"ev"],[367,47,385,45],[367,48,385,46,"rotation"],[367,56,385,54],[367,61,385,59],[367,62,385,60],[367,64,385,62],[368,10,386,8],[368,14,386,12],[368,15,386,13,"initialRotation"],[368,30,386,28],[368,33,386,31,"ev"],[368,35,386,33],[368,36,386,34,"rotation"],[368,44,386,42],[369,8,387,6],[370,8,389,6],[370,12,389,10,"ev"],[370,14,389,12],[370,15,389,13,"isFinal"],[370,22,389,20],[370,24,389,22],[371,10,390,8],[372,10,391,8,"setTimeout"],[372,20,391,18],[372,21,391,19],[372,27,391,25],[373,12,392,10],[373,16,392,14],[373,17,392,15,"initialRotation"],[373,32,392,30],[373,35,392,33],[373,39,392,37],[374,12,393,10],[374,16,393,14],[374,17,393,15,"hasGestureFailed"],[374,33,393,31],[374,36,393,34],[374,41,393,39],[375,10,394,8],[375,11,394,9],[375,12,394,10],[376,8,395,6],[377,6,396,4],[377,7,396,5],[377,8,396,6],[378,6,397,4],[378,10,397,8],[378,11,397,9,"setupEvents"],[378,22,397,20],[378,23,397,21],[378,24,397,22],[379,6,398,4],[379,10,398,8],[379,11,398,9,"sync"],[379,15,398,13],[379,16,398,14],[379,17,398,15],[380,4,399,2],[381,4,401,2,"setupEvents"],[381,15,401,13,"setupEvents"],[381,16,401,13],[381,18,401,16],[382,6,402,4],[383,6,403,4],[383,10,403,8],[383,11,403,9],[383,15,403,13],[383,16,403,14,"isDiscrete"],[383,26,403,24],[383,28,403,26],[384,8,404,6],[384,12,404,10],[384,13,404,11,"hammer"],[384,19,404,17],[384,20,404,18,"on"],[384,22,404,20],[384,23,404,21],[384,26,404,24],[384,30,404,28],[384,31,404,29,"name"],[384,35,404,33],[384,42,404,40],[384,44,404,42,"event"],[384,49,404,47],[384,53,404,51],[384,57,404,55],[384,58,404,56,"onStart"],[384,65,404,63],[384,66,404,64,"event"],[384,71,404,69],[384,72,404,70],[384,73,404,71],[385,8,405,6],[385,12,405,10],[385,13,405,11,"hammer"],[385,19,405,17],[385,20,405,18,"on"],[385,22,405,20],[385,23,405,21],[385,26,405,24],[385,30,405,28],[385,31,405,29,"name"],[385,35,405,33],[385,42,405,40],[385,46,405,44],[385,47,405,45,"name"],[385,51,405,49],[385,59,405,57],[385,61,405,59,"event"],[385,66,405,64],[385,70,405,68],[386,10,406,8],[386,14,406,12],[386,15,406,13,"onGestureEnded"],[386,29,406,27],[386,30,406,28,"event"],[386,35,406,33],[386,36,406,34],[387,8,407,6],[387,9,407,7],[387,10,407,8],[388,6,408,4],[389,6,410,4],[389,10,410,8],[389,11,410,9,"hammer"],[389,17,410,15],[389,18,410,16,"on"],[389,20,410,18],[389,21,410,19],[389,25,410,23],[389,26,410,24,"name"],[389,30,410,28],[389,32,410,30,"ev"],[389,34,410,32],[389,38,410,36],[389,42,410,40],[389,43,410,41,"onGestureActivated"],[389,61,410,59],[389,62,410,60,"ev"],[389,64,410,62],[389,65,410,63],[389,66,410,64],[389,67,410,65],[389,68,410,66],[390,4,411,2],[391,4,413,2,"onStart"],[391,11,413,9,"onStart"],[391,12,413,10],[392,6,414,4,"deltaX"],[392,12,414,10],[393,6,415,4,"deltaY"],[393,12,415,10],[394,6,416,4,"rotation"],[395,4,417,2],[395,5,417,3],[395,7,417,5],[396,6,418,4],[397,6,419,4],[397,10,419,8],[397,11,419,9,"oldState"],[397,19,419,17],[397,22,419,20,"State"],[397,28,419,25],[397,29,419,25,"State"],[397,34,419,25],[397,35,419,26,"UNDETERMINED"],[397,47,419,38],[398,6,420,4],[398,10,420,8],[398,11,420,9,"previousState"],[398,24,420,22],[398,27,420,25,"State"],[398,33,420,30],[398,34,420,30,"State"],[398,39,420,30],[398,40,420,31,"UNDETERMINED"],[398,52,420,43],[399,6,421,4],[399,10,421,8],[399,11,421,9,"lastSentState"],[399,24,421,22],[399,27,421,25],[399,31,421,29],[400,6,422,4],[400,10,422,8],[400,11,422,9,"isGestureRunning"],[400,27,422,25],[400,30,422,28],[400,34,422,32],[401,6,423,4],[401,10,423,8],[401,11,423,9,"__initialX"],[401,21,423,19],[401,24,423,22,"deltaX"],[401,30,423,28],[402,6,424,4],[402,10,424,8],[402,11,424,9,"__initialY"],[402,21,424,19],[402,24,424,22,"deltaY"],[402,30,424,28],[403,6,425,4],[403,10,425,8],[403,11,425,9,"initialRotation"],[403,26,425,24],[403,29,425,27,"rotation"],[403,37,425,35],[404,4,426,2],[405,4,428,2,"onGestureActivated"],[405,22,428,20,"onGestureActivated"],[405,23,428,21,"ev"],[405,25,428,23],[405,27,428,25],[406,6,429,4],[406,10,429,8],[406,11,429,9,"sendEvent"],[406,20,429,18],[406,21,429,19,"ev"],[406,23,429,21],[406,24,429,22],[407,4,430,2],[408,4,432,2,"onSuccess"],[408,13,432,11,"onSuccess"],[408,14,432,11],[408,16,432,14],[408,17,432,15],[409,4,434,2,"_getPendingGestures"],[409,23,434,21,"_getPendingGestures"],[409,24,434,21],[409,26,434,24],[410,6,435,4],[410,10,435,8,"Array"],[410,15,435,13],[410,16,435,14,"isArray"],[410,23,435,21],[410,24,435,22],[410,28,435,26],[410,29,435,27,"config"],[410,35,435,33],[410,36,435,34,"waitFor"],[410,43,435,41],[410,44,435,42],[410,48,435,46],[410,52,435,50],[410,53,435,51,"config"],[410,59,435,57],[410,60,435,58,"waitFor"],[410,67,435,65],[410,68,435,66,"length"],[410,74,435,72],[410,76,435,74],[411,8,436,6],[412,8,437,6],[413,8,438,6],[413,14,438,12,"stillWaiting"],[413,26,438,24],[413,29,438,27],[413,33,438,31],[413,34,438,32,"config"],[413,40,438,38],[413,41,438,39,"waitFor"],[413,48,438,46],[413,49,438,47,"filter"],[413,55,438,53],[413,56,438,54],[413,57,438,55],[414,10,439,8,"hasGestureFailed"],[415,8,440,6],[415,9,440,7],[415,14,440,12,"hasGestureFailed"],[415,30,440,28],[415,35,440,33],[415,40,440,38],[415,41,440,39],[416,8,441,6],[416,15,441,13,"stillWaiting"],[416,27,441,25],[417,6,442,4],[418,6,444,4],[418,13,444,11],[418,15,444,13],[419,4,445,2],[420,4,447,2,"getHammerConfig"],[420,19,447,17,"getHammerConfig"],[420,20,447,17],[420,22,447,20],[421,6,448,4],[421,12,448,10,"pointers"],[421,20,448,18],[421,23,448,21],[421,27,448,25],[421,28,448,26,"config"],[421,34,448,32],[421,35,448,33,"minPointers"],[421,46,448,44],[421,51,448,49],[421,55,448,53],[421,56,448,54,"config"],[421,62,448,60],[421,63,448,61,"maxPointers"],[421,74,448,72],[421,77,448,75],[421,81,448,79],[421,82,448,80,"config"],[421,88,448,86],[421,89,448,87,"minPointers"],[421,100,448,98],[421,103,448,101],[421,104,448,102],[422,6,449,4],[422,13,449,11],[423,8,450,6,"pointers"],[424,6,451,4],[424,7,451,5],[425,4,452,2],[426,4,454,2,"simulateCancelEvent"],[426,23,454,21,"simulateCancelEvent"],[426,24,454,22,"_inputData"],[426,34,454,32],[426,36,454,34],[426,37,454,35],[426,38,454,36],[426,39,454,37],[428,4,457,2,"ensureConfig"],[428,16,457,14,"ensureConfig"],[428,17,457,15,"config"],[428,23,457,21],[428,25,457,23],[429,6,458,4],[429,12,458,10,"props"],[429,17,458,15],[429,20,458,15,"Object"],[429,26,458,15],[429,27,458,15,"assign"],[429,33,458,15],[429,38,458,23,"config"],[429,44,458,29],[429,45,459,5],[429,46,459,6],[429,47,459,7],[431,6,461,4],[431,10,461,8],[431,19,461,17],[431,23,461,21,"config"],[431,29,461,27],[431,31,461,29],[432,8,462,6,"props"],[432,13,462,11],[432,14,462,12,"minDist"],[432,21,462,19],[432,24,462,22,"config"],[432,30,462,28],[432,31,462,29,"minDist"],[432,38,462,36],[433,8,463,6,"props"],[433,13,463,11],[433,14,463,12,"minDistSq"],[433,23,463,21],[433,26,463,24,"props"],[433,31,463,29],[433,32,463,30,"minDist"],[433,39,463,37],[433,42,463,40,"props"],[433,47,463,45],[433,48,463,46,"minDist"],[433,55,463,53],[434,6,464,4],[435,6,466,4],[435,10,466,8],[435,23,466,21],[435,27,466,25,"config"],[435,33,466,31],[435,35,466,33],[436,8,467,6,"props"],[436,13,467,11],[436,14,467,12,"minVelocity"],[436,25,467,23],[436,28,467,26,"config"],[436,34,467,32],[436,35,467,33,"minVelocity"],[436,46,467,44],[437,8,468,6,"props"],[437,13,468,11],[437,14,468,12,"minVelocitySq"],[437,27,468,25],[437,30,468,28,"props"],[437,35,468,33],[437,36,468,34,"minVelocity"],[437,47,468,45],[437,50,468,48,"props"],[437,55,468,53],[437,56,468,54,"minVelocity"],[437,67,468,65],[438,6,469,4],[439,6,471,4],[439,10,471,8],[439,19,471,17],[439,23,471,21,"config"],[439,29,471,27],[439,31,471,29],[440,8,472,6,"props"],[440,13,472,11],[440,14,472,12,"maxDist"],[440,21,472,19],[440,24,472,22,"config"],[440,30,472,28],[440,31,472,29,"maxDist"],[440,38,472,36],[441,8,473,6,"props"],[441,13,473,11],[441,14,473,12,"maxDistSq"],[441,23,473,21],[441,26,473,24,"config"],[441,32,473,30],[441,33,473,31,"maxDist"],[441,40,473,38],[441,43,473,41,"config"],[441,49,473,47],[441,50,473,48,"maxDist"],[441,57,473,55],[442,6,474,4],[443,6,476,4],[443,10,476,8],[443,19,476,17],[443,23,476,21,"config"],[443,29,476,27],[443,31,476,29],[444,8,477,6,"props"],[444,13,477,11],[444,14,477,12,"waitFor"],[444,21,477,19],[444,24,477,22,"asArray"],[444,31,477,29],[444,32,477,30,"config"],[444,38,477,36],[444,39,477,37,"waitFor"],[444,46,477,44],[444,47,477,45],[444,48,477,46,"map"],[444,51,477,49],[444,52,477,50],[444,53,477,51],[445,10,478,8,"handlerTag"],[446,8,479,6],[446,9,479,7],[446,14,479,12,"NodeManager"],[446,25,479,23],[446,26,479,24,"getHandler"],[446,36,479,34],[446,37,479,35,"handlerTag"],[446,47,479,45],[446,48,479,46],[446,49,479,47],[446,50,479,48,"filter"],[446,56,479,54],[446,57,479,55,"v"],[446,58,479,56],[446,62,479,60,"v"],[446,63,479,61],[446,64,479,62],[447,6,480,4],[447,7,480,5],[447,13,480,11],[448,8,481,6,"props"],[448,13,481,11],[448,14,481,12,"waitFor"],[448,21,481,19],[448,24,481,22],[448,28,481,26],[449,6,482,4],[450,6,484,4],[450,10,484,8],[450,32,484,30],[450,36,484,34,"config"],[450,42,484,40],[450,44,484,42],[451,8,485,6],[451,14,485,12,"shouldUseTouchEvents"],[451,34,485,32],[451,37,485,35],[451,41,485,39],[451,42,485,40,"shouldUseTouchEvents"],[451,62,485,60],[451,63,485,61],[451,67,485,65],[451,68,485,66,"config"],[451,74,485,72],[451,75,485,73],[452,8,486,6,"props"],[452,13,486,11],[452,14,486,12,"simultaneousHandlers"],[452,34,486,32],[452,37,486,35,"asArray"],[452,44,486,42],[452,45,486,43,"config"],[452,51,486,49],[452,52,486,50,"simultaneousHandlers"],[452,72,486,70],[452,73,486,71],[452,74,486,72,"map"],[452,77,486,75],[452,78,486,76,"handler"],[452,85,486,83],[452,89,486,87],[453,10,487,8],[453,14,487,12],[453,21,487,19,"handler"],[453,28,487,26],[453,33,487,31],[453,41,487,39],[453,43,487,41],[454,12,488,10],[454,19,488,17,"NodeManager"],[454,30,488,28],[454,31,488,29,"getHandler"],[454,41,488,39],[454,42,488,40,"handler"],[454,49,488,47],[454,50,488,48],[455,10,489,8],[455,11,489,9],[455,17,489,15],[456,12,490,10],[456,19,490,17,"NodeManager"],[456,30,490,28],[456,31,490,29,"getHandler"],[456,41,490,39],[456,42,490,40,"handler"],[456,49,490,47],[456,50,490,48,"handlerTag"],[456,60,490,58],[456,61,490,59],[457,10,491,8],[458,8,492,6],[458,9,492,7],[458,10,492,8],[458,11,492,9,"filter"],[458,17,492,15],[458,18,492,16,"v"],[458,19,492,17],[458,23,492,21,"v"],[458,24,492,22],[458,25,492,23],[459,8,494,6],[459,12,494,10,"shouldUseTouchEvents"],[459,32,494,30],[459,37,494,35],[459,41,494,39],[459,42,494,40,"shouldUseTouchEvents"],[459,62,494,60],[459,63,494,61,"props"],[459,68,494,66],[459,69,494,67],[459,71,494,69],[460,10,495,8],[460,14,495,8,"ghQueueMicrotask"],[460,31,495,24],[460,32,495,24,"ghQueueMicrotask"],[460,48,495,24],[460,50,495,25],[460,56,495,31],[461,12,496,10],[462,12,497,10],[463,12,498,10],[463,16,498,14],[463,17,498,15,"destroy"],[463,24,498,22],[463,25,498,23],[463,26,498,24],[464,12,499,10],[464,16,499,14],[464,17,499,15,"setView"],[464,24,499,22],[464,25,499,23],[464,29,499,27],[464,30,499,28,"ref"],[464,33,499,31],[464,35,499,33],[464,39,499,37],[464,40,499,38,"propsRef"],[464,48,499,46],[464,49,499,47],[465,10,500,8],[465,11,500,9],[465,12,500,10],[466,8,501,6],[467,6,502,4],[467,7,502,5],[467,13,502,11],[468,8,503,6,"props"],[468,13,503,11],[468,14,503,12,"simultaneousHandlers"],[468,34,503,32],[468,37,503,35],[468,41,503,39],[469,6,504,4],[470,6,506,4],[470,12,506,10,"configProps"],[470,23,506,21],[470,26,506,24],[470,27,506,25],[470,40,506,38],[470,42,506,40],[470,55,506,53],[470,57,506,55],[470,66,506,64],[470,68,506,66],[470,77,506,75],[470,79,506,77],[470,90,506,88],[470,92,506,90],[470,107,506,105],[470,109,506,107],[470,120,506,118],[470,122,506,120],[470,135,506,133],[470,137,506,135],[470,155,506,153],[470,157,506,155],[470,175,506,173],[470,177,506,175],[470,193,506,191],[470,195,506,193],[470,211,506,209],[470,213,506,211],[470,233,506,231],[470,235,506,233],[470,253,506,251],[470,255,506,253],[470,275,506,273],[470,277,506,275],[470,295,506,293],[470,296,506,294],[471,6,507,4,"configProps"],[471,17,507,15],[471,18,507,16,"forEach"],[471,25,507,23],[471,26,507,24,"prop"],[471,30,507,28],[471,34,507,32],[472,8,508,6],[472,12,508,10],[472,19,508,17,"props"],[472,24,508,22],[472,25,508,23,"prop"],[472,29,508,27],[472,30,508,28],[472,35,508,33],[472,46,508,44],[472,48,508,46],[473,10,509,8,"props"],[473,15,509,13],[473,16,509,14,"prop"],[473,20,509,18],[473,21,509,19],[473,24,509,22,"Number"],[473,30,509,28],[473,31,509,29,"NaN"],[473,34,509,32],[474,8,510,6],[475,6,511,4],[475,7,511,5],[475,8,511,6],[476,6,512,4],[476,13,512,11,"props"],[476,18,512,16],[476,19,512,17],[476,20,512,18],[477,4,513,2],[478,2,515,0],[478,3,515,1],[478,4,515,2],[479,2,516,0],[481,2,519,0],[481,11,519,9,"invokeNullableMethod"],[481,31,519,29,"invokeNullableMethod"],[481,32,519,30,"method"],[481,38,519,36],[481,40,519,38,"event"],[481,45,519,43],[481,47,519,45],[482,4,520,2],[482,8,520,6,"method"],[482,14,520,12],[482,16,520,14],[483,6,521,4],[483,10,521,8],[483,17,521,15,"method"],[483,23,521,21],[483,28,521,26],[483,38,521,36],[483,40,521,38],[484,8,522,6,"method"],[484,14,522,12],[484,15,522,13,"event"],[484,20,522,18],[484,21,522,19],[485,6,523,4],[485,7,523,5],[485,13,523,11],[486,8,524,6],[487,8,525,6],[487,12,525,10],[487,26,525,24],[487,30,525,28,"method"],[487,36,525,34],[487,40,525,38],[487,47,525,45,"method"],[487,53,525,51],[487,54,525,52,"__getHandler"],[487,66,525,64],[487,71,525,69],[487,81,525,79],[487,83,525,81],[488,10,526,8],[488,16,526,14,"handler"],[488,23,526,21],[488,26,526,24,"method"],[488,32,526,30],[488,33,526,31,"__getHandler"],[488,45,526,43],[488,46,526,44],[488,47,526,45],[489,10,528,8,"invokeNullableMethod"],[489,30,528,28],[489,31,528,29,"handler"],[489,38,528,36],[489,40,528,38,"event"],[489,45,528,43],[489,46,528,44],[490,8,529,6],[490,9,529,7],[490,15,529,13],[491,10,530,8],[491,14,530,12],[491,28,530,26],[491,32,530,30,"method"],[491,38,530,36],[491,40,530,38],[492,12,531,10],[492,18,531,16],[493,14,532,12,"argMapping"],[494,12,533,10],[494,13,533,11],[494,16,533,14,"method"],[494,22,533,20],[494,23,533,21,"__nodeConfig"],[494,35,533,33],[495,12,535,10],[495,16,535,14,"Array"],[495,21,535,19],[495,22,535,20,"isArray"],[495,29,535,27],[495,30,535,28,"argMapping"],[495,40,535,38],[495,41,535,39],[495,43,535,41],[496,14,536,12],[496,19,536,17],[496,25,536,23],[496,26,536,24,"index"],[496,31,536,29],[496,33,536,31],[496,34,536,32,"key"],[496,37,536,35],[496,39,536,37,"value"],[496,44,536,42],[496,45,536,43],[496,46,536,44],[496,50,536,48,"argMapping"],[496,60,536,58],[496,61,536,59,"entries"],[496,68,536,66],[496,69,536,67],[496,70,536,68],[496,72,536,70],[497,16,537,14],[497,20,537,18,"key"],[497,23,537,21],[497,27,537,25,"event"],[497,32,537,30],[497,33,537,31,"nativeEvent"],[497,44,537,42],[497,46,537,44],[498,18,538,16],[499,18,539,16],[499,24,539,22,"nativeValue"],[499,35,539,33],[499,38,539,36,"event"],[499,43,539,41],[499,44,539,42,"nativeEvent"],[499,55,539,53],[499,56,539,54,"key"],[499,59,539,57],[499,60,539,58],[500,18,541,16],[500,22,541,20,"value"],[500,27,541,25],[500,31,541,29,"value"],[500,36,541,34],[500,37,541,35,"setValue"],[500,45,541,43],[500,47,541,45],[501,20,542,18],[502,20,543,18,"value"],[502,25,543,23],[502,26,543,24,"setValue"],[502,34,543,32],[502,35,543,33,"nativeValue"],[502,46,543,44],[502,47,543,45],[503,18,544,16],[503,19,544,17],[503,25,544,23],[504,20,545,18],[505,20,546,18,"method"],[505,26,546,24],[505,27,546,25,"__nodeConfig"],[505,39,546,37],[505,40,546,38,"argMapping"],[505,50,546,48],[505,51,546,49,"index"],[505,56,546,54],[505,57,546,55],[505,60,546,58],[505,61,546,59,"key"],[505,64,546,62],[505,66,546,64,"nativeValue"],[505,77,546,75],[505,78,546,76],[506,18,547,16],[507,16,548,14],[508,14,549,12],[509,12,550,10],[510,10,551,8],[511,8,552,6],[512,6,553,4],[513,4,554,2],[514,2,555,0],[515,2,557,0],[515,11,557,9,"asArray"],[515,18,557,16,"asArray"],[515,19,557,17,"value"],[515,24,557,22],[515,26,557,24],[516,4,558,2],[517,4,559,2],[517,11,559,9,"value"],[517,16,559,14],[517,20,559,18],[517,24,559,22],[517,27,559,25],[517,29,559,27],[517,32,559,30,"Array"],[517,37,559,35],[517,38,559,36,"isArray"],[517,45,559,43],[517,46,559,44,"value"],[517,51,559,49],[517,52,559,50],[517,55,559,53,"value"],[517,60,559,58],[517,63,559,61],[517,64,559,62,"value"],[517,69,559,67],[517,70,559,68],[518,2,560,0],[519,2,562,0],[519,6,562,0,"_default"],[519,14,562,0],[519,17,562,15,"GestureHandler"],[519,31,562,29],[520,0,562,30],[520,3]],"functionMap":{"names":["_defineProperty","<global>","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","_defineProperty$argument_2","enable","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","updateGestureConfig","getState","transformEventData","transformNativeEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","_config$simultaneousH2.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","ghQueueMicrotask$argument_0","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA,iNC;ACc;ECC;GDE;EEI;GFE;EGE;GHE;EIE;GJE;EKE;gDCqC;KDM;qCCE;KDS;2CCE;KDQ;uCCE;KDY;kCCE;qBCI;OD8D;KDO;GLI;EQE;GRE;ESE,2BT;EUE;GVE;EWE;GXE;EYE;GZI;EaE;GbE;EcE;GdE;EeE;GfsB;EgBE;GhBO;EiBE;GjBmC;EkBE;GlBE;EmBE;GnBO;EoBE;GpBM;EqBG;GrBG;EsBE;GtBK;EuBE;GvBO;EwBE;GxBM;EyBE;gLCG,2BD;GzBC;E2BE;mCC2B;mBCgB;SDG;KDE;G3BG;E8BE;0CFG,4BE;2DFC;OEE;8BFG,iCE;G9BC;E+BE;G/Ba;EgCE;GhCE;EiCE,cjC;EkCE;sDCI;sCDE;GlCK;EoCE;GpCK;EqCE,kCrC;EsCG;kDCoB;8CDE,SE,MF;4ECO;ODM,SE,MF;yBGG;SHK;wBIO;KJI;GtCE;CDE;A4CI;C5CoC;A6CE;C7CG"},"hasCjsExports":false},"type":"js/module"}]}