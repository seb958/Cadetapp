{"dependencies":[{"name":"./DiscreteGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":62,"index":62}}],"key":"dpOMqAtzFjjUQychI3TYNsYmXQE=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":63},"end":{"line":2,"column":45,"index":108}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"],"imports":1}},{"name":"./PressGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":109},"end":{"line":3,"column":56,"index":165}}],"key":"K7JCCzt/0tQ/4D2w8oVjath5+4I=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":166},"end":{"line":4,"column":58,"index":224}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _DiscreteGestureHandler = require(_dependencyMap[0], \"./DiscreteGestureHandler\");\n  var DiscreteGestureHandler = _interopDefault(_DiscreteGestureHandler);\n  var _NodeManager = require(_dependencyMap[1], \"./NodeManager\");\n  var NodeManager = _interopNamespace(_NodeManager);\n  var _PressGestureHandler = require(_dependencyMap[2], \"./PressGestureHandler\");\n  var PressGestureHandler = _interopDefault(_PressGestureHandler);\n  var _utils = require(_dependencyMap[3], \"./utils\");\n  class NativeViewGestureHandler extends PressGestureHandler.default {\n    get isNative() {\n      return true;\n    }\n    onRawEvent(ev) {\n      super.onRawEvent(ev);\n      if (!ev.isFinal) {\n        // if (this.ref instanceof ScrollView) {\n        if ((0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          // @ts-ignore FIXME(TS) config type\n          if (this.config.disallowInterruption) {\n            const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n              const {\n                handlerTag,\n                view,\n                isGestureRunning\n              } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler.default &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }); // Cancel all of the gestures that passed the filter\n\n            for (const gesture of gestures) {\n              // TODO: Bacon: Send some cached event.\n              gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }\n  var _default = NativeViewGestureHandler;\n});","lineCount":84,"map":[[27,2,48,0,"Object"],[27,8,48,0],[27,9,48,0,"defineProperty"],[27,23,48,0],[27,24,48,0,"exports"],[27,31,48,0],[28,4,48,0,"enumerable"],[28,14,48,0],[29,4,48,0,"get"],[29,7,48,0],[29,18,48,0,"get"],[29,19,48,0],[30,6,48,0],[30,13,48,0,"_default"],[30,21,48,0],[31,4,48,0],[32,2,48,0],[33,2,1,0],[33,6,1,0,"_DiscreteGestureHandler"],[33,29,1,0],[33,32,1,0,"require"],[33,39,1,0],[33,40,1,0,"_dependencyMap"],[33,54,1,0],[34,2,1,0],[34,6,1,0,"DiscreteGestureHandler"],[34,28,1,0],[34,31,1,0,"_interopDefault"],[34,46,1,0],[34,47,1,0,"_DiscreteGestureHandler"],[34,70,1,0],[35,2,2,0],[35,6,2,0,"_NodeManager"],[35,18,2,0],[35,21,2,0,"require"],[35,28,2,0],[35,29,2,0,"_dependencyMap"],[35,43,2,0],[36,2,2,0],[36,6,2,0,"NodeManager"],[36,17,2,0],[36,20,2,0,"_interopNamespace"],[36,37,2,0],[36,38,2,0,"_NodeManager"],[36,50,2,0],[37,2,3,0],[37,6,3,0,"_PressGestureHandler"],[37,26,3,0],[37,29,3,0,"require"],[37,36,3,0],[37,37,3,0,"_dependencyMap"],[37,51,3,0],[38,2,3,0],[38,6,3,0,"PressGestureHandler"],[38,25,3,0],[38,28,3,0,"_interopDefault"],[38,43,3,0],[38,44,3,0,"_PressGestureHandler"],[38,64,3,0],[39,2,4,0],[39,6,4,0,"_utils"],[39,12,4,0],[39,15,4,0,"require"],[39,22,4,0],[39,23,4,0,"_dependencyMap"],[39,37,4,0],[40,2,6,0],[40,8,6,6,"NativeViewGestureHandler"],[40,32,6,30],[40,41,6,39,"PressGestureHandler"],[40,60,6,58],[40,61,6,58,"default"],[40,68,6,58],[40,69,6,59],[41,4,7,2],[41,8,7,6,"isNative"],[41,16,7,14,"isNative"],[41,17,7,14],[41,19,7,17],[42,6,8,4],[42,13,8,11],[42,17,8,15],[43,4,9,2],[44,4,11,2,"onRawEvent"],[44,14,11,12,"onRawEvent"],[44,15,11,13,"ev"],[44,17,11,15],[44,19,11,17],[45,6,12,4],[45,11,12,9],[45,12,12,10,"onRawEvent"],[45,22,12,20],[45,23,12,21,"ev"],[45,25,12,23],[45,26,12,24],[46,6,14,4],[46,10,14,8],[46,11,14,9,"ev"],[46,13,14,11],[46,14,14,12,"isFinal"],[46,21,14,19],[46,23,14,21],[47,8,15,6],[48,8,16,6],[48,12,16,10],[48,16,16,10,"TEST_MIN_IF_NOT_NAN"],[48,22,16,29],[48,23,16,29,"TEST_MIN_IF_NOT_NAN"],[48,42,16,29],[48,44,16,30],[48,48,16,30,"VEC_LEN_SQ"],[48,54,16,40],[48,55,16,40,"VEC_LEN_SQ"],[48,65,16,40],[48,67,16,41],[49,10,17,8,"x"],[49,11,17,9],[49,13,17,11,"ev"],[49,15,17,13],[49,16,17,14,"deltaX"],[49,22,17,20],[50,10,18,8,"y"],[50,11,18,9],[50,13,18,11,"ev"],[50,15,18,13],[50,16,18,14,"deltaY"],[51,8,19,6],[51,9,19,7],[51,10,19,8],[51,12,19,10],[51,14,19,12],[51,15,19,13],[51,17,19,15],[52,10,20,8],[53,10,21,8],[53,14,21,12],[53,18,21,16],[53,19,21,17,"config"],[53,25,21,23],[53,26,21,24,"disallowInterruption"],[53,46,21,44],[53,48,21,46],[54,12,22,10],[54,18,22,16,"gestures"],[54,26,22,24],[54,29,22,27,"Object"],[54,35,22,33],[54,36,22,34,"values"],[54,42,22,40],[54,43,22,41,"NodeManager"],[54,54,22,52],[54,55,22,53,"getNodes"],[54,63,22,61],[54,64,22,62],[54,65,22,63],[54,66,22,64],[54,67,22,65,"filter"],[54,73,22,71],[54,74,22,72,"gesture"],[54,81,22,79],[54,85,22,83],[55,14,23,12],[55,20,23,18],[56,16,24,14,"handlerTag"],[56,26,24,24],[57,16,25,14,"view"],[57,20,25,18],[58,16,26,14,"isGestureRunning"],[59,14,27,12],[59,15,27,13],[59,18,27,16,"gesture"],[59,25,27,23],[60,14,28,12],[61,16,28,20],[62,16,29,14,"handlerTag"],[62,26,29,24],[62,31,29,29],[62,35,29,33],[62,36,29,34,"handlerTag"],[62,46,29,44],[63,16,29,48],[64,16,30,14,"isGestureRunning"],[64,32,30,30],[65,16,30,34],[66,16,31,14,"gesture"],[66,23,31,21],[66,35,31,33,"DiscreteGestureHandler"],[66,57,31,55],[66,58,31,55,"default"],[66,65,31,55],[67,16,31,59],[68,16,32,14,"view"],[68,20,32,18],[69,16,32,22],[70,16,33,14],[70,20,33,18],[70,21,33,19,"view"],[70,25,33,23],[70,26,33,24,"contains"],[70,34,33,32],[70,35,33,33,"view"],[70,39,33,37],[71,14,33,38],[72,12,35,10],[72,13,35,11],[72,14,35,12],[72,15,35,13],[72,16,35,14],[74,12,37,10],[74,17,37,15],[74,23,37,21,"gesture"],[74,30,37,28],[74,34,37,32,"gestures"],[74,42,37,40],[74,44,37,42],[75,14,38,12],[76,14,39,12,"gesture"],[76,21,39,19],[76,22,39,20,"forceInvalidate"],[76,37,39,35],[76,38,39,36,"ev"],[76,40,39,38],[76,41,39,39],[77,12,40,10],[78,10,41,8],[79,8,42,6],[80,6,43,4],[81,4,44,2],[82,2,46,0],[83,2,48,0],[83,6,48,0,"_default"],[83,14,48,0],[83,17,48,15,"NativeViewGestureHandler"],[83,41,48,39],[84,0,48,40],[84,3]],"functionMap":{"names":["<global>","NativeViewGestureHandler","get__isNative","onRawEvent","Object.values.filter$argument_0"],"mappings":"AAA;ACK;ECC;GDE;EEE;wECW;WDa;GFS;CDE"},"hasCjsExports":false},"type":"js/module"}]}