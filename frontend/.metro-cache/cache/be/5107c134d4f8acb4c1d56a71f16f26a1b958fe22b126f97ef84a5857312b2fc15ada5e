{"dependencies":[{"name":"../PointerType","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":19,"index":431},"end":{"line":13,"column":44,"index":456}}],"key":"rQsYrq7zAPoGzQO1FYQpBWrhZCw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isPointerInBounds = isPointerInBounds;\n  exports.calculateViewScale = calculateViewScale;\n  exports.tryExtractStylusData = tryExtractStylusData;\n  exports.isRNSVGElement = isRNSVGElement;\n  exports.isRNSVGNode = isRNSVGNode;\n  exports.RNSVGElements = exports.coneToDeviation = exports.degToRad = exports.PointerTypeMapping = void 0;\n  var _PointerType = require(_dependencyMap[0], \"../PointerType\");\n  function isPointerInBounds(view, {\n    x,\n    y\n  }) {\n    const rect = view.getBoundingClientRect();\n    return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n  }\n  const PointerTypeMapping = new Map([['mouse', _PointerType.PointerType.MOUSE], ['touch', _PointerType.PointerType.TOUCH], ['pen', _PointerType.PointerType.STYLUS], ['none', _PointerType.PointerType.OTHER]]);\n  exports.PointerTypeMapping = PointerTypeMapping;\n  const degToRad = degrees => degrees * Math.PI / 180;\n  exports.degToRad = degToRad;\n  const coneToDeviation = degrees => Math.cos(degToRad(degrees / 2));\n  exports.coneToDeviation = coneToDeviation;\n  function calculateViewScale(view) {\n    var _RegExp$exec;\n    const styles = getComputedStyle(view);\n    const resultScales = {\n      scaleX: 1,\n      scaleY: 1\n    }; // Get scales from scale property\n\n    if (styles.scale !== undefined && styles.scale !== 'none') {\n      const scales = styles.scale.split(' ');\n      if (scales[0]) {\n        resultScales.scaleX = parseFloat(scales[0]);\n      }\n      resultScales.scaleY = scales[1] ? parseFloat(scales[1]) : parseFloat(scales[0]);\n    } // Get scales from transform property\n\n    const matrixElements = (_RegExp$exec = new RegExp(/matrix\\((.+)\\)/).exec(styles.transform)) === null || _RegExp$exec === void 0 ? void 0 : _RegExp$exec[1];\n    if (matrixElements) {\n      const matrixElementsArray = matrixElements.split(', ');\n      resultScales.scaleX *= parseFloat(matrixElementsArray[0]);\n      resultScales.scaleY *= parseFloat(matrixElementsArray[3]);\n    }\n    return resultScales;\n  }\n  function tryExtractStylusData(event) {\n    const pointerType = PointerTypeMapping.get(event.pointerType);\n    if (pointerType !== _PointerType.PointerType.STYLUS) {\n      return;\n    } // @ts-ignore This property exists (https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent#instance_properties)\n\n    const eventAzimuthAngle = event.azimuthAngle; // @ts-ignore This property exists (https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent#instance_properties)\n\n    const eventAltitudeAngle = event.altitudeAngle;\n    if (event.tiltX === 0 && event.tiltY === 0) {\n      // If we are in this branch, it means that either tilt properties are not supported and we have to calculate them from altitude and azimuth angles,\n      // or stylus is perpendicular to the screen and we can use altitude / azimuth instead of tilt\n      // If azimuth and altitude are undefined in this branch, it means that we are either perpendicular to the screen,\n      // or that none of the position sets is supported. In that case, we can treat stylus as perpendicular\n      if (eventAzimuthAngle === undefined || eventAltitudeAngle === undefined) {\n        return {\n          tiltX: 0,\n          tiltY: 0,\n          azimuthAngle: Math.PI / 2,\n          altitudeAngle: Math.PI / 2,\n          pressure: event.pressure\n        };\n      }\n      const {\n        tiltX,\n        tiltY\n      } = spherical2tilt(eventAltitudeAngle, eventAzimuthAngle);\n      return {\n        tiltX,\n        tiltY,\n        azimuthAngle: eventAzimuthAngle,\n        altitudeAngle: eventAltitudeAngle,\n        pressure: event.pressure\n      };\n    }\n    const {\n      altitudeAngle,\n      azimuthAngle\n    } = tilt2spherical(event.tiltX, event.tiltY);\n    return {\n      tiltX: event.tiltX,\n      tiltY: event.tiltY,\n      azimuthAngle,\n      altitudeAngle,\n      pressure: event.pressure\n    };\n  } // `altitudeAngle` and `azimuthAngle` are experimental properties, which are not supported on Firefox and Safari.\n  // Given that, we use `tilt` properties and algorithm that converts one value to another.\n  //\n  // Source: https://w3c.github.io/pointerevents/#converting-between-tiltx-tilty-and-altitudeangle-azimuthangle\n\n  function tilt2spherical(tiltX, tiltY) {\n    const tiltXrad = tiltX * Math.PI / 180;\n    const tiltYrad = tiltY * Math.PI / 180; // calculate azimuth angle\n\n    let azimuthAngle = 0;\n    if (tiltX === 0) {\n      if (tiltY > 0) {\n        azimuthAngle = Math.PI / 2;\n      } else if (tiltY < 0) {\n        azimuthAngle = 3 * Math.PI / 2;\n      }\n    } else if (tiltY === 0) {\n      if (tiltX < 0) {\n        azimuthAngle = Math.PI;\n      }\n    } else if (Math.abs(tiltX) === 90 || Math.abs(tiltY) === 90) {\n      // not enough information to calculate azimuth\n      azimuthAngle = 0;\n    } else {\n      // Non-boundary case: neither tiltX nor tiltY is equal to 0 or +-90\n      const tanX = Math.tan(tiltXrad);\n      const tanY = Math.tan(tiltYrad);\n      azimuthAngle = Math.atan2(tanY, tanX);\n      if (azimuthAngle < 0) {\n        azimuthAngle += 2 * Math.PI;\n      }\n    } // calculate altitude angle\n\n    let altitudeAngle = 0;\n    if (Math.abs(tiltX) === 90 || Math.abs(tiltY) === 90) {\n      altitudeAngle = 0;\n    } else if (tiltX === 0) {\n      altitudeAngle = Math.PI / 2 - Math.abs(tiltYrad);\n    } else if (tiltY === 0) {\n      altitudeAngle = Math.PI / 2 - Math.abs(tiltXrad);\n    } else {\n      // Non-boundary case: neither tiltX nor tiltY is equal to 0 or +-90\n      altitudeAngle = Math.atan(1.0 / Math.sqrt(Math.pow(Math.tan(tiltXrad), 2) + Math.pow(Math.tan(tiltYrad), 2)));\n    }\n    return {\n      altitudeAngle: altitudeAngle,\n      azimuthAngle: azimuthAngle\n    };\n  } // If we are on a platform that doesn't support `tiltX` and `tiltY`, we have to calculate them from `altitude` and `azimuth` angles.\n  //\n  // Source: https://w3c.github.io/pointerevents/#converting-between-tiltx-tilty-and-altitudeangle-azimuthangle\n\n  function spherical2tilt(altitudeAngle, azimuthAngle) {\n    const radToDeg = 180 / Math.PI;\n    let tiltXrad = 0;\n    let tiltYrad = 0;\n    if (altitudeAngle === 0) {\n      // the pen is in the X-Y plane\n      if (azimuthAngle === 0 || azimuthAngle === 2 * Math.PI) {\n        // pen is on positive X axis\n        tiltXrad = Math.PI / 2;\n      }\n      if (azimuthAngle === Math.PI / 2) {\n        // pen is on positive Y axis\n        tiltYrad = Math.PI / 2;\n      }\n      if (azimuthAngle === Math.PI) {\n        // pen is on negative X axis\n        tiltXrad = -Math.PI / 2;\n      }\n      if (azimuthAngle === 3 * Math.PI / 2) {\n        // pen is on negative Y axis\n        tiltYrad = -Math.PI / 2;\n      }\n      if (azimuthAngle > 0 && azimuthAngle < Math.PI / 2) {\n        tiltXrad = Math.PI / 2;\n        tiltYrad = Math.PI / 2;\n      }\n      if (azimuthAngle > Math.PI / 2 && azimuthAngle < Math.PI) {\n        tiltXrad = -Math.PI / 2;\n        tiltYrad = Math.PI / 2;\n      }\n      if (azimuthAngle > Math.PI && azimuthAngle < 3 * Math.PI / 2) {\n        tiltXrad = -Math.PI / 2;\n        tiltYrad = -Math.PI / 2;\n      }\n      if (azimuthAngle > 3 * Math.PI / 2 && azimuthAngle < 2 * Math.PI) {\n        tiltXrad = Math.PI / 2;\n        tiltYrad = -Math.PI / 2;\n      }\n    }\n    if (altitudeAngle !== 0) {\n      const tanAlt = Math.tan(altitudeAngle);\n      tiltXrad = Math.atan(Math.cos(azimuthAngle) / tanAlt);\n      tiltYrad = Math.atan(Math.sin(azimuthAngle) / tanAlt);\n    }\n    const tiltX = Math.round(tiltXrad * radToDeg);\n    const tiltY = Math.round(tiltYrad * radToDeg);\n    return {\n      tiltX,\n      tiltY\n    };\n  }\n  const RNSVGElements = new Set(['Circle', 'ClipPath', 'Ellipse', 'ForeignObject', 'G', 'Image', 'Line', 'Marker', 'Mask', 'Path', 'Pattern', 'Polygon', 'Polyline', 'Rect', 'Svg', 'Symbol', 'TSpan', 'Text', 'TextPath', 'Use']); // This function helps us determine whether given node is SVGElement or not. In our implementation of\n  // findNodeHandle, we can encounter such element in 2 forms - SVG tag or ref to SVG Element. Since Gesture Handler\n  // does not depend on SVG, we use our simplified SVGRef type that has `elementRef` field. This is something that is present\n  // in actual SVG ref object.\n  //\n  // In order to make sure that node passed into this function is in fact SVG element, first we check if its constructor name\n  // corresponds to one of the possible SVG elements. Then we also check if `elementRef` field exists.\n  // By doing both steps we decrease probability of detecting situations where, for example, user makes custom `Circle` and\n  // we treat it as SVG.\n\n  exports.RNSVGElements = RNSVGElements;\n  function isRNSVGElement(viewRef) {\n    const componentClassName = Object.getPrototypeOf(viewRef).constructor.name;\n    return RNSVGElements.has(componentClassName) && Object.hasOwn(viewRef, 'elementRef');\n  } // This function checks if given node is SVGElement. Unlike the function above, this one\n  // operates on React Nodes, not DOM nodes.\n  //\n  // Second condition was introduced to handle case where SVG element was wrapped with\n  // `createAnimatedComponent` from Reanimated.\n\n  function isRNSVGNode(node) {\n    var _node$ref, _Object$getPrototypeO, _node$type;\n\n    // If `ref` has `rngh` field, it means that component comes from Gesture Handler. This is a special case for\n    // `Text` component, which is present in `RNSVGElements` set, yet we don't want to treat it as SVG.\n    if ((_node$ref = node.ref) !== null && _node$ref !== void 0 && _node$ref.rngh) {\n      return false;\n    }\n    return ((_Object$getPrototypeO = Object.getPrototypeOf(node === null || node === void 0 ? void 0 : node.type)) === null || _Object$getPrototypeO === void 0 ? void 0 : _Object$getPrototypeO.name) === 'WebShape' || RNSVGElements.has(node === null || node === void 0 ? void 0 : (_node$type = node.type) === null || _node$type === void 0 ? void 0 : _node$type.displayName);\n  }\n});","lineCount":230,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"isPointerInBounds"],[7,27,6,25],[7,30,6,28,"isPointerInBounds"],[7,47,6,45],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"calculateViewScale"],[8,28,7,26],[8,31,7,29,"calculateViewScale"],[8,49,7,47],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"tryExtractStylusData"],[9,30,8,28],[9,33,8,31,"tryExtractStylusData"],[9,53,8,51],[10,2,9,0,"exports"],[10,9,9,7],[10,10,9,8,"isRNSVGElement"],[10,24,9,22],[10,27,9,25,"isRNSVGElement"],[10,41,9,39],[11,2,10,0,"exports"],[11,9,10,7],[11,10,10,8,"isRNSVGNode"],[11,21,10,19],[11,24,10,22,"isRNSVGNode"],[11,35,10,33],[12,2,11,0,"exports"],[12,9,11,7],[12,10,11,8,"RNSVGElements"],[12,23,11,21],[12,26,11,24,"exports"],[12,33,11,31],[12,34,11,32,"coneToDeviation"],[12,49,11,47],[12,52,11,50,"exports"],[12,59,11,57],[12,60,11,58,"degToRad"],[12,68,11,66],[12,71,11,69,"exports"],[12,78,11,76],[12,79,11,77,"PointerTypeMapping"],[12,97,11,95],[12,100,11,98],[12,105,11,103],[12,106,11,104],[13,2,13,0],[13,6,13,4,"_PointerType"],[13,18,13,16],[13,21,13,19,"require"],[13,28,13,26],[13,29,13,26,"_dependencyMap"],[13,43,13,26],[13,64,13,43],[13,65,13,44],[14,2,15,0],[14,11,15,9,"isPointerInBounds"],[14,28,15,26,"isPointerInBounds"],[14,29,15,27,"view"],[14,33,15,31],[14,35,15,33],[15,4,16,2,"x"],[15,5,16,3],[16,4,17,2,"y"],[17,2,18,0],[17,3,18,1],[17,5,18,3],[18,4,19,2],[18,10,19,8,"rect"],[18,14,19,12],[18,17,19,15,"view"],[18,21,19,19],[18,22,19,20,"getBoundingClientRect"],[18,43,19,41],[18,44,19,42],[18,45,19,43],[19,4,20,2],[19,11,20,9,"x"],[19,12,20,10],[19,16,20,14,"rect"],[19,20,20,18],[19,21,20,19,"left"],[19,25,20,23],[19,29,20,27,"x"],[19,30,20,28],[19,34,20,32,"rect"],[19,38,20,36],[19,39,20,37,"right"],[19,44,20,42],[19,48,20,46,"y"],[19,49,20,47],[19,53,20,51,"rect"],[19,57,20,55],[19,58,20,56,"top"],[19,61,20,59],[19,65,20,63,"y"],[19,66,20,64],[19,70,20,68,"rect"],[19,74,20,72],[19,75,20,73,"bottom"],[19,81,20,79],[20,2,21,0],[21,2,23,0],[21,8,23,6,"PointerTypeMapping"],[21,26,23,24],[21,29,23,27],[21,33,23,31,"Map"],[21,36,23,34],[21,37,23,35],[21,38,23,36],[21,39,23,37],[21,46,23,44],[21,48,23,46,"_PointerType"],[21,60,23,58],[21,61,23,59,"PointerType"],[21,72,23,70],[21,73,23,71,"MOUSE"],[21,78,23,76],[21,79,23,77],[21,81,23,79],[21,82,23,80],[21,89,23,87],[21,91,23,89,"_PointerType"],[21,103,23,101],[21,104,23,102,"PointerType"],[21,115,23,113],[21,116,23,114,"TOUCH"],[21,121,23,119],[21,122,23,120],[21,124,23,122],[21,125,23,123],[21,130,23,128],[21,132,23,130,"_PointerType"],[21,144,23,142],[21,145,23,143,"PointerType"],[21,156,23,154],[21,157,23,155,"STYLUS"],[21,163,23,161],[21,164,23,162],[21,166,23,164],[21,167,23,165],[21,173,23,171],[21,175,23,173,"_PointerType"],[21,187,23,185],[21,188,23,186,"PointerType"],[21,199,23,197],[21,200,23,198,"OTHER"],[21,205,23,203],[21,206,23,204],[21,207,23,205],[21,208,23,206],[22,2,24,0,"exports"],[22,9,24,7],[22,10,24,8,"PointerTypeMapping"],[22,28,24,26],[22,31,24,29,"PointerTypeMapping"],[22,49,24,47],[23,2,26,0],[23,8,26,6,"degToRad"],[23,16,26,14],[23,19,26,17,"degrees"],[23,26,26,24],[23,30,26,28,"degrees"],[23,37,26,35],[23,40,26,38,"Math"],[23,44,26,42],[23,45,26,43,"PI"],[23,47,26,45],[23,50,26,48],[23,53,26,51],[24,2,28,0,"exports"],[24,9,28,7],[24,10,28,8,"degToRad"],[24,18,28,16],[24,21,28,19,"degToRad"],[24,29,28,27],[25,2,30,0],[25,8,30,6,"coneToDeviation"],[25,23,30,21],[25,26,30,24,"degrees"],[25,33,30,31],[25,37,30,35,"Math"],[25,41,30,39],[25,42,30,40,"cos"],[25,45,30,43],[25,46,30,44,"degToRad"],[25,54,30,52],[25,55,30,53,"degrees"],[25,62,30,60],[25,65,30,63],[25,66,30,64],[25,67,30,65],[25,68,30,66],[26,2,32,0,"exports"],[26,9,32,7],[26,10,32,8,"coneToDeviation"],[26,25,32,23],[26,28,32,26,"coneToDeviation"],[26,43,32,41],[27,2,34,0],[27,11,34,9,"calculateViewScale"],[27,29,34,27,"calculateViewScale"],[27,30,34,28,"view"],[27,34,34,32],[27,36,34,34],[28,4,35,2],[28,8,35,6,"_RegExp$exec"],[28,20,35,18],[29,4,37,2],[29,10,37,8,"styles"],[29,16,37,14],[29,19,37,17,"getComputedStyle"],[29,35,37,33],[29,36,37,34,"view"],[29,40,37,38],[29,41,37,39],[30,4,38,2],[30,10,38,8,"resultScales"],[30,22,38,20],[30,25,38,23],[31,6,39,4,"scaleX"],[31,12,39,10],[31,14,39,12],[31,15,39,13],[32,6,40,4,"scaleY"],[32,12,40,10],[32,14,40,12],[33,4,41,2],[33,5,41,3],[33,6,41,4],[33,7,41,5],[35,4,43,2],[35,8,43,6,"styles"],[35,14,43,12],[35,15,43,13,"scale"],[35,20,43,18],[35,25,43,23,"undefined"],[35,34,43,32],[35,38,43,36,"styles"],[35,44,43,42],[35,45,43,43,"scale"],[35,50,43,48],[35,55,43,53],[35,61,43,59],[35,63,43,61],[36,6,44,4],[36,12,44,10,"scales"],[36,18,44,16],[36,21,44,19,"styles"],[36,27,44,25],[36,28,44,26,"scale"],[36,33,44,31],[36,34,44,32,"split"],[36,39,44,37],[36,40,44,38],[36,43,44,41],[36,44,44,42],[37,6,46,4],[37,10,46,8,"scales"],[37,16,46,14],[37,17,46,15],[37,18,46,16],[37,19,46,17],[37,21,46,19],[38,8,47,6,"resultScales"],[38,20,47,18],[38,21,47,19,"scaleX"],[38,27,47,25],[38,30,47,28,"parseFloat"],[38,40,47,38],[38,41,47,39,"scales"],[38,47,47,45],[38,48,47,46],[38,49,47,47],[38,50,47,48],[38,51,47,49],[39,6,48,4],[40,6,50,4,"resultScales"],[40,18,50,16],[40,19,50,17,"scaleY"],[40,25,50,23],[40,28,50,26,"scales"],[40,34,50,32],[40,35,50,33],[40,36,50,34],[40,37,50,35],[40,40,50,38,"parseFloat"],[40,50,50,48],[40,51,50,49,"scales"],[40,57,50,55],[40,58,50,56],[40,59,50,57],[40,60,50,58],[40,61,50,59],[40,64,50,62,"parseFloat"],[40,74,50,72],[40,75,50,73,"scales"],[40,81,50,79],[40,82,50,80],[40,83,50,81],[40,84,50,82],[40,85,50,83],[41,4,51,2],[41,5,51,3],[41,6,51,4],[43,4,54,2],[43,10,54,8,"matrixElements"],[43,24,54,22],[43,27,54,25],[43,28,54,26,"_RegExp$exec"],[43,40,54,38],[43,43,54,41],[43,47,54,45,"RegExp"],[43,53,54,51],[43,54,54,52],[43,70,54,68],[43,71,54,69],[43,72,54,70,"exec"],[43,76,54,74],[43,77,54,75,"styles"],[43,83,54,81],[43,84,54,82,"transform"],[43,93,54,91],[43,94,54,92],[43,100,54,98],[43,104,54,102],[43,108,54,106,"_RegExp$exec"],[43,120,54,118],[43,125,54,123],[43,130,54,128],[43,131,54,129],[43,134,54,132],[43,139,54,137],[43,140,54,138],[43,143,54,141,"_RegExp$exec"],[43,155,54,153],[43,156,54,154],[43,157,54,155],[43,158,54,156],[44,4,56,2],[44,8,56,6,"matrixElements"],[44,22,56,20],[44,24,56,22],[45,6,57,4],[45,12,57,10,"matrixElementsArray"],[45,31,57,29],[45,34,57,32,"matrixElements"],[45,48,57,46],[45,49,57,47,"split"],[45,54,57,52],[45,55,57,53],[45,59,57,57],[45,60,57,58],[46,6,58,4,"resultScales"],[46,18,58,16],[46,19,58,17,"scaleX"],[46,25,58,23],[46,29,58,27,"parseFloat"],[46,39,58,37],[46,40,58,38,"matrixElementsArray"],[46,59,58,57],[46,60,58,58],[46,61,58,59],[46,62,58,60],[46,63,58,61],[47,6,59,4,"resultScales"],[47,18,59,16],[47,19,59,17,"scaleY"],[47,25,59,23],[47,29,59,27,"parseFloat"],[47,39,59,37],[47,40,59,38,"matrixElementsArray"],[47,59,59,57],[47,60,59,58],[47,61,59,59],[47,62,59,60],[47,63,59,61],[48,4,60,2],[49,4,62,2],[49,11,62,9,"resultScales"],[49,23,62,21],[50,2,63,0],[51,2,65,0],[51,11,65,9,"tryExtractStylusData"],[51,31,65,29,"tryExtractStylusData"],[51,32,65,30,"event"],[51,37,65,35],[51,39,65,37],[52,4,66,2],[52,10,66,8,"pointerType"],[52,21,66,19],[52,24,66,22,"PointerTypeMapping"],[52,42,66,40],[52,43,66,41,"get"],[52,46,66,44],[52,47,66,45,"event"],[52,52,66,50],[52,53,66,51,"pointerType"],[52,64,66,62],[52,65,66,63],[53,4,68,2],[53,8,68,6,"pointerType"],[53,19,68,17],[53,24,68,22,"_PointerType"],[53,36,68,34],[53,37,68,35,"PointerType"],[53,48,68,46],[53,49,68,47,"STYLUS"],[53,55,68,53],[53,57,68,55],[54,6,69,4],[55,4,70,2],[55,5,70,3],[55,6,70,4],[57,4,73,2],[57,10,73,8,"eventAzimuthAngle"],[57,27,73,25],[57,30,73,28,"event"],[57,35,73,33],[57,36,73,34,"azimuthAngle"],[57,48,73,46],[57,49,73,47],[57,50,73,48],[59,4,75,2],[59,10,75,8,"eventAltitudeAngle"],[59,28,75,26],[59,31,75,29,"event"],[59,36,75,34],[59,37,75,35,"altitudeAngle"],[59,50,75,48],[60,4,77,2],[60,8,77,6,"event"],[60,13,77,11],[60,14,77,12,"tiltX"],[60,19,77,17],[60,24,77,22],[60,25,77,23],[60,29,77,27,"event"],[60,34,77,32],[60,35,77,33,"tiltY"],[60,40,77,38],[60,45,77,43],[60,46,77,44],[60,48,77,46],[61,6,78,4],[62,6,79,4],[63,6,80,4],[64,6,81,4],[65,6,82,4],[65,10,82,8,"eventAzimuthAngle"],[65,27,82,25],[65,32,82,30,"undefined"],[65,41,82,39],[65,45,82,43,"eventAltitudeAngle"],[65,63,82,61],[65,68,82,66,"undefined"],[65,77,82,75],[65,79,82,77],[66,8,83,6],[66,15,83,13],[67,10,84,8,"tiltX"],[67,15,84,13],[67,17,84,15],[67,18,84,16],[68,10,85,8,"tiltY"],[68,15,85,13],[68,17,85,15],[68,18,85,16],[69,10,86,8,"azimuthAngle"],[69,22,86,20],[69,24,86,22,"Math"],[69,28,86,26],[69,29,86,27,"PI"],[69,31,86,29],[69,34,86,32],[69,35,86,33],[70,10,87,8,"altitudeAngle"],[70,23,87,21],[70,25,87,23,"Math"],[70,29,87,27],[70,30,87,28,"PI"],[70,32,87,30],[70,35,87,33],[70,36,87,34],[71,10,88,8,"pressure"],[71,18,88,16],[71,20,88,18,"event"],[71,25,88,23],[71,26,88,24,"pressure"],[72,8,89,6],[72,9,89,7],[73,6,90,4],[74,6,92,4],[74,12,92,10],[75,8,93,6,"tiltX"],[75,13,93,11],[76,8,94,6,"tiltY"],[77,6,95,4],[77,7,95,5],[77,10,95,8,"spherical2tilt"],[77,24,95,22],[77,25,95,23,"eventAltitudeAngle"],[77,43,95,41],[77,45,95,43,"eventAzimuthAngle"],[77,62,95,60],[77,63,95,61],[78,6,96,4],[78,13,96,11],[79,8,97,6,"tiltX"],[79,13,97,11],[80,8,98,6,"tiltY"],[80,13,98,11],[81,8,99,6,"azimuthAngle"],[81,20,99,18],[81,22,99,20,"eventAzimuthAngle"],[81,39,99,37],[82,8,100,6,"altitudeAngle"],[82,21,100,19],[82,23,100,21,"eventAltitudeAngle"],[82,41,100,39],[83,8,101,6,"pressure"],[83,16,101,14],[83,18,101,16,"event"],[83,23,101,21],[83,24,101,22,"pressure"],[84,6,102,4],[84,7,102,5],[85,4,103,2],[86,4,105,2],[86,10,105,8],[87,6,106,4,"altitudeAngle"],[87,19,106,17],[88,6,107,4,"azimuthAngle"],[89,4,108,2],[89,5,108,3],[89,8,108,6,"tilt2spherical"],[89,22,108,20],[89,23,108,21,"event"],[89,28,108,26],[89,29,108,27,"tiltX"],[89,34,108,32],[89,36,108,34,"event"],[89,41,108,39],[89,42,108,40,"tiltY"],[89,47,108,45],[89,48,108,46],[90,4,109,2],[90,11,109,9],[91,6,110,4,"tiltX"],[91,11,110,9],[91,13,110,11,"event"],[91,18,110,16],[91,19,110,17,"tiltX"],[91,24,110,22],[92,6,111,4,"tiltY"],[92,11,111,9],[92,13,111,11,"event"],[92,18,111,16],[92,19,111,17,"tiltY"],[92,24,111,22],[93,6,112,4,"azimuthAngle"],[93,18,112,16],[94,6,113,4,"altitudeAngle"],[94,19,113,17],[95,6,114,4,"pressure"],[95,14,114,12],[95,16,114,14,"event"],[95,21,114,19],[95,22,114,20,"pressure"],[96,4,115,2],[96,5,115,3],[97,2,116,0],[97,3,116,1],[97,4,116,2],[98,2,117,0],[99,2,118,0],[100,2,119,0],[102,2,122,0],[102,11,122,9,"tilt2spherical"],[102,25,122,23,"tilt2spherical"],[102,26,122,24,"tiltX"],[102,31,122,29],[102,33,122,31,"tiltY"],[102,38,122,36],[102,40,122,38],[103,4,123,2],[103,10,123,8,"tiltXrad"],[103,18,123,16],[103,21,123,19,"tiltX"],[103,26,123,24],[103,29,123,27,"Math"],[103,33,123,31],[103,34,123,32,"PI"],[103,36,123,34],[103,39,123,37],[103,42,123,40],[104,4,124,2],[104,10,124,8,"tiltYrad"],[104,18,124,16],[104,21,124,19,"tiltY"],[104,26,124,24],[104,29,124,27,"Math"],[104,33,124,31],[104,34,124,32,"PI"],[104,36,124,34],[104,39,124,37],[104,42,124,40],[104,43,124,41],[104,44,124,42],[106,4,126,2],[106,8,126,6,"azimuthAngle"],[106,20,126,18],[106,23,126,21],[106,24,126,22],[107,4,128,2],[107,8,128,6,"tiltX"],[107,13,128,11],[107,18,128,16],[107,19,128,17],[107,21,128,19],[108,6,129,4],[108,10,129,8,"tiltY"],[108,15,129,13],[108,18,129,16],[108,19,129,17],[108,21,129,19],[109,8,130,6,"azimuthAngle"],[109,20,130,18],[109,23,130,21,"Math"],[109,27,130,25],[109,28,130,26,"PI"],[109,30,130,28],[109,33,130,31],[109,34,130,32],[110,6,131,4],[110,7,131,5],[110,13,131,11],[110,17,131,15,"tiltY"],[110,22,131,20],[110,25,131,23],[110,26,131,24],[110,28,131,26],[111,8,132,6,"azimuthAngle"],[111,20,132,18],[111,23,132,21],[111,24,132,22],[111,27,132,25,"Math"],[111,31,132,29],[111,32,132,30,"PI"],[111,34,132,32],[111,37,132,35],[111,38,132,36],[112,6,133,4],[113,4,134,2],[113,5,134,3],[113,11,134,9],[113,15,134,13,"tiltY"],[113,20,134,18],[113,25,134,23],[113,26,134,24],[113,28,134,26],[114,6,135,4],[114,10,135,8,"tiltX"],[114,15,135,13],[114,18,135,16],[114,19,135,17],[114,21,135,19],[115,8,136,6,"azimuthAngle"],[115,20,136,18],[115,23,136,21,"Math"],[115,27,136,25],[115,28,136,26,"PI"],[115,30,136,28],[116,6,137,4],[117,4,138,2],[117,5,138,3],[117,11,138,9],[117,15,138,13,"Math"],[117,19,138,17],[117,20,138,18,"abs"],[117,23,138,21],[117,24,138,22,"tiltX"],[117,29,138,27],[117,30,138,28],[117,35,138,33],[117,37,138,35],[117,41,138,39,"Math"],[117,45,138,43],[117,46,138,44,"abs"],[117,49,138,47],[117,50,138,48,"tiltY"],[117,55,138,53],[117,56,138,54],[117,61,138,59],[117,63,138,61],[117,65,138,63],[118,6,139,4],[119,6,140,4,"azimuthAngle"],[119,18,140,16],[119,21,140,19],[119,22,140,20],[120,4,141,2],[120,5,141,3],[120,11,141,9],[121,6,142,4],[122,6,143,4],[122,12,143,10,"tanX"],[122,16,143,14],[122,19,143,17,"Math"],[122,23,143,21],[122,24,143,22,"tan"],[122,27,143,25],[122,28,143,26,"tiltXrad"],[122,36,143,34],[122,37,143,35],[123,6,144,4],[123,12,144,10,"tanY"],[123,16,144,14],[123,19,144,17,"Math"],[123,23,144,21],[123,24,144,22,"tan"],[123,27,144,25],[123,28,144,26,"tiltYrad"],[123,36,144,34],[123,37,144,35],[124,6,145,4,"azimuthAngle"],[124,18,145,16],[124,21,145,19,"Math"],[124,25,145,23],[124,26,145,24,"atan2"],[124,31,145,29],[124,32,145,30,"tanY"],[124,36,145,34],[124,38,145,36,"tanX"],[124,42,145,40],[124,43,145,41],[125,6,147,4],[125,10,147,8,"azimuthAngle"],[125,22,147,20],[125,25,147,23],[125,26,147,24],[125,28,147,26],[126,8,148,6,"azimuthAngle"],[126,20,148,18],[126,24,148,22],[126,25,148,23],[126,28,148,26,"Math"],[126,32,148,30],[126,33,148,31,"PI"],[126,35,148,33],[127,6,149,4],[128,4,150,2],[128,5,150,3],[128,6,150,4],[130,4,153,2],[130,8,153,6,"altitudeAngle"],[130,21,153,19],[130,24,153,22],[130,25,153,23],[131,4,155,2],[131,8,155,6,"Math"],[131,12,155,10],[131,13,155,11,"abs"],[131,16,155,14],[131,17,155,15,"tiltX"],[131,22,155,20],[131,23,155,21],[131,28,155,26],[131,30,155,28],[131,34,155,32,"Math"],[131,38,155,36],[131,39,155,37,"abs"],[131,42,155,40],[131,43,155,41,"tiltY"],[131,48,155,46],[131,49,155,47],[131,54,155,52],[131,56,155,54],[131,58,155,56],[132,6,156,4,"altitudeAngle"],[132,19,156,17],[132,22,156,20],[132,23,156,21],[133,4,157,2],[133,5,157,3],[133,11,157,9],[133,15,157,13,"tiltX"],[133,20,157,18],[133,25,157,23],[133,26,157,24],[133,28,157,26],[134,6,158,4,"altitudeAngle"],[134,19,158,17],[134,22,158,20,"Math"],[134,26,158,24],[134,27,158,25,"PI"],[134,29,158,27],[134,32,158,30],[134,33,158,31],[134,36,158,34,"Math"],[134,40,158,38],[134,41,158,39,"abs"],[134,44,158,42],[134,45,158,43,"tiltYrad"],[134,53,158,51],[134,54,158,52],[135,4,159,2],[135,5,159,3],[135,11,159,9],[135,15,159,13,"tiltY"],[135,20,159,18],[135,25,159,23],[135,26,159,24],[135,28,159,26],[136,6,160,4,"altitudeAngle"],[136,19,160,17],[136,22,160,20,"Math"],[136,26,160,24],[136,27,160,25,"PI"],[136,29,160,27],[136,32,160,30],[136,33,160,31],[136,36,160,34,"Math"],[136,40,160,38],[136,41,160,39,"abs"],[136,44,160,42],[136,45,160,43,"tiltXrad"],[136,53,160,51],[136,54,160,52],[137,4,161,2],[137,5,161,3],[137,11,161,9],[138,6,162,4],[139,6,163,4,"altitudeAngle"],[139,19,163,17],[139,22,163,20,"Math"],[139,26,163,24],[139,27,163,25,"atan"],[139,31,163,29],[139,32,163,30],[139,35,163,33],[139,38,163,36,"Math"],[139,42,163,40],[139,43,163,41,"sqrt"],[139,47,163,45],[139,48,163,46,"Math"],[139,52,163,50],[139,53,163,51,"pow"],[139,56,163,54],[139,57,163,55,"Math"],[139,61,163,59],[139,62,163,60,"tan"],[139,65,163,63],[139,66,163,64,"tiltXrad"],[139,74,163,72],[139,75,163,73],[139,77,163,75],[139,78,163,76],[139,79,163,77],[139,82,163,80,"Math"],[139,86,163,84],[139,87,163,85,"pow"],[139,90,163,88],[139,91,163,89,"Math"],[139,95,163,93],[139,96,163,94,"tan"],[139,99,163,97],[139,100,163,98,"tiltYrad"],[139,108,163,106],[139,109,163,107],[139,111,163,109],[139,112,163,110],[139,113,163,111],[139,114,163,112],[139,115,163,113],[140,4,164,2],[141,4,166,2],[141,11,166,9],[142,6,167,4,"altitudeAngle"],[142,19,167,17],[142,21,167,19,"altitudeAngle"],[142,34,167,32],[143,6,168,4,"azimuthAngle"],[143,18,168,16],[143,20,168,18,"azimuthAngle"],[144,4,169,2],[144,5,169,3],[145,2,170,0],[145,3,170,1],[145,4,170,2],[146,2,171,0],[147,2,172,0],[149,2,175,0],[149,11,175,9,"spherical2tilt"],[149,25,175,23,"spherical2tilt"],[149,26,175,24,"altitudeAngle"],[149,39,175,37],[149,41,175,39,"azimuthAngle"],[149,53,175,51],[149,55,175,53],[150,4,176,2],[150,10,176,8,"radToDeg"],[150,18,176,16],[150,21,176,19],[150,24,176,22],[150,27,176,25,"Math"],[150,31,176,29],[150,32,176,30,"PI"],[150,34,176,32],[151,4,177,2],[151,8,177,6,"tiltXrad"],[151,16,177,14],[151,19,177,17],[151,20,177,18],[152,4,178,2],[152,8,178,6,"tiltYrad"],[152,16,178,14],[152,19,178,17],[152,20,178,18],[153,4,180,2],[153,8,180,6,"altitudeAngle"],[153,21,180,19],[153,26,180,24],[153,27,180,25],[153,29,180,27],[154,6,181,4],[155,6,182,4],[155,10,182,8,"azimuthAngle"],[155,22,182,20],[155,27,182,25],[155,28,182,26],[155,32,182,30,"azimuthAngle"],[155,44,182,42],[155,49,182,47],[155,50,182,48],[155,53,182,51,"Math"],[155,57,182,55],[155,58,182,56,"PI"],[155,60,182,58],[155,62,182,60],[156,8,183,6],[157,8,184,6,"tiltXrad"],[157,16,184,14],[157,19,184,17,"Math"],[157,23,184,21],[157,24,184,22,"PI"],[157,26,184,24],[157,29,184,27],[157,30,184,28],[158,6,185,4],[159,6,187,4],[159,10,187,8,"azimuthAngle"],[159,22,187,20],[159,27,187,25,"Math"],[159,31,187,29],[159,32,187,30,"PI"],[159,34,187,32],[159,37,187,35],[159,38,187,36],[159,40,187,38],[160,8,188,6],[161,8,189,6,"tiltYrad"],[161,16,189,14],[161,19,189,17,"Math"],[161,23,189,21],[161,24,189,22,"PI"],[161,26,189,24],[161,29,189,27],[161,30,189,28],[162,6,190,4],[163,6,192,4],[163,10,192,8,"azimuthAngle"],[163,22,192,20],[163,27,192,25,"Math"],[163,31,192,29],[163,32,192,30,"PI"],[163,34,192,32],[163,36,192,34],[164,8,193,6],[165,8,194,6,"tiltXrad"],[165,16,194,14],[165,19,194,17],[165,20,194,18,"Math"],[165,24,194,22],[165,25,194,23,"PI"],[165,27,194,25],[165,30,194,28],[165,31,194,29],[166,6,195,4],[167,6,197,4],[167,10,197,8,"azimuthAngle"],[167,22,197,20],[167,27,197,25],[167,28,197,26],[167,31,197,29,"Math"],[167,35,197,33],[167,36,197,34,"PI"],[167,38,197,36],[167,41,197,39],[167,42,197,40],[167,44,197,42],[168,8,198,6],[169,8,199,6,"tiltYrad"],[169,16,199,14],[169,19,199,17],[169,20,199,18,"Math"],[169,24,199,22],[169,25,199,23,"PI"],[169,27,199,25],[169,30,199,28],[169,31,199,29],[170,6,200,4],[171,6,202,4],[171,10,202,8,"azimuthAngle"],[171,22,202,20],[171,25,202,23],[171,26,202,24],[171,30,202,28,"azimuthAngle"],[171,42,202,40],[171,45,202,43,"Math"],[171,49,202,47],[171,50,202,48,"PI"],[171,52,202,50],[171,55,202,53],[171,56,202,54],[171,58,202,56],[172,8,203,6,"tiltXrad"],[172,16,203,14],[172,19,203,17,"Math"],[172,23,203,21],[172,24,203,22,"PI"],[172,26,203,24],[172,29,203,27],[172,30,203,28],[173,8,204,6,"tiltYrad"],[173,16,204,14],[173,19,204,17,"Math"],[173,23,204,21],[173,24,204,22,"PI"],[173,26,204,24],[173,29,204,27],[173,30,204,28],[174,6,205,4],[175,6,207,4],[175,10,207,8,"azimuthAngle"],[175,22,207,20],[175,25,207,23,"Math"],[175,29,207,27],[175,30,207,28,"PI"],[175,32,207,30],[175,35,207,33],[175,36,207,34],[175,40,207,38,"azimuthAngle"],[175,52,207,50],[175,55,207,53,"Math"],[175,59,207,57],[175,60,207,58,"PI"],[175,62,207,60],[175,64,207,62],[176,8,208,6,"tiltXrad"],[176,16,208,14],[176,19,208,17],[176,20,208,18,"Math"],[176,24,208,22],[176,25,208,23,"PI"],[176,27,208,25],[176,30,208,28],[176,31,208,29],[177,8,209,6,"tiltYrad"],[177,16,209,14],[177,19,209,17,"Math"],[177,23,209,21],[177,24,209,22,"PI"],[177,26,209,24],[177,29,209,27],[177,30,209,28],[178,6,210,4],[179,6,212,4],[179,10,212,8,"azimuthAngle"],[179,22,212,20],[179,25,212,23,"Math"],[179,29,212,27],[179,30,212,28,"PI"],[179,32,212,30],[179,36,212,34,"azimuthAngle"],[179,48,212,46],[179,51,212,49],[179,52,212,50],[179,55,212,53,"Math"],[179,59,212,57],[179,60,212,58,"PI"],[179,62,212,60],[179,65,212,63],[179,66,212,64],[179,68,212,66],[180,8,213,6,"tiltXrad"],[180,16,213,14],[180,19,213,17],[180,20,213,18,"Math"],[180,24,213,22],[180,25,213,23,"PI"],[180,27,213,25],[180,30,213,28],[180,31,213,29],[181,8,214,6,"tiltYrad"],[181,16,214,14],[181,19,214,17],[181,20,214,18,"Math"],[181,24,214,22],[181,25,214,23,"PI"],[181,27,214,25],[181,30,214,28],[181,31,214,29],[182,6,215,4],[183,6,217,4],[183,10,217,8,"azimuthAngle"],[183,22,217,20],[183,25,217,23],[183,26,217,24],[183,29,217,27,"Math"],[183,33,217,31],[183,34,217,32,"PI"],[183,36,217,34],[183,39,217,37],[183,40,217,38],[183,44,217,42,"azimuthAngle"],[183,56,217,54],[183,59,217,57],[183,60,217,58],[183,63,217,61,"Math"],[183,67,217,65],[183,68,217,66,"PI"],[183,70,217,68],[183,72,217,70],[184,8,218,6,"tiltXrad"],[184,16,218,14],[184,19,218,17,"Math"],[184,23,218,21],[184,24,218,22,"PI"],[184,26,218,24],[184,29,218,27],[184,30,218,28],[185,8,219,6,"tiltYrad"],[185,16,219,14],[185,19,219,17],[185,20,219,18,"Math"],[185,24,219,22],[185,25,219,23,"PI"],[185,27,219,25],[185,30,219,28],[185,31,219,29],[186,6,220,4],[187,4,221,2],[188,4,223,2],[188,8,223,6,"altitudeAngle"],[188,21,223,19],[188,26,223,24],[188,27,223,25],[188,29,223,27],[189,6,224,4],[189,12,224,10,"tanAlt"],[189,18,224,16],[189,21,224,19,"Math"],[189,25,224,23],[189,26,224,24,"tan"],[189,29,224,27],[189,30,224,28,"altitudeAngle"],[189,43,224,41],[189,44,224,42],[190,6,225,4,"tiltXrad"],[190,14,225,12],[190,17,225,15,"Math"],[190,21,225,19],[190,22,225,20,"atan"],[190,26,225,24],[190,27,225,25,"Math"],[190,31,225,29],[190,32,225,30,"cos"],[190,35,225,33],[190,36,225,34,"azimuthAngle"],[190,48,225,46],[190,49,225,47],[190,52,225,50,"tanAlt"],[190,58,225,56],[190,59,225,57],[191,6,226,4,"tiltYrad"],[191,14,226,12],[191,17,226,15,"Math"],[191,21,226,19],[191,22,226,20,"atan"],[191,26,226,24],[191,27,226,25,"Math"],[191,31,226,29],[191,32,226,30,"sin"],[191,35,226,33],[191,36,226,34,"azimuthAngle"],[191,48,226,46],[191,49,226,47],[191,52,226,50,"tanAlt"],[191,58,226,56],[191,59,226,57],[192,4,227,2],[193,4,229,2],[193,10,229,8,"tiltX"],[193,15,229,13],[193,18,229,16,"Math"],[193,22,229,20],[193,23,229,21,"round"],[193,28,229,26],[193,29,229,27,"tiltXrad"],[193,37,229,35],[193,40,229,38,"radToDeg"],[193,48,229,46],[193,49,229,47],[194,4,230,2],[194,10,230,8,"tiltY"],[194,15,230,13],[194,18,230,16,"Math"],[194,22,230,20],[194,23,230,21,"round"],[194,28,230,26],[194,29,230,27,"tiltYrad"],[194,37,230,35],[194,40,230,38,"radToDeg"],[194,48,230,46],[194,49,230,47],[195,4,231,2],[195,11,231,9],[196,6,232,4,"tiltX"],[196,11,232,9],[197,6,233,4,"tiltY"],[198,4,234,2],[198,5,234,3],[199,2,235,0],[200,2,237,0],[200,8,237,6,"RNSVGElements"],[200,21,237,19],[200,24,237,22],[200,28,237,26,"Set"],[200,31,237,29],[200,32,237,30],[200,33,237,31],[200,41,237,39],[200,43,237,41],[200,53,237,51],[200,55,237,53],[200,64,237,62],[200,66,237,64],[200,81,237,79],[200,83,237,81],[200,86,237,84],[200,88,237,86],[200,95,237,93],[200,97,237,95],[200,103,237,101],[200,105,237,103],[200,113,237,111],[200,115,237,113],[200,121,237,119],[200,123,237,121],[200,129,237,127],[200,131,237,129],[200,140,237,138],[200,142,237,140],[200,151,237,149],[200,153,237,151],[200,163,237,161],[200,165,237,163],[200,171,237,169],[200,173,237,171],[200,178,237,176],[200,180,237,178],[200,188,237,186],[200,190,237,188],[200,197,237,195],[200,199,237,197],[200,205,237,203],[200,207,237,205],[200,217,237,215],[200,219,237,217],[200,224,237,222],[200,225,237,223],[200,226,237,224],[200,227,237,225],[200,228,237,226],[201,2,238,0],[202,2,239,0],[203,2,240,0],[204,2,241,0],[205,2,242,0],[206,2,243,0],[207,2,244,0],[208,2,245,0],[210,2,247,0,"exports"],[210,9,247,7],[210,10,247,8,"RNSVGElements"],[210,23,247,21],[210,26,247,24,"RNSVGElements"],[210,39,247,37],[211,2,249,0],[211,11,249,9,"isRNSVGElement"],[211,25,249,23,"isRNSVGElement"],[211,26,249,24,"viewRef"],[211,33,249,31],[211,35,249,33],[212,4,250,2],[212,10,250,8,"componentClassName"],[212,28,250,26],[212,31,250,29,"Object"],[212,37,250,35],[212,38,250,36,"getPrototypeOf"],[212,52,250,50],[212,53,250,51,"viewRef"],[212,60,250,58],[212,61,250,59],[212,62,250,60,"constructor"],[212,73,250,71],[212,74,250,72,"name"],[212,78,250,76],[213,4,251,2],[213,11,251,9,"RNSVGElements"],[213,24,251,22],[213,25,251,23,"has"],[213,28,251,26],[213,29,251,27,"componentClassName"],[213,47,251,45],[213,48,251,46],[213,52,251,50,"Object"],[213,58,251,56],[213,59,251,57,"hasOwn"],[213,65,251,63],[213,66,251,64,"viewRef"],[213,73,251,71],[213,75,251,73],[213,87,251,85],[213,88,251,86],[214,2,252,0],[214,3,252,1],[214,4,252,2],[215,2,253,0],[216,2,254,0],[217,2,255,0],[218,2,256,0],[220,2,259,0],[220,11,259,9,"isRNSVGNode"],[220,22,259,20,"isRNSVGNode"],[220,23,259,21,"node"],[220,27,259,25],[220,29,259,27],[221,4,260,2],[221,8,260,6,"_node$ref"],[221,17,260,15],[221,19,260,17,"_Object$getPrototypeO"],[221,40,260,38],[221,42,260,40,"_node$type"],[221,52,260,50],[223,4,262,2],[224,4,263,2],[225,4,264,2],[225,8,264,6],[225,9,264,7,"_node$ref"],[225,18,264,16],[225,21,264,19,"node"],[225,25,264,23],[225,26,264,24,"ref"],[225,29,264,27],[225,35,264,33],[225,39,264,37],[225,43,264,41,"_node$ref"],[225,52,264,50],[225,57,264,55],[225,62,264,60],[225,63,264,61],[225,67,264,65,"_node$ref"],[225,76,264,74],[225,77,264,75,"rngh"],[225,81,264,79],[225,83,264,81],[226,6,265,4],[226,13,265,11],[226,18,265,16],[227,4,266,2],[228,4,268,2],[228,11,268,9],[228,12,268,10],[228,13,268,11,"_Object$getPrototypeO"],[228,34,268,32],[228,37,268,35,"Object"],[228,43,268,41],[228,44,268,42,"getPrototypeOf"],[228,58,268,56],[228,59,268,57,"node"],[228,63,268,61],[228,68,268,66],[228,72,268,70],[228,76,268,74,"node"],[228,80,268,78],[228,85,268,83],[228,90,268,88],[228,91,268,89],[228,94,268,92],[228,99,268,97],[228,100,268,98],[228,103,268,101,"node"],[228,107,268,105],[228,108,268,106,"type"],[228,112,268,110],[228,113,268,111],[228,119,268,117],[228,123,268,121],[228,127,268,125,"_Object$getPrototypeO"],[228,148,268,146],[228,153,268,151],[228,158,268,156],[228,159,268,157],[228,162,268,160],[228,167,268,165],[228,168,268,166],[228,171,268,169,"_Object$getPrototypeO"],[228,192,268,190],[228,193,268,191,"name"],[228,197,268,195],[228,203,268,201],[228,213,268,211],[228,217,268,215,"RNSVGElements"],[228,230,268,228],[228,231,268,229,"has"],[228,234,268,232],[228,235,268,233,"node"],[228,239,268,237],[228,244,268,242],[228,248,268,246],[228,252,268,250,"node"],[228,256,268,254],[228,261,268,259],[228,266,268,264],[228,267,268,265],[228,270,268,268],[228,275,268,273],[228,276,268,274],[228,279,268,277],[228,280,268,278,"_node$type"],[228,290,268,288],[228,293,268,291,"node"],[228,297,268,295],[228,298,268,296,"type"],[228,302,268,300],[228,308,268,306],[228,312,268,310],[228,316,268,314,"_node$type"],[228,326,268,324],[228,331,268,329],[228,336,268,334],[228,337,268,335],[228,340,268,338],[228,345,268,343],[228,346,268,344],[228,349,268,347,"_node$type"],[228,359,268,357],[228,360,268,358,"displayName"],[228,371,268,369],[228,372,268,370],[229,2,269,0],[230,0,269,1],[230,3]],"functionMap":{"names":["<global>","isPointerInBounds","degToRad","coneToDeviation","calculateViewScale","tryExtractStylusData","tilt2spherical","spherical2tilt","isRNSVGElement","isRNSVGNode"],"mappings":"AAA;ACc;CDM;iBEK,kCF;wBGI,0CH;AII;CJ6B;AKE;CLmD;AMM;CNgD;AOK;CP4D;AQc;CRG;ASO;CTU"},"hasCjsExports":true},"type":"js/module"}]}