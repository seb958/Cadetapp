{"dependencies":[{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":57,"index":57}}],"key":"Q8MtNj8/mrt1iN8Kay94o881ERE=","exportNames":["*"],"imports":1}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":58},"end":{"line":2,"column":69,"index":127}}],"key":"2BYIjnTRSFId8SRJ7sJFxLD1BD4=","exportNames":["*"],"imports":1}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":128},"end":{"line":3,"column":68,"index":196}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s=","exportNames":["*"],"imports":1}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":197},"end":{"line":4,"column":61,"index":258}}],"key":"6QYiO8x9sAoDBctSRJ19A8sqUNk=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":259},"end":{"line":5,"column":99,"index":358}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.updateHandlers = updateHandlers;\n  var _handlersRegistry = require(_dependencyMap[0], \"../../handlersRegistry\");\n  var _RNGestureHandlerModule = require(_dependencyMap[1], \"../../../RNGestureHandlerModule\");\n  var RNGestureHandlerModule = _interopDefault(_RNGestureHandlerModule);\n  var _utils = require(_dependencyMap[2], \"../../utils\");\n  var _ghQueueMicrotask = require(_dependencyMap[3], \"../../../ghQueueMicrotask\");\n  var _utils2 = require(_dependencyMap[4], \"./utils\");\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (let i = 0; i < newGestures.length; i++) {\n      const handler = preparedGesture.attachedGestures[i];\n      (0, _utils2.checkGestureCallbacksForWorklets)(handler); // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    } // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n\n    (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n      if (!preparedGesture.isMounted) {\n        return;\n      } // If amount of gesture configs changes, we need to update the callbacks in shared value\n\n      let shouldUpdateSharedValueIfUsed = preparedGesture.attachedGestures.length !== newGestures.length;\n      for (let i = 0; i < newGestures.length; i++) {\n        const handler = preparedGesture.attachedGestures[i]; // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n\n        if (handler.handlers.gestureId !== newGestures[i].handlers.gestureId && (newGestures[i].shouldUseReanimated || handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        handler.config = newGestures[i].config;\n        handler.handlers = newGestures[i].handlers;\n        RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(handler)));\n        (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        const newHandlersValue = preparedGesture.attachedGestures.filter(g => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map(g => g.handlers);\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _utils.scheduleFlushOperations)();\n    });\n  }\n});","lineCount":60,"map":[[12,2,6,0,"exports"],[12,9,6,0],[12,10,6,0,"updateHandlers"],[12,24,6,0],[12,27,6,0,"updateHandlers"],[12,41,6,0],[13,2,1,0],[13,6,1,0,"_handlersRegistry"],[13,23,1,0],[13,26,1,0,"require"],[13,33,1,0],[13,34,1,0,"_dependencyMap"],[13,48,1,0],[14,2,2,0],[14,6,2,0,"_RNGestureHandlerModule"],[14,29,2,0],[14,32,2,0,"require"],[14,39,2,0],[14,40,2,0,"_dependencyMap"],[14,54,2,0],[15,2,2,0],[15,6,2,0,"RNGestureHandlerModule"],[15,28,2,0],[15,31,2,0,"_interopDefault"],[15,46,2,0],[15,47,2,0,"_RNGestureHandlerModule"],[15,70,2,0],[16,2,3,0],[16,6,3,0,"_utils"],[16,12,3,0],[16,15,3,0,"require"],[16,22,3,0],[16,23,3,0,"_dependencyMap"],[16,37,3,0],[17,2,4,0],[17,6,4,0,"_ghQueueMicrotask"],[17,23,4,0],[17,26,4,0,"require"],[17,33,4,0],[17,34,4,0,"_dependencyMap"],[17,48,4,0],[18,2,5,0],[18,6,5,0,"_utils2"],[18,13,5,0],[18,16,5,0,"require"],[18,23,5,0],[18,24,5,0,"_dependencyMap"],[18,38,5,0],[19,2,6,7],[19,11,6,16,"updateHandlers"],[19,25,6,30,"updateHandlers"],[19,26,6,31,"preparedGesture"],[19,41,6,46],[19,43,6,48,"gestureConfig"],[19,56,6,61],[19,58,6,63,"newGestures"],[19,69,6,74],[19,71,6,76],[20,4,7,2,"gestureConfig"],[20,17,7,15],[20,18,7,16,"prepare"],[20,25,7,23],[20,26,7,24],[20,27,7,25],[21,4,9,2],[21,9,9,7],[21,13,9,11,"i"],[21,14,9,12],[21,17,9,15],[21,18,9,16],[21,20,9,18,"i"],[21,21,9,19],[21,24,9,22,"newGestures"],[21,35,9,33],[21,36,9,34,"length"],[21,42,9,40],[21,44,9,42,"i"],[21,45,9,43],[21,47,9,45],[21,49,9,47],[22,6,10,4],[22,12,10,10,"handler"],[22,19,10,17],[22,22,10,20,"preparedGesture"],[22,37,10,35],[22,38,10,36,"attachedGestures"],[22,54,10,52],[22,55,10,53,"i"],[22,56,10,54],[22,57,10,55],[23,6,11,4],[23,10,11,4,"checkGestureCallbacksForWorklets"],[23,17,11,36],[23,18,11,36,"checkGestureCallbacksForWorklets"],[23,50,11,36],[23,52,11,37,"handler"],[23,59,11,44],[23,60,11,45],[23,61,11,46],[23,62,11,47],[24,6,12,4],[26,6,14,4],[26,10,14,8,"newGestures"],[26,21,14,19],[26,22,14,20,"i"],[26,23,14,21],[26,24,14,22],[26,25,14,23,"handlerTag"],[26,35,14,33],[26,40,14,38,"handler"],[26,47,14,45],[26,48,14,46,"handlerTag"],[26,58,14,56],[26,60,14,58],[27,8,15,6,"newGestures"],[27,19,15,17],[27,20,15,18,"i"],[27,21,15,19],[27,22,15,20],[27,23,15,21,"handlerTag"],[27,33,15,31],[27,36,15,34,"handler"],[27,43,15,41],[27,44,15,42,"handlerTag"],[27,54,15,52],[28,8,16,6,"newGestures"],[28,19,16,17],[28,20,16,18,"i"],[28,21,16,19],[28,22,16,20],[28,23,16,21,"handlers"],[28,31,16,29],[28,32,16,30,"handlerTag"],[28,42,16,40],[28,45,16,43,"handler"],[28,52,16,50],[28,53,16,51,"handlerTag"],[28,63,16,61],[29,6,17,4],[30,4,18,2],[30,5,18,3],[30,6,18,4],[31,4,19,2],[32,4,20,2],[34,4,23,2],[34,8,23,2,"ghQueueMicrotask"],[34,25,23,18],[34,26,23,18,"ghQueueMicrotask"],[34,42,23,18],[34,44,23,19],[34,50,23,25],[35,6,24,4],[35,10,24,8],[35,11,24,9,"preparedGesture"],[35,26,24,24],[35,27,24,25,"isMounted"],[35,36,24,34],[35,38,24,36],[36,8,25,6],[37,6,26,4],[37,7,26,5],[37,8,26,6],[39,6,29,4],[39,10,29,8,"shouldUpdateSharedValueIfUsed"],[39,39,29,37],[39,42,29,40,"preparedGesture"],[39,57,29,55],[39,58,29,56,"attachedGestures"],[39,74,29,72],[39,75,29,73,"length"],[39,81,29,79],[39,86,29,84,"newGestures"],[39,97,29,95],[39,98,29,96,"length"],[39,104,29,102],[40,6,31,4],[40,11,31,9],[40,15,31,13,"i"],[40,16,31,14],[40,19,31,17],[40,20,31,18],[40,22,31,20,"i"],[40,23,31,21],[40,26,31,24,"newGestures"],[40,37,31,35],[40,38,31,36,"length"],[40,44,31,42],[40,46,31,44,"i"],[40,47,31,45],[40,49,31,47],[40,51,31,49],[41,8,32,6],[41,14,32,12,"handler"],[41,21,32,19],[41,24,32,22,"preparedGesture"],[41,39,32,37],[41,40,32,38,"attachedGestures"],[41,56,32,54],[41,57,32,55,"i"],[41,58,32,56],[41,59,32,57],[41,60,32,58],[41,61,32,59],[42,8,33,6],[44,8,35,6],[44,12,35,10,"handler"],[44,19,35,17],[44,20,35,18,"handlers"],[44,28,35,26],[44,29,35,27,"gestureId"],[44,38,35,36],[44,43,35,41,"newGestures"],[44,54,35,52],[44,55,35,53,"i"],[44,56,35,54],[44,57,35,55],[44,58,35,56,"handlers"],[44,66,35,64],[44,67,35,65,"gestureId"],[44,76,35,74],[44,81,35,79,"newGestures"],[44,92,35,90],[44,93,35,91,"i"],[44,94,35,92],[44,95,35,93],[44,96,35,94,"shouldUseReanimated"],[44,115,35,113],[44,119,35,117,"handler"],[44,126,35,124],[44,127,35,125,"shouldUseReanimated"],[44,146,35,144],[44,147,35,145],[44,149,35,147],[45,10,36,8,"shouldUpdateSharedValueIfUsed"],[45,39,36,37],[45,42,36,40],[45,46,36,44],[46,8,37,6],[47,8,39,6,"handler"],[47,15,39,13],[47,16,39,14,"config"],[47,22,39,20],[47,25,39,23,"newGestures"],[47,36,39,34],[47,37,39,35,"i"],[47,38,39,36],[47,39,39,37],[47,40,39,38,"config"],[47,46,39,44],[48,8,40,6,"handler"],[48,15,40,13],[48,16,40,14,"handlers"],[48,24,40,22],[48,27,40,25,"newGestures"],[48,38,40,36],[48,39,40,37,"i"],[48,40,40,38],[48,41,40,39],[48,42,40,40,"handlers"],[48,50,40,48],[49,8,41,6,"RNGestureHandlerModule"],[49,30,41,28],[49,31,41,28,"default"],[49,38,41,28],[49,39,41,29,"updateGestureHandler"],[49,59,41,49],[49,60,41,50,"handler"],[49,67,41,57],[49,68,41,58,"handlerTag"],[49,78,41,68],[49,80,41,70],[49,84,41,70,"filterConfig"],[49,90,41,82],[49,91,41,82,"filterConfig"],[49,103,41,82],[49,105,41,83,"handler"],[49,112,41,90],[49,113,41,91,"config"],[49,119,41,97],[49,121,41,99,"ALLOWED_PROPS"],[49,128,41,112],[49,129,41,112,"ALLOWED_PROPS"],[49,142,41,112],[49,144,41,114],[49,148,41,114,"extractGestureRelations"],[49,155,41,137],[49,156,41,137,"extractGestureRelations"],[49,179,41,137],[49,181,41,138,"handler"],[49,188,41,145],[49,189,41,146],[49,190,41,147],[49,191,41,148],[50,8,42,6],[50,12,42,6,"registerHandler"],[50,29,42,21],[50,30,42,21,"registerHandler"],[50,45,42,21],[50,47,42,22,"handler"],[50,54,42,29],[50,55,42,30,"handlerTag"],[50,65,42,40],[50,67,42,42,"handler"],[50,74,42,49],[50,76,42,51,"handler"],[50,83,42,58],[50,84,42,59,"config"],[50,90,42,65],[50,91,42,66,"testId"],[50,97,42,72],[50,98,42,73],[51,6,43,4],[52,6,45,4],[52,10,45,8,"preparedGesture"],[52,25,45,23],[52,26,45,24,"animatedHandlers"],[52,42,45,40],[52,46,45,44,"shouldUpdateSharedValueIfUsed"],[52,75,45,73],[52,77,45,75],[53,8,46,6],[53,14,46,12,"newHandlersValue"],[53,30,46,28],[53,33,46,31,"preparedGesture"],[53,48,46,46],[53,49,46,47,"attachedGestures"],[53,65,46,63],[53,66,46,64,"filter"],[53,72,46,70],[53,73,46,71,"g"],[53,74,46,72],[53,78,46,76,"g"],[53,79,46,77],[53,80,46,78,"shouldUseReanimated"],[53,99,46,97],[53,100,46,98],[53,101,46,99],[54,8,46,99],[54,9,47,7,"map"],[54,12,47,10],[54,13,47,11,"g"],[54,14,47,12],[54,18,47,16,"g"],[54,19,47,17],[54,20,47,18,"handlers"],[54,28,47,26],[54,29,47,27],[55,8,48,6,"preparedGesture"],[55,23,48,21],[55,24,48,22,"animatedHandlers"],[55,40,48,38],[55,41,48,39,"value"],[55,46,48,44],[55,49,48,47,"newHandlersValue"],[55,65,48,63],[56,6,49,4],[57,6,51,4],[57,10,51,4,"scheduleFlushOperations"],[57,16,51,27],[57,17,51,27,"scheduleFlushOperations"],[57,40,51,27],[57,42,51,28],[57,43,51,29],[58,4,52,2],[58,5,52,3],[58,6,52,4],[59,2,53,0],[60,0,53,1],[60,3]],"functionMap":{"names":["<global>","updateHandlers","ghQueueMicrotask$argument_0","preparedGesture.attachedGestures.filter$argument_0","preparedGesture.attachedGestures.filter.map$argument_0"],"mappings":"AAA;OCK;mBCiB;uECuB,0BD;WEC,eF;GDK;CDC"},"hasCjsExports":false},"type":"js/module"}]}