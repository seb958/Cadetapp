{"dependencies":[{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":57,"index":72}}],"key":"Q8MtNj8/mrt1iN8Kay94o881ERE=","exportNames":["*"],"imports":1}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":73},"end":{"line":4,"column":69,"index":142}}],"key":"2BYIjnTRSFId8SRJ7sJFxLD1BD4=","exportNames":["*"],"imports":1}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":143},"end":{"line":5,"column":68,"index":211}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s=","exportNames":["*"],"imports":1}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":212},"end":{"line":6,"column":61,"index":273}}],"key":"6QYiO8x9sAoDBctSRJ19A8sqUNk=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":274},"end":{"line":7,"column":99,"index":373}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.updateHandlers = updateHandlers;\n  var _handlersRegistry = require(_dependencyMap[0], \"../../handlersRegistry\");\n  var _RNGestureHandlerModule = require(_dependencyMap[1], \"../../../RNGestureHandlerModule\");\n  var RNGestureHandlerModule = _interopDefault(_RNGestureHandlerModule);\n  var _utils = require(_dependencyMap[2], \"../../utils\");\n  var _ghQueueMicrotask = require(_dependencyMap[3], \"../../../ghQueueMicrotask\");\n  var _utils2 = require(_dependencyMap[4], \"./utils\");\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (let i = 0; i < newGestures.length; i++) {\n      const handler = preparedGesture.attachedGestures[i];\n      (0, _utils2.checkGestureCallbacksForWorklets)(handler);\n\n      // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    }\n\n    // Store attached gestures to avoid crash when gestures changed after queueing micro task\n    const attachedGestures = preparedGesture.attachedGestures;\n\n    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n      if (!preparedGesture.isMounted) {\n        return;\n      }\n\n      // Stop if attached gestures changed after queueing micro task\n      if (attachedGestures !== preparedGesture.attachedGestures) {\n        return;\n      }\n\n      // If amount of gesture configs changes, we need to update the callbacks in shared value\n      let shouldUpdateSharedValueIfUsed = attachedGestures.length !== newGestures.length;\n      for (let i = 0; i < newGestures.length; i++) {\n        const handler = attachedGestures[i];\n\n        // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n        if (handler.handlers.gestureId !== newGestures[i].handlers.gestureId && (newGestures[i].shouldUseReanimated || handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        handler.config = newGestures[i].config;\n        handler.handlers = newGestures[i].handlers;\n        RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(handler)));\n        (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        const newHandlersValue = attachedGestures.filter(g => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map(g => g.handlers);\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _utils.scheduleFlushOperations)();\n    });\n  }\n});","lineCount":72,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,8,0,"exports"],[12,9,8,0],[12,10,8,0,"updateHandlers"],[12,24,8,0],[12,27,8,0,"updateHandlers"],[12,41,8,0],[13,2,3,0],[13,6,3,0,"_handlersRegistry"],[13,23,3,0],[13,26,3,0,"require"],[13,33,3,0],[13,34,3,0,"_dependencyMap"],[13,48,3,0],[14,2,4,0],[14,6,4,0,"_RNGestureHandlerModule"],[14,29,4,0],[14,32,4,0,"require"],[14,39,4,0],[14,40,4,0,"_dependencyMap"],[14,54,4,0],[15,2,4,0],[15,6,4,0,"RNGestureHandlerModule"],[15,28,4,0],[15,31,4,0,"_interopDefault"],[15,46,4,0],[15,47,4,0,"_RNGestureHandlerModule"],[15,70,4,0],[16,2,5,0],[16,6,5,0,"_utils"],[16,12,5,0],[16,15,5,0,"require"],[16,22,5,0],[16,23,5,0,"_dependencyMap"],[16,37,5,0],[17,2,6,0],[17,6,6,0,"_ghQueueMicrotask"],[17,23,6,0],[17,26,6,0,"require"],[17,33,6,0],[17,34,6,0,"_dependencyMap"],[17,48,6,0],[18,2,7,0],[18,6,7,0,"_utils2"],[18,13,7,0],[18,16,7,0,"require"],[18,23,7,0],[18,24,7,0,"_dependencyMap"],[18,38,7,0],[19,2,8,7],[19,11,8,16,"updateHandlers"],[19,25,8,30,"updateHandlers"],[19,26,8,31,"preparedGesture"],[19,41,8,46],[19,43,8,48,"gestureConfig"],[19,56,8,61],[19,58,8,63,"newGestures"],[19,69,8,74],[19,71,8,76],[20,4,9,2,"gestureConfig"],[20,17,9,15],[20,18,9,16,"prepare"],[20,25,9,23],[20,26,9,24],[20,27,9,25],[21,4,10,2],[21,9,10,7],[21,13,10,11,"i"],[21,14,10,12],[21,17,10,15],[21,18,10,16],[21,20,10,18,"i"],[21,21,10,19],[21,24,10,22,"newGestures"],[21,35,10,33],[21,36,10,34,"length"],[21,42,10,40],[21,44,10,42,"i"],[21,45,10,43],[21,47,10,45],[21,49,10,47],[22,6,11,4],[22,12,11,10,"handler"],[22,19,11,17],[22,22,11,20,"preparedGesture"],[22,37,11,35],[22,38,11,36,"attachedGestures"],[22,54,11,52],[22,55,11,53,"i"],[22,56,11,54],[22,57,11,55],[23,6,12,4],[23,10,12,4,"checkGestureCallbacksForWorklets"],[23,17,12,36],[23,18,12,36,"checkGestureCallbacksForWorklets"],[23,50,12,36],[23,52,12,37,"handler"],[23,59,12,44],[23,60,12,45],[25,6,14,4],[26,6,15,4],[27,6,16,4],[27,10,16,8,"newGestures"],[27,21,16,19],[27,22,16,20,"i"],[27,23,16,21],[27,24,16,22],[27,25,16,23,"handlerTag"],[27,35,16,33],[27,40,16,38,"handler"],[27,47,16,45],[27,48,16,46,"handlerTag"],[27,58,16,56],[27,60,16,58],[28,8,17,6,"newGestures"],[28,19,17,17],[28,20,17,18,"i"],[28,21,17,19],[28,22,17,20],[28,23,17,21,"handlerTag"],[28,33,17,31],[28,36,17,34,"handler"],[28,43,17,41],[28,44,17,42,"handlerTag"],[28,54,17,52],[29,8,18,6,"newGestures"],[29,19,18,17],[29,20,18,18,"i"],[29,21,18,19],[29,22,18,20],[29,23,18,21,"handlers"],[29,31,18,29],[29,32,18,30,"handlerTag"],[29,42,18,40],[29,45,18,43,"handler"],[29,52,18,50],[29,53,18,51,"handlerTag"],[29,63,18,61],[30,6,19,4],[31,4,20,2],[33,4,22,2],[34,4,23,2],[34,10,23,8,"attachedGestures"],[34,26,23,24],[34,29,23,27,"preparedGesture"],[34,44,23,42],[34,45,23,43,"attachedGestures"],[34,61,23,59],[36,4,25,2],[37,4,26,2],[38,4,27,2],[39,4,28,2],[39,8,28,2,"ghQueueMicrotask"],[39,25,28,18],[39,26,28,18,"ghQueueMicrotask"],[39,42,28,18],[39,44,28,19],[39,50,28,25],[40,6,29,4],[40,10,29,8],[40,11,29,9,"preparedGesture"],[40,26,29,24],[40,27,29,25,"isMounted"],[40,36,29,34],[40,38,29,36],[41,8,30,6],[42,6,31,4],[44,6,33,4],[45,6,34,4],[45,10,34,8,"attachedGestures"],[45,26,34,24],[45,31,34,29,"preparedGesture"],[45,46,34,44],[45,47,34,45,"attachedGestures"],[45,63,34,61],[45,65,34,63],[46,8,35,6],[47,6,36,4],[49,6,38,4],[50,6,39,4],[50,10,39,8,"shouldUpdateSharedValueIfUsed"],[50,39,39,37],[50,42,39,40,"attachedGestures"],[50,58,39,56],[50,59,39,57,"length"],[50,65,39,63],[50,70,39,68,"newGestures"],[50,81,39,79],[50,82,39,80,"length"],[50,88,39,86],[51,6,40,4],[51,11,40,9],[51,15,40,13,"i"],[51,16,40,14],[51,19,40,17],[51,20,40,18],[51,22,40,20,"i"],[51,23,40,21],[51,26,40,24,"newGestures"],[51,37,40,35],[51,38,40,36,"length"],[51,44,40,42],[51,46,40,44,"i"],[51,47,40,45],[51,49,40,47],[51,51,40,49],[52,8,41,6],[52,14,41,12,"handler"],[52,21,41,19],[52,24,41,22,"attachedGestures"],[52,40,41,38],[52,41,41,39,"i"],[52,42,41,40],[52,43,41,41],[54,8,43,6],[55,8,44,6],[56,8,45,6],[56,12,45,10,"handler"],[56,19,45,17],[56,20,45,18,"handlers"],[56,28,45,26],[56,29,45,27,"gestureId"],[56,38,45,36],[56,43,45,41,"newGestures"],[56,54,45,52],[56,55,45,53,"i"],[56,56,45,54],[56,57,45,55],[56,58,45,56,"handlers"],[56,66,45,64],[56,67,45,65,"gestureId"],[56,76,45,74],[56,81,45,79,"newGestures"],[56,92,45,90],[56,93,45,91,"i"],[56,94,45,92],[56,95,45,93],[56,96,45,94,"shouldUseReanimated"],[56,115,45,113],[56,119,45,117,"handler"],[56,126,45,124],[56,127,45,125,"shouldUseReanimated"],[56,146,45,144],[56,147,45,145],[56,149,45,147],[57,10,46,8,"shouldUpdateSharedValueIfUsed"],[57,39,46,37],[57,42,46,40],[57,46,46,44],[58,8,47,6],[59,8,48,6,"handler"],[59,15,48,13],[59,16,48,14,"config"],[59,22,48,20],[59,25,48,23,"newGestures"],[59,36,48,34],[59,37,48,35,"i"],[59,38,48,36],[59,39,48,37],[59,40,48,38,"config"],[59,46,48,44],[60,8,49,6,"handler"],[60,15,49,13],[60,16,49,14,"handlers"],[60,24,49,22],[60,27,49,25,"newGestures"],[60,38,49,36],[60,39,49,37,"i"],[60,40,49,38],[60,41,49,39],[60,42,49,40,"handlers"],[60,50,49,48],[61,8,50,6,"RNGestureHandlerModule"],[61,30,50,28],[61,31,50,28,"default"],[61,38,50,28],[61,39,50,29,"updateGestureHandler"],[61,59,50,49],[61,60,50,50,"handler"],[61,67,50,57],[61,68,50,58,"handlerTag"],[61,78,50,68],[61,80,50,70],[61,84,50,70,"filterConfig"],[61,90,50,82],[61,91,50,82,"filterConfig"],[61,103,50,82],[61,105,50,83,"handler"],[61,112,50,90],[61,113,50,91,"config"],[61,119,50,97],[61,121,50,99,"ALLOWED_PROPS"],[61,128,50,112],[61,129,50,112,"ALLOWED_PROPS"],[61,142,50,112],[61,144,50,114],[61,148,50,114,"extractGestureRelations"],[61,155,50,137],[61,156,50,137,"extractGestureRelations"],[61,179,50,137],[61,181,50,138,"handler"],[61,188,50,145],[61,189,50,146],[61,190,50,147],[61,191,50,148],[62,8,51,6],[62,12,51,6,"registerHandler"],[62,29,51,21],[62,30,51,21,"registerHandler"],[62,45,51,21],[62,47,51,22,"handler"],[62,54,51,29],[62,55,51,30,"handlerTag"],[62,65,51,40],[62,67,51,42,"handler"],[62,74,51,49],[62,76,51,51,"handler"],[62,83,51,58],[62,84,51,59,"config"],[62,90,51,65],[62,91,51,66,"testId"],[62,97,51,72],[62,98,51,73],[63,6,52,4],[64,6,53,4],[64,10,53,8,"preparedGesture"],[64,25,53,23],[64,26,53,24,"animatedHandlers"],[64,42,53,40],[64,46,53,44,"shouldUpdateSharedValueIfUsed"],[64,75,53,73],[64,77,53,75],[65,8,54,6],[65,14,54,12,"newHandlersValue"],[65,30,54,28],[65,33,54,31,"attachedGestures"],[65,49,54,47],[65,50,54,48,"filter"],[65,56,54,54],[65,57,54,55,"g"],[65,58,54,56],[65,62,54,60,"g"],[65,63,54,61],[65,64,54,62,"shouldUseReanimated"],[65,83,54,81],[65,84,54,82],[65,85,54,83],[66,8,54,83],[66,9,55,7,"map"],[66,12,55,10],[66,13,55,11,"g"],[66,14,55,12],[66,18,55,16,"g"],[66,19,55,17],[66,20,55,18,"handlers"],[66,28,55,26],[66,29,55,27],[67,8,56,6,"preparedGesture"],[67,23,56,21],[67,24,56,22,"animatedHandlers"],[67,40,56,38],[67,41,56,39,"value"],[67,46,56,44],[67,49,56,47,"newHandlersValue"],[67,65,56,63],[68,6,57,4],[69,6,58,4],[69,10,58,4,"scheduleFlushOperations"],[69,16,58,27],[69,17,58,27,"scheduleFlushOperations"],[69,40,58,27],[69,42,58,28],[69,43,58,29],[70,4,59,2],[70,5,59,3],[70,6,59,4],[71,2,60,0],[72,0,60,1],[72,3]],"functionMap":{"names":["<global>","updateHandlers","ghQueueMicrotask$argument_0","attachedGestures.filter$argument_0","attachedGestures.filter.map$argument_0"],"mappings":"AAA;OCO;mBCoB;uDC0B,0BD;WEC,eF;GDI;CDC"},"hasCjsExports":false},"type":"js/module"}]}