{"dependencies":[{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":24,"index":145},"end":{"line":7,"column":57,"index":178}}],"key":"ZaQ44tMlNi0uwwL9WSHpSUsXoLw=","exportNames":["*"],"imports":1}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":53,"index":233},"end":{"line":8,"column":95,"index":275}}],"key":"RCDdIknCoffiRx5ELXjRDwUd78Y=","exportNames":["*"],"imports":1}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":13,"index":291},"end":{"line":9,"column":35,"index":313}}],"key":"/gxgMVIBQIOS9WgzAWnJsYriGvM=","exportNames":["*"],"imports":1}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":24,"index":339},"end":{"line":10,"column":60,"index":375}}],"key":"bloXnJQHwqvTb0wIEM895i4Wj90=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":14,"index":391},"end":{"line":11,"column":32,"index":409}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.updateHandlers = updateHandlers;\n  var _handlersRegistry = require(_dependencyMap[0], \"../../handlersRegistry\");\n  var _RNGestureHandlerModule = _interopRequireDefault(require(_dependencyMap[1], \"../../../RNGestureHandlerModule\"));\n  var _utils = require(_dependencyMap[2], \"../../utils\");\n  var _ghQueueMicrotask = require(_dependencyMap[3], \"../../../ghQueueMicrotask\");\n  var _utils2 = require(_dependencyMap[4], \"./utils\");\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (let i = 0; i < newGestures.length; i++) {\n      const handler = preparedGesture.attachedGestures[i];\n      (0, _utils2.checkGestureCallbacksForWorklets)(handler);\n\n      // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    }\n\n    // Store attached gestures to avoid crash when gestures changed after queueing micro task\n    const attachedGestures = preparedGesture.attachedGestures;\n\n    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n      if (!preparedGesture.isMounted) {\n        return;\n      }\n\n      // Stop if attached gestures changed after queueing micro task\n      if (attachedGestures !== preparedGesture.attachedGestures) {\n        return;\n      }\n\n      // If amount of gesture configs changes, we need to update the callbacks in shared value\n      let shouldUpdateSharedValueIfUsed = attachedGestures.length !== newGestures.length;\n      for (let i = 0; i < newGestures.length; i++) {\n        const handler = attachedGestures[i];\n\n        // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n        if (handler.handlers.gestureId !== newGestures[i].handlers.gestureId && (newGestures[i].shouldUseReanimated || handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        handler.config = newGestures[i].config;\n        handler.handlers = newGestures[i].handlers;\n        _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(handler)));\n        (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        const newHandlersValue = attachedGestures.filter(g => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map(g => g.handlers);\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _utils.scheduleFlushOperations)();\n    });\n  }\n});","lineCount":71,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"updateHandlers"],[7,24,6,22],[7,27,6,25,"updateHandlers"],[7,41,6,39],[8,2,7,0],[8,6,7,4,"_handlersRegistry"],[8,23,7,21],[8,26,7,24,"require"],[8,33,7,31],[8,34,7,31,"_dependencyMap"],[8,48,7,31],[8,77,7,56],[8,78,7,57],[9,2,8,0],[9,6,8,4,"_RNGestureHandlerModule"],[9,29,8,27],[9,32,8,30,"_interopRequireDefault"],[9,54,8,52],[9,55,8,53,"require"],[9,62,8,60],[9,63,8,60,"_dependencyMap"],[9,77,8,60],[9,115,8,94],[9,116,8,95],[9,117,8,96],[10,2,9,0],[10,6,9,4,"_utils"],[10,12,9,10],[10,15,9,13,"require"],[10,22,9,20],[10,23,9,20,"_dependencyMap"],[10,37,9,20],[10,55,9,34],[10,56,9,35],[11,2,10,0],[11,6,10,4,"_ghQueueMicrotask"],[11,23,10,21],[11,26,10,24,"require"],[11,33,10,31],[11,34,10,31,"_dependencyMap"],[11,48,10,31],[11,80,10,59],[11,81,10,60],[12,2,11,0],[12,6,11,4,"_utils2"],[12,13,11,11],[12,16,11,14,"require"],[12,23,11,21],[12,24,11,21,"_dependencyMap"],[12,38,11,21],[12,52,11,31],[12,53,11,32],[13,2,12,0],[13,11,12,9,"_interopRequireDefault"],[13,33,12,31,"_interopRequireDefault"],[13,34,12,32,"e"],[13,35,12,33],[13,37,12,35],[14,4,12,37],[14,11,12,44,"e"],[14,12,12,45],[14,16,12,49,"e"],[14,17,12,50],[14,18,12,51,"__esModule"],[14,28,12,61],[14,31,12,64,"e"],[14,32,12,65],[14,35,12,68],[15,6,12,70,"default"],[15,13,12,77],[15,15,12,79,"e"],[16,4,12,81],[16,5,12,82],[17,2,12,84],[18,2,13,0],[18,11,13,9,"updateHandlers"],[18,25,13,23,"updateHandlers"],[18,26,13,24,"preparedGesture"],[18,41,13,39],[18,43,13,41,"gestureConfig"],[18,56,13,54],[18,58,13,56,"newGestures"],[18,69,13,67],[18,71,13,69],[19,4,14,2,"gestureConfig"],[19,17,14,15],[19,18,14,16,"prepare"],[19,25,14,23],[19,26,14,24],[19,27,14,25],[20,4,15,2],[20,9,15,7],[20,13,15,11,"i"],[20,14,15,12],[20,17,15,15],[20,18,15,16],[20,20,15,18,"i"],[20,21,15,19],[20,24,15,22,"newGestures"],[20,35,15,33],[20,36,15,34,"length"],[20,42,15,40],[20,44,15,42,"i"],[20,45,15,43],[20,47,15,45],[20,49,15,47],[21,6,16,4],[21,12,16,10,"handler"],[21,19,16,17],[21,22,16,20,"preparedGesture"],[21,37,16,35],[21,38,16,36,"attachedGestures"],[21,54,16,52],[21,55,16,53,"i"],[21,56,16,54],[21,57,16,55],[22,6,17,4],[22,7,17,5],[22,8,17,6],[22,10,17,8,"_utils2"],[22,17,17,15],[22,18,17,16,"checkGestureCallbacksForWorklets"],[22,50,17,48],[22,52,17,50,"handler"],[22,59,17,57],[22,60,17,58],[24,6,19,4],[25,6,20,4],[26,6,21,4],[26,10,21,8,"newGestures"],[26,21,21,19],[26,22,21,20,"i"],[26,23,21,21],[26,24,21,22],[26,25,21,23,"handlerTag"],[26,35,21,33],[26,40,21,38,"handler"],[26,47,21,45],[26,48,21,46,"handlerTag"],[26,58,21,56],[26,60,21,58],[27,8,22,6,"newGestures"],[27,19,22,17],[27,20,22,18,"i"],[27,21,22,19],[27,22,22,20],[27,23,22,21,"handlerTag"],[27,33,22,31],[27,36,22,34,"handler"],[27,43,22,41],[27,44,22,42,"handlerTag"],[27,54,22,52],[28,8,23,6,"newGestures"],[28,19,23,17],[28,20,23,18,"i"],[28,21,23,19],[28,22,23,20],[28,23,23,21,"handlers"],[28,31,23,29],[28,32,23,30,"handlerTag"],[28,42,23,40],[28,45,23,43,"handler"],[28,52,23,50],[28,53,23,51,"handlerTag"],[28,63,23,61],[29,6,24,4],[30,4,25,2],[32,4,27,2],[33,4,28,2],[33,10,28,8,"attachedGestures"],[33,26,28,24],[33,29,28,27,"preparedGesture"],[33,44,28,42],[33,45,28,43,"attachedGestures"],[33,61,28,59],[35,4,30,2],[36,4,31,2],[37,4,32,2],[38,4,33,2],[38,5,33,3],[38,6,33,4],[38,8,33,6,"_ghQueueMicrotask"],[38,25,33,23],[38,26,33,24,"ghQueueMicrotask"],[38,42,33,40],[38,44,33,42],[38,50,33,48],[39,6,34,4],[39,10,34,8],[39,11,34,9,"preparedGesture"],[39,26,34,24],[39,27,34,25,"isMounted"],[39,36,34,34],[39,38,34,36],[40,8,35,6],[41,6,36,4],[43,6,38,4],[44,6,39,4],[44,10,39,8,"attachedGestures"],[44,26,39,24],[44,31,39,29,"preparedGesture"],[44,46,39,44],[44,47,39,45,"attachedGestures"],[44,63,39,61],[44,65,39,63],[45,8,40,6],[46,6,41,4],[48,6,43,4],[49,6,44,4],[49,10,44,8,"shouldUpdateSharedValueIfUsed"],[49,39,44,37],[49,42,44,40,"attachedGestures"],[49,58,44,56],[49,59,44,57,"length"],[49,65,44,63],[49,70,44,68,"newGestures"],[49,81,44,79],[49,82,44,80,"length"],[49,88,44,86],[50,6,45,4],[50,11,45,9],[50,15,45,13,"i"],[50,16,45,14],[50,19,45,17],[50,20,45,18],[50,22,45,20,"i"],[50,23,45,21],[50,26,45,24,"newGestures"],[50,37,45,35],[50,38,45,36,"length"],[50,44,45,42],[50,46,45,44,"i"],[50,47,45,45],[50,49,45,47],[50,51,45,49],[51,8,46,6],[51,14,46,12,"handler"],[51,21,46,19],[51,24,46,22,"attachedGestures"],[51,40,46,38],[51,41,46,39,"i"],[51,42,46,40],[51,43,46,41],[53,8,48,6],[54,8,49,6],[55,8,50,6],[55,12,50,10,"handler"],[55,19,50,17],[55,20,50,18,"handlers"],[55,28,50,26],[55,29,50,27,"gestureId"],[55,38,50,36],[55,43,50,41,"newGestures"],[55,54,50,52],[55,55,50,53,"i"],[55,56,50,54],[55,57,50,55],[55,58,50,56,"handlers"],[55,66,50,64],[55,67,50,65,"gestureId"],[55,76,50,74],[55,81,50,79,"newGestures"],[55,92,50,90],[55,93,50,91,"i"],[55,94,50,92],[55,95,50,93],[55,96,50,94,"shouldUseReanimated"],[55,115,50,113],[55,119,50,117,"handler"],[55,126,50,124],[55,127,50,125,"shouldUseReanimated"],[55,146,50,144],[55,147,50,145],[55,149,50,147],[56,10,51,8,"shouldUpdateSharedValueIfUsed"],[56,39,51,37],[56,42,51,40],[56,46,51,44],[57,8,52,6],[58,8,53,6,"handler"],[58,15,53,13],[58,16,53,14,"config"],[58,22,53,20],[58,25,53,23,"newGestures"],[58,36,53,34],[58,37,53,35,"i"],[58,38,53,36],[58,39,53,37],[58,40,53,38,"config"],[58,46,53,44],[59,8,54,6,"handler"],[59,15,54,13],[59,16,54,14,"handlers"],[59,24,54,22],[59,27,54,25,"newGestures"],[59,38,54,36],[59,39,54,37,"i"],[59,40,54,38],[59,41,54,39],[59,42,54,40,"handlers"],[59,50,54,48],[60,8,55,6,"_RNGestureHandlerModule"],[60,31,55,29],[60,32,55,30,"default"],[60,39,55,37],[60,40,55,38,"updateGestureHandler"],[60,60,55,58],[60,61,55,59,"handler"],[60,68,55,66],[60,69,55,67,"handlerTag"],[60,79,55,77],[60,81,55,79],[60,82,55,80],[60,83,55,81],[60,85,55,83,"_utils"],[60,91,55,89],[60,92,55,90,"filterConfig"],[60,104,55,102],[60,106,55,104,"handler"],[60,113,55,111],[60,114,55,112,"config"],[60,120,55,118],[60,122,55,120,"_utils2"],[60,129,55,127],[60,130,55,128,"ALLOWED_PROPS"],[60,143,55,141],[60,145,55,143],[60,146,55,144],[60,147,55,145],[60,149,55,147,"_utils2"],[60,156,55,154],[60,157,55,155,"extractGestureRelations"],[60,180,55,178],[60,182,55,180,"handler"],[60,189,55,187],[60,190,55,188],[60,191,55,189],[60,192,55,190],[61,8,56,6],[61,9,56,7],[61,10,56,8],[61,12,56,10,"_handlersRegistry"],[61,29,56,27],[61,30,56,28,"registerHandler"],[61,45,56,43],[61,47,56,45,"handler"],[61,54,56,52],[61,55,56,53,"handlerTag"],[61,65,56,63],[61,67,56,65,"handler"],[61,74,56,72],[61,76,56,74,"handler"],[61,83,56,81],[61,84,56,82,"config"],[61,90,56,88],[61,91,56,89,"testId"],[61,97,56,95],[61,98,56,96],[62,6,57,4],[63,6,58,4],[63,10,58,8,"preparedGesture"],[63,25,58,23],[63,26,58,24,"animatedHandlers"],[63,42,58,40],[63,46,58,44,"shouldUpdateSharedValueIfUsed"],[63,75,58,73],[63,77,58,75],[64,8,59,6],[64,14,59,12,"newHandlersValue"],[64,30,59,28],[64,33,59,31,"attachedGestures"],[64,49,59,47],[64,50,59,48,"filter"],[64,56,59,54],[64,57,59,55,"g"],[64,58,59,56],[64,62,59,60,"g"],[64,63,59,61],[64,64,59,62,"shouldUseReanimated"],[64,83,59,81],[64,84,59,82],[64,85,59,83],[65,8,59,83],[65,9,60,7,"map"],[65,12,60,10],[65,13,60,11,"g"],[65,14,60,12],[65,18,60,16,"g"],[65,19,60,17],[65,20,60,18,"handlers"],[65,28,60,26],[65,29,60,27],[66,8,61,6,"preparedGesture"],[66,23,61,21],[66,24,61,22,"animatedHandlers"],[66,40,61,38],[66,41,61,39,"value"],[66,46,61,44],[66,49,61,47,"newHandlersValue"],[66,65,61,63],[67,6,62,4],[68,6,63,4],[68,7,63,5],[68,8,63,6],[68,10,63,8,"_utils"],[68,16,63,14],[68,17,63,15,"scheduleFlushOperations"],[68,40,63,38],[68,42,63,40],[68,43,63,41],[69,4,64,2],[69,5,64,3],[69,6,64,4],[70,2,65,0],[71,0,65,1],[71,3]],"functionMap":{"names":["<global>","_interopRequireDefault","updateHandlers","<anonymous>","attachedGestures.filter$argument_0","attachedGestures.filter.map$argument_0"],"mappings":"AAA;ACW,qFD;AEC;0CCoB;uDC0B,0BD;WEC,eF;GDI;CFC"},"hasCjsExports":true},"type":"js/module"}]}