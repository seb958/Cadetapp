{"dependencies":[{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":24,"index":146},"end":{"line":8,"column":57,"index":179}}],"key":"ZaQ44tMlNi0uwwL9WSHpSUsXoLw=","exportNames":["*"],"imports":1}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":53,"index":235},"end":{"line":10,"column":95,"index":277}}],"key":"RCDdIknCoffiRx5ELXjRDwUd78Y=","exportNames":["*"],"imports":1}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":13,"index":294},"end":{"line":12,"column":35,"index":316}}],"key":"/gxgMVIBQIOS9WgzAWnJsYriGvM=","exportNames":["*"],"imports":1}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":24,"index":343},"end":{"line":14,"column":60,"index":379}}],"key":"bloXnJQHwqvTb0wIEM895i4Wj90=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":14,"index":396},"end":{"line":16,"column":32,"index":414}}],"key":"Arg6QRuIuy5D/jfcnxX1qJiHjX8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.updateHandlers = updateHandlers;\n  var _handlersRegistry = require(_dependencyMap[0], \"../../handlersRegistry\");\n  var _RNGestureHandlerModule = _interopRequireDefault(require(_dependencyMap[1], \"../../../RNGestureHandlerModule\"));\n  var _utils = require(_dependencyMap[2], \"../../utils\");\n  var _ghQueueMicrotask = require(_dependencyMap[3], \"../../../ghQueueMicrotask\");\n  var _utils2 = require(_dependencyMap[4], \"./utils\");\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (let i = 0; i < newGestures.length; i++) {\n      const handler = preparedGesture.attachedGestures[i];\n      (0, _utils2.checkGestureCallbacksForWorklets)(handler); // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    } // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n\n    (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n      if (!preparedGesture.isMounted) {\n        return;\n      } // If amount of gesture configs changes, we need to update the callbacks in shared value\n\n      let shouldUpdateSharedValueIfUsed = preparedGesture.attachedGestures.length !== newGestures.length;\n      for (let i = 0; i < newGestures.length; i++) {\n        const handler = preparedGesture.attachedGestures[i]; // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n\n        if (handler.handlers.gestureId !== newGestures[i].handlers.gestureId && (newGestures[i].shouldUseReanimated || handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        handler.config = newGestures[i].config;\n        handler.handlers = newGestures[i].handlers;\n        _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _utils.filterConfig)(handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(handler)));\n        (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        const newHandlersValue = preparedGesture.attachedGestures.filter(g => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map(g => g.handlers);\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _utils.scheduleFlushOperations)();\n    });\n  }\n});","lineCount":59,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"updateHandlers"],[7,24,6,22],[7,27,6,25,"updateHandlers"],[7,41,6,39],[8,2,8,0],[8,6,8,4,"_handlersRegistry"],[8,23,8,21],[8,26,8,24,"require"],[8,33,8,31],[8,34,8,31,"_dependencyMap"],[8,48,8,31],[8,77,8,56],[8,78,8,57],[9,2,10,0],[9,6,10,4,"_RNGestureHandlerModule"],[9,29,10,27],[9,32,10,30,"_interopRequireDefault"],[9,54,10,52],[9,55,10,53,"require"],[9,62,10,60],[9,63,10,60,"_dependencyMap"],[9,77,10,60],[9,115,10,94],[9,116,10,95],[9,117,10,96],[10,2,12,0],[10,6,12,4,"_utils"],[10,12,12,10],[10,15,12,13,"require"],[10,22,12,20],[10,23,12,20,"_dependencyMap"],[10,37,12,20],[10,55,12,34],[10,56,12,35],[11,2,14,0],[11,6,14,4,"_ghQueueMicrotask"],[11,23,14,21],[11,26,14,24,"require"],[11,33,14,31],[11,34,14,31,"_dependencyMap"],[11,48,14,31],[11,80,14,59],[11,81,14,60],[12,2,16,0],[12,6,16,4,"_utils2"],[12,13,16,11],[12,16,16,14,"require"],[12,23,16,21],[12,24,16,21,"_dependencyMap"],[12,38,16,21],[12,52,16,31],[12,53,16,32],[13,2,18,0],[13,11,18,9,"_interopRequireDefault"],[13,33,18,31,"_interopRequireDefault"],[13,34,18,32,"obj"],[13,37,18,35],[13,39,18,37],[14,4,18,39],[14,11,18,46,"obj"],[14,14,18,49],[14,18,18,53,"obj"],[14,21,18,56],[14,22,18,57,"__esModule"],[14,32,18,67],[14,35,18,70,"obj"],[14,38,18,73],[14,41,18,76],[15,6,18,78,"default"],[15,13,18,85],[15,15,18,87,"obj"],[16,4,18,91],[16,5,18,92],[17,2,18,94],[18,2,20,0],[18,11,20,9,"updateHandlers"],[18,25,20,23,"updateHandlers"],[18,26,20,24,"preparedGesture"],[18,41,20,39],[18,43,20,41,"gestureConfig"],[18,56,20,54],[18,58,20,56,"newGestures"],[18,69,20,67],[18,71,20,69],[19,4,21,2,"gestureConfig"],[19,17,21,15],[19,18,21,16,"prepare"],[19,25,21,23],[19,26,21,24],[19,27,21,25],[20,4,23,2],[20,9,23,7],[20,13,23,11,"i"],[20,14,23,12],[20,17,23,15],[20,18,23,16],[20,20,23,18,"i"],[20,21,23,19],[20,24,23,22,"newGestures"],[20,35,23,33],[20,36,23,34,"length"],[20,42,23,40],[20,44,23,42,"i"],[20,45,23,43],[20,47,23,45],[20,49,23,47],[21,6,24,4],[21,12,24,10,"handler"],[21,19,24,17],[21,22,24,20,"preparedGesture"],[21,37,24,35],[21,38,24,36,"attachedGestures"],[21,54,24,52],[21,55,24,53,"i"],[21,56,24,54],[21,57,24,55],[22,6,25,4],[22,7,25,5],[22,8,25,6],[22,10,25,8,"_utils2"],[22,17,25,15],[22,18,25,16,"checkGestureCallbacksForWorklets"],[22,50,25,48],[22,52,25,50,"handler"],[22,59,25,57],[22,60,25,58],[22,61,25,59],[22,62,25,60],[23,6,26,4],[25,6,28,4],[25,10,28,8,"newGestures"],[25,21,28,19],[25,22,28,20,"i"],[25,23,28,21],[25,24,28,22],[25,25,28,23,"handlerTag"],[25,35,28,33],[25,40,28,38,"handler"],[25,47,28,45],[25,48,28,46,"handlerTag"],[25,58,28,56],[25,60,28,58],[26,8,29,6,"newGestures"],[26,19,29,17],[26,20,29,18,"i"],[26,21,29,19],[26,22,29,20],[26,23,29,21,"handlerTag"],[26,33,29,31],[26,36,29,34,"handler"],[26,43,29,41],[26,44,29,42,"handlerTag"],[26,54,29,52],[27,8,30,6,"newGestures"],[27,19,30,17],[27,20,30,18,"i"],[27,21,30,19],[27,22,30,20],[27,23,30,21,"handlers"],[27,31,30,29],[27,32,30,30,"handlerTag"],[27,42,30,40],[27,45,30,43,"handler"],[27,52,30,50],[27,53,30,51,"handlerTag"],[27,63,30,61],[28,6,31,4],[29,4,32,2],[29,5,32,3],[29,6,32,4],[30,4,33,2],[31,4,34,2],[33,4,37,2],[33,5,37,3],[33,6,37,4],[33,8,37,6,"_ghQueueMicrotask"],[33,25,37,23],[33,26,37,24,"ghQueueMicrotask"],[33,42,37,40],[33,44,37,42],[33,50,37,48],[34,6,38,4],[34,10,38,8],[34,11,38,9,"preparedGesture"],[34,26,38,24],[34,27,38,25,"isMounted"],[34,36,38,34],[34,38,38,36],[35,8,39,6],[36,6,40,4],[36,7,40,5],[36,8,40,6],[38,6,43,4],[38,10,43,8,"shouldUpdateSharedValueIfUsed"],[38,39,43,37],[38,42,43,40,"preparedGesture"],[38,57,43,55],[38,58,43,56,"attachedGestures"],[38,74,43,72],[38,75,43,73,"length"],[38,81,43,79],[38,86,43,84,"newGestures"],[38,97,43,95],[38,98,43,96,"length"],[38,104,43,102],[39,6,45,4],[39,11,45,9],[39,15,45,13,"i"],[39,16,45,14],[39,19,45,17],[39,20,45,18],[39,22,45,20,"i"],[39,23,45,21],[39,26,45,24,"newGestures"],[39,37,45,35],[39,38,45,36,"length"],[39,44,45,42],[39,46,45,44,"i"],[39,47,45,45],[39,49,45,47],[39,51,45,49],[40,8,46,6],[40,14,46,12,"handler"],[40,21,46,19],[40,24,46,22,"preparedGesture"],[40,39,46,37],[40,40,46,38,"attachedGestures"],[40,56,46,54],[40,57,46,55,"i"],[40,58,46,56],[40,59,46,57],[40,60,46,58],[40,61,46,59],[41,8,47,6],[43,8,49,6],[43,12,49,10,"handler"],[43,19,49,17],[43,20,49,18,"handlers"],[43,28,49,26],[43,29,49,27,"gestureId"],[43,38,49,36],[43,43,49,41,"newGestures"],[43,54,49,52],[43,55,49,53,"i"],[43,56,49,54],[43,57,49,55],[43,58,49,56,"handlers"],[43,66,49,64],[43,67,49,65,"gestureId"],[43,76,49,74],[43,81,49,79,"newGestures"],[43,92,49,90],[43,93,49,91,"i"],[43,94,49,92],[43,95,49,93],[43,96,49,94,"shouldUseReanimated"],[43,115,49,113],[43,119,49,117,"handler"],[43,126,49,124],[43,127,49,125,"shouldUseReanimated"],[43,146,49,144],[43,147,49,145],[43,149,49,147],[44,10,50,8,"shouldUpdateSharedValueIfUsed"],[44,39,50,37],[44,42,50,40],[44,46,50,44],[45,8,51,6],[46,8,53,6,"handler"],[46,15,53,13],[46,16,53,14,"config"],[46,22,53,20],[46,25,53,23,"newGestures"],[46,36,53,34],[46,37,53,35,"i"],[46,38,53,36],[46,39,53,37],[46,40,53,38,"config"],[46,46,53,44],[47,8,54,6,"handler"],[47,15,54,13],[47,16,54,14,"handlers"],[47,24,54,22],[47,27,54,25,"newGestures"],[47,38,54,36],[47,39,54,37,"i"],[47,40,54,38],[47,41,54,39],[47,42,54,40,"handlers"],[47,50,54,48],[48,8,56,6,"_RNGestureHandlerModule"],[48,31,56,29],[48,32,56,30,"default"],[48,39,56,37],[48,40,56,38,"updateGestureHandler"],[48,60,56,58],[48,61,56,59,"handler"],[48,68,56,66],[48,69,56,67,"handlerTag"],[48,79,56,77],[48,81,56,79],[48,82,56,80],[48,83,56,81],[48,85,56,83,"_utils"],[48,91,56,89],[48,92,56,90,"filterConfig"],[48,104,56,102],[48,106,56,104,"handler"],[48,113,56,111],[48,114,56,112,"config"],[48,120,56,118],[48,122,56,120,"_utils2"],[48,129,56,127],[48,130,56,128,"ALLOWED_PROPS"],[48,143,56,141],[48,145,56,143],[48,146,56,144],[48,147,56,145],[48,149,56,147,"_utils2"],[48,156,56,154],[48,157,56,155,"extractGestureRelations"],[48,180,56,178],[48,182,56,180,"handler"],[48,189,56,187],[48,190,56,188],[48,191,56,189],[48,192,56,190],[49,8,58,6],[49,9,58,7],[49,10,58,8],[49,12,58,10,"_handlersRegistry"],[49,29,58,27],[49,30,58,28,"registerHandler"],[49,45,58,43],[49,47,58,45,"handler"],[49,54,58,52],[49,55,58,53,"handlerTag"],[49,65,58,63],[49,67,58,65,"handler"],[49,74,58,72],[49,76,58,74,"handler"],[49,83,58,81],[49,84,58,82,"config"],[49,90,58,88],[49,91,58,89,"testId"],[49,97,58,95],[49,98,58,96],[50,6,59,4],[51,6,61,4],[51,10,61,8,"preparedGesture"],[51,25,61,23],[51,26,61,24,"animatedHandlers"],[51,42,61,40],[51,46,61,44,"shouldUpdateSharedValueIfUsed"],[51,75,61,73],[51,77,61,75],[52,8,62,6],[52,14,62,12,"newHandlersValue"],[52,30,62,28],[52,33,62,31,"preparedGesture"],[52,48,62,46],[52,49,62,47,"attachedGestures"],[52,65,62,63],[52,66,62,64,"filter"],[52,72,62,70],[52,73,62,71,"g"],[52,74,62,72],[52,78,62,76,"g"],[52,79,62,77],[52,80,62,78,"shouldUseReanimated"],[52,99,62,97],[52,100,62,98],[52,101,62,99],[53,8,62,99],[53,9,63,7,"map"],[53,12,63,10],[53,13,63,11,"g"],[53,14,63,12],[53,18,63,16,"g"],[53,19,63,17],[53,20,63,18,"handlers"],[53,28,63,26],[53,29,63,27],[54,8,64,6,"preparedGesture"],[54,23,64,21],[54,24,64,22,"animatedHandlers"],[54,40,64,38],[54,41,64,39,"value"],[54,46,64,44],[54,49,64,47,"newHandlersValue"],[54,65,64,63],[55,6,65,4],[56,6,67,4],[56,7,67,5],[56,8,67,6],[56,10,67,8,"_utils"],[56,16,67,14],[56,17,67,15,"scheduleFlushOperations"],[56,40,67,38],[56,42,67,40],[56,43,67,41],[57,4,68,2],[57,5,68,3],[57,6,68,4],[58,2,69,0],[59,0,69,1],[59,3]],"functionMap":{"names":["<global>","_interopRequireDefault","updateHandlers","<anonymous>","preparedGesture.attachedGestures.filter$argument_0","preparedGesture.attachedGestures.filter.map$argument_0"],"mappings":"AAA;ACiB,+FD;AEE;0CCiB;uECyB,0BD;WEC,eF;GDK;CFC"},"hasCjsExports":true},"type":"js/module"}]}