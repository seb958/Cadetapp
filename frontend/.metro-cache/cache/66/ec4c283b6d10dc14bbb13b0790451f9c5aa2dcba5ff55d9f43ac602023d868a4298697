{"dependencies":[{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":54,"index":69}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE=","exportNames":["*"],"imports":1}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":70},"end":{"line":4,"column":69,"index":139}}],"key":"84Qu5UH2d/L4S1+Pr1wW2nxbCNI=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":140},"end":{"line":5,"column":36,"index":176}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":177},"end":{"line":6,"column":53,"index":230}}],"key":"k+xfarWxri7fB3IShKFMK0oi5UQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[0], \"../../../utils\");\n  var _getShadowNodeFromRef = require(_dependencyMap[1], \"../../../getShadowNodeFromRef\");\n  var _react = require(_dependencyMap[2], \"react\");\n  var _findNodeHandle = require(_dependencyMap[3], \"../../../findNodeHandle\");\n  var findNodeHandle = _interopDefault(_findNodeHandle);\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    const refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, findNodeHandle.default)(state.viewRef);\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n      if (__DEV__ && (0, _utils.isFabric)() && global.isViewFlatteningDisabled) {\n        const node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":47,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,10,0,"exports"],[12,9,10,0],[12,10,10,0,"useViewRefHandler"],[12,27,10,0],[12,30,10,0,"useViewRefHandler"],[12,47,10,0],[13,2,3,0],[13,6,3,0,"_utils"],[13,12,3,0],[13,15,3,0,"require"],[13,22,3,0],[13,23,3,0,"_dependencyMap"],[13,37,3,0],[14,2,4,0],[14,6,4,0,"_getShadowNodeFromRef"],[14,27,4,0],[14,30,4,0,"require"],[14,37,4,0],[14,38,4,0,"_dependencyMap"],[14,52,4,0],[15,2,5,0],[15,6,5,0,"_react"],[15,12,5,0],[15,15,5,0,"require"],[15,22,5,0],[15,23,5,0,"_dependencyMap"],[15,37,5,0],[16,2,6,0],[16,6,6,0,"_findNodeHandle"],[16,21,6,0],[16,24,6,0,"require"],[16,31,6,0],[16,32,6,0,"_dependencyMap"],[16,46,6,0],[17,2,6,0],[17,6,6,0,"findNodeHandle"],[17,20,6,0],[17,23,6,0,"_interopDefault"],[17,38,6,0],[17,39,6,0,"_findNodeHandle"],[17,54,6,0],[18,2,7,0],[19,2,8,0],[20,2,9,0],[21,2,10,7],[21,11,10,16,"useViewRefHandler"],[21,28,10,33,"useViewRefHandler"],[21,29,10,34,"state"],[21,34,10,39],[21,36,10,41,"updateAttachedGestures"],[21,58,10,63],[21,60,10,65],[22,4,11,2],[22,10,11,8,"refHandler"],[22,20,11,18],[22,23,11,21],[22,27,11,21,"useCallback"],[22,33,11,32],[22,34,11,32,"useCallback"],[22,45,11,32],[22,47,11,33,"ref"],[22,50,11,36],[22,54,11,40],[23,6,12,4],[23,10,12,8,"ref"],[23,13,12,11],[23,18,12,16],[23,22,12,20],[23,24,12,22],[24,8,13,6],[25,6,14,4],[26,6,15,4,"state"],[26,11,15,9],[26,12,15,10,"viewRef"],[26,19,15,17],[26,22,15,20,"ref"],[26,25,15,23],[28,6,17,4],[29,6,18,4],[29,10,18,8,"state"],[29,15,18,13],[29,16,18,14,"previousViewTag"],[29,31,18,29],[29,36,18,34],[29,37,18,35],[29,38,18,36],[29,40,18,38],[30,8,19,6,"state"],[30,13,19,11],[30,14,19,12,"previousViewTag"],[30,29,19,27],[30,32,19,30],[30,36,19,30,"findNodeHandle"],[30,50,19,44],[30,51,19,44,"default"],[30,58,19,44],[30,60,19,45,"state"],[30,65,19,50],[30,66,19,51,"viewRef"],[30,73,19,58],[30,74,19,59],[31,6,20,4],[33,6,22,4],[34,6,23,4],[35,6,24,4],[35,10,24,8],[35,11,24,9,"state"],[35,16,24,14],[35,17,24,15,"firstRender"],[35,28,24,26],[35,30,24,28],[36,8,25,6,"updateAttachedGestures"],[36,30,25,28],[36,31,25,29],[36,35,25,33],[36,36,25,34],[37,6,26,4],[38,6,27,4],[38,10,27,8,"__DEV__"],[38,17,27,15],[38,21,27,19],[38,25,27,19,"isFabric"],[38,31,27,27],[38,32,27,27,"isFabric"],[38,40,27,27],[38,42,27,28],[38,43,27,29],[38,47,27,33,"global"],[38,53,27,39],[38,54,27,40,"isViewFlatteningDisabled"],[38,78,27,64],[38,80,27,66],[39,8,28,6],[39,14,28,12,"node"],[39,18,28,16],[39,21,28,19],[39,25,28,19,"getShadowNodeFromRef"],[39,46,28,39],[39,47,28,39,"getShadowNodeFromRef"],[39,67,28,39],[39,69,28,40,"ref"],[39,72,28,43],[39,73,28,44],[40,8,29,6],[40,12,29,10,"global"],[40,18,29,16],[40,19,29,17,"isViewFlatteningDisabled"],[40,43,29,41],[40,44,29,42,"node"],[40,48,29,46],[40,49,29,47],[40,54,29,52],[40,59,29,57],[40,61,29,59],[41,10,30,8,"console"],[41,17,30,15],[41,18,30,16,"error"],[41,23,30,21],[41,24,30,22],[41,28,30,22,"tagMessage"],[41,34,30,32],[41,35,30,32,"tagMessage"],[41,45,30,32],[41,47,30,33],[41,115,30,101],[41,118,30,104],[41,216,30,202],[41,217,30,203],[41,218,30,204],[42,8,31,6],[43,6,32,4],[44,4,33,2],[44,5,33,3],[44,7,33,5],[44,8,33,6,"state"],[44,13,33,11],[44,15,33,13,"updateAttachedGestures"],[44,37,33,35],[44,38,33,36],[44,39,33,37],[45,4,34,2],[45,11,34,9,"refHandler"],[45,21,34,19],[46,2,35,0],[47,0,35,1],[47,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCS;iCCC;GDsB;CDE"},"hasCjsExports":false},"type":"js/module"}]}