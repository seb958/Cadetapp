{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return LeastSquareSolver;\n    }\n  });\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  // Implementation taken from Flutter's LeastSquareSolver\n  // https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n  class Vector {\n    constructor(length) {\n      _defineProperty(this, \"offset\", void 0);\n      _defineProperty(this, \"length\", void 0);\n      _defineProperty(this, \"elements\", void 0);\n      this.offset = 0;\n      this.length = length;\n      this.elements = new Array(length);\n    }\n    static fromVOL(values, offset, length) {\n      const result = new Vector(0);\n      result.offset = offset;\n      result.length = length;\n      result.elements = values;\n      return result;\n    }\n    get(index) {\n      return this.elements[this.offset + index];\n    }\n    set(index, value) {\n      this.elements[this.offset + index] = value;\n    }\n    dot(other) {\n      let result = 0;\n      for (let i = 0; i < this.length; i++) {\n        result += this.get(i) * other.get(i);\n      }\n      return result;\n    }\n    norm() {\n      return Math.sqrt(this.dot(this));\n    }\n  }\n  class Matrix {\n    constructor(rows, columns) {\n      _defineProperty(this, \"columns\", void 0);\n      _defineProperty(this, \"elements\", void 0);\n      this.columns = columns;\n      this.elements = new Array(rows * columns);\n    }\n    get(row, column) {\n      return this.elements[row * this.columns + column];\n    }\n    set(row, column, value) {\n      this.elements[row * this.columns + column] = value;\n    }\n    getRow(row) {\n      return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n    }\n  } // An nth degree polynomial fit to a dataset.\n\n  class PolynomialFit {\n    // The polynomial coefficients of the fit.\n    //\n    // For each `i`, the element `coefficients[i]` is the coefficient of\n    // the `i`-th power of the variable.\n    // Creates a polynomial fit of the given degree.\n    //\n    // There are n + 1 coefficients in a fit of degree n.\n    constructor(degree) {\n      _defineProperty(this, \"coefficients\", void 0);\n      this.coefficients = new Array(degree + 1);\n    }\n  }\n  const precisionErrorTolerance = 1e-10; // Uses the least-squares algorithm to fit a polynomial to a set of data.\n\n  class LeastSquareSolver {\n    // The x-coordinates of each data point.\n    // The y-coordinates of each data point.\n    // The weight to use for each data point.\n    // Creates a least-squares solver.\n    //\n    // The [x], [y], and [w] arguments must not be null.\n    constructor(x, y, w) {\n      _defineProperty(this, \"x\", void 0);\n      _defineProperty(this, \"y\", void 0);\n      _defineProperty(this, \"w\", void 0);\n      this.x = x;\n      this.y = y;\n      this.w = w;\n    } // Fits a polynomial of the given degree to the data points.\n    //\n    // When there is not enough data to fit a curve null is returned.\n\n    solve(degree) {\n      if (degree > this.x.length) {\n        // Not enough data to fit a curve.\n        return null;\n      }\n      const result = new PolynomialFit(degree); // Shorthands for the purpose of notation equivalence to original C++ code.\n\n      const m = this.x.length;\n      const n = degree + 1; // Expand the X vector to a matrix A, pre-multiplied by the weights.\n\n      const a = new Matrix(n, m);\n      for (let h = 0; h < m; h++) {\n        a.set(0, h, this.w[h]);\n        for (let i = 1; i < n; i++) {\n          a.set(i, h, a.get(i - 1, h) * this.x[h]);\n        }\n      } // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n      // Orthonormal basis, column-major ordVectorer.\n\n      const q = new Matrix(n, m); // Upper triangular matrix, row-major order.\n\n      const r = new Matrix(n, m);\n      for (let j = 0; j < n; j += 1) {\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, a.get(j, h));\n        }\n        for (let i = 0; i < j; i += 1) {\n          const dot = q.getRow(j).dot(q.getRow(i));\n          for (let h = 0; h < m; h += 1) {\n            q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n          }\n        }\n        const norm = q.getRow(j).norm();\n        if (norm < precisionErrorTolerance) {\n          // Vectors are linearly dependent or zero so no solution.\n          return null;\n        }\n        const inverseNorm = 1.0 / norm;\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) * inverseNorm);\n        }\n        for (let i = 0; i < n; i += 1) {\n          r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n        }\n      } // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n      // We just work from bottom-right to top-left calculating B's coefficients.\n\n      const wy = new Vector(m);\n      for (let h = 0; h < m; h += 1) {\n        wy.set(h, this.y[h] * this.w[h]);\n      }\n      for (let i = n - 1; i >= 0; i -= 1) {\n        result.coefficients[i] = q.getRow(i).dot(wy);\n        for (let j = n - 1; j > i; j -= 1) {\n          result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n        }\n        result.coefficients[i] /= r.get(i, i);\n      }\n      return result;\n    }\n  }\n});","lineCount":174,"map":[[7,2,93,15,"Object"],[7,8,93,15],[7,9,93,15,"defineProperty"],[7,23,93,15],[7,24,93,15,"exports"],[7,31,93,15],[8,4,93,15,"enumerable"],[8,14,93,15],[9,4,93,15,"get"],[9,7,93,15],[9,18,93,15,"get"],[9,19,93,15],[10,6,93,15],[10,13,93,15,"LeastSquareSolver"],[10,30,93,15],[11,4,93,15],[12,2,93,15],[13,2,1,0],[13,11,1,9,"_defineProperty"],[13,26,1,24,"_defineProperty"],[13,27,1,25,"obj"],[13,30,1,28],[13,32,1,30,"key"],[13,35,1,33],[13,37,1,35,"value"],[13,42,1,40],[13,44,1,42],[14,4,1,44],[14,8,1,48,"key"],[14,11,1,51],[14,15,1,55,"obj"],[14,18,1,58],[14,20,1,60],[15,6,1,62,"Object"],[15,12,1,68],[15,13,1,69,"defineProperty"],[15,27,1,83],[15,28,1,84,"obj"],[15,31,1,87],[15,33,1,89,"key"],[15,36,1,92],[15,38,1,94],[16,8,1,96,"value"],[16,13,1,101],[16,15,1,103,"value"],[16,20,1,108],[17,8,1,110,"enumerable"],[17,18,1,120],[17,20,1,122],[17,24,1,126],[18,8,1,128,"configurable"],[18,20,1,140],[18,22,1,142],[18,26,1,146],[19,8,1,148,"writable"],[19,16,1,156],[19,18,1,158],[20,6,1,163],[20,7,1,164],[20,8,1,165],[21,4,1,167],[21,5,1,168],[21,11,1,174],[22,6,1,176,"obj"],[22,9,1,179],[22,10,1,180,"key"],[22,13,1,183],[22,14,1,184],[22,17,1,187,"value"],[22,22,1,192],[23,4,1,194],[24,4,1,196],[24,11,1,203,"obj"],[24,14,1,206],[25,2,1,208],[27,2,3,0],[28,2,4,0],[29,2,5,0],[29,8,5,6,"Vector"],[29,14,5,12],[29,15,5,13],[30,4,6,2,"constructor"],[30,15,6,13,"constructor"],[30,16,6,14,"length"],[30,22,6,20],[30,24,6,22],[31,6,7,4,"_defineProperty"],[31,21,7,19],[31,22,7,20],[31,26,7,24],[31,28,7,26],[31,36,7,34],[31,38,7,36],[31,43,7,41],[31,44,7,42],[31,45,7,43],[32,6,9,4,"_defineProperty"],[32,21,9,19],[32,22,9,20],[32,26,9,24],[32,28,9,26],[32,36,9,34],[32,38,9,36],[32,43,9,41],[32,44,9,42],[32,45,9,43],[33,6,11,4,"_defineProperty"],[33,21,11,19],[33,22,11,20],[33,26,11,24],[33,28,11,26],[33,38,11,36],[33,40,11,38],[33,45,11,43],[33,46,11,44],[33,47,11,45],[34,6,13,4],[34,10,13,8],[34,11,13,9,"offset"],[34,17,13,15],[34,20,13,18],[34,21,13,19],[35,6,14,4],[35,10,14,8],[35,11,14,9,"length"],[35,17,14,15],[35,20,14,18,"length"],[35,26,14,24],[36,6,15,4],[36,10,15,8],[36,11,15,9,"elements"],[36,19,15,17],[36,22,15,20],[36,26,15,24,"Array"],[36,31,15,29],[36,32,15,30,"length"],[36,38,15,36],[36,39,15,37],[37,4,16,2],[38,4,18,2],[38,11,18,9,"fromVOL"],[38,18,18,16,"fromVOL"],[38,19,18,17,"values"],[38,25,18,23],[38,27,18,25,"offset"],[38,33,18,31],[38,35,18,33,"length"],[38,41,18,39],[38,43,18,41],[39,6,19,4],[39,12,19,10,"result"],[39,18,19,16],[39,21,19,19],[39,25,19,23,"Vector"],[39,31,19,29],[39,32,19,30],[39,33,19,31],[39,34,19,32],[40,6,20,4,"result"],[40,12,20,10],[40,13,20,11,"offset"],[40,19,20,17],[40,22,20,20,"offset"],[40,28,20,26],[41,6,21,4,"result"],[41,12,21,10],[41,13,21,11,"length"],[41,19,21,17],[41,22,21,20,"length"],[41,28,21,26],[42,6,22,4,"result"],[42,12,22,10],[42,13,22,11,"elements"],[42,21,22,19],[42,24,22,22,"values"],[42,30,22,28],[43,6,23,4],[43,13,23,11,"result"],[43,19,23,17],[44,4,24,2],[45,4,26,2,"get"],[45,7,26,5,"get"],[45,8,26,6,"index"],[45,13,26,11],[45,15,26,13],[46,6,27,4],[46,13,27,11],[46,17,27,15],[46,18,27,16,"elements"],[46,26,27,24],[46,27,27,25],[46,31,27,29],[46,32,27,30,"offset"],[46,38,27,36],[46,41,27,39,"index"],[46,46,27,44],[46,47,27,45],[47,4,28,2],[48,4,30,2,"set"],[48,7,30,5,"set"],[48,8,30,6,"index"],[48,13,30,11],[48,15,30,13,"value"],[48,20,30,18],[48,22,30,20],[49,6,31,4],[49,10,31,8],[49,11,31,9,"elements"],[49,19,31,17],[49,20,31,18],[49,24,31,22],[49,25,31,23,"offset"],[49,31,31,29],[49,34,31,32,"index"],[49,39,31,37],[49,40,31,38],[49,43,31,41,"value"],[49,48,31,46],[50,4,32,2],[51,4,34,2,"dot"],[51,7,34,5,"dot"],[51,8,34,6,"other"],[51,13,34,11],[51,15,34,13],[52,6,35,4],[52,10,35,8,"result"],[52,16,35,14],[52,19,35,17],[52,20,35,18],[53,6,37,4],[53,11,37,9],[53,15,37,13,"i"],[53,16,37,14],[53,19,37,17],[53,20,37,18],[53,22,37,20,"i"],[53,23,37,21],[53,26,37,24],[53,30,37,28],[53,31,37,29,"length"],[53,37,37,35],[53,39,37,37,"i"],[53,40,37,38],[53,42,37,40],[53,44,37,42],[54,8,38,6,"result"],[54,14,38,12],[54,18,38,16],[54,22,38,20],[54,23,38,21,"get"],[54,26,38,24],[54,27,38,25,"i"],[54,28,38,26],[54,29,38,27],[54,32,38,30,"other"],[54,37,38,35],[54,38,38,36,"get"],[54,41,38,39],[54,42,38,40,"i"],[54,43,38,41],[54,44,38,42],[55,6,39,4],[56,6,41,4],[56,13,41,11,"result"],[56,19,41,17],[57,4,42,2],[58,4,44,2,"norm"],[58,8,44,6,"norm"],[58,9,44,6],[58,11,44,9],[59,6,45,4],[59,13,45,11,"Math"],[59,17,45,15],[59,18,45,16,"sqrt"],[59,22,45,20],[59,23,45,21],[59,27,45,25],[59,28,45,26,"dot"],[59,31,45,29],[59,32,45,30],[59,36,45,34],[59,37,45,35],[59,38,45,36],[60,4,46,2],[61,2,48,0],[62,2,50,0],[62,8,50,6,"Matrix"],[62,14,50,12],[62,15,50,13],[63,4,51,2,"constructor"],[63,15,51,13,"constructor"],[63,16,51,14,"rows"],[63,20,51,18],[63,22,51,20,"columns"],[63,29,51,27],[63,31,51,29],[64,6,52,4,"_defineProperty"],[64,21,52,19],[64,22,52,20],[64,26,52,24],[64,28,52,26],[64,37,52,35],[64,39,52,37],[64,44,52,42],[64,45,52,43],[64,46,52,44],[65,6,54,4,"_defineProperty"],[65,21,54,19],[65,22,54,20],[65,26,54,24],[65,28,54,26],[65,38,54,36],[65,40,54,38],[65,45,54,43],[65,46,54,44],[65,47,54,45],[66,6,56,4],[66,10,56,8],[66,11,56,9,"columns"],[66,18,56,16],[66,21,56,19,"columns"],[66,28,56,26],[67,6,57,4],[67,10,57,8],[67,11,57,9,"elements"],[67,19,57,17],[67,22,57,20],[67,26,57,24,"Array"],[67,31,57,29],[67,32,57,30,"rows"],[67,36,57,34],[67,39,57,37,"columns"],[67,46,57,44],[67,47,57,45],[68,4,58,2],[69,4,60,2,"get"],[69,7,60,5,"get"],[69,8,60,6,"row"],[69,11,60,9],[69,13,60,11,"column"],[69,19,60,17],[69,21,60,19],[70,6,61,4],[70,13,61,11],[70,17,61,15],[70,18,61,16,"elements"],[70,26,61,24],[70,27,61,25,"row"],[70,30,61,28],[70,33,61,31],[70,37,61,35],[70,38,61,36,"columns"],[70,45,61,43],[70,48,61,46,"column"],[70,54,61,52],[70,55,61,53],[71,4,62,2],[72,4,64,2,"set"],[72,7,64,5,"set"],[72,8,64,6,"row"],[72,11,64,9],[72,13,64,11,"column"],[72,19,64,17],[72,21,64,19,"value"],[72,26,64,24],[72,28,64,26],[73,6,65,4],[73,10,65,8],[73,11,65,9,"elements"],[73,19,65,17],[73,20,65,18,"row"],[73,23,65,21],[73,26,65,24],[73,30,65,28],[73,31,65,29,"columns"],[73,38,65,36],[73,41,65,39,"column"],[73,47,65,45],[73,48,65,46],[73,51,65,49,"value"],[73,56,65,54],[74,4,66,2],[75,4,68,2,"getRow"],[75,10,68,8,"getRow"],[75,11,68,9,"row"],[75,14,68,12],[75,16,68,14],[76,6,69,4],[76,13,69,11,"Vector"],[76,19,69,17],[76,20,69,18,"fromVOL"],[76,27,69,25],[76,28,69,26],[76,32,69,30],[76,33,69,31,"elements"],[76,41,69,39],[76,43,69,41,"row"],[76,46,69,44],[76,49,69,47],[76,53,69,51],[76,54,69,52,"columns"],[76,61,69,59],[76,63,69,61],[76,67,69,65],[76,68,69,66,"columns"],[76,75,69,73],[76,76,69,74],[77,4,70,2],[78,2,72,0],[78,3,72,1],[78,4,72,2],[80,2,75,0],[80,8,75,6,"PolynomialFit"],[80,21,75,19],[80,22,75,20],[81,4,76,2],[82,4,77,2],[83,4,78,2],[84,4,79,2],[85,4,80,2],[86,4,81,2],[87,4,82,2],[88,4,83,2,"constructor"],[88,15,83,13,"constructor"],[88,16,83,14,"degree"],[88,22,83,20],[88,24,83,22],[89,6,84,4,"_defineProperty"],[89,21,84,19],[89,22,84,20],[89,26,84,24],[89,28,84,26],[89,42,84,40],[89,44,84,42],[89,49,84,47],[89,50,84,48],[89,51,84,49],[90,6,86,4],[90,10,86,8],[90,11,86,9,"coefficients"],[90,23,86,21],[90,26,86,24],[90,30,86,28,"Array"],[90,35,86,33],[90,36,86,34,"degree"],[90,42,86,40],[90,45,86,43],[90,46,86,44],[90,47,86,45],[91,4,87,2],[92,2,89,0],[93,2,91,0],[93,8,91,6,"precisionErrorTolerance"],[93,31,91,29],[93,34,91,32],[93,39,91,37],[93,40,91,38],[93,41,91,39],[95,2,93,15],[95,8,93,21,"LeastSquareSolver"],[95,25,93,38],[95,26,93,39],[96,4,94,2],[97,4,95,2],[98,4,96,2],[99,4,97,2],[100,4,98,2],[101,4,99,2],[102,4,100,2,"constructor"],[102,15,100,13,"constructor"],[102,16,100,14,"x"],[102,17,100,15],[102,19,100,17,"y"],[102,20,100,18],[102,22,100,20,"w"],[102,23,100,21],[102,25,100,23],[103,6,101,4,"_defineProperty"],[103,21,101,19],[103,22,101,20],[103,26,101,24],[103,28,101,26],[103,31,101,29],[103,33,101,31],[103,38,101,36],[103,39,101,37],[103,40,101,38],[104,6,103,4,"_defineProperty"],[104,21,103,19],[104,22,103,20],[104,26,103,24],[104,28,103,26],[104,31,103,29],[104,33,103,31],[104,38,103,36],[104,39,103,37],[104,40,103,38],[105,6,105,4,"_defineProperty"],[105,21,105,19],[105,22,105,20],[105,26,105,24],[105,28,105,26],[105,31,105,29],[105,33,105,31],[105,38,105,36],[105,39,105,37],[105,40,105,38],[106,6,107,4],[106,10,107,8],[106,11,107,9,"x"],[106,12,107,10],[106,15,107,13,"x"],[106,16,107,14],[107,6,108,4],[107,10,108,8],[107,11,108,9,"y"],[107,12,108,10],[107,15,108,13,"y"],[107,16,108,14],[108,6,109,4],[108,10,109,8],[108,11,109,9,"w"],[108,12,109,10],[108,15,109,13,"w"],[108,16,109,14],[109,4,110,2],[109,5,110,3],[109,6,110,4],[110,4,111,2],[111,4,112,2],[113,4,115,2,"solve"],[113,9,115,7,"solve"],[113,10,115,8,"degree"],[113,16,115,14],[113,18,115,16],[114,6,116,4],[114,10,116,8,"degree"],[114,16,116,14],[114,19,116,17],[114,23,116,21],[114,24,116,22,"x"],[114,25,116,23],[114,26,116,24,"length"],[114,32,116,30],[114,34,116,32],[115,8,117,6],[116,8,118,6],[116,15,118,13],[116,19,118,17],[117,6,119,4],[118,6,121,4],[118,12,121,10,"result"],[118,18,121,16],[118,21,121,19],[118,25,121,23,"PolynomialFit"],[118,38,121,36],[118,39,121,37,"degree"],[118,45,121,43],[118,46,121,44],[118,47,121,45],[118,48,121,46],[120,6,123,4],[120,12,123,10,"m"],[120,13,123,11],[120,16,123,14],[120,20,123,18],[120,21,123,19,"x"],[120,22,123,20],[120,23,123,21,"length"],[120,29,123,27],[121,6,124,4],[121,12,124,10,"n"],[121,13,124,11],[121,16,124,14,"degree"],[121,22,124,20],[121,25,124,23],[121,26,124,24],[121,27,124,25],[121,28,124,26],[123,6,126,4],[123,12,126,10,"a"],[123,13,126,11],[123,16,126,14],[123,20,126,18,"Matrix"],[123,26,126,24],[123,27,126,25,"n"],[123,28,126,26],[123,30,126,28,"m"],[123,31,126,29],[123,32,126,30],[124,6,128,4],[124,11,128,9],[124,15,128,13,"h"],[124,16,128,14],[124,19,128,17],[124,20,128,18],[124,22,128,20,"h"],[124,23,128,21],[124,26,128,24,"m"],[124,27,128,25],[124,29,128,27,"h"],[124,30,128,28],[124,32,128,30],[124,34,128,32],[125,8,129,6,"a"],[125,9,129,7],[125,10,129,8,"set"],[125,13,129,11],[125,14,129,12],[125,15,129,13],[125,17,129,15,"h"],[125,18,129,16],[125,20,129,18],[125,24,129,22],[125,25,129,23,"w"],[125,26,129,24],[125,27,129,25,"h"],[125,28,129,26],[125,29,129,27],[125,30,129,28],[126,8,131,6],[126,13,131,11],[126,17,131,15,"i"],[126,18,131,16],[126,21,131,19],[126,22,131,20],[126,24,131,22,"i"],[126,25,131,23],[126,28,131,26,"n"],[126,29,131,27],[126,31,131,29,"i"],[126,32,131,30],[126,34,131,32],[126,36,131,34],[127,10,132,8,"a"],[127,11,132,9],[127,12,132,10,"set"],[127,15,132,13],[127,16,132,14,"i"],[127,17,132,15],[127,19,132,17,"h"],[127,20,132,18],[127,22,132,20,"a"],[127,23,132,21],[127,24,132,22,"get"],[127,27,132,25],[127,28,132,26,"i"],[127,29,132,27],[127,32,132,30],[127,33,132,31],[127,35,132,33,"h"],[127,36,132,34],[127,37,132,35],[127,40,132,38],[127,44,132,42],[127,45,132,43,"x"],[127,46,132,44],[127,47,132,45,"h"],[127,48,132,46],[127,49,132,47],[127,50,132,48],[128,8,133,6],[129,6,134,4],[129,7,134,5],[129,8,134,6],[130,6,135,4],[132,6,138,4],[132,12,138,10,"q"],[132,13,138,11],[132,16,138,14],[132,20,138,18,"Matrix"],[132,26,138,24],[132,27,138,25,"n"],[132,28,138,26],[132,30,138,28,"m"],[132,31,138,29],[132,32,138,30],[132,33,138,31],[132,34,138,32],[134,6,140,4],[134,12,140,10,"r"],[134,13,140,11],[134,16,140,14],[134,20,140,18,"Matrix"],[134,26,140,24],[134,27,140,25,"n"],[134,28,140,26],[134,30,140,28,"m"],[134,31,140,29],[134,32,140,30],[135,6,142,4],[135,11,142,9],[135,15,142,13,"j"],[135,16,142,14],[135,19,142,17],[135,20,142,18],[135,22,142,20,"j"],[135,23,142,21],[135,26,142,24,"n"],[135,27,142,25],[135,29,142,27,"j"],[135,30,142,28],[135,34,142,32],[135,35,142,33],[135,37,142,35],[136,8,143,6],[136,13,143,11],[136,17,143,15,"h"],[136,18,143,16],[136,21,143,19],[136,22,143,20],[136,24,143,22,"h"],[136,25,143,23],[136,28,143,26,"m"],[136,29,143,27],[136,31,143,29,"h"],[136,32,143,30],[136,36,143,34],[136,37,143,35],[136,39,143,37],[137,10,144,8,"q"],[137,11,144,9],[137,12,144,10,"set"],[137,15,144,13],[137,16,144,14,"j"],[137,17,144,15],[137,19,144,17,"h"],[137,20,144,18],[137,22,144,20,"a"],[137,23,144,21],[137,24,144,22,"get"],[137,27,144,25],[137,28,144,26,"j"],[137,29,144,27],[137,31,144,29,"h"],[137,32,144,30],[137,33,144,31],[137,34,144,32],[138,8,145,6],[139,8,147,6],[139,13,147,11],[139,17,147,15,"i"],[139,18,147,16],[139,21,147,19],[139,22,147,20],[139,24,147,22,"i"],[139,25,147,23],[139,28,147,26,"j"],[139,29,147,27],[139,31,147,29,"i"],[139,32,147,30],[139,36,147,34],[139,37,147,35],[139,39,147,37],[140,10,148,8],[140,16,148,14,"dot"],[140,19,148,17],[140,22,148,20,"q"],[140,23,148,21],[140,24,148,22,"getRow"],[140,30,148,28],[140,31,148,29,"j"],[140,32,148,30],[140,33,148,31],[140,34,148,32,"dot"],[140,37,148,35],[140,38,148,36,"q"],[140,39,148,37],[140,40,148,38,"getRow"],[140,46,148,44],[140,47,148,45,"i"],[140,48,148,46],[140,49,148,47],[140,50,148,48],[141,10,150,8],[141,15,150,13],[141,19,150,17,"h"],[141,20,150,18],[141,23,150,21],[141,24,150,22],[141,26,150,24,"h"],[141,27,150,25],[141,30,150,28,"m"],[141,31,150,29],[141,33,150,31,"h"],[141,34,150,32],[141,38,150,36],[141,39,150,37],[141,41,150,39],[142,12,151,10,"q"],[142,13,151,11],[142,14,151,12,"set"],[142,17,151,15],[142,18,151,16,"j"],[142,19,151,17],[142,21,151,19,"h"],[142,22,151,20],[142,24,151,22,"q"],[142,25,151,23],[142,26,151,24,"get"],[142,29,151,27],[142,30,151,28,"j"],[142,31,151,29],[142,33,151,31,"h"],[142,34,151,32],[142,35,151,33],[142,38,151,36,"dot"],[142,41,151,39],[142,44,151,42,"q"],[142,45,151,43],[142,46,151,44,"get"],[142,49,151,47],[142,50,151,48,"i"],[142,51,151,49],[142,53,151,51,"h"],[142,54,151,52],[142,55,151,53],[142,56,151,54],[143,10,152,8],[144,8,153,6],[145,8,155,6],[145,14,155,12,"norm"],[145,18,155,16],[145,21,155,19,"q"],[145,22,155,20],[145,23,155,21,"getRow"],[145,29,155,27],[145,30,155,28,"j"],[145,31,155,29],[145,32,155,30],[145,33,155,31,"norm"],[145,37,155,35],[145,38,155,36],[145,39,155,37],[146,8,157,6],[146,12,157,10,"norm"],[146,16,157,14],[146,19,157,17,"precisionErrorTolerance"],[146,42,157,40],[146,44,157,42],[147,10,158,8],[148,10,159,8],[148,17,159,15],[148,21,159,19],[149,8,160,6],[150,8,162,6],[150,14,162,12,"inverseNorm"],[150,25,162,23],[150,28,162,26],[150,31,162,29],[150,34,162,32,"norm"],[150,38,162,36],[151,8,164,6],[151,13,164,11],[151,17,164,15,"h"],[151,18,164,16],[151,21,164,19],[151,22,164,20],[151,24,164,22,"h"],[151,25,164,23],[151,28,164,26,"m"],[151,29,164,27],[151,31,164,29,"h"],[151,32,164,30],[151,36,164,34],[151,37,164,35],[151,39,164,37],[152,10,165,8,"q"],[152,11,165,9],[152,12,165,10,"set"],[152,15,165,13],[152,16,165,14,"j"],[152,17,165,15],[152,19,165,17,"h"],[152,20,165,18],[152,22,165,20,"q"],[152,23,165,21],[152,24,165,22,"get"],[152,27,165,25],[152,28,165,26,"j"],[152,29,165,27],[152,31,165,29,"h"],[152,32,165,30],[152,33,165,31],[152,36,165,34,"inverseNorm"],[152,47,165,45],[152,48,165,46],[153,8,166,6],[154,8,168,6],[154,13,168,11],[154,17,168,15,"i"],[154,18,168,16],[154,21,168,19],[154,22,168,20],[154,24,168,22,"i"],[154,25,168,23],[154,28,168,26,"n"],[154,29,168,27],[154,31,168,29,"i"],[154,32,168,30],[154,36,168,34],[154,37,168,35],[154,39,168,37],[155,10,169,8,"r"],[155,11,169,9],[155,12,169,10,"set"],[155,15,169,13],[155,16,169,14,"j"],[155,17,169,15],[155,19,169,17,"i"],[155,20,169,18],[155,22,169,20,"i"],[155,23,169,21],[155,26,169,24,"j"],[155,27,169,25],[155,30,169,28],[155,33,169,31],[155,36,169,34,"q"],[155,37,169,35],[155,38,169,36,"getRow"],[155,44,169,42],[155,45,169,43,"j"],[155,46,169,44],[155,47,169,45],[155,48,169,46,"dot"],[155,51,169,49],[155,52,169,50,"a"],[155,53,169,51],[155,54,169,52,"getRow"],[155,60,169,58],[155,61,169,59,"i"],[155,62,169,60],[155,63,169,61],[155,64,169,62],[155,65,169,63],[156,8,170,6],[157,6,171,4],[157,7,171,5],[157,8,171,6],[158,6,172,4],[160,6,175,4],[160,12,175,10,"wy"],[160,14,175,12],[160,17,175,15],[160,21,175,19,"Vector"],[160,27,175,25],[160,28,175,26,"m"],[160,29,175,27],[160,30,175,28],[161,6,177,4],[161,11,177,9],[161,15,177,13,"h"],[161,16,177,14],[161,19,177,17],[161,20,177,18],[161,22,177,20,"h"],[161,23,177,21],[161,26,177,24,"m"],[161,27,177,25],[161,29,177,27,"h"],[161,30,177,28],[161,34,177,32],[161,35,177,33],[161,37,177,35],[162,8,178,6,"wy"],[162,10,178,8],[162,11,178,9,"set"],[162,14,178,12],[162,15,178,13,"h"],[162,16,178,14],[162,18,178,16],[162,22,178,20],[162,23,178,21,"y"],[162,24,178,22],[162,25,178,23,"h"],[162,26,178,24],[162,27,178,25],[162,30,178,28],[162,34,178,32],[162,35,178,33,"w"],[162,36,178,34],[162,37,178,35,"h"],[162,38,178,36],[162,39,178,37],[162,40,178,38],[163,6,179,4],[164,6,181,4],[164,11,181,9],[164,15,181,13,"i"],[164,16,181,14],[164,19,181,17,"n"],[164,20,181,18],[164,23,181,21],[164,24,181,22],[164,26,181,24,"i"],[164,27,181,25],[164,31,181,29],[164,32,181,30],[164,34,181,32,"i"],[164,35,181,33],[164,39,181,37],[164,40,181,38],[164,42,181,40],[165,8,182,6,"result"],[165,14,182,12],[165,15,182,13,"coefficients"],[165,27,182,25],[165,28,182,26,"i"],[165,29,182,27],[165,30,182,28],[165,33,182,31,"q"],[165,34,182,32],[165,35,182,33,"getRow"],[165,41,182,39],[165,42,182,40,"i"],[165,43,182,41],[165,44,182,42],[165,45,182,43,"dot"],[165,48,182,46],[165,49,182,47,"wy"],[165,51,182,49],[165,52,182,50],[166,8,184,6],[166,13,184,11],[166,17,184,15,"j"],[166,18,184,16],[166,21,184,19,"n"],[166,22,184,20],[166,25,184,23],[166,26,184,24],[166,28,184,26,"j"],[166,29,184,27],[166,32,184,30,"i"],[166,33,184,31],[166,35,184,33,"j"],[166,36,184,34],[166,40,184,38],[166,41,184,39],[166,43,184,41],[167,10,185,8,"result"],[167,16,185,14],[167,17,185,15,"coefficients"],[167,29,185,27],[167,30,185,28,"i"],[167,31,185,29],[167,32,185,30],[167,36,185,34,"r"],[167,37,185,35],[167,38,185,36,"get"],[167,41,185,39],[167,42,185,40,"i"],[167,43,185,41],[167,45,185,43,"j"],[167,46,185,44],[167,47,185,45],[167,50,185,48,"result"],[167,56,185,54],[167,57,185,55,"coefficients"],[167,69,185,67],[167,70,185,68,"j"],[167,71,185,69],[167,72,185,70],[168,8,186,6],[169,8,188,6,"result"],[169,14,188,12],[169,15,188,13,"coefficients"],[169,27,188,25],[169,28,188,26,"i"],[169,29,188,27],[169,30,188,28],[169,34,188,32,"r"],[169,35,188,33],[169,36,188,34,"get"],[169,39,188,37],[169,40,188,38,"i"],[169,41,188,39],[169,43,188,41,"i"],[169,44,188,42],[169,45,188,43],[170,6,189,4],[171,6,191,4],[171,13,191,11,"result"],[171,19,191,17],[172,4,192,2],[173,2,194,0],[174,0,194,1],[174,3]],"functionMap":{"names":["_defineProperty","<global>","Vector","Vector#constructor","Vector.fromVOL","Vector#get","Vector#set","Vector#dot","Vector#norm","Matrix","Matrix#constructor","Matrix#get","Matrix#set","Matrix#getRow","PolynomialFit","PolynomialFit#constructor","LeastSquareSolver","constructor","solve"],"mappings":"AAA,iNC;ACI;ECC;GDU;EEE;GFM;EGE;GHE;EIE;GJE;EKE;GLQ;EME;GNE;CDE;AQE;ECC;GDO;EEE;GFE;EGE;GHE;EIE;GJE;CRE;AaG;ECQ;GDI;CbE;eeI;ECO;GDU;EEK;GF6E;CfE"},"hasCjsExports":false},"type":"js/module"}]}