{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"],"imports":1}},{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":112},"end":{"line":5,"column":36,"index":148}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":196},"end":{"line":7,"column":33,"index":229}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":230},"end":{"line":8,"column":39,"index":269}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":270},"end":{"line":9,"column":45,"index":315}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"],"imports":1}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":316},"end":{"line":10,"column":55,"index":371}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable */\n  /* eslint-disable */\n  const _excluded = [\"enabled\"];\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _babelRuntimeHelpersObjectWithoutPropertiesLoose = require(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\n  var _objectWithoutPropertiesLoose = _interopDefault(_babelRuntimeHelpersObjectWithoutPropertiesLoose);\n  var _egjsHammerjs = require(_dependencyMap[1], \"@egjs/hammerjs\");\n  var Hammer = _interopDefault(_egjsHammerjs);\n  var _reactNativeWebDistExportsFindNodeHandle = require(_dependencyMap[2], \"react-native-web/dist/exports/findNodeHandle\");\n  var findNodeHandle = _interopDefault(_reactNativeWebDistExportsFindNodeHandle);\n  var _State = require(_dependencyMap[3], \"../State\");\n  var _constants = require(_dependencyMap[4], \"./constants\");\n  var _NodeManager = require(_dependencyMap[5], \"./NodeManager\");\n  var NodeManager = _interopNamespace(_NodeManager);\n  var _ghQueueMicrotask = require(_dependencyMap[6], \"../ghQueueMicrotask\");\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\n  let gestureInstances = 0;\n  class GestureHandler {\n    isGestureRunning = false;\n    view = null;\n    hasGestureFailed = false;\n    hammer = null;\n    initialRotation = null;\n    config = {};\n    previousState = _State.State.UNDETERMINED;\n    pendingGestures = {};\n    oldState = _State.State.UNDETERMINED;\n    lastSentState = null;\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    }\n\n    // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    clearSelfAsPending = () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    };\n    updateGestureConfig(_ref) {\n      let {\n          enabled = true\n        } = _ref,\n        props = (0, _objectWithoutPropertiesLoose.default)(_ref, _excluded);\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig(Object.assign({\n        enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    destroy = () => {\n      this.clearSelfAsPending();\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n      this.hammer = null;\n    };\n    isPointInView = ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event;\n      // const direction = DirectionMap[ev.direction];\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n\n      // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: Object.assign({\n          numberOfPointers,\n          state,\n          pointerInside\n        }, this.transformNativeEvent(event), {\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    sendEvent = nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n\n    // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(Object.assign({}, event, {\n        eventType: Hammer.default.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      return config.simultaneousHandlers?.some(handler => handler.isNative) ?? false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n\n      // @ts-ignore\n      this.view = (0, findNodeHandle.default)(ref);\n\n      // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new Hammer.default.Manager(this.view, {\n        inputClass: Hammer.default.TouchInput\n      }) : new Hammer.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this;\n      // @ts-ignore TODO(TS)\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev);\n\n        // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    sync = () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        }\n\n        // Prevent events before the system is ready.\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n        if (this.hasGestureFailed) {\n          return false;\n        }\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          }\n          // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n          this._stillWaiting = this._getPendingGestures();\n          // This gesture should continue waiting.\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            }\n            // This gesture shouldn't start until the others have finished.\n            return false;\n          }\n        }\n\n        // Use default behaviour\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n        // @ts-ignore FIXME(TS)\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, Object.assign({}, inputData, {\n          deltaRotation\n        }));\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      const params = this.getHammerConfig();\n      // @ts-ignore FIXME(TS)\n      gesture.set(Object.assign({}, params, {\n        enable\n      }));\n    };\n    simulateCancelEvent(_inputData) {}\n\n    // Validate the props\n    ensureConfig(config) {\n      const props = Object.assign({}, config);\n\n      // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  }\n\n  // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = GestureHandler;\n});","lineCount":508,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,4,0],[6,8,4,0,"_excluded"],[6,17,4,0],[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"value"],[8,9,4,0],[9,2,4,0],[10,2,4,0],[10,11,4,0,"_interopDefault"],[10,27,4,0,"e"],[10,28,4,0],[11,4,4,0],[11,11,4,0,"e"],[11,12,4,0],[11,16,4,0,"e"],[11,17,4,0],[11,18,4,0,"__esModule"],[11,28,4,0],[11,31,4,0,"e"],[11,32,4,0],[12,6,4,0,"default"],[12,13,4,0],[12,15,4,0,"e"],[13,4,4,0],[14,2,4,0],[15,2,4,0],[15,11,4,0,"_interopNamespace"],[15,29,4,0,"e"],[15,30,4,0],[16,4,4,0],[16,8,4,0,"e"],[16,9,4,0],[16,13,4,0,"e"],[16,14,4,0],[16,15,4,0,"__esModule"],[16,25,4,0],[16,34,4,0,"e"],[16,35,4,0],[17,4,4,0],[17,8,4,0,"n"],[17,9,4,0],[18,4,4,0],[18,8,4,0,"e"],[18,9,4,0],[18,11,4,0,"Object"],[18,17,4,0],[18,18,4,0,"keys"],[18,22,4,0],[18,23,4,0,"e"],[18,24,4,0],[18,26,4,0,"forEach"],[18,33,4,0],[18,44,4,0,"k"],[18,45,4,0],[19,6,4,0],[19,10,4,0,"d"],[19,11,4,0],[19,14,4,0,"Object"],[19,20,4,0],[19,21,4,0,"getOwnPropertyDescriptor"],[19,45,4,0],[19,46,4,0,"e"],[19,47,4,0],[19,49,4,0,"k"],[19,50,4,0],[20,6,4,0,"Object"],[20,12,4,0],[20,13,4,0,"defineProperty"],[20,27,4,0],[20,28,4,0,"n"],[20,29,4,0],[20,31,4,0,"k"],[20,32,4,0],[20,34,4,0,"d"],[20,35,4,0],[20,36,4,0,"get"],[20,39,4,0],[20,42,4,0,"d"],[20,43,4,0],[21,8,4,0,"enumerable"],[21,18,4,0],[22,8,4,0,"get"],[22,11,4,0],[22,22,4,0,"get"],[22,23,4,0],[23,10,4,0],[23,17,4,0,"e"],[23,18,4,0],[23,19,4,0,"k"],[23,20,4,0],[24,8,4,0],[25,6,4,0],[26,4,4,0],[27,4,4,0,"n"],[27,5,4,0],[27,6,4,0,"default"],[27,13,4,0],[27,16,4,0,"e"],[27,17,4,0],[28,4,4,0],[28,11,4,0,"n"],[28,12,4,0],[29,2,4,0],[30,2,477,0,"Object"],[30,8,477,0],[30,9,477,0,"defineProperty"],[30,23,477,0],[30,24,477,0,"exports"],[30,31,477,0],[31,4,477,0,"enumerable"],[31,14,477,0],[32,4,477,0,"get"],[32,7,477,0],[32,18,477,0,"get"],[32,19,477,0],[33,6,477,0],[33,13,477,0,"_default"],[33,21,477,0],[34,4,477,0],[35,2,477,0],[36,2,477,30],[36,6,477,30,"_babelRuntimeHelpersObjectWithoutPropertiesLoose"],[36,54,477,30],[36,57,477,30,"require"],[36,64,477,30],[36,65,477,30,"_dependencyMap"],[36,79,477,30],[37,2,477,30],[37,6,477,30,"_objectWithoutPropertiesLoose"],[37,35,477,30],[37,38,477,30,"_interopDefault"],[37,53,477,30],[37,54,477,30,"_babelRuntimeHelpersObjectWithoutPropertiesLoose"],[37,102,477,30],[38,2,5,0],[38,6,5,0,"_egjsHammerjs"],[38,19,5,0],[38,22,5,0,"require"],[38,29,5,0],[38,30,5,0,"_dependencyMap"],[38,44,5,0],[39,2,5,0],[39,6,5,0,"Hammer"],[39,12,5,0],[39,15,5,0,"_interopDefault"],[39,30,5,0],[39,31,5,0,"_egjsHammerjs"],[39,44,5,0],[40,2,5,36],[40,6,5,36,"_reactNativeWebDistExportsFindNodeHandle"],[40,46,5,36],[40,49,5,36,"require"],[40,56,5,36],[40,57,5,36,"_dependencyMap"],[40,71,5,36],[41,2,5,36],[41,6,5,36,"findNodeHandle"],[41,20,5,36],[41,23,5,36,"_interopDefault"],[41,38,5,36],[41,39,5,36,"_reactNativeWebDistExportsFindNodeHandle"],[41,79,5,36],[42,2,7,0],[42,6,7,0,"_State"],[42,12,7,0],[42,15,7,0,"require"],[42,22,7,0],[42,23,7,0,"_dependencyMap"],[42,37,7,0],[43,2,8,0],[43,6,8,0,"_constants"],[43,16,8,0],[43,19,8,0,"require"],[43,26,8,0],[43,27,8,0,"_dependencyMap"],[43,41,8,0],[44,2,9,0],[44,6,9,0,"_NodeManager"],[44,18,9,0],[44,21,9,0,"require"],[44,28,9,0],[44,29,9,0,"_dependencyMap"],[44,43,9,0],[45,2,9,0],[45,6,9,0,"NodeManager"],[45,17,9,0],[45,20,9,0,"_interopNamespace"],[45,37,9,0],[45,38,9,0,"_NodeManager"],[45,50,9,0],[46,2,10,0],[46,6,10,0,"_ghQueueMicrotask"],[46,23,10,0],[46,26,10,0,"require"],[46,33,10,0],[46,34,10,0,"_dependencyMap"],[46,48,10,0],[47,2,12,0],[49,2,14,0],[49,6,14,4,"gestureInstances"],[49,22,14,20],[49,25,14,23],[49,26,14,24],[50,2,15,0],[50,8,15,6,"GestureHandler"],[50,22,15,20],[50,23,15,21],[51,4,16,2,"isGestureRunning"],[51,20,16,18],[51,23,16,21],[51,28,16,26],[52,4,17,2,"view"],[52,8,17,6],[52,11,17,9],[52,15,17,13],[53,4,18,2,"hasGestureFailed"],[53,20,18,18],[53,23,18,21],[53,28,18,26],[54,4,19,2,"hammer"],[54,10,19,8],[54,13,19,11],[54,17,19,15],[55,4,20,2,"initialRotation"],[55,19,20,17],[55,22,20,20],[55,26,20,24],[56,4,21,2,"config"],[56,10,21,8],[56,13,21,11],[56,14,21,12],[56,15,21,13],[57,4,22,2,"previousState"],[57,17,22,15],[57,20,22,18,"State"],[57,26,22,23],[57,27,22,23,"State"],[57,32,22,23],[57,33,22,24,"UNDETERMINED"],[57,45,22,36],[58,4,23,2,"pendingGestures"],[58,19,23,17],[58,22,23,20],[58,23,23,21],[58,24,23,22],[59,4,24,2,"oldState"],[59,12,24,10],[59,15,24,13,"State"],[59,21,24,18],[59,22,24,18,"State"],[59,27,24,18],[59,28,24,19,"UNDETERMINED"],[59,40,24,31],[60,4,25,2,"lastSentState"],[60,17,25,15],[60,20,25,18],[60,24,25,22],[61,4,26,2],[61,8,26,6,"id"],[61,10,26,8,"id"],[61,11,26,8],[61,13,26,11],[62,6,27,4],[62,13,27,11],[62,16,27,14],[62,20,27,18],[62,21,27,19,"name"],[62,25,27,23],[62,28,27,26],[62,32,27,30],[62,33,27,31,"gestureInstance"],[62,48,27,46],[62,50,27,48],[63,4,28,2],[65,4,30,2],[66,4,31,2],[67,4,32,2],[67,8,32,6,"isNative"],[67,16,32,14,"isNative"],[67,17,32,14],[67,19,32,17],[68,6,33,4],[68,13,33,11],[68,18,33,16],[69,4,34,2],[70,4,35,2],[70,8,35,6,"isDiscrete"],[70,18,35,16,"isDiscrete"],[70,19,35,16],[70,21,35,19],[71,6,36,4],[71,13,36,11],[71,18,36,16],[72,4,37,2],[73,4,38,2],[73,8,38,6,"shouldEnableGestureOnSetup"],[73,34,38,32,"shouldEnableGestureOnSetup"],[73,35,38,32],[73,37,38,35],[74,6,39,4],[74,12,39,10],[74,16,39,14,"Error"],[74,21,39,19],[74,22,39,20],[74,79,39,77],[74,80,39,78],[75,4,40,2],[76,4,41,2,"constructor"],[76,15,41,13,"constructor"],[76,16,41,13],[76,18,41,16],[77,6,42,4],[77,10,42,8],[77,11,42,9,"gestureInstance"],[77,26,42,24],[77,29,42,27,"gestureInstances"],[77,45,42,43],[77,47,42,45],[78,6,43,4],[78,10,43,8],[78,11,43,9,"hasCustomActivationCriteria"],[78,38,43,36],[78,41,43,39],[78,46,43,44],[79,4,44,2],[80,4,45,2,"getConfig"],[80,13,45,11,"getConfig"],[80,14,45,11],[80,16,45,14],[81,6,46,4],[81,13,46,11],[81,17,46,15],[81,18,46,16,"config"],[81,24,46,22],[82,4,47,2],[83,4,48,2,"onWaitingEnded"],[83,18,48,16,"onWaitingEnded"],[83,19,48,17,"_gesture"],[83,27,48,25],[83,29,48,27],[83,30,48,28],[84,4,49,2,"removePendingGesture"],[84,24,49,22,"removePendingGesture"],[84,25,49,23,"id"],[84,27,49,25],[84,29,49,27],[85,6,50,4],[85,13,50,11],[85,17,50,15],[85,18,50,16,"pendingGestures"],[85,33,50,31],[85,34,50,32,"id"],[85,36,50,34],[85,37,50,35],[86,4,51,2],[87,4,52,2,"addPendingGesture"],[87,21,52,19,"addPendingGesture"],[87,22,52,20,"gesture"],[87,29,52,27],[87,31,52,29],[88,6,53,4],[88,10,53,8],[88,11,53,9,"pendingGestures"],[88,26,53,24],[88,27,53,25,"gesture"],[88,34,53,32],[88,35,53,33,"id"],[88,37,53,35],[88,38,53,36],[88,41,53,39,"gesture"],[88,48,53,46],[89,4,54,2],[90,4,55,2,"isGestureEnabledForEvent"],[90,28,55,26,"isGestureEnabledForEvent"],[90,29,55,27,"_config"],[90,36,55,34],[90,38,55,36,"_recognizer"],[90,49,55,47],[90,51,55,49,"_event"],[90,57,55,55],[90,59,55,57],[91,6,56,4],[91,13,56,11],[92,8,57,6,"success"],[92,15,57,13],[92,17,57,15],[93,6,58,4],[93,7,58,5],[94,4,59,2],[95,4,60,2],[95,8,60,6,"NativeGestureClass"],[95,26,60,24,"NativeGestureClass"],[95,27,60,24],[95,29,60,27],[96,6,61,4],[96,12,61,10],[96,16,61,14,"Error"],[96,21,61,19],[96,22,61,20],[96,71,61,69],[96,72,61,70],[97,4,62,2],[98,4,63,2,"updateHasCustomActivationCriteria"],[98,37,63,35,"updateHasCustomActivationCriteria"],[98,38,63,36,"_config"],[98,45,63,43],[98,47,63,45],[99,6,64,4],[99,13,64,11],[99,17,64,15],[100,4,65,2],[101,4,66,2,"clearSelfAsPending"],[101,22,66,20],[101,25,66,23,"clearSelfAsPending"],[101,26,66,23],[101,31,66,29],[102,6,67,4],[102,10,67,8,"Array"],[102,15,67,13],[102,16,67,14,"isArray"],[102,23,67,21],[102,24,67,22],[102,28,67,26],[102,29,67,27,"config"],[102,35,67,33],[102,36,67,34,"waitFor"],[102,43,67,41],[102,44,67,42],[102,46,67,44],[103,8,68,6],[103,13,68,11],[103,19,68,17,"gesture"],[103,26,68,24],[103,30,68,28],[103,34,68,32],[103,35,68,33,"config"],[103,41,68,39],[103,42,68,40,"waitFor"],[103,49,68,47],[103,51,68,49],[104,10,69,8,"gesture"],[104,17,69,15],[104,18,69,16,"removePendingGesture"],[104,38,69,36],[104,39,69,37],[104,43,69,41],[104,44,69,42,"id"],[104,46,69,44],[104,47,69,45],[105,8,70,6],[106,6,71,4],[107,4,72,2],[107,5,72,3],[108,4,73,2,"updateGestureConfig"],[108,23,73,21,"updateGestureConfig"],[108,24,73,21,"_ref"],[108,28,73,21],[108,30,76,5],[109,6,76,5],[109,10,73,22],[110,10,74,4,"enabled"],[110,17,74,11],[110,20,74,14],[111,8,76,2],[111,9,76,3],[111,12,76,3,"_ref"],[111,16,76,3],[112,8,75,7,"props"],[112,13,75,12],[112,20,75,12,"_objectWithoutPropertiesLoose"],[112,49,75,12],[112,50,75,12,"default"],[112,57,75,12],[112,59,75,12,"_ref"],[112,63,75,12],[112,65,75,12,"_excluded"],[112,74,75,12],[113,6,77,4],[113,10,77,8],[113,11,77,9,"clearSelfAsPending"],[113,29,77,27],[113,30,77,28],[113,31,77,29],[114,6,78,4],[114,10,78,8],[114,11,78,9,"config"],[114,17,78,15],[114,20,78,18],[114,24,78,22],[114,25,78,23,"ensureConfig"],[114,37,78,35],[114,38,78,35,"Object"],[114,44,78,35],[114,45,78,35,"assign"],[114,51,78,35],[115,8,79,6,"enabled"],[116,6,79,13],[116,9,80,9,"props"],[116,14,80,14],[116,15,81,5],[116,16,81,6],[117,6,82,4],[117,10,82,8],[117,11,82,9,"hasCustomActivationCriteria"],[117,38,82,36],[117,41,82,39],[117,45,82,43],[117,46,82,44,"updateHasCustomActivationCriteria"],[117,79,82,77],[117,80,82,78],[117,84,82,82],[117,85,82,83,"config"],[117,91,82,89],[117,92,82,90],[118,6,83,4],[118,10,83,8,"Array"],[118,15,83,13],[118,16,83,14,"isArray"],[118,23,83,21],[118,24,83,22],[118,28,83,26],[118,29,83,27,"config"],[118,35,83,33],[118,36,83,34,"waitFor"],[118,43,83,41],[118,44,83,42],[118,46,83,44],[119,8,84,6],[119,13,84,11],[119,19,84,17,"gesture"],[119,26,84,24],[119,30,84,28],[119,34,84,32],[119,35,84,33,"config"],[119,41,84,39],[119,42,84,40,"waitFor"],[119,49,84,47],[119,51,84,49],[120,10,85,8,"gesture"],[120,17,85,15],[120,18,85,16,"addPendingGesture"],[120,35,85,33],[120,36,85,34],[120,40,85,38],[120,41,85,39],[121,8,86,6],[122,6,87,4],[123,6,88,4],[123,10,88,8],[123,14,88,12],[123,15,88,13,"hammer"],[123,21,88,19],[123,23,88,21],[124,8,89,6],[124,12,89,10],[124,13,89,11,"sync"],[124,17,89,15],[124,18,89,16],[124,19,89,17],[125,6,90,4],[126,6,91,4],[126,13,91,11],[126,17,91,15],[126,18,91,16,"config"],[126,24,91,22],[127,4,92,2],[128,4,93,2,"destroy"],[128,11,93,9],[128,14,93,12,"destroy"],[128,15,93,12],[128,20,93,18],[129,6,94,4],[129,10,94,8],[129,11,94,9,"clearSelfAsPending"],[129,29,94,27],[129,30,94,28],[129,31,94,29],[130,6,95,4],[130,10,95,8],[130,14,95,12],[130,15,95,13,"hammer"],[130,21,95,19],[130,23,95,21],[131,8,96,6],[131,12,96,10],[131,13,96,11,"hammer"],[131,19,96,17],[131,20,96,18,"stop"],[131,24,96,22],[131,25,96,23],[131,30,96,28],[131,31,96,29],[132,8,97,6],[132,12,97,10],[132,13,97,11,"hammer"],[132,19,97,17],[132,20,97,18,"destroy"],[132,27,97,25],[132,28,97,26],[132,29,97,27],[133,6,98,4],[134,6,99,4],[134,10,99,8],[134,11,99,9,"hammer"],[134,17,99,15],[134,20,99,18],[134,24,99,22],[135,4,100,2],[135,5,100,3],[136,4,101,2,"isPointInView"],[136,17,101,15],[136,20,101,18,"isPointInView"],[136,21,101,19],[137,6,102,4,"x"],[137,7,102,5],[138,6,103,4,"y"],[139,4,104,2],[139,5,104,3],[139,10,104,8],[140,6,105,4],[141,6,106,4],[141,12,106,10,"rect"],[141,16,106,14],[141,19,106,17],[141,23,106,21],[141,24,106,22,"view"],[141,28,106,26],[141,29,106,27,"getBoundingClientRect"],[141,50,106,48],[141,51,106,49],[141,52,106,50],[142,6,107,4],[142,12,107,10,"pointerInside"],[142,25,107,23],[142,28,107,26,"x"],[142,29,107,27],[142,33,107,31,"rect"],[142,37,107,35],[142,38,107,36,"left"],[142,42,107,40],[142,46,107,44,"x"],[142,47,107,45],[142,51,107,49,"rect"],[142,55,107,53],[142,56,107,54,"right"],[142,61,107,59],[142,65,107,63,"y"],[142,66,107,64],[142,70,107,68,"rect"],[142,74,107,72],[142,75,107,73,"top"],[142,78,107,76],[142,82,107,80,"y"],[142,83,107,81],[142,87,107,85,"rect"],[142,91,107,89],[142,92,107,90,"bottom"],[142,98,107,96],[143,6,108,4],[143,13,108,11,"pointerInside"],[143,26,108,24],[144,4,109,2],[144,5,109,3],[145,4,110,2,"getState"],[145,12,110,10,"getState"],[145,13,110,11,"type"],[145,17,110,15],[145,19,110,17],[146,6,111,4],[147,6,112,4],[147,10,112,8,"type"],[147,14,112,12],[147,18,112,16],[147,19,112,17],[147,21,112,19],[148,8,113,6],[148,15,113,13],[148,16,113,14],[149,6,114,4],[150,6,115,4],[150,13,115,11,"EventMap"],[150,23,115,19],[150,24,115,19,"EventMap"],[150,32,115,19],[150,33,115,20,"type"],[150,37,115,24],[150,38,115,25],[151,4,116,2],[152,4,117,2,"transformEventData"],[152,22,117,20,"transformEventData"],[152,23,117,21,"event"],[152,28,117,26],[152,30,117,28],[153,6,118,4],[153,12,118,10],[154,8,119,6,"eventType"],[154,17,119,15],[155,8,120,6,"maxPointers"],[155,19,120,17],[155,21,120,19,"numberOfPointers"],[156,6,121,4],[156,7,121,5],[156,10,121,8,"event"],[156,15,121,13],[157,6,122,4],[158,6,123,4],[158,12,123,10,"changedTouch"],[158,24,123,22],[158,27,123,25,"event"],[158,32,123,30],[158,33,123,31,"changedPointers"],[158,48,123,46],[158,49,123,47],[158,50,123,48],[158,51,123,49],[159,6,124,4],[159,12,124,10,"pointerInside"],[159,25,124,23],[159,28,124,26],[159,32,124,30],[159,33,124,31,"isPointInView"],[159,46,124,44],[159,47,124,45],[160,8,125,6,"x"],[160,9,125,7],[160,11,125,9,"changedTouch"],[160,23,125,21],[160,24,125,22,"clientX"],[160,31,125,29],[161,8,126,6,"y"],[161,9,126,7],[161,11,126,9,"changedTouch"],[161,23,126,21],[161,24,126,22,"clientY"],[162,6,127,4],[162,7,127,5],[162,8,127,6],[164,6,129,4],[165,6,130,4],[165,12,130,10,"state"],[165,17,130,15],[165,20,130,18],[165,24,130,22],[165,25,130,23,"getState"],[165,33,130,31],[165,34,130,32,"eventType"],[165,43,130,41],[165,44,130,42],[166,6,131,4],[166,10,131,8,"state"],[166,15,131,13],[166,20,131,18],[166,24,131,22],[166,25,131,23,"previousState"],[166,38,131,36],[166,40,131,38],[167,8,132,6],[167,12,132,10],[167,13,132,11,"oldState"],[167,21,132,19],[167,24,132,22],[167,28,132,26],[167,29,132,27,"previousState"],[167,42,132,40],[168,8,133,6],[168,12,133,10],[168,13,133,11,"previousState"],[168,26,133,24],[168,29,133,27,"state"],[168,34,133,32],[169,6,134,4],[170,6,135,4],[170,13,135,11],[171,8,136,6,"nativeEvent"],[171,19,136,17],[171,21,136,17,"Object"],[171,27,136,17],[171,28,136,17,"assign"],[171,34,136,17],[172,10,137,8,"numberOfPointers"],[172,26,137,24],[173,10,138,8,"state"],[173,15,138,13],[174,10,139,8,"pointerInside"],[175,8,139,21],[175,11,140,11],[175,15,140,15],[175,16,140,16,"transformNativeEvent"],[175,36,140,36],[175,37,140,37,"event"],[175,42,140,42],[175,43,140,43],[176,10,141,8],[177,10,142,8,"handlerTag"],[177,20,142,18],[177,22,142,20],[177,26,142,24],[177,27,142,25,"handlerTag"],[177,37,142,35],[178,10,143,8,"target"],[178,16,143,14],[178,18,143,16],[178,22,143,20],[178,23,143,21,"ref"],[178,26,143,24],[179,10,144,8],[180,10,145,8],[181,10,146,8],[182,10,147,8,"oldState"],[182,18,147,16],[182,20,147,18,"state"],[182,25,147,23],[182,30,147,28],[182,34,147,32],[182,35,147,33,"previousState"],[182,48,147,46],[182,52,147,50,"state"],[182,57,147,55],[182,61,147,59],[182,62,147,60],[182,65,147,63],[182,69,147,67],[182,70,147,68,"oldState"],[182,78,147,76],[182,81,147,79,"undefined"],[183,8,147,88],[183,10,148,7],[184,8,149,6,"timeStamp"],[184,17,149,15],[184,19,149,17,"Date"],[184,23,149,21],[184,24,149,22,"now"],[184,27,149,25],[184,28,149,26],[185,6,150,4],[185,7,150,5],[186,4,151,2],[187,4,152,2,"transformNativeEvent"],[187,24,152,22,"transformNativeEvent"],[187,25,152,23,"_event"],[187,31,152,29],[187,33,152,31],[188,6,153,4],[188,13,153,11],[188,14,153,12],[188,15,153,13],[189,4,154,2],[190,4,155,2,"sendEvent"],[190,13,155,11],[190,16,155,14,"nativeEvent"],[190,27,155,25],[190,31,155,29],[191,6,156,4],[191,12,156,10],[192,8,157,6,"onGestureHandlerEvent"],[192,29,157,27],[193,8,158,6,"onGestureHandlerStateChange"],[194,6,159,4],[194,7,159,5],[194,10,159,8],[194,14,159,12],[194,15,159,13,"propsRef"],[194,23,159,21],[194,24,159,22,"current"],[194,31,159,29],[195,6,160,4],[195,12,160,10,"event"],[195,17,160,15],[195,20,160,18],[195,24,160,22],[195,25,160,23,"transformEventData"],[195,43,160,41],[195,44,160,42,"nativeEvent"],[195,55,160,53],[195,56,160,54],[196,6,161,4,"invokeNullableMethod"],[196,26,161,24],[196,27,161,25,"onGestureHandlerEvent"],[196,48,161,46],[196,50,161,48,"event"],[196,55,161,53],[196,56,161,54],[197,6,162,4],[197,10,162,8],[197,14,162,12],[197,15,162,13,"lastSentState"],[197,28,162,26],[197,33,162,31,"event"],[197,38,162,36],[197,39,162,37,"nativeEvent"],[197,50,162,48],[197,51,162,49,"state"],[197,56,162,54],[197,58,162,56],[198,8,163,6],[198,12,163,10],[198,13,163,11,"lastSentState"],[198,26,163,24],[198,29,163,27,"event"],[198,34,163,32],[198,35,163,33,"nativeEvent"],[198,46,163,44],[198,47,163,45,"state"],[198,52,163,50],[199,8,164,6,"invokeNullableMethod"],[199,28,164,26],[199,29,164,27,"onGestureHandlerStateChange"],[199,56,164,54],[199,58,164,56,"event"],[199,63,164,61],[199,64,164,62],[200,6,165,4],[201,4,166,2],[201,5,166,3],[202,4,167,2,"cancelPendingGestures"],[202,25,167,23,"cancelPendingGestures"],[202,26,167,24,"event"],[202,31,167,29],[202,33,167,31],[203,6,168,4],[203,11,168,9],[203,17,168,15,"gesture"],[203,24,168,22],[203,28,168,26,"Object"],[203,34,168,32],[203,35,168,33,"values"],[203,41,168,39],[203,42,168,40],[203,46,168,44],[203,47,168,45,"pendingGestures"],[203,62,168,60],[203,63,168,61],[203,65,168,63],[204,8,169,6],[204,12,169,10,"gesture"],[204,19,169,17],[204,23,169,21,"gesture"],[204,30,169,28],[204,31,169,29,"isGestureRunning"],[204,47,169,45],[204,49,169,47],[205,10,170,8,"gesture"],[205,17,170,15],[205,18,170,16,"hasGestureFailed"],[205,34,170,32],[205,37,170,35],[205,41,170,39],[206,10,171,8,"gesture"],[206,17,171,15],[206,18,171,16,"cancelEvent"],[206,29,171,27],[206,30,171,28,"event"],[206,35,171,33],[206,36,171,34],[207,8,172,6],[208,6,173,4],[209,4,174,2],[210,4,175,2,"notifyPendingGestures"],[210,25,175,23,"notifyPendingGestures"],[210,26,175,23],[210,28,175,26],[211,6,176,4],[211,11,176,9],[211,17,176,15,"gesture"],[211,24,176,22],[211,28,176,26,"Object"],[211,34,176,32],[211,35,176,33,"values"],[211,41,176,39],[211,42,176,40],[211,46,176,44],[211,47,176,45,"pendingGestures"],[211,62,176,60],[211,63,176,61],[211,65,176,63],[212,8,177,6],[212,12,177,10,"gesture"],[212,19,177,17],[212,21,177,19],[213,10,178,8,"gesture"],[213,17,178,15],[213,18,178,16,"onWaitingEnded"],[213,32,178,30],[213,33,178,31],[213,37,178,35],[213,38,178,36],[214,8,179,6],[215,6,180,4],[216,4,181,2],[218,4,183,2],[219,4,184,2,"onGestureEnded"],[219,18,184,16,"onGestureEnded"],[219,19,184,17,"event"],[219,24,184,22],[219,26,184,24],[220,6,185,4],[220,10,185,8],[220,11,185,9,"isGestureRunning"],[220,27,185,25],[220,30,185,28],[220,35,185,33],[221,6,186,4],[221,10,186,8],[221,11,186,9,"cancelPendingGestures"],[221,32,186,30],[221,33,186,31,"event"],[221,38,186,36],[221,39,186,37],[222,4,187,2],[223,4,188,2,"forceInvalidate"],[223,19,188,17,"forceInvalidate"],[223,20,188,18,"event"],[223,25,188,23],[223,27,188,25],[224,6,189,4],[224,10,189,8],[224,14,189,12],[224,15,189,13,"isGestureRunning"],[224,31,189,29],[224,33,189,31],[225,8,190,6],[225,12,190,10],[225,13,190,11,"hasGestureFailed"],[225,29,190,27],[225,32,190,30],[225,36,190,34],[226,8,191,6],[226,12,191,10],[226,13,191,11,"cancelEvent"],[226,24,191,22],[226,25,191,23,"event"],[226,30,191,28],[226,31,191,29],[227,6,192,4],[228,4,193,2],[229,4,194,2,"cancelEvent"],[229,15,194,13,"cancelEvent"],[229,16,194,14,"event"],[229,21,194,19],[229,23,194,21],[230,6,195,4],[230,10,195,8],[230,11,195,9,"notifyPendingGestures"],[230,32,195,30],[230,33,195,31],[230,34,195,32],[231,6,196,4],[231,10,196,8],[231,11,196,9,"sendEvent"],[231,20,196,18],[231,21,196,18,"Object"],[231,27,196,18],[231,28,196,18,"assign"],[231,34,196,18],[231,39,197,9,"event"],[231,44,197,14],[232,8,198,6,"eventType"],[232,17,198,15],[232,19,198,17,"Hammer"],[232,25,198,23],[232,26,198,23,"default"],[232,33,198,23],[232,34,198,24,"INPUT_CANCEL"],[232,46,198,36],[233,8,199,6,"isFinal"],[233,15,199,13],[233,17,199,15],[234,6,199,19],[234,8,200,5],[234,9,200,6],[235,6,201,4],[235,10,201,8],[235,11,201,9,"onGestureEnded"],[235,25,201,23],[235,26,201,24,"event"],[235,31,201,29],[235,32,201,30],[236,4,202,2],[237,4,203,2,"onRawEvent"],[237,14,203,12,"onRawEvent"],[237,15,203,13],[238,6,204,4,"isFirst"],[239,4,205,2],[239,5,205,3],[239,7,205,5],[240,6,206,4],[240,10,206,8,"isFirst"],[240,17,206,15],[240,19,206,17],[241,8,207,6],[241,12,207,10],[241,13,207,11,"hasGestureFailed"],[241,29,207,27],[241,32,207,30],[241,37,207,35],[242,6,208,4],[243,4,209,2],[244,4,210,2,"shouldUseTouchEvents"],[244,24,210,22,"shouldUseTouchEvents"],[244,25,210,23,"config"],[244,31,210,29],[244,33,210,31],[245,6,211,4],[245,13,211,11,"config"],[245,19,211,17],[245,20,211,18,"simultaneousHandlers"],[245,40,211,38],[245,42,211,40,"some"],[245,46,211,44],[245,47,211,45,"handler"],[245,54,211,52],[245,58,211,56,"handler"],[245,65,211,63],[245,66,211,64,"isNative"],[245,74,211,72],[245,75,211,73],[245,79,211,77],[245,84,211,82],[246,4,212,2],[247,4,213,2,"setView"],[247,11,213,9,"setView"],[247,12,213,10,"ref"],[247,15,213,13],[247,17,213,15,"propsRef"],[247,25,213,23],[247,27,213,25],[248,6,214,4],[248,10,214,8,"ref"],[248,13,214,11],[248,17,214,15],[248,21,214,19],[248,23,214,21],[249,8,215,6],[249,12,215,10],[249,13,215,11,"destroy"],[249,20,215,18],[249,21,215,19],[249,22,215,20],[250,8,216,6],[250,12,216,10],[250,13,216,11,"view"],[250,17,216,15],[250,20,216,18],[250,24,216,22],[251,8,217,6],[252,6,218,4],[254,6,220,4],[255,6,221,4],[255,12,221,10,"SUPPORTS_TOUCH"],[255,26,221,24],[255,29,221,27],[255,43,221,41],[255,47,221,45,"window"],[255,53,221,51],[256,6,222,4],[256,10,222,8],[256,11,222,9,"propsRef"],[256,19,222,17],[256,22,222,20,"propsRef"],[256,30,222,28],[257,6,223,4],[257,10,223,8],[257,11,223,9,"ref"],[257,14,223,12],[257,17,223,15,"ref"],[257,20,223,18],[259,6,225,4],[260,6,226,4],[260,10,226,8],[260,11,226,9,"view"],[260,15,226,13],[260,18,226,16],[260,22,226,16,"findNodeHandle"],[260,36,226,30],[260,37,226,30,"default"],[260,44,226,30],[260,46,226,31,"ref"],[260,49,226,34],[260,50,226,35],[262,6,228,4],[263,6,229,4],[264,6,230,4],[265,6,231,4],[265,10,231,8],[265,11,231,9,"hammer"],[265,17,231,15],[265,20,231,18,"SUPPORTS_TOUCH"],[265,34,231,32],[265,38,231,36],[265,42,231,40],[265,43,231,41,"shouldUseTouchEvents"],[265,63,231,61],[265,64,231,62],[265,68,231,66],[265,69,231,67,"config"],[265,75,231,73],[265,76,231,74],[265,79,231,77],[265,83,231,81,"Hammer"],[265,89,231,87],[265,90,231,87,"default"],[265,97,231,87],[265,98,231,88,"Manager"],[265,105,231,95],[265,106,231,96],[265,110,231,100],[265,111,231,101,"view"],[265,115,231,105],[265,117,231,107],[266,8,232,6,"inputClass"],[266,18,232,16],[266,20,232,18,"Hammer"],[266,26,232,24],[266,27,232,24,"default"],[266,34,232,24],[266,35,232,25,"TouchInput"],[267,6,233,4],[267,7,233,5],[267,8,233,6],[267,11,233,9],[267,15,233,13,"Hammer"],[267,21,233,19],[267,22,233,19,"default"],[267,29,233,19],[267,30,233,20,"Manager"],[267,37,233,27],[267,38,233,28],[267,42,233,32],[267,43,233,33,"view"],[267,47,233,37],[267,48,233,38],[268,6,234,4],[268,10,234,8],[268,11,234,9,"oldState"],[268,19,234,17],[268,22,234,20,"State"],[268,28,234,25],[268,29,234,25,"State"],[268,34,234,25],[268,35,234,26,"UNDETERMINED"],[268,47,234,38],[269,6,235,4],[269,10,235,8],[269,11,235,9,"previousState"],[269,24,235,22],[269,27,235,25,"State"],[269,33,235,30],[269,34,235,30,"State"],[269,39,235,30],[269,40,235,31,"UNDETERMINED"],[269,52,235,43],[270,6,236,4],[270,10,236,8],[270,11,236,9,"lastSentState"],[270,24,236,22],[270,27,236,25],[270,31,236,29],[271,6,237,4],[271,12,237,10],[272,8,238,6,"NativeGestureClass"],[273,6,239,4],[273,7,239,5],[273,10,239,8],[273,14,239,12],[274,6,240,4],[275,6,241,4],[275,12,241,10,"gesture"],[275,19,241,17],[275,22,241,20],[275,26,241,24,"NativeGestureClass"],[275,44,241,42],[275,45,241,43],[275,49,241,47],[275,50,241,48,"getHammerConfig"],[275,65,241,63],[275,66,241,64],[275,67,241,65],[275,68,241,66],[276,6,242,4],[276,10,242,8],[276,11,242,9,"hammer"],[276,17,242,15],[276,18,242,16,"add"],[276,21,242,19],[276,22,242,20,"gesture"],[276,29,242,27],[276,30,242,28],[277,6,243,4],[277,10,243,8],[277,11,243,9,"hammer"],[277,17,243,15],[277,18,243,16,"on"],[277,20,243,18],[277,21,243,19],[277,35,243,33],[277,37,243,35,"ev"],[277,39,243,37],[277,43,243,41],[278,8,244,6],[278,12,244,10],[278,13,244,11],[278,17,244,15],[278,18,244,16,"config"],[278,24,244,22],[278,25,244,23,"enabled"],[278,32,244,30],[278,34,244,32],[279,10,245,8],[279,14,245,12],[279,15,245,13,"hasGestureFailed"],[279,31,245,29],[279,34,245,32],[279,39,245,37],[280,10,246,8],[280,14,246,12],[280,15,246,13,"isGestureRunning"],[280,31,246,29],[280,34,246,32],[280,39,246,37],[281,10,247,8],[282,8,248,6],[283,8,249,6],[283,12,249,10],[283,13,249,11,"onRawEvent"],[283,23,249,21],[283,24,249,22,"ev"],[283,26,249,24],[283,27,249,25],[285,8,251,6],[286,8,252,6],[287,8,253,6],[287,12,253,10],[287,16,253,14],[287,17,253,15,"initialRotation"],[287,32,253,30],[287,37,253,35],[287,41,253,39],[287,45,253,43,"ev"],[287,47,253,45],[287,48,253,46,"rotation"],[287,56,253,54],[287,61,253,59],[287,62,253,60],[287,64,253,62],[288,10,254,8],[288,14,254,12],[288,15,254,13,"initialRotation"],[288,30,254,28],[288,33,254,31,"ev"],[288,35,254,33],[288,36,254,34,"rotation"],[288,44,254,42],[289,8,255,6],[290,8,256,6],[290,12,256,10,"ev"],[290,14,256,12],[290,15,256,13,"isFinal"],[290,22,256,20],[290,24,256,22],[291,10,257,8],[292,10,258,8,"setTimeout"],[292,20,258,18],[292,21,258,19],[292,27,258,25],[293,12,259,10],[293,16,259,14],[293,17,259,15,"initialRotation"],[293,32,259,30],[293,35,259,33],[293,39,259,37],[294,12,260,10],[294,16,260,14],[294,17,260,15,"hasGestureFailed"],[294,33,260,31],[294,36,260,34],[294,41,260,39],[295,10,261,8],[295,11,261,9],[295,12,261,10],[296,8,262,6],[297,6,263,4],[297,7,263,5],[297,8,263,6],[298,6,264,4],[298,10,264,8],[298,11,264,9,"setupEvents"],[298,22,264,20],[298,23,264,21],[298,24,264,22],[299,6,265,4],[299,10,265,8],[299,11,265,9,"sync"],[299,15,265,13],[299,16,265,14],[299,17,265,15],[300,4,266,2],[301,4,267,2,"setupEvents"],[301,15,267,13,"setupEvents"],[301,16,267,13],[301,18,267,16],[302,6,268,4],[303,6,269,4],[303,10,269,8],[303,11,269,9],[303,15,269,13],[303,16,269,14,"isDiscrete"],[303,26,269,24],[303,28,269,26],[304,8,270,6],[304,12,270,10],[304,13,270,11,"hammer"],[304,19,270,17],[304,20,270,18,"on"],[304,22,270,20],[304,23,270,21],[304,26,270,24],[304,30,270,28],[304,31,270,29,"name"],[304,35,270,33],[304,42,270,40],[304,44,270,42,"event"],[304,49,270,47],[304,53,270,51],[304,57,270,55],[304,58,270,56,"onStart"],[304,65,270,63],[304,66,270,64,"event"],[304,71,270,69],[304,72,270,70],[304,73,270,71],[305,8,271,6],[305,12,271,10],[305,13,271,11,"hammer"],[305,19,271,17],[305,20,271,18,"on"],[305,22,271,20],[305,23,271,21],[305,26,271,24],[305,30,271,28],[305,31,271,29,"name"],[305,35,271,33],[305,42,271,40],[305,46,271,44],[305,47,271,45,"name"],[305,51,271,49],[305,59,271,57],[305,61,271,59,"event"],[305,66,271,64],[305,70,271,68],[306,10,272,8],[306,14,272,12],[306,15,272,13,"onGestureEnded"],[306,29,272,27],[306,30,272,28,"event"],[306,35,272,33],[306,36,272,34],[307,8,273,6],[307,9,273,7],[307,10,273,8],[308,6,274,4],[309,6,275,4],[309,10,275,8],[309,11,275,9,"hammer"],[309,17,275,15],[309,18,275,16,"on"],[309,20,275,18],[309,21,275,19],[309,25,275,23],[309,26,275,24,"name"],[309,30,275,28],[309,32,275,30,"ev"],[309,34,275,32],[309,38,275,36],[309,42,275,40],[309,43,275,41,"onGestureActivated"],[309,61,275,59],[309,62,275,60,"ev"],[309,64,275,62],[309,65,275,63],[309,66,275,64],[309,67,275,65],[309,68,275,66],[310,4,276,2],[311,4,277,2,"onStart"],[311,11,277,9,"onStart"],[311,12,277,10],[312,6,278,4,"deltaX"],[312,12,278,10],[313,6,279,4,"deltaY"],[313,12,279,10],[314,6,280,4,"rotation"],[315,4,281,2],[315,5,281,3],[315,7,281,5],[316,6,282,4],[317,6,283,4],[317,10,283,8],[317,11,283,9,"oldState"],[317,19,283,17],[317,22,283,20,"State"],[317,28,283,25],[317,29,283,25,"State"],[317,34,283,25],[317,35,283,26,"UNDETERMINED"],[317,47,283,38],[318,6,284,4],[318,10,284,8],[318,11,284,9,"previousState"],[318,24,284,22],[318,27,284,25,"State"],[318,33,284,30],[318,34,284,30,"State"],[318,39,284,30],[318,40,284,31,"UNDETERMINED"],[318,52,284,43],[319,6,285,4],[319,10,285,8],[319,11,285,9,"lastSentState"],[319,24,285,22],[319,27,285,25],[319,31,285,29],[320,6,286,4],[320,10,286,8],[320,11,286,9,"isGestureRunning"],[320,27,286,25],[320,30,286,28],[320,34,286,32],[321,6,287,4],[321,10,287,8],[321,11,287,9,"__initialX"],[321,21,287,19],[321,24,287,22,"deltaX"],[321,30,287,28],[322,6,288,4],[322,10,288,8],[322,11,288,9,"__initialY"],[322,21,288,19],[322,24,288,22,"deltaY"],[322,30,288,28],[323,6,289,4],[323,10,289,8],[323,11,289,9,"initialRotation"],[323,26,289,24],[323,29,289,27,"rotation"],[323,37,289,35],[324,4,290,2],[325,4,291,2,"onGestureActivated"],[325,22,291,20,"onGestureActivated"],[325,23,291,21,"ev"],[325,25,291,23],[325,27,291,25],[326,6,292,4],[326,10,292,8],[326,11,292,9,"sendEvent"],[326,20,292,18],[326,21,292,19,"ev"],[326,23,292,21],[326,24,292,22],[327,4,293,2],[328,4,294,2,"onSuccess"],[328,13,294,11,"onSuccess"],[328,14,294,11],[328,16,294,14],[328,17,294,15],[329,4,295,2,"_getPendingGestures"],[329,23,295,21,"_getPendingGestures"],[329,24,295,21],[329,26,295,24],[330,6,296,4],[330,10,296,8,"Array"],[330,15,296,13],[330,16,296,14,"isArray"],[330,23,296,21],[330,24,296,22],[330,28,296,26],[330,29,296,27,"config"],[330,35,296,33],[330,36,296,34,"waitFor"],[330,43,296,41],[330,44,296,42],[330,48,296,46],[330,52,296,50],[330,53,296,51,"config"],[330,59,296,57],[330,60,296,58,"waitFor"],[330,67,296,65],[330,68,296,66,"length"],[330,74,296,72],[330,76,296,74],[331,8,297,6],[332,8,298,6],[333,8,299,6],[333,14,299,12,"stillWaiting"],[333,26,299,24],[333,29,299,27],[333,33,299,31],[333,34,299,32,"config"],[333,40,299,38],[333,41,299,39,"waitFor"],[333,48,299,46],[333,49,299,47,"filter"],[333,55,299,53],[333,56,299,54],[333,57,299,55],[334,10,300,8,"hasGestureFailed"],[335,8,301,6],[335,9,301,7],[335,14,301,12,"hasGestureFailed"],[335,30,301,28],[335,35,301,33],[335,40,301,38],[335,41,301,39],[336,8,302,6],[336,15,302,13,"stillWaiting"],[336,27,302,25],[337,6,303,4],[338,6,304,4],[338,13,304,11],[338,15,304,13],[339,4,305,2],[340,4,306,2,"getHammerConfig"],[340,19,306,17,"getHammerConfig"],[340,20,306,17],[340,22,306,20],[341,6,307,4],[341,12,307,10,"pointers"],[341,20,307,18],[341,23,307,21],[341,27,307,25],[341,28,307,26,"config"],[341,34,307,32],[341,35,307,33,"minPointers"],[341,46,307,44],[341,51,307,49],[341,55,307,53],[341,56,307,54,"config"],[341,62,307,60],[341,63,307,61,"maxPointers"],[341,74,307,72],[341,77,307,75],[341,81,307,79],[341,82,307,80,"config"],[341,88,307,86],[341,89,307,87,"minPointers"],[341,100,307,98],[341,103,307,101],[341,104,307,102],[342,6,308,4],[342,13,308,11],[343,8,309,6,"pointers"],[344,6,310,4],[344,7,310,5],[345,4,311,2],[346,4,312,2,"sync"],[346,8,312,6],[346,11,312,9,"sync"],[346,12,312,9],[346,17,312,15],[347,6,313,4],[347,12,313,10,"gesture"],[347,19,313,17],[347,22,313,20],[347,26,313,24],[347,27,313,25,"hammer"],[347,33,313,31],[347,34,313,32,"get"],[347,37,313,35],[347,38,313,36],[347,42,313,40],[347,43,313,41,"name"],[347,47,313,45],[347,48,313,46],[348,6,314,4],[348,10,314,8],[348,11,314,9,"gesture"],[348,18,314,16],[348,20,314,18],[349,6,315,4],[349,12,315,10,"enable"],[349,18,315,16],[349,21,315,19,"enable"],[349,22,315,20,"recognizer"],[349,32,315,30],[349,34,315,32,"inputData"],[349,43,315,41],[349,48,315,46],[350,8,316,6],[350,12,316,10],[350,13,316,11],[350,17,316,15],[350,18,316,16,"config"],[350,24,316,22],[350,25,316,23,"enabled"],[350,32,316,30],[350,34,316,32],[351,10,317,8],[351,14,317,12],[351,15,317,13,"isGestureRunning"],[351,31,317,29],[351,34,317,32],[351,39,317,37],[352,10,318,8],[352,14,318,12],[352,15,318,13,"hasGestureFailed"],[352,31,318,29],[352,34,318,32],[352,39,318,37],[353,10,319,8],[353,17,319,15],[353,22,319,20],[354,8,320,6],[356,8,322,6],[357,8,323,6],[357,12,323,10],[357,13,323,11,"inputData"],[357,22,323,20],[357,26,323,24],[357,27,323,25,"recognizer"],[357,37,323,35],[357,38,323,36,"options"],[357,45,323,43],[357,49,323,47],[357,56,323,54,"inputData"],[357,65,323,63],[357,66,323,64,"maxPointers"],[357,77,323,75],[357,82,323,80],[357,93,323,91],[357,95,323,93],[358,10,324,8],[358,17,324,15],[358,21,324,19],[358,22,324,20,"shouldEnableGestureOnSetup"],[358,48,324,46],[359,8,325,6],[360,8,326,6],[360,12,326,10],[360,16,326,14],[360,17,326,15,"hasGestureFailed"],[360,33,326,31],[360,35,326,33],[361,10,327,8],[361,17,327,15],[361,22,327,20],[362,8,328,6],[363,8,329,6],[363,12,329,10],[363,13,329,11],[363,17,329,15],[363,18,329,16,"isDiscrete"],[363,28,329,26],[363,30,329,28],[364,10,330,8],[364,14,330,12],[364,18,330,16],[364,19,330,17,"isGestureRunning"],[364,35,330,33],[364,37,330,35],[365,12,331,10],[365,19,331,17],[365,23,331,21],[366,10,332,8],[367,10,333,8],[368,10,334,8],[369,10,335,8],[369,14,335,12],[369,15,335,13,"_stillWaiting"],[369,28,335,26],[369,31,335,29],[369,35,335,33],[369,36,335,34,"_getPendingGestures"],[369,55,335,53],[369,56,335,54],[369,57,335,55],[370,10,336,8],[371,10,337,8],[371,14,337,12],[371,18,337,16],[371,19,337,17,"_stillWaiting"],[371,32,337,30],[371,33,337,31,"length"],[371,39,337,37],[371,41,337,39],[372,12,338,10],[373,12,339,10],[374,12,340,10],[374,17,340,15],[374,23,340,21,"gesture"],[374,30,340,28],[374,34,340,32],[374,38,340,36],[374,39,340,37,"_stillWaiting"],[374,52,340,50],[374,54,340,52],[375,14,341,12],[376,14,342,12],[376,18,342,16],[376,19,342,17,"gesture"],[376,26,342,24],[376,27,342,25,"isDiscrete"],[376,37,342,35],[376,41,342,39,"gesture"],[376,48,342,46],[376,49,342,47,"isGestureRunning"],[376,65,342,63],[376,67,342,65],[377,16,343,14],[377,20,343,18],[377,21,343,19,"hasGestureFailed"],[377,37,343,35],[377,40,343,38],[377,44,343,42],[378,16,344,14],[378,20,344,18],[378,21,344,19,"isGestureRunning"],[378,37,344,35],[378,40,344,38],[378,45,344,43],[379,16,345,14],[379,23,345,21],[379,28,345,26],[380,14,346,12],[381,12,347,10],[382,12,348,10],[383,12,349,10],[383,19,349,17],[383,24,349,22],[384,10,350,8],[385,8,351,6],[387,8,353,6],[388,8,354,6],[388,12,354,10],[388,13,354,11],[388,17,354,15],[388,18,354,16,"hasCustomActivationCriteria"],[388,45,354,43],[388,47,354,45],[389,10,355,8],[389,17,355,15],[389,21,355,19],[390,8,356,6],[391,8,357,6],[391,14,357,12,"deltaRotation"],[391,27,357,25],[391,30,357,28],[391,34,357,32],[391,35,357,33,"initialRotation"],[391,50,357,48],[391,54,357,52],[391,58,357,56],[391,61,357,59],[391,62,357,60],[391,65,357,63,"inputData"],[391,74,357,72],[391,75,357,73,"rotation"],[391,83,357,81],[391,86,357,84],[391,90,357,88],[391,91,357,89,"initialRotation"],[391,106,357,104],[392,8,358,6],[393,8,359,6],[393,14,359,12],[394,10,360,8,"success"],[394,17,360,15],[395,10,361,8,"failed"],[396,8,362,6],[396,9,362,7],[396,12,362,10],[396,16,362,14],[396,17,362,15,"isGestureEnabledForEvent"],[396,41,362,39],[396,42,362,40],[396,46,362,44],[396,47,362,45,"getConfig"],[396,56,362,54],[396,57,362,55],[396,58,362,56],[396,60,362,58,"recognizer"],[396,70,362,68],[396,72,362,68,"Object"],[396,78,362,68],[396,79,362,68,"assign"],[396,85,362,68],[396,90,363,11,"inputData"],[396,99,363,20],[397,10,364,8,"deltaRotation"],[398,8,364,21],[398,10,365,7],[398,11,365,8],[399,8,366,6],[399,12,366,10,"failed"],[399,18,366,16],[399,20,366,18],[400,10,367,8],[400,14,367,12],[400,15,367,13,"simulateCancelEvent"],[400,34,367,32],[400,35,367,33,"inputData"],[400,44,367,42],[400,45,367,43],[401,10,368,8],[401,14,368,12],[401,15,368,13,"hasGestureFailed"],[401,31,368,29],[401,34,368,32],[401,38,368,36],[402,8,369,6],[403,8,370,6],[403,15,370,13,"success"],[403,22,370,20],[404,6,371,4],[404,7,371,5],[405,6,372,4],[405,12,372,10,"params"],[405,18,372,16],[405,21,372,19],[405,25,372,23],[405,26,372,24,"getHammerConfig"],[405,41,372,39],[405,42,372,40],[405,43,372,41],[406,6,373,4],[407,6,374,4,"gesture"],[407,13,374,11],[407,14,374,12,"set"],[407,17,374,15],[407,18,374,15,"Object"],[407,24,374,15],[407,25,374,15,"assign"],[407,31,374,15],[407,36,375,9,"params"],[407,42,375,15],[408,8,376,6,"enable"],[409,6,376,12],[409,8,377,5],[409,9,377,6],[410,4,378,2],[410,5,378,3],[411,4,379,2,"simulateCancelEvent"],[411,23,379,21,"simulateCancelEvent"],[411,24,379,22,"_inputData"],[411,34,379,32],[411,36,379,34],[411,37,379,35],[413,4,381,2],[414,4,382,2,"ensureConfig"],[414,16,382,14,"ensureConfig"],[414,17,382,15,"config"],[414,23,382,21],[414,25,382,23],[415,6,383,4],[415,12,383,10,"props"],[415,17,383,15],[415,20,383,15,"Object"],[415,26,383,15],[415,27,383,15,"assign"],[415,33,383,15],[415,38,384,9,"config"],[415,44,384,15],[415,45,385,5],[417,6,387,4],[418,6,388,4],[418,10,388,8],[418,19,388,17],[418,23,388,21,"config"],[418,29,388,27],[418,31,388,29],[419,8,389,6,"props"],[419,13,389,11],[419,14,389,12,"minDist"],[419,21,389,19],[419,24,389,22,"config"],[419,30,389,28],[419,31,389,29,"minDist"],[419,38,389,36],[420,8,390,6,"props"],[420,13,390,11],[420,14,390,12,"minDistSq"],[420,23,390,21],[420,26,390,24,"props"],[420,31,390,29],[420,32,390,30,"minDist"],[420,39,390,37],[420,42,390,40,"props"],[420,47,390,45],[420,48,390,46,"minDist"],[420,55,390,53],[421,6,391,4],[422,6,392,4],[422,10,392,8],[422,23,392,21],[422,27,392,25,"config"],[422,33,392,31],[422,35,392,33],[423,8,393,6,"props"],[423,13,393,11],[423,14,393,12,"minVelocity"],[423,25,393,23],[423,28,393,26,"config"],[423,34,393,32],[423,35,393,33,"minVelocity"],[423,46,393,44],[424,8,394,6,"props"],[424,13,394,11],[424,14,394,12,"minVelocitySq"],[424,27,394,25],[424,30,394,28,"props"],[424,35,394,33],[424,36,394,34,"minVelocity"],[424,47,394,45],[424,50,394,48,"props"],[424,55,394,53],[424,56,394,54,"minVelocity"],[424,67,394,65],[425,6,395,4],[426,6,396,4],[426,10,396,8],[426,19,396,17],[426,23,396,21,"config"],[426,29,396,27],[426,31,396,29],[427,8,397,6,"props"],[427,13,397,11],[427,14,397,12,"maxDist"],[427,21,397,19],[427,24,397,22,"config"],[427,30,397,28],[427,31,397,29,"maxDist"],[427,38,397,36],[428,8,398,6,"props"],[428,13,398,11],[428,14,398,12,"maxDistSq"],[428,23,398,21],[428,26,398,24,"config"],[428,32,398,30],[428,33,398,31,"maxDist"],[428,40,398,38],[428,43,398,41,"config"],[428,49,398,47],[428,50,398,48,"maxDist"],[428,57,398,55],[429,6,399,4],[430,6,400,4],[430,10,400,8],[430,19,400,17],[430,23,400,21,"config"],[430,29,400,27],[430,31,400,29],[431,8,401,6,"props"],[431,13,401,11],[431,14,401,12,"waitFor"],[431,21,401,19],[431,24,401,22,"asArray"],[431,31,401,29],[431,32,401,30,"config"],[431,38,401,36],[431,39,401,37,"waitFor"],[431,46,401,44],[431,47,401,45],[431,48,401,46,"map"],[431,51,401,49],[431,52,401,50],[431,53,401,51],[432,10,402,8,"handlerTag"],[433,8,403,6],[433,9,403,7],[433,14,403,12,"NodeManager"],[433,25,403,23],[433,26,403,24,"getHandler"],[433,36,403,34],[433,37,403,35,"handlerTag"],[433,47,403,45],[433,48,403,46],[433,49,403,47],[433,50,403,48,"filter"],[433,56,403,54],[433,57,403,55,"v"],[433,58,403,56],[433,62,403,60,"v"],[433,63,403,61],[433,64,403,62],[434,6,404,4],[434,7,404,5],[434,13,404,11],[435,8,405,6,"props"],[435,13,405,11],[435,14,405,12,"waitFor"],[435,21,405,19],[435,24,405,22],[435,28,405,26],[436,6,406,4],[437,6,407,4],[437,10,407,8],[437,32,407,30],[437,36,407,34,"config"],[437,42,407,40],[437,44,407,42],[438,8,408,6],[438,14,408,12,"shouldUseTouchEvents"],[438,34,408,32],[438,37,408,35],[438,41,408,39],[438,42,408,40,"shouldUseTouchEvents"],[438,62,408,60],[438,63,408,61],[438,67,408,65],[438,68,408,66,"config"],[438,74,408,72],[438,75,408,73],[439,8,409,6,"props"],[439,13,409,11],[439,14,409,12,"simultaneousHandlers"],[439,34,409,32],[439,37,409,35,"asArray"],[439,44,409,42],[439,45,409,43,"config"],[439,51,409,49],[439,52,409,50,"simultaneousHandlers"],[439,72,409,70],[439,73,409,71],[439,74,409,72,"map"],[439,77,409,75],[439,78,409,76,"handler"],[439,85,409,83],[439,89,409,87],[440,10,410,8],[440,14,410,12],[440,21,410,19,"handler"],[440,28,410,26],[440,33,410,31],[440,41,410,39],[440,43,410,41],[441,12,411,10],[441,19,411,17,"NodeManager"],[441,30,411,28],[441,31,411,29,"getHandler"],[441,41,411,39],[441,42,411,40,"handler"],[441,49,411,47],[441,50,411,48],[442,10,412,8],[442,11,412,9],[442,17,412,15],[443,12,413,10],[443,19,413,17,"NodeManager"],[443,30,413,28],[443,31,413,29,"getHandler"],[443,41,413,39],[443,42,413,40,"handler"],[443,49,413,47],[443,50,413,48,"handlerTag"],[443,60,413,58],[443,61,413,59],[444,10,414,8],[445,8,415,6],[445,9,415,7],[445,10,415,8],[445,11,415,9,"filter"],[445,17,415,15],[445,18,415,16,"v"],[445,19,415,17],[445,23,415,21,"v"],[445,24,415,22],[445,25,415,23],[446,8,416,6],[446,12,416,10,"shouldUseTouchEvents"],[446,32,416,30],[446,37,416,35],[446,41,416,39],[446,42,416,40,"shouldUseTouchEvents"],[446,62,416,60],[446,63,416,61,"props"],[446,68,416,66],[446,69,416,67],[446,71,416,69],[447,10,417,8],[447,14,417,8,"ghQueueMicrotask"],[447,31,417,24],[447,32,417,24,"ghQueueMicrotask"],[447,48,417,24],[447,50,417,25],[447,56,417,31],[448,12,418,10],[449,12,419,10],[450,12,420,10],[450,16,420,14],[450,17,420,15,"destroy"],[450,24,420,22],[450,25,420,23],[450,26,420,24],[451,12,421,10],[451,16,421,14],[451,17,421,15,"setView"],[451,24,421,22],[451,25,421,23],[451,29,421,27],[451,30,421,28,"ref"],[451,33,421,31],[451,35,421,33],[451,39,421,37],[451,40,421,38,"propsRef"],[451,48,421,46],[451,49,421,47],[452,10,422,8],[452,11,422,9],[452,12,422,10],[453,8,423,6],[454,6,424,4],[454,7,424,5],[454,13,424,11],[455,8,425,6,"props"],[455,13,425,11],[455,14,425,12,"simultaneousHandlers"],[455,34,425,32],[455,37,425,35],[455,41,425,39],[456,6,426,4],[457,6,427,4],[457,12,427,10,"configProps"],[457,23,427,21],[457,26,427,24],[457,27,427,25],[457,40,427,38],[457,42,427,40],[457,55,427,53],[457,57,427,55],[457,66,427,64],[457,68,427,66],[457,77,427,75],[457,79,427,77],[457,90,427,88],[457,92,427,90],[457,107,427,105],[457,109,427,107],[457,120,427,118],[457,122,427,120],[457,135,427,133],[457,137,427,135],[457,155,427,153],[457,157,427,155],[457,175,427,173],[457,177,427,175],[457,193,427,191],[457,195,427,193],[457,211,427,209],[457,213,427,211],[457,233,427,231],[457,235,427,233],[457,253,427,251],[457,255,427,253],[457,275,427,273],[457,277,427,275],[457,295,427,293],[457,296,427,294],[458,6,428,4,"configProps"],[458,17,428,15],[458,18,428,16,"forEach"],[458,25,428,23],[458,26,428,24,"prop"],[458,30,428,28],[458,34,428,32],[459,8,429,6],[459,12,429,10],[459,19,429,17,"props"],[459,24,429,22],[459,25,429,23,"prop"],[459,29,429,27],[459,30,429,28],[459,35,429,33],[459,46,429,44],[459,48,429,46],[460,10,430,8,"props"],[460,15,430,13],[460,16,430,14,"prop"],[460,20,430,18],[460,21,430,19],[460,24,430,22,"Number"],[460,30,430,28],[460,31,430,29,"NaN"],[460,34,430,32],[461,8,431,6],[462,6,432,4],[462,7,432,5],[462,8,432,6],[463,6,433,4],[463,13,433,11,"props"],[463,18,433,16],[463,19,433,17],[463,20,433,18],[464,4,434,2],[465,2,435,0],[467,2,437,0],[468,2,438,0],[469,2,439,0],[469,11,439,9,"invokeNullableMethod"],[469,31,439,29,"invokeNullableMethod"],[469,32,439,30,"method"],[469,38,439,36],[469,40,439,38,"event"],[469,45,439,43],[469,47,439,45],[470,4,440,2],[470,8,440,6,"method"],[470,14,440,12],[470,16,440,14],[471,6,441,4],[471,10,441,8],[471,17,441,15,"method"],[471,23,441,21],[471,28,441,26],[471,38,441,36],[471,40,441,38],[472,8,442,6,"method"],[472,14,442,12],[472,15,442,13,"event"],[472,20,442,18],[472,21,442,19],[473,6,443,4],[473,7,443,5],[473,13,443,11],[474,8,444,6],[475,8,445,6],[475,12,445,10],[475,26,445,24],[475,30,445,28,"method"],[475,36,445,34],[475,40,445,38],[475,47,445,45,"method"],[475,53,445,51],[475,54,445,52,"__getHandler"],[475,66,445,64],[475,71,445,69],[475,81,445,79],[475,83,445,81],[476,10,446,8],[476,16,446,14,"handler"],[476,23,446,21],[476,26,446,24,"method"],[476,32,446,30],[476,33,446,31,"__getHandler"],[476,45,446,43],[476,46,446,44],[476,47,446,45],[477,10,447,8,"invokeNullableMethod"],[477,30,447,28],[477,31,447,29,"handler"],[477,38,447,36],[477,40,447,38,"event"],[477,45,447,43],[477,46,447,44],[478,8,448,6],[478,9,448,7],[478,15,448,13],[479,10,449,8],[479,14,449,12],[479,28,449,26],[479,32,449,30,"method"],[479,38,449,36],[479,40,449,38],[480,12,450,10],[480,18,450,16],[481,14,451,12,"argMapping"],[482,12,452,10],[482,13,452,11],[482,16,452,14,"method"],[482,22,452,20],[482,23,452,21,"__nodeConfig"],[482,35,452,33],[483,12,453,10],[483,16,453,14,"Array"],[483,21,453,19],[483,22,453,20,"isArray"],[483,29,453,27],[483,30,453,28,"argMapping"],[483,40,453,38],[483,41,453,39],[483,43,453,41],[484,14,454,12],[484,19,454,17],[484,25,454,23],[484,26,454,24,"index"],[484,31,454,29],[484,33,454,31],[484,34,454,32,"key"],[484,37,454,35],[484,39,454,37,"value"],[484,44,454,42],[484,45,454,43],[484,46,454,44],[484,50,454,48,"argMapping"],[484,60,454,58],[484,61,454,59,"entries"],[484,68,454,66],[484,69,454,67],[484,70,454,68],[484,72,454,70],[485,16,455,14],[485,20,455,18,"key"],[485,23,455,21],[485,27,455,25,"event"],[485,32,455,30],[485,33,455,31,"nativeEvent"],[485,44,455,42],[485,46,455,44],[486,18,456,16],[487,18,457,16],[487,24,457,22,"nativeValue"],[487,35,457,33],[487,38,457,36,"event"],[487,43,457,41],[487,44,457,42,"nativeEvent"],[487,55,457,53],[487,56,457,54,"key"],[487,59,457,57],[487,60,457,58],[488,18,458,16],[488,22,458,20,"value"],[488,27,458,25],[488,31,458,29,"value"],[488,36,458,34],[488,37,458,35,"setValue"],[488,45,458,43],[488,47,458,45],[489,20,459,18],[490,20,460,18,"value"],[490,25,460,23],[490,26,460,24,"setValue"],[490,34,460,32],[490,35,460,33,"nativeValue"],[490,46,460,44],[490,47,460,45],[491,18,461,16],[491,19,461,17],[491,25,461,23],[492,20,462,18],[493,20,463,18,"method"],[493,26,463,24],[493,27,463,25,"__nodeConfig"],[493,39,463,37],[493,40,463,38,"argMapping"],[493,50,463,48],[493,51,463,49,"index"],[493,56,463,54],[493,57,463,55],[493,60,463,58],[493,61,463,59,"key"],[493,64,463,62],[493,66,463,64,"nativeValue"],[493,77,463,75],[493,78,463,76],[494,18,464,16],[495,16,465,14],[496,14,466,12],[497,12,467,10],[498,10,468,8],[499,8,469,6],[500,6,470,4],[501,4,471,2],[502,2,472,0],[503,2,473,0],[503,11,473,9,"asArray"],[503,18,473,16,"asArray"],[503,19,473,17,"value"],[503,24,473,22],[503,26,473,24],[504,4,474,2],[505,4,475,2],[505,11,475,9,"value"],[505,16,475,14],[505,20,475,18],[505,24,475,22],[505,27,475,25],[505,29,475,27],[505,32,475,30,"Array"],[505,37,475,35],[505,38,475,36,"isArray"],[505,45,475,43],[505,46,475,44,"value"],[505,51,475,49],[505,52,475,50],[505,55,475,53,"value"],[505,60,475,58],[505,63,475,61],[505,64,475,62,"value"],[505,69,475,67],[505,70,475,68],[506,2,476,0],[507,2,477,0],[507,6,477,0,"_default"],[507,14,477,0],[507,17,477,15,"GestureHandler"],[507,31,477,29],[508,0,477,30],[508,3]],"functionMap":{"names":["<global>","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","clearSelfAsPending","updateGestureConfig","destroy","isPointInView","getState","transformEventData","transformNativeEvent","sendEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","config.simultaneousHandlers.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","sync","enable","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","ghQueueMicrotask$argument_0","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA;ACc;ECW;GDE;EEI;GFE;EGC;GHE;EIC;GJE;EKC;GLG;EMC;GNE;EOC,2BP;EQC;GRE;ESC;GTE;EUC;GVI;EWC;GXE;EYC;GZE;uBaC;GbM;EcC;GdmB;YeC;GfO;kBgBC;GhBQ;EiBC;GjBM;EkBC;GlBkC;EmBC;GnBE;coBC;GpBW;EqBC;GrBO;EsBC;GtBM;EuBG;GvBG;EwBC;GxBK;EyBC;GzBQ;E0BC;G1BM;E2BC;6CCC,2BD;G3BC;E6BC;mCC8B;mBCe;SDG;KDE;G7BG;EgCC;0CFG,4BE;2DFC;OEE;8BFE,iCE;GhCC;EiCC;GjCa;EkCC;GlCE;EmCC,cnC;EoCC;sDCI;sCDE;GpCI;EsCC;GtCK;SuCC;mBCG;KDwD;GvCO;EyCC,kCzC;E0CG;kDCmB;8CDE,SE,MF;4ECM;ODM,SE,MF;yBGE;SHK;wBIM;KJI;G1CE;CDC;AgDI;ChDiC;AiDC;CjDG"},"hasCjsExports":false},"type":"js/module"}]}