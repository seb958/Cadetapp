{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":429},"end":{"line":11,"column":31,"index":460}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":496},"end":{"line":13,"column":34,"index":530}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Animated","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dNPzxVfn0yBoRxvhD+vE+lN7k4Q=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/StyleSheet","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"MK7+k1V+KnvCVW7Kj2k/ydtjmVU=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/View","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4kYBDC6LJJXoH7P9rWDi3vkLVB0=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Keyboard","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4H7FkS8ywD5HLTNk4ggLktoHubI=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/StatusBar","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"zzHKpVbCjTP+fv+3SRvKiN2M8pI=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/I18nManager","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YXFxy1JKR54teS+Ykb7Z7cVZrH8=","exportNames":["*"],"imports":1}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":624},"end":{"line":15,"column":66,"index":690}}],"key":"Z7WldcovRqVbXERv5Mkjp/bqHuA=","exportNames":["*"],"imports":1}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":691},"end":{"line":16,"column":66,"index":757}}],"key":"+Msf+8iAdn6txPXicJvQZ0hdOZ0=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":17,"column":0,"index":758},"end":{"line":17,"column":33,"index":791}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}},{"name":"react/jsx-runtime","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":18,"column":0,"index":792},"end":{"line":18,"column":63,"index":855}}],"key":"rKAWVuQOSSDHxC6IWcmkeWszaWg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return DrawerLayout;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopNamespace(_react);\n  var _invariant = require(_dependencyMap[1], \"invariant\");\n  var invariant = _interopDefault(_invariant);\n  var _reactNativeWebDistExportsAnimated = require(_dependencyMap[2], \"react-native-web/dist/exports/Animated\");\n  var Animated = _interopDefault(_reactNativeWebDistExportsAnimated);\n  var _reactNativeWebDistExportsStyleSheet = require(_dependencyMap[3], \"react-native-web/dist/exports/StyleSheet\");\n  var StyleSheet = _interopDefault(_reactNativeWebDistExportsStyleSheet);\n  var _reactNativeWebDistExportsView = require(_dependencyMap[4], \"react-native-web/dist/exports/View\");\n  var View = _interopDefault(_reactNativeWebDistExportsView);\n  var _reactNativeWebDistExportsKeyboard = require(_dependencyMap[5], \"react-native-web/dist/exports/Keyboard\");\n  var Keyboard = _interopDefault(_reactNativeWebDistExportsKeyboard);\n  var _reactNativeWebDistExportsStatusBar = require(_dependencyMap[6], \"react-native-web/dist/exports/StatusBar\");\n  var StatusBar = _interopDefault(_reactNativeWebDistExportsStatusBar);\n  var _reactNativeWebDistExportsI18nManager = require(_dependencyMap[7], \"react-native-web/dist/exports/I18nManager\");\n  var I18nManager = _interopDefault(_reactNativeWebDistExportsI18nManager);\n  var _handlersPanGestureHandler = require(_dependencyMap[8], \"../handlers/PanGestureHandler\");\n  var _handlersTapGestureHandler = require(_dependencyMap[9], \"../handlers/TapGestureHandler\");\n  var _State = require(_dependencyMap[10], \"../State\");\n  var _reactJsxRuntime = require(_dependencyMap[11], \"react/jsx-runtime\");\n  const DRAG_TOSS = 0.05;\n  const IDLE = 'Idle';\n  const DRAGGING = 'Dragging';\n  const SETTLING = 'Settling';\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  // Animated.AnimatedInterpolation has been converted to a generic type\n  // in @types/react-native 0.70. This way we can maintain compatibility\n  // with all versions of @types/react-native`\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  class DrawerLayout extends _react.Component {\n    static defaultProps = {\n      drawerWidth: 200,\n      drawerPosition: 'left',\n      useNativeAnimations: true,\n      drawerType: 'front',\n      edgeWidth: 20,\n      minSwipeDistance: 3,\n      overlayColor: 'rgba(0, 0, 0, 0.7)',\n      drawerLockMode: 'unlocked',\n      enableTrackpadTwoFingerGesture: false\n    };\n    constructor(props) {\n      super(props);\n      const dragX = new Animated.default.Value(0);\n      const touchX = new Animated.default.Value(0);\n      const drawerTranslation = new Animated.default.Value(0);\n      this.state = {\n        dragX,\n        touchX,\n        drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      this.updateAnimatedEvent(props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n    accessibilityIsModalView = /*#__PURE__*/React.createRef();\n    pointerEventsView = /*#__PURE__*/React.createRef();\n    panGestureHandler = /*#__PURE__*/React.createRef();\n    drawerShown = false;\n    static positions = {\n      Left: 'left',\n      Right: 'right'\n    };\n    updateAnimatedEvent = (props, state) => {\n      // Event definition is based on\n      const {\n        drawerPosition,\n        drawerWidth,\n        drawerType\n      } = props;\n      const {\n        dragX: dragXValue,\n        touchX: touchXValue,\n        drawerTranslation,\n        containerWidth\n      } = state;\n      let dragX = dragXValue;\n      let touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        // Most of the code is written in a way to handle left-side drawer. In\n        // order to handle right-side drawer the only thing we need to do is to\n        // reverse events coming from gesture handler in a way they emulate\n        // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n        // calulcated by subtracing real touchX from the width of the container\n        // (such that when touch happens at the right edge the value is simply 0)\n        dragX = Animated.default.multiply(new Animated.default.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n        touchX = Animated.default.add(new Animated.default.Value(containerWidth), Animated.default.multiply(new Animated.default.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      // While closing the drawer when user starts gesture outside of its area (in greyed\n      // out part of the window), we want the drawer to follow only once finger reaches the\n      // edge of the drawer.\n      // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n      // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n      // an arrow pointing left\n      // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n      //    +---------------+    +---------------+    +---------------+    +---------------+\n      //\n      // For the above to work properly we define animated value that will keep\n      // start position of the gesture. Then we use that value to calculate how\n      // much we need to subtract from the dragX. If the gesture started on the\n      // greyed out area we take the distance from the edge of the drawer to the\n      // start position. Otherwise we don't subtract at all and the drawer be\n      // pulled back as soon as you start the pan.\n      //\n      // This is used only when drawerType is \"front\"\n      //\n      let translationX = dragX;\n      if (drawerType === 'front') {\n        const startPositionX = Animated.default.add(touchX, Animated.default.multiply(new Animated.default.Value(-1), dragX));\n        const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.default.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n      }\n      this.openValue = Animated.default.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      const gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (this.props.onDrawerSlide) {\n        gestureOptions.listener = ev => {\n          const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          const position = translationX / this.state.containerWidth;\n          this.props.onDrawerSlide?.(position);\n        };\n      }\n      this.onGestureEvent = Animated.default.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    };\n    handleContainerLayout = ({\n      nativeEvent\n    }) => {\n      this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n    emitStateChanged = (newState, drawerWillShow) => {\n      this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n    };\n    openingHandlerStateChange = ({\n      nativeEvent\n    }) => {\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        this.handleRelease({\n          nativeEvent\n        });\n      } else if (nativeEvent.state === _State.State.ACTIVE) {\n        this.emitStateChanged(DRAGGING, false);\n        this.setState({\n          drawerState: DRAGGING\n        });\n        if (this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.default.dismiss();\n        }\n        if (this.props.hideStatusBar) {\n          StatusBar.default.setHidden(true, this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n    onTapHandlerStateChange = ({\n      nativeEvent\n    }) => {\n      if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n        this.closeDrawer();\n      }\n    };\n    handleRelease = ({\n      nativeEvent\n    }) => {\n      const {\n        drawerWidth,\n        drawerPosition,\n        drawerType\n      } = this.props;\n      const {\n        containerWidth\n      } = this.state;\n      let {\n        translationX: dragX,\n        velocityX,\n        x: touchX\n      } = nativeEvent;\n      if (drawerPosition !== 'left') {\n        // See description in _updateAnimatedEvent about why events are flipped\n        // for right-side drawer\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      const gestureStartX = touchX - dragX;\n      let dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n      const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      const shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n    updateShowing = showing => {\n      this.drawerShown = showing;\n      this.accessibilityIsModalView.current?.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      this.pointerEventsView.current?.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      const {\n        drawerPosition,\n        minSwipeDistance,\n        edgeWidth\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      // @ts-ignore internal API, maybe could be fixed in handler types\n      this.panGestureHandler.current?.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n    animateDrawer = (fromValue, toValue, velocity, speed) => {\n      this.state.dragX.setValue(0);\n      this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n      if (fromValue != null) {\n        let nextFramePosition = fromValue;\n        if (this.props.useNativeAnimations) {\n          // When using native driver, we predict the next position of the\n          // animation because it takes one frame of a roundtrip to pass RELEASE\n          // event from native driver to JS before we can start animating. Without\n          // it, it is more noticable that the frame is dropped.\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      const willShow = toValue !== 0;\n      this.updateShowing(willShow);\n      this.emitStateChanged(SETTLING, willShow);\n      this.setState({\n        drawerState: SETTLING\n      });\n      if (this.props.hideStatusBar) {\n        StatusBar.default.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n      Animated.default.spring(this.state.drawerTranslation, {\n        velocity,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations,\n        speed: speed ?? undefined\n      }).start(({\n        finished\n      }) => {\n        if (finished) {\n          this.emitStateChanged(IDLE, willShow);\n          this.setState({\n            drawerOpened: willShow\n          });\n          if (this.state.drawerState !== DRAGGING) {\n            // It's possilbe that user started drag while the drawer\n            // was settling, don't override state in this case\n            this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            this.props.onDrawerOpen?.();\n          } else {\n            this.props.onDrawerClose?.();\n          }\n        }\n      });\n    };\n\n    // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n    openDrawer = (options = {}) => {\n      this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n      // We need to force the update, otherwise the overlay is not rerendered and\n      // it would not be clickable\n      this.forceUpdate();\n    };\n    closeDrawer = (options = {}) => {\n      // TODO: decide if it should be null or undefined is the proper value\n      this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n      // We need to force the update, otherwise the overlay is not rerendered and\n      // it would be still clickable\n      this.forceUpdate();\n    };\n    renderOverlay = () => {\n      /* Overlay styles */\n      (0, invariant.default)(this.openValue, 'should be set');\n      let overlayOpacity;\n      if (this.state.drawerState !== IDLE) {\n        overlayOpacity = this.openValue;\n      } else {\n        overlayOpacity = this.state.drawerOpened ? 1 : 0;\n      }\n      const dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: this.props.overlayColor\n      };\n      return /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_handlersTapGestureHandler.TapGestureHandler, {\n        onHandlerStateChange: this.onTapHandlerStateChange,\n        children: /*#__PURE__*/(0, _reactJsxRuntime.jsx)(Animated.default.View, {\n          pointerEvents: this.drawerShown ? 'auto' : 'none',\n          ref: this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        })\n      });\n    };\n    renderDrawer = () => {\n      const {\n        drawerBackgroundColor,\n        drawerWidth,\n        drawerPosition,\n        drawerType,\n        drawerContainerStyle,\n        contentContainerStyle\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n      const drawerSlide = drawerType !== 'back';\n      const containerSlide = drawerType !== 'front';\n\n      // We rely on row and row-reverse flex directions to position the drawer\n      // properly. Apparently for RTL these are flipped which requires us to use\n      // the opposite setting for the drawer to appear from left or right\n      // according to the drawerPosition prop\n      const reverseContentDirection = I18nManager.default.isRTL ? fromLeft : !fromLeft;\n      const dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      const openValue = this.openValue;\n      (0, invariant.default)(openValue, 'should be set');\n      let containerStyles;\n      if (containerSlide) {\n        const containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      let drawerTranslateX = 0;\n      if (drawerSlide) {\n        const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      const drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return /*#__PURE__*/(0, _reactJsxRuntime.jsxs)(Animated.default.View, {\n        style: styles.main,\n        onLayout: this.handleContainerLayout,\n        children: [/*#__PURE__*/(0, _reactJsxRuntime.jsxs)(Animated.default.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes',\n          children: [typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()]\n        }), /*#__PURE__*/(0, _reactJsxRuntime.jsx)(Animated.default.View, {\n          pointerEvents: \"box-none\",\n          ref: this.accessibilityIsModalView,\n          accessibilityViewIsModal: this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n          children: /*#__PURE__*/(0, _reactJsxRuntime.jsx)(View.default, {\n            style: dynamicDrawerStyles,\n            children: this.props.renderNavigationView(this.openValue)\n          })\n        })]\n      });\n    };\n    setPanGestureRef = ref => {\n      // TODO(TS): make sure it is OK taken from\n      // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n      this.panGestureHandler.current = ref;\n      this.props.onGestureRef?.(ref);\n    };\n    render() {\n      const {\n        drawerPosition,\n        drawerLockMode,\n        edgeWidth,\n        minSwipeDistance\n      } = this.props;\n      const fromLeft = drawerPosition === 'left';\n\n      // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n      // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return /*#__PURE__*/(0, _reactJsxRuntime.jsx)(_handlersPanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n      , {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        children: this.renderDrawer()\n      });\n    }\n  }\n  const styles = StyleSheet.default.create({\n    drawerContainer: {\n      ...StyleSheet.default.absoluteFillObject,\n      zIndex: 1001,\n      flexDirection: 'row'\n    },\n    containerInFront: {\n      ...StyleSheet.default.absoluteFillObject,\n      zIndex: 1002\n    },\n    containerOnBack: {\n      ...StyleSheet.default.absoluteFillObject\n    },\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: {\n      ...StyleSheet.default.absoluteFillObject,\n      zIndex: 1000\n    }\n  });\n});","lineCount":581,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,5,0],[7,2,6,0],[8,2,7,0],[9,2,8,0],[10,2,9,0],[11,2,9,0,"Object"],[11,8,9,0],[11,9,9,0,"defineProperty"],[11,23,9,0],[11,24,9,0,"exports"],[11,31,9,0],[12,4,9,0,"value"],[12,9,9,0],[13,2,9,0],[14,2,9,0],[14,11,9,0,"_interopNamespace"],[14,29,9,0,"e"],[14,30,9,0],[15,4,9,0],[15,8,9,0,"e"],[15,9,9,0],[15,13,9,0,"e"],[15,14,9,0],[15,15,9,0,"__esModule"],[15,25,9,0],[15,34,9,0,"e"],[15,35,9,0],[16,4,9,0],[16,8,9,0,"n"],[16,9,9,0],[17,4,9,0],[17,8,9,0,"e"],[17,9,9,0],[17,11,9,0,"Object"],[17,17,9,0],[17,18,9,0,"keys"],[17,22,9,0],[17,23,9,0,"e"],[17,24,9,0],[17,26,9,0,"forEach"],[17,33,9,0],[17,44,9,0,"k"],[17,45,9,0],[18,6,9,0],[18,10,9,0,"d"],[18,11,9,0],[18,14,9,0,"Object"],[18,20,9,0],[18,21,9,0,"getOwnPropertyDescriptor"],[18,45,9,0],[18,46,9,0,"e"],[18,47,9,0],[18,49,9,0,"k"],[18,50,9,0],[19,6,9,0,"Object"],[19,12,9,0],[19,13,9,0,"defineProperty"],[19,27,9,0],[19,28,9,0,"n"],[19,29,9,0],[19,31,9,0,"k"],[19,32,9,0],[19,34,9,0,"d"],[19,35,9,0],[19,36,9,0,"get"],[19,39,9,0],[19,42,9,0,"d"],[19,43,9,0],[20,8,9,0,"enumerable"],[20,18,9,0],[21,8,9,0,"get"],[21,11,9,0],[21,22,9,0,"get"],[21,23,9,0],[22,10,9,0],[22,17,9,0,"e"],[22,18,9,0],[22,19,9,0,"k"],[22,20,9,0],[23,8,9,0],[24,6,9,0],[25,4,9,0],[26,4,9,0,"n"],[26,5,9,0],[26,6,9,0,"default"],[26,13,9,0],[26,16,9,0,"e"],[26,17,9,0],[27,4,9,0],[27,11,9,0,"n"],[27,12,9,0],[28,2,9,0],[29,2,9,0],[29,11,9,0,"_interopDefault"],[29,27,9,0,"e"],[29,28,9,0],[30,4,9,0],[30,11,9,0,"e"],[30,12,9,0],[30,16,9,0,"e"],[30,17,9,0],[30,18,9,0,"__esModule"],[30,28,9,0],[30,31,9,0,"e"],[30,32,9,0],[31,6,9,0,"default"],[31,13,9,0],[31,15,9,0,"e"],[32,4,9,0],[33,2,9,0],[34,2,63,15,"Object"],[34,8,63,15],[34,9,63,15,"defineProperty"],[34,23,63,15],[34,24,63,15,"exports"],[34,31,63,15],[35,4,63,15,"enumerable"],[35,14,63,15],[36,4,63,15,"get"],[36,7,63,15],[36,18,63,15,"get"],[36,19,63,15],[37,6,63,15],[37,13,63,15,"DrawerLayout"],[37,25,63,15],[38,4,63,15],[39,2,63,15],[40,2,11,0],[40,6,11,0,"_react"],[40,12,11,0],[40,15,11,0,"require"],[40,22,11,0],[40,23,11,0,"_dependencyMap"],[40,37,11,0],[41,2,11,0],[41,6,11,0,"React"],[41,11,11,0],[41,14,11,0,"_interopNamespace"],[41,31,11,0],[41,32,11,0,"_react"],[41,38,11,0],[42,2,13,0],[42,6,13,0,"_invariant"],[42,16,13,0],[42,19,13,0,"require"],[42,26,13,0],[42,27,13,0,"_dependencyMap"],[42,41,13,0],[43,2,13,0],[43,6,13,0,"invariant"],[43,15,13,0],[43,18,13,0,"_interopDefault"],[43,33,13,0],[43,34,13,0,"_invariant"],[43,44,13,0],[44,2,13,34],[44,6,13,34,"_reactNativeWebDistExportsAnimated"],[44,40,13,34],[44,43,13,34,"require"],[44,50,13,34],[44,51,13,34,"_dependencyMap"],[44,65,13,34],[45,2,13,34],[45,6,13,34,"Animated"],[45,14,13,34],[45,17,13,34,"_interopDefault"],[45,32,13,34],[45,33,13,34,"_reactNativeWebDistExportsAnimated"],[45,67,13,34],[46,2,13,34],[46,6,13,34,"_reactNativeWebDistExportsStyleSheet"],[46,42,13,34],[46,45,13,34,"require"],[46,52,13,34],[46,53,13,34,"_dependencyMap"],[46,67,13,34],[47,2,13,34],[47,6,13,34,"StyleSheet"],[47,16,13,34],[47,19,13,34,"_interopDefault"],[47,34,13,34],[47,35,13,34,"_reactNativeWebDistExportsStyleSheet"],[47,71,13,34],[48,2,13,34],[48,6,13,34,"_reactNativeWebDistExportsView"],[48,36,13,34],[48,39,13,34,"require"],[48,46,13,34],[48,47,13,34,"_dependencyMap"],[48,61,13,34],[49,2,13,34],[49,6,13,34,"View"],[49,10,13,34],[49,13,13,34,"_interopDefault"],[49,28,13,34],[49,29,13,34,"_reactNativeWebDistExportsView"],[49,59,13,34],[50,2,13,34],[50,6,13,34,"_reactNativeWebDistExportsKeyboard"],[50,40,13,34],[50,43,13,34,"require"],[50,50,13,34],[50,51,13,34,"_dependencyMap"],[50,65,13,34],[51,2,13,34],[51,6,13,34,"Keyboard"],[51,14,13,34],[51,17,13,34,"_interopDefault"],[51,32,13,34],[51,33,13,34,"_reactNativeWebDistExportsKeyboard"],[51,67,13,34],[52,2,13,34],[52,6,13,34,"_reactNativeWebDistExportsStatusBar"],[52,41,13,34],[52,44,13,34,"require"],[52,51,13,34],[52,52,13,34,"_dependencyMap"],[52,66,13,34],[53,2,13,34],[53,6,13,34,"StatusBar"],[53,15,13,34],[53,18,13,34,"_interopDefault"],[53,33,13,34],[53,34,13,34,"_reactNativeWebDistExportsStatusBar"],[53,69,13,34],[54,2,13,34],[54,6,13,34,"_reactNativeWebDistExportsI18nManager"],[54,43,13,34],[54,46,13,34,"require"],[54,53,13,34],[54,54,13,34,"_dependencyMap"],[54,68,13,34],[55,2,13,34],[55,6,13,34,"I18nManager"],[55,17,13,34],[55,20,13,34,"_interopDefault"],[55,35,13,34],[55,36,13,34,"_reactNativeWebDistExportsI18nManager"],[55,73,13,34],[56,2,15,0],[56,6,15,0,"_handlersPanGestureHandler"],[56,32,15,0],[56,35,15,0,"require"],[56,42,15,0],[56,43,15,0,"_dependencyMap"],[56,57,15,0],[57,2,16,0],[57,6,16,0,"_handlersTapGestureHandler"],[57,32,16,0],[57,35,16,0,"require"],[57,42,16,0],[57,43,16,0,"_dependencyMap"],[57,57,16,0],[58,2,17,0],[58,6,17,0,"_State"],[58,12,17,0],[58,15,17,0,"require"],[58,22,17,0],[58,23,17,0,"_dependencyMap"],[58,37,17,0],[59,2,18,0],[59,6,18,0,"_reactJsxRuntime"],[59,22,18,0],[59,25,18,0,"require"],[59,32,18,0],[59,33,18,0,"_dependencyMap"],[59,47,18,0],[60,2,19,0],[60,8,19,6,"DRAG_TOSS"],[60,17,19,15],[60,20,19,18],[60,24,19,22],[61,2,20,0],[61,8,20,6,"IDLE"],[61,12,20,10],[61,15,20,13],[61,21,20,19],[62,2,21,0],[62,8,21,6,"DRAGGING"],[62,16,21,14],[62,19,21,17],[62,29,21,27],[63,2,22,0],[63,8,22,6,"SETTLING"],[63,16,22,14],[63,19,22,17],[63,29,22,27],[65,2,24,0],[66,0,25,0],[67,0,26,0],[69,2,28,0],[70,0,29,0],[71,0,30,0],[73,2,32,0],[74,0,33,0],[75,0,34,0],[77,2,36,0],[78,0,37,0],[79,0,38,0],[81,2,40,0],[82,0,41,0],[83,0,42,0],[85,2,44,0],[86,2,45,0],[87,2,46,0],[89,2,48,0],[90,0,49,0],[91,0,50,0],[93,2,52,0],[94,0,53,0],[95,0,54,0],[97,2,56,0],[98,0,57,0],[99,0,58,0],[101,2,60,0],[102,0,61,0],[103,0,62,0],[104,2,63,15],[104,8,63,21,"DrawerLayout"],[104,20,63,33],[104,29,63,42,"Component"],[104,35,63,51],[104,36,63,51,"Component"],[104,45,63,51],[104,46,63,52],[105,4,64,2],[105,11,64,9,"defaultProps"],[105,23,64,21],[105,26,64,24],[106,6,65,4,"drawerWidth"],[106,17,65,15],[106,19,65,17],[106,22,65,20],[107,6,66,4,"drawerPosition"],[107,20,66,18],[107,22,66,20],[107,28,66,26],[108,6,67,4,"useNativeAnimations"],[108,25,67,23],[108,27,67,25],[108,31,67,29],[109,6,68,4,"drawerType"],[109,16,68,14],[109,18,68,16],[109,25,68,23],[110,6,69,4,"edgeWidth"],[110,15,69,13],[110,17,69,15],[110,19,69,17],[111,6,70,4,"minSwipeDistance"],[111,22,70,20],[111,24,70,22],[111,25,70,23],[112,6,71,4,"overlayColor"],[112,18,71,16],[112,20,71,18],[112,40,71,38],[113,6,72,4,"drawerLockMode"],[113,20,72,18],[113,22,72,20],[113,32,72,30],[114,6,73,4,"enableTrackpadTwoFingerGesture"],[114,36,73,34],[114,38,73,36],[115,4,74,2],[115,5,74,3],[116,4,75,2,"constructor"],[116,15,75,13,"constructor"],[116,16,75,14,"props"],[116,21,75,19],[116,23,75,21],[117,6,76,4],[117,11,76,9],[117,12,76,10,"props"],[117,17,76,15],[117,18,76,16],[118,6,77,4],[118,12,77,10,"dragX"],[118,17,77,15],[118,20,77,18],[118,24,77,22,"Animated"],[118,32,77,30],[118,33,77,30,"default"],[118,40,77,30],[118,41,77,31,"Value"],[118,46,77,36],[118,47,77,37],[118,48,77,38],[118,49,77,39],[119,6,78,4],[119,12,78,10,"touchX"],[119,18,78,16],[119,21,78,19],[119,25,78,23,"Animated"],[119,33,78,31],[119,34,78,31,"default"],[119,41,78,31],[119,42,78,32,"Value"],[119,47,78,37],[119,48,78,38],[119,49,78,39],[119,50,78,40],[120,6,79,4],[120,12,79,10,"drawerTranslation"],[120,29,79,27],[120,32,79,30],[120,36,79,34,"Animated"],[120,44,79,42],[120,45,79,42,"default"],[120,52,79,42],[120,53,79,43,"Value"],[120,58,79,48],[120,59,79,49],[120,60,79,50],[120,61,79,51],[121,6,80,4],[121,10,80,8],[121,11,80,9,"state"],[121,16,80,14],[121,19,80,17],[122,8,81,6,"dragX"],[122,13,81,11],[123,8,82,6,"touchX"],[123,14,82,12],[124,8,83,6,"drawerTranslation"],[124,25,83,23],[125,8,84,6,"containerWidth"],[125,22,84,20],[125,24,84,22],[125,25,84,23],[126,8,85,6,"drawerState"],[126,19,85,17],[126,21,85,19,"IDLE"],[126,25,85,23],[127,8,86,6,"drawerOpened"],[127,20,86,18],[127,22,86,20],[128,6,87,4],[128,7,87,5],[129,6,88,4],[129,10,88,8],[129,11,88,9,"updateAnimatedEvent"],[129,30,88,28],[129,31,88,29,"props"],[129,36,88,34],[129,38,88,36],[129,42,88,40],[129,43,88,41,"state"],[129,48,88,46],[129,49,88,47],[130,4,89,2],[131,4,90,2,"shouldComponentUpdate"],[131,25,90,23,"shouldComponentUpdate"],[131,26,90,24,"props"],[131,31,90,29],[131,33,90,31,"state"],[131,38,90,36],[131,40,90,38],[132,6,91,4],[132,10,91,8],[132,14,91,12],[132,15,91,13,"props"],[132,20,91,18],[132,21,91,19,"drawerPosition"],[132,35,91,33],[132,40,91,38,"props"],[132,45,91,43],[132,46,91,44,"drawerPosition"],[132,60,91,58],[132,64,91,62],[132,68,91,66],[132,69,91,67,"props"],[132,74,91,72],[132,75,91,73,"drawerWidth"],[132,86,91,84],[132,91,91,89,"props"],[132,96,91,94],[132,97,91,95,"drawerWidth"],[132,108,91,106],[132,112,91,110],[132,116,91,114],[132,117,91,115,"props"],[132,122,91,120],[132,123,91,121,"drawerType"],[132,133,91,131],[132,138,91,136,"props"],[132,143,91,141],[132,144,91,142,"drawerType"],[132,154,91,152],[132,158,91,156],[132,162,91,160],[132,163,91,161,"state"],[132,168,91,166],[132,169,91,167,"containerWidth"],[132,183,91,181],[132,188,91,186,"state"],[132,193,91,191],[132,194,91,192,"containerWidth"],[132,208,91,206],[132,210,91,208],[133,8,92,6],[133,12,92,10],[133,13,92,11,"updateAnimatedEvent"],[133,32,92,30],[133,33,92,31,"props"],[133,38,92,36],[133,40,92,38,"state"],[133,45,92,43],[133,46,92,44],[134,6,93,4],[135,6,94,4],[135,13,94,11],[135,17,94,15],[136,4,95,2],[137,4,96,2,"accessibilityIsModalView"],[137,28,96,26],[137,31,96,29],[137,44,96,42,"React"],[137,49,96,47],[137,50,96,48,"createRef"],[137,59,96,57],[137,60,96,58],[137,61,96,59],[138,4,97,2,"pointerEventsView"],[138,21,97,19],[138,24,97,22],[138,37,97,35,"React"],[138,42,97,40],[138,43,97,41,"createRef"],[138,52,97,50],[138,53,97,51],[138,54,97,52],[139,4,98,2,"panGestureHandler"],[139,21,98,19],[139,24,98,22],[139,37,98,35,"React"],[139,42,98,40],[139,43,98,41,"createRef"],[139,52,98,50],[139,53,98,51],[139,54,98,52],[140,4,99,2,"drawerShown"],[140,15,99,13],[140,18,99,16],[140,23,99,21],[141,4,100,2],[141,11,100,9,"positions"],[141,20,100,18],[141,23,100,21],[142,6,101,4,"Left"],[142,10,101,8],[142,12,101,10],[142,18,101,16],[143,6,102,4,"Right"],[143,11,102,9],[143,13,102,11],[144,4,103,2],[144,5,103,3],[145,4,104,2,"updateAnimatedEvent"],[145,23,104,21],[145,26,104,24,"updateAnimatedEvent"],[145,27,104,25,"props"],[145,32,104,30],[145,34,104,32,"state"],[145,39,104,37],[145,44,104,42],[146,6,105,4],[147,6,106,4],[147,12,106,10],[148,8,107,6,"drawerPosition"],[148,22,107,20],[149,8,108,6,"drawerWidth"],[149,19,108,17],[150,8,109,6,"drawerType"],[151,6,110,4],[151,7,110,5],[151,10,110,8,"props"],[151,15,110,13],[152,6,111,4],[152,12,111,10],[153,8,112,6,"dragX"],[153,13,112,11],[153,15,112,13,"dragXValue"],[153,25,112,23],[154,8,113,6,"touchX"],[154,14,113,12],[154,16,113,14,"touchXValue"],[154,27,113,25],[155,8,114,6,"drawerTranslation"],[155,25,114,23],[156,8,115,6,"containerWidth"],[157,6,116,4],[157,7,116,5],[157,10,116,8,"state"],[157,15,116,13],[158,6,117,4],[158,10,117,8,"dragX"],[158,15,117,13],[158,18,117,16,"dragXValue"],[158,28,117,26],[159,6,118,4],[159,10,118,8,"touchX"],[159,16,118,14],[159,19,118,17,"touchXValue"],[159,30,118,28],[160,6,119,4],[160,10,119,8,"drawerPosition"],[160,24,119,22],[160,29,119,27],[160,35,119,33],[160,37,119,35],[161,8,120,6],[162,8,121,6],[163,8,122,6],[164,8,123,6],[165,8,124,6],[166,8,125,6],[167,8,126,6,"dragX"],[167,13,126,11],[167,16,126,14,"Animated"],[167,24,126,22],[167,25,126,22,"default"],[167,32,126,22],[167,33,126,23,"multiply"],[167,41,126,31],[167,42,126,32],[167,46,126,36,"Animated"],[167,54,126,44],[167,55,126,44,"default"],[167,62,126,44],[167,63,126,45,"Value"],[167,68,126,50],[167,69,126,51],[167,70,126,52],[167,71,126,53],[167,72,126,54],[167,74,126,56,"dragXValue"],[167,84,126,66],[167,85,126,67],[167,86,126,68],[167,87,126,69],[168,8,127,6,"touchX"],[168,14,127,12],[168,17,127,15,"Animated"],[168,25,127,23],[168,26,127,23,"default"],[168,33,127,23],[168,34,127,24,"add"],[168,37,127,27],[168,38,127,28],[168,42,127,32,"Animated"],[168,50,127,40],[168,51,127,40,"default"],[168,58,127,40],[168,59,127,41,"Value"],[168,64,127,46],[168,65,127,47,"containerWidth"],[168,79,127,61],[168,80,127,62],[168,82,127,64,"Animated"],[168,90,127,72],[168,91,127,72,"default"],[168,98,127,72],[168,99,127,73,"multiply"],[168,107,127,81],[168,108,127,82],[168,112,127,86,"Animated"],[168,120,127,94],[168,121,127,94,"default"],[168,128,127,94],[168,129,127,95,"Value"],[168,134,127,100],[168,135,127,101],[168,136,127,102],[168,137,127,103],[168,138,127,104],[168,140,127,106,"touchXValue"],[168,151,127,117],[168,152,127,118],[168,153,127,119],[168,154,127,120],[168,155,127,121],[169,8,128,6,"touchXValue"],[169,19,128,17],[169,20,128,18,"setValue"],[169,28,128,26],[169,29,128,27,"containerWidth"],[169,43,128,41],[169,44,128,42],[170,6,129,4],[170,7,129,5],[170,13,129,11],[171,8,130,6,"touchXValue"],[171,19,130,17],[171,20,130,18,"setValue"],[171,28,130,26],[171,29,130,27],[171,30,130,28],[171,31,130,29],[172,6,131,4],[174,6,133,4],[175,6,134,4],[176,6,135,4],[177,6,136,4],[178,6,137,4],[179,6,138,4],[180,6,139,4],[181,6,140,4],[182,6,141,4],[183,6,142,4],[184,6,143,4],[185,6,144,4],[186,6,145,4],[187,6,146,4],[188,6,147,4],[189,6,148,4],[190,6,149,4],[191,6,150,4],[192,6,151,4],[193,6,152,4],[194,6,153,4],[195,6,154,4],[196,6,155,4],[197,6,156,4],[198,6,157,4],[199,6,158,4],[199,10,158,8,"translationX"],[199,22,158,20],[199,25,158,23,"dragX"],[199,30,158,28],[200,6,159,4],[200,10,159,8,"drawerType"],[200,20,159,18],[200,25,159,23],[200,32,159,30],[200,34,159,32],[201,8,160,6],[201,14,160,12,"startPositionX"],[201,28,160,26],[201,31,160,29,"Animated"],[201,39,160,37],[201,40,160,37,"default"],[201,47,160,37],[201,48,160,38,"add"],[201,51,160,41],[201,52,160,42,"touchX"],[201,58,160,48],[201,60,160,50,"Animated"],[201,68,160,58],[201,69,160,58,"default"],[201,76,160,58],[201,77,160,59,"multiply"],[201,85,160,67],[201,86,160,68],[201,90,160,72,"Animated"],[201,98,160,80],[201,99,160,80,"default"],[201,106,160,80],[201,107,160,81,"Value"],[201,112,160,86],[201,113,160,87],[201,114,160,88],[201,115,160,89],[201,116,160,90],[201,118,160,92,"dragX"],[201,123,160,97],[201,124,160,98],[201,125,160,99],[202,8,161,6],[202,14,161,12,"dragOffsetFromOnStartPosition"],[202,43,161,41],[202,46,161,44,"startPositionX"],[202,60,161,58],[202,61,161,59,"interpolate"],[202,72,161,70],[202,73,161,71],[203,10,162,8,"inputRange"],[203,20,162,18],[203,22,162,20],[203,23,162,21,"drawerWidth"],[203,34,162,32],[203,37,162,35],[203,38,162,36],[203,40,162,38,"drawerWidth"],[203,51,162,49],[203,53,162,51,"drawerWidth"],[203,64,162,62],[203,67,162,65],[203,68,162,66],[203,69,162,67],[204,10,163,8,"outputRange"],[204,21,163,19],[204,23,163,21],[204,24,163,22],[204,25,163,23],[204,27,163,25],[204,28,163,26],[204,30,163,28],[204,31,163,29],[205,8,164,6],[205,9,164,7],[205,10,164,8],[206,8,165,6,"translationX"],[206,20,165,18],[206,23,165,21,"Animated"],[206,31,165,29],[206,32,165,29,"default"],[206,39,165,29],[206,40,165,30,"add"],[206,43,165,33],[206,44,165,34,"dragX"],[206,49,165,39],[206,51,165,41,"dragOffsetFromOnStartPosition"],[206,80,165,70],[206,81,165,71],[206,82,165,72],[206,83,165,73],[207,6,166,4],[208,6,167,4],[208,10,167,8],[208,11,167,9,"openValue"],[208,20,167,18],[208,23,167,21,"Animated"],[208,31,167,29],[208,32,167,29,"default"],[208,39,167,29],[208,40,167,30,"add"],[208,43,167,33],[208,44,167,34,"translationX"],[208,56,167,46],[208,58,167,48,"drawerTranslation"],[208,75,167,65],[208,76,167,66],[208,77,167,67,"interpolate"],[208,88,167,78],[208,89,167,79],[209,8,168,6,"inputRange"],[209,18,168,16],[209,20,168,18],[209,21,168,19],[209,22,168,20],[209,24,168,22,"drawerWidth"],[209,35,168,33],[209,36,168,34],[210,8,169,6,"outputRange"],[210,19,169,17],[210,21,169,19],[210,22,169,20],[210,23,169,21],[210,25,169,23],[210,26,169,24],[210,27,169,25],[211,8,170,6,"extrapolate"],[211,19,170,17],[211,21,170,19],[212,6,171,4],[212,7,171,5],[212,8,171,6],[213,6,172,4],[213,12,172,10,"gestureOptions"],[213,26,172,24],[213,29,172,27],[214,8,173,6,"useNativeDriver"],[214,23,173,21],[214,25,173,23,"props"],[214,30,173,28],[214,31,173,29,"useNativeAnimations"],[215,6,174,4],[215,7,174,5],[216,6,175,4],[216,10,175,8],[216,14,175,12],[216,15,175,13,"props"],[216,20,175,18],[216,21,175,19,"onDrawerSlide"],[216,34,175,32],[216,36,175,34],[217,8,176,6,"gestureOptions"],[217,22,176,20],[217,23,176,21,"listener"],[217,31,176,29],[217,34,176,32,"ev"],[217,36,176,34],[217,40,176,38],[218,10,177,8],[218,16,177,14,"translationX"],[218,28,177,26],[218,31,177,29,"Math"],[218,35,177,33],[218,36,177,34,"floor"],[218,41,177,39],[218,42,177,40,"Math"],[218,46,177,44],[218,47,177,45,"abs"],[218,50,177,48],[218,51,177,49,"ev"],[218,53,177,51],[218,54,177,52,"nativeEvent"],[218,65,177,63],[218,66,177,64,"translationX"],[218,78,177,76],[218,79,177,77],[218,80,177,78],[219,10,178,8],[219,16,178,14,"position"],[219,24,178,22],[219,27,178,25,"translationX"],[219,39,178,37],[219,42,178,40],[219,46,178,44],[219,47,178,45,"state"],[219,52,178,50],[219,53,178,51,"containerWidth"],[219,67,178,65],[220,10,179,8],[220,14,179,12],[220,15,179,13,"props"],[220,20,179,18],[220,21,179,19,"onDrawerSlide"],[220,34,179,32],[220,37,179,35,"position"],[220,45,179,43],[220,46,179,44],[221,8,180,6],[221,9,180,7],[222,6,181,4],[223,6,182,4],[223,10,182,8],[223,11,182,9,"onGestureEvent"],[223,25,182,23],[223,28,182,26,"Animated"],[223,36,182,34],[223,37,182,34,"default"],[223,44,182,34],[223,45,182,35,"event"],[223,50,182,40],[223,51,182,41],[223,52,182,42],[224,8,183,6,"nativeEvent"],[224,19,183,17],[224,21,183,19],[225,10,184,8,"translationX"],[225,22,184,20],[225,24,184,22,"dragXValue"],[225,34,184,32],[226,10,185,8,"x"],[226,11,185,9],[226,13,185,11,"touchXValue"],[227,8,186,6],[228,6,187,4],[228,7,187,5],[228,8,187,6],[228,10,187,8,"gestureOptions"],[228,24,187,22],[228,25,187,23],[229,4,188,2],[229,5,188,3],[230,4,189,2,"handleContainerLayout"],[230,25,189,23],[230,28,189,26,"handleContainerLayout"],[230,29,189,27],[231,6,190,4,"nativeEvent"],[232,4,191,2],[232,5,191,3],[232,10,191,8],[233,6,192,4],[233,10,192,8],[233,11,192,9,"setState"],[233,19,192,17],[233,20,192,18],[234,8,193,6,"containerWidth"],[234,22,193,20],[234,24,193,22,"nativeEvent"],[234,35,193,33],[234,36,193,34,"layout"],[234,42,193,40],[234,43,193,41,"width"],[235,6,194,4],[235,7,194,5],[235,8,194,6],[236,4,195,2],[236,5,195,3],[237,4,196,2,"emitStateChanged"],[237,20,196,18],[237,23,196,21,"emitStateChanged"],[237,24,196,22,"newState"],[237,32,196,30],[237,34,196,32,"drawerWillShow"],[237,48,196,46],[237,53,196,51],[238,6,197,4],[238,10,197,8],[238,11,197,9,"props"],[238,16,197,14],[238,17,197,15,"onDrawerStateChanged"],[238,37,197,35],[238,40,197,38,"newState"],[238,48,197,46],[238,50,197,48,"drawerWillShow"],[238,64,197,62],[238,65,197,63],[239,4,198,2],[239,5,198,3],[240,4,199,2,"openingHandlerStateChange"],[240,29,199,27],[240,32,199,30,"openingHandlerStateChange"],[240,33,199,31],[241,6,200,4,"nativeEvent"],[242,4,201,2],[242,5,201,3],[242,10,201,8],[243,6,202,4],[243,10,202,8,"nativeEvent"],[243,21,202,19],[243,22,202,20,"oldState"],[243,30,202,28],[243,35,202,33,"State"],[243,41,202,38],[243,42,202,38,"State"],[243,47,202,38],[243,48,202,39,"ACTIVE"],[243,54,202,45],[243,56,202,47],[244,8,203,6],[244,12,203,10],[244,13,203,11,"handleRelease"],[244,26,203,24],[244,27,203,25],[245,10,204,8,"nativeEvent"],[246,8,205,6],[246,9,205,7],[246,10,205,8],[247,6,206,4],[247,7,206,5],[247,13,206,11],[247,17,206,15,"nativeEvent"],[247,28,206,26],[247,29,206,27,"state"],[247,34,206,32],[247,39,206,37,"State"],[247,45,206,42],[247,46,206,42,"State"],[247,51,206,42],[247,52,206,43,"ACTIVE"],[247,58,206,49],[247,60,206,51],[248,8,207,6],[248,12,207,10],[248,13,207,11,"emitStateChanged"],[248,29,207,27],[248,30,207,28,"DRAGGING"],[248,38,207,36],[248,40,207,38],[248,45,207,43],[248,46,207,44],[249,8,208,6],[249,12,208,10],[249,13,208,11,"setState"],[249,21,208,19],[249,22,208,20],[250,10,209,8,"drawerState"],[250,21,209,19],[250,23,209,21,"DRAGGING"],[251,8,210,6],[251,9,210,7],[251,10,210,8],[252,8,211,6],[252,12,211,10],[252,16,211,14],[252,17,211,15,"props"],[252,22,211,20],[252,23,211,21,"keyboardDismissMode"],[252,42,211,40],[252,47,211,45],[252,56,211,54],[252,58,211,56],[253,10,212,8,"Keyboard"],[253,18,212,16],[253,19,212,16,"default"],[253,26,212,16],[253,27,212,17,"dismiss"],[253,34,212,24],[253,35,212,25],[253,36,212,26],[254,8,213,6],[255,8,214,6],[255,12,214,10],[255,16,214,14],[255,17,214,15,"props"],[255,22,214,20],[255,23,214,21,"hideStatusBar"],[255,36,214,34],[255,38,214,36],[256,10,215,8,"StatusBar"],[256,19,215,17],[256,20,215,17,"default"],[256,27,215,17],[256,28,215,18,"setHidden"],[256,37,215,27],[256,38,215,28],[256,42,215,32],[256,44,215,34],[256,48,215,38],[256,49,215,39,"props"],[256,54,215,44],[256,55,215,45,"statusBarAnimation"],[256,73,215,63],[256,77,215,67],[256,84,215,74],[256,85,215,75],[257,8,216,6],[258,6,217,4],[259,4,218,2],[259,5,218,3],[260,4,219,2,"onTapHandlerStateChange"],[260,27,219,25],[260,30,219,28,"onTapHandlerStateChange"],[260,31,219,29],[261,6,220,4,"nativeEvent"],[262,4,221,2],[262,5,221,3],[262,10,221,8],[263,6,222,4],[263,10,222,8],[263,14,222,12],[263,15,222,13,"drawerShown"],[263,26,222,24],[263,30,222,28,"nativeEvent"],[263,41,222,39],[263,42,222,40,"oldState"],[263,50,222,48],[263,55,222,53,"State"],[263,61,222,58],[263,62,222,58,"State"],[263,67,222,58],[263,68,222,59,"ACTIVE"],[263,74,222,65],[263,78,222,69],[263,82,222,73],[263,83,222,74,"props"],[263,88,222,79],[263,89,222,80,"drawerLockMode"],[263,103,222,94],[263,108,222,99],[263,121,222,112],[263,123,222,114],[264,8,223,6],[264,12,223,10],[264,13,223,11,"closeDrawer"],[264,24,223,22],[264,25,223,23],[264,26,223,24],[265,6,224,4],[266,4,225,2],[266,5,225,3],[267,4,226,2,"handleRelease"],[267,17,226,15],[267,20,226,18,"handleRelease"],[267,21,226,19],[268,6,227,4,"nativeEvent"],[269,4,228,2],[269,5,228,3],[269,10,228,8],[270,6,229,4],[270,12,229,10],[271,8,230,6,"drawerWidth"],[271,19,230,17],[272,8,231,6,"drawerPosition"],[272,22,231,20],[273,8,232,6,"drawerType"],[274,6,233,4],[274,7,233,5],[274,10,233,8],[274,14,233,12],[274,15,233,13,"props"],[274,20,233,18],[275,6,234,4],[275,12,234,10],[276,8,235,6,"containerWidth"],[277,6,236,4],[277,7,236,5],[277,10,236,8],[277,14,236,12],[277,15,236,13,"state"],[277,20,236,18],[278,6,237,4],[278,10,237,8],[279,8,238,6,"translationX"],[279,20,238,18],[279,22,238,20,"dragX"],[279,27,238,25],[280,8,239,6,"velocityX"],[280,17,239,15],[281,8,240,6,"x"],[281,9,240,7],[281,11,240,9,"touchX"],[282,6,241,4],[282,7,241,5],[282,10,241,8,"nativeEvent"],[282,21,241,19],[283,6,242,4],[283,10,242,8,"drawerPosition"],[283,24,242,22],[283,29,242,27],[283,35,242,33],[283,37,242,35],[284,8,243,6],[285,8,244,6],[286,8,245,6,"dragX"],[286,13,245,11],[286,16,245,14],[286,17,245,15,"dragX"],[286,22,245,20],[287,8,246,6,"touchX"],[287,14,246,12],[287,17,246,15,"containerWidth"],[287,31,246,29],[287,34,246,32,"touchX"],[287,40,246,38],[288,8,247,6,"velocityX"],[288,17,247,15],[288,20,247,18],[288,21,247,19,"velocityX"],[288,30,247,28],[289,6,248,4],[290,6,249,4],[290,12,249,10,"gestureStartX"],[290,25,249,23],[290,28,249,26,"touchX"],[290,34,249,32],[290,37,249,35,"dragX"],[290,42,249,40],[291,6,250,4],[291,10,250,8,"dragOffsetBasedOnStart"],[291,32,250,30],[291,35,250,33],[291,36,250,34],[292,6,251,4],[292,10,251,8,"drawerType"],[292,20,251,18],[292,25,251,23],[292,32,251,30],[292,34,251,32],[293,8,252,6,"dragOffsetBasedOnStart"],[293,30,252,28],[293,33,252,31,"gestureStartX"],[293,46,252,44],[293,49,252,47,"drawerWidth"],[293,60,252,58],[293,63,252,61,"gestureStartX"],[293,76,252,74],[293,79,252,77,"drawerWidth"],[293,90,252,88],[293,93,252,91],[293,94,252,92],[294,6,253,4],[295,6,254,4],[295,12,254,10,"startOffsetX"],[295,24,254,22],[295,27,254,25,"dragX"],[295,32,254,30],[295,35,254,33,"dragOffsetBasedOnStart"],[295,57,254,55],[295,61,254,59],[295,65,254,63],[295,66,254,64,"drawerShown"],[295,77,254,75],[295,80,254,78,"drawerWidth"],[295,91,254,89],[295,94,254,92],[295,95,254,93],[295,96,254,94],[296,6,255,4],[296,12,255,10,"projOffsetX"],[296,23,255,21],[296,26,255,24,"startOffsetX"],[296,38,255,36],[296,41,255,39,"DRAG_TOSS"],[296,50,255,48],[296,53,255,51,"velocityX"],[296,62,255,60],[297,6,256,4],[297,12,256,10,"shouldOpen"],[297,22,256,20],[297,25,256,23,"projOffsetX"],[297,36,256,34],[297,39,256,37,"drawerWidth"],[297,50,256,48],[297,53,256,51],[297,54,256,52],[298,6,257,4],[298,10,257,8,"shouldOpen"],[298,20,257,18],[298,22,257,20],[299,8,258,6],[299,12,258,10],[299,13,258,11,"animateDrawer"],[299,26,258,24],[299,27,258,25,"startOffsetX"],[299,39,258,37],[299,41,258,39,"drawerWidth"],[299,52,258,50],[299,54,258,52,"velocityX"],[299,63,258,61],[299,64,258,62],[300,6,259,4],[300,7,259,5],[300,13,259,11],[301,8,260,6],[301,12,260,10],[301,13,260,11,"animateDrawer"],[301,26,260,24],[301,27,260,25,"startOffsetX"],[301,39,260,37],[301,41,260,39],[301,42,260,40],[301,44,260,42,"velocityX"],[301,53,260,51],[301,54,260,52],[302,6,261,4],[303,4,262,2],[303,5,262,3],[304,4,263,2,"updateShowing"],[304,17,263,15],[304,20,263,18,"showing"],[304,27,263,25],[304,31,263,29],[305,6,264,4],[305,10,264,8],[305,11,264,9,"drawerShown"],[305,22,264,20],[305,25,264,23,"showing"],[305,32,264,30],[306,6,265,4],[306,10,265,8],[306,11,265,9,"accessibilityIsModalView"],[306,35,265,33],[306,36,265,34,"current"],[306,43,265,41],[306,45,265,43,"setNativeProps"],[306,59,265,57],[306,60,265,58],[307,8,266,6,"accessibilityViewIsModal"],[307,32,266,30],[307,34,266,32,"showing"],[308,6,267,4],[308,7,267,5],[308,8,267,6],[309,6,268,4],[309,10,268,8],[309,11,268,9,"pointerEventsView"],[309,28,268,26],[309,29,268,27,"current"],[309,36,268,34],[309,38,268,36,"setNativeProps"],[309,52,268,50],[309,53,268,51],[310,8,269,6,"pointerEvents"],[310,21,269,19],[310,23,269,21,"showing"],[310,30,269,28],[310,33,269,31],[310,39,269,37],[310,42,269,40],[311,6,270,4],[311,7,270,5],[311,8,270,6],[312,6,271,4],[312,12,271,10],[313,8,272,6,"drawerPosition"],[313,22,272,20],[314,8,273,6,"minSwipeDistance"],[314,24,273,22],[315,8,274,6,"edgeWidth"],[316,6,275,4],[316,7,275,5],[316,10,275,8],[316,14,275,12],[316,15,275,13,"props"],[316,20,275,18],[317,6,276,4],[317,12,276,10,"fromLeft"],[317,20,276,18],[317,23,276,21,"drawerPosition"],[317,37,276,35],[317,42,276,40],[317,48,276,46],[318,6,277,4],[319,6,278,4],[320,6,279,4],[321,6,280,4],[321,12,280,10,"gestureOrientation"],[321,30,280,28],[321,33,280,31],[321,34,280,32,"fromLeft"],[321,42,280,40],[321,45,280,43],[321,46,280,44],[321,49,280,47],[321,50,280,48],[321,51,280,49],[321,56,280,54],[321,60,280,58],[321,61,280,59,"drawerShown"],[321,72,280,70],[321,75,280,73],[321,76,280,74],[321,77,280,75],[321,80,280,78],[321,81,280,79],[321,82,280,80],[322,6,281,4],[323,6,282,4],[324,6,283,4],[325,6,284,4],[325,12,284,10,"hitSlop"],[325,19,284,17],[325,22,284,20,"fromLeft"],[325,30,284,28],[325,33,284,31],[326,8,285,6,"left"],[326,12,285,10],[326,14,285,12],[326,15,285,13],[327,8,286,6,"width"],[327,13,286,11],[327,15,286,13,"showing"],[327,22,286,20],[327,25,286,23,"undefined"],[327,34,286,32],[327,37,286,35,"edgeWidth"],[328,6,287,4],[328,7,287,5],[328,10,287,8],[329,8,288,6,"right"],[329,13,288,11],[329,15,288,13],[329,16,288,14],[330,8,289,6,"width"],[330,13,289,11],[330,15,289,13,"showing"],[330,22,289,20],[330,25,289,23,"undefined"],[330,34,289,32],[330,37,289,35,"edgeWidth"],[331,6,290,4],[331,7,290,5],[332,6,291,4],[333,6,292,4],[333,10,292,8],[333,11,292,9,"panGestureHandler"],[333,28,292,26],[333,29,292,27,"current"],[333,36,292,34],[333,38,292,36,"setNativeProps"],[333,52,292,50],[333,53,292,51],[334,8,293,6,"hitSlop"],[334,15,293,13],[335,8,294,6,"activeOffsetX"],[335,21,294,19],[335,23,294,21,"gestureOrientation"],[335,41,294,39],[335,44,294,42,"minSwipeDistance"],[336,6,295,4],[336,7,295,5],[336,8,295,6],[337,4,296,2],[337,5,296,3],[338,4,297,2,"animateDrawer"],[338,17,297,15],[338,20,297,18,"animateDrawer"],[338,21,297,19,"fromValue"],[338,30,297,28],[338,32,297,30,"toValue"],[338,39,297,37],[338,41,297,39,"velocity"],[338,49,297,47],[338,51,297,49,"speed"],[338,56,297,54],[338,61,297,59],[339,6,298,4],[339,10,298,8],[339,11,298,9,"state"],[339,16,298,14],[339,17,298,15,"dragX"],[339,22,298,20],[339,23,298,21,"setValue"],[339,31,298,29],[339,32,298,30],[339,33,298,31],[339,34,298,32],[340,6,299,4],[340,10,299,8],[340,11,299,9,"state"],[340,16,299,14],[340,17,299,15,"touchX"],[340,23,299,21],[340,24,299,22,"setValue"],[340,32,299,30],[340,33,299,31],[340,37,299,35],[340,38,299,36,"props"],[340,43,299,41],[340,44,299,42,"drawerPosition"],[340,58,299,56],[340,63,299,61],[340,69,299,67],[340,72,299,70],[340,73,299,71],[340,76,299,74],[340,80,299,78],[340,81,299,79,"state"],[340,86,299,84],[340,87,299,85,"containerWidth"],[340,101,299,99],[340,102,299,100],[341,6,300,4],[341,10,300,8,"fromValue"],[341,19,300,17],[341,23,300,21],[341,27,300,25],[341,29,300,27],[342,8,301,6],[342,12,301,10,"nextFramePosition"],[342,29,301,27],[342,32,301,30,"fromValue"],[342,41,301,39],[343,8,302,6],[343,12,302,10],[343,16,302,14],[343,17,302,15,"props"],[343,22,302,20],[343,23,302,21,"useNativeAnimations"],[343,42,302,40],[343,44,302,42],[344,10,303,8],[345,10,304,8],[346,10,305,8],[347,10,306,8],[348,10,307,8],[348,14,307,12,"fromValue"],[348,23,307,21],[348,26,307,24,"toValue"],[348,33,307,31],[348,37,307,35,"velocity"],[348,45,307,43],[348,48,307,46],[348,49,307,47],[348,51,307,49],[349,12,308,10,"nextFramePosition"],[349,29,308,27],[349,32,308,30,"Math"],[349,36,308,34],[349,37,308,35,"min"],[349,40,308,38],[349,41,308,39,"fromValue"],[349,50,308,48],[349,53,308,51,"velocity"],[349,61,308,59],[349,64,308,62],[349,68,308,66],[349,70,308,68,"toValue"],[349,77,308,75],[349,78,308,76],[350,10,309,8],[350,11,309,9],[350,17,309,15],[350,21,309,19,"fromValue"],[350,30,309,28],[350,33,309,31,"toValue"],[350,40,309,38],[350,44,309,42,"velocity"],[350,52,309,50],[350,55,309,53],[350,56,309,54],[350,58,309,56],[351,12,310,10,"nextFramePosition"],[351,29,310,27],[351,32,310,30,"Math"],[351,36,310,34],[351,37,310,35,"max"],[351,40,310,38],[351,41,310,39,"fromValue"],[351,50,310,48],[351,53,310,51,"velocity"],[351,61,310,59],[351,64,310,62],[351,68,310,66],[351,70,310,68,"toValue"],[351,77,310,75],[351,78,310,76],[352,10,311,8],[353,8,312,6],[354,8,313,6],[354,12,313,10],[354,13,313,11,"state"],[354,18,313,16],[354,19,313,17,"drawerTranslation"],[354,36,313,34],[354,37,313,35,"setValue"],[354,45,313,43],[354,46,313,44,"nextFramePosition"],[354,63,313,61],[354,64,313,62],[355,6,314,4],[356,6,315,4],[356,12,315,10,"willShow"],[356,20,315,18],[356,23,315,21,"toValue"],[356,30,315,28],[356,35,315,33],[356,36,315,34],[357,6,316,4],[357,10,316,8],[357,11,316,9,"updateShowing"],[357,24,316,22],[357,25,316,23,"willShow"],[357,33,316,31],[357,34,316,32],[358,6,317,4],[358,10,317,8],[358,11,317,9,"emitStateChanged"],[358,27,317,25],[358,28,317,26,"SETTLING"],[358,36,317,34],[358,38,317,36,"willShow"],[358,46,317,44],[358,47,317,45],[359,6,318,4],[359,10,318,8],[359,11,318,9,"setState"],[359,19,318,17],[359,20,318,18],[360,8,319,6,"drawerState"],[360,19,319,17],[360,21,319,19,"SETTLING"],[361,6,320,4],[361,7,320,5],[361,8,320,6],[362,6,321,4],[362,10,321,8],[362,14,321,12],[362,15,321,13,"props"],[362,20,321,18],[362,21,321,19,"hideStatusBar"],[362,34,321,32],[362,36,321,34],[363,8,322,6,"StatusBar"],[363,17,322,15],[363,18,322,15,"default"],[363,25,322,15],[363,26,322,16,"setHidden"],[363,35,322,25],[363,36,322,26,"willShow"],[363,44,322,34],[363,46,322,36],[363,50,322,40],[363,51,322,41,"props"],[363,56,322,46],[363,57,322,47,"statusBarAnimation"],[363,75,322,65],[363,79,322,69],[363,86,322,76],[363,87,322,77],[364,6,323,4],[365,6,324,4,"Animated"],[365,14,324,12],[365,15,324,12,"default"],[365,22,324,12],[365,23,324,13,"spring"],[365,29,324,19],[365,30,324,20],[365,34,324,24],[365,35,324,25,"state"],[365,40,324,30],[365,41,324,31,"drawerTranslation"],[365,58,324,48],[365,60,324,50],[366,8,325,6,"velocity"],[366,16,325,14],[367,8,326,6,"bounciness"],[367,18,326,16],[367,20,326,18],[367,21,326,19],[368,8,327,6,"toValue"],[368,15,327,13],[369,8,328,6,"useNativeDriver"],[369,23,328,21],[369,25,328,23],[369,29,328,27],[369,30,328,28,"props"],[369,35,328,33],[369,36,328,34,"useNativeAnimations"],[369,55,328,53],[370,8,329,6,"speed"],[370,13,329,11],[370,15,329,13,"speed"],[370,20,329,18],[370,24,329,22,"undefined"],[371,6,330,4],[371,7,330,5],[371,8,330,6],[371,9,330,7,"start"],[371,14,330,12],[371,15,330,13],[371,16,330,14],[372,8,331,6,"finished"],[373,6,332,4],[373,7,332,5],[373,12,332,10],[374,8,333,6],[374,12,333,10,"finished"],[374,20,333,18],[374,22,333,20],[375,10,334,8],[375,14,334,12],[375,15,334,13,"emitStateChanged"],[375,31,334,29],[375,32,334,30,"IDLE"],[375,36,334,34],[375,38,334,36,"willShow"],[375,46,334,44],[375,47,334,45],[376,10,335,8],[376,14,335,12],[376,15,335,13,"setState"],[376,23,335,21],[376,24,335,22],[377,12,336,10,"drawerOpened"],[377,24,336,22],[377,26,336,24,"willShow"],[378,10,337,8],[378,11,337,9],[378,12,337,10],[379,10,338,8],[379,14,338,12],[379,18,338,16],[379,19,338,17,"state"],[379,24,338,22],[379,25,338,23,"drawerState"],[379,36,338,34],[379,41,338,39,"DRAGGING"],[379,49,338,47],[379,51,338,49],[380,12,339,10],[381,12,340,10],[382,12,341,10],[382,16,341,14],[382,17,341,15,"setState"],[382,25,341,23],[382,26,341,24],[383,14,342,12,"drawerState"],[383,25,342,23],[383,27,342,25,"IDLE"],[384,12,343,10],[384,13,343,11],[384,14,343,12],[385,10,344,8],[386,10,345,8],[386,14,345,12,"willShow"],[386,22,345,20],[386,24,345,22],[387,12,346,10],[387,16,346,14],[387,17,346,15,"props"],[387,22,346,20],[387,23,346,21,"onDrawerOpen"],[387,35,346,33],[387,38,346,36],[387,39,346,37],[388,10,347,8],[388,11,347,9],[388,17,347,15],[389,12,348,10],[389,16,348,14],[389,17,348,15,"props"],[389,22,348,20],[389,23,348,21,"onDrawerClose"],[389,36,348,34],[389,39,348,37],[389,40,348,38],[390,10,349,8],[391,8,350,6],[392,6,351,4],[392,7,351,5],[392,8,351,6],[393,4,352,2],[393,5,352,3],[395,4,354,2],[396,4,355,2,"openDrawer"],[396,14,355,12],[396,17,355,15,"openDrawer"],[396,18,355,16,"options"],[396,25,355,23],[396,28,355,26],[396,29,355,27],[396,30,355,28],[396,35,355,33],[397,6,356,4],[397,10,356,8],[397,11,356,9,"animateDrawer"],[397,24,356,22],[398,6,357,4],[399,6,358,4,"undefined"],[399,15,358,13],[399,17,358,15],[399,21,358,19],[399,22,358,20,"props"],[399,27,358,25],[399,28,358,26,"drawerWidth"],[399,39,358,37],[399,41,358,39,"options"],[399,48,358,46],[399,49,358,47,"velocity"],[399,57,358,55],[399,60,358,58,"options"],[399,67,358,65],[399,68,358,66,"velocity"],[399,76,358,74],[399,79,358,77],[399,80,358,78],[399,82,358,80,"options"],[399,89,358,87],[399,90,358,88,"speed"],[399,95,358,93],[399,96,358,94],[401,6,360,4],[402,6,361,4],[403,6,362,4],[403,10,362,8],[403,11,362,9,"forceUpdate"],[403,22,362,20],[403,23,362,21],[403,24,362,22],[404,4,363,2],[404,5,363,3],[405,4,364,2,"closeDrawer"],[405,15,364,13],[405,18,364,16,"closeDrawer"],[405,19,364,17,"options"],[405,26,364,24],[405,29,364,27],[405,30,364,28],[405,31,364,29],[405,36,364,34],[406,6,365,4],[407,6,366,4],[407,10,366,8],[407,11,366,9,"animateDrawer"],[407,24,366,22],[407,25,366,23,"undefined"],[407,34,366,32],[407,36,366,34],[407,37,366,35],[407,39,366,37,"options"],[407,46,366,44],[407,47,366,45,"velocity"],[407,55,366,53],[407,58,366,56,"options"],[407,65,366,63],[407,66,366,64,"velocity"],[407,74,366,72],[407,77,366,75],[407,78,366,76],[407,80,366,78,"options"],[407,87,366,85],[407,88,366,86,"speed"],[407,93,366,91],[407,94,366,92],[409,6,368,4],[410,6,369,4],[411,6,370,4],[411,10,370,8],[411,11,370,9,"forceUpdate"],[411,22,370,20],[411,23,370,21],[411,24,370,22],[412,4,371,2],[412,5,371,3],[413,4,372,2,"renderOverlay"],[413,17,372,15],[413,20,372,18,"renderOverlay"],[413,21,372,18],[413,26,372,24],[414,6,373,4],[415,6,374,4],[415,10,374,4,"invariant"],[415,19,374,13],[415,20,374,13,"default"],[415,27,374,13],[415,29,374,14],[415,33,374,18],[415,34,374,19,"openValue"],[415,43,374,28],[415,45,374,30],[415,60,374,45],[415,61,374,46],[416,6,375,4],[416,10,375,8,"overlayOpacity"],[416,24,375,22],[417,6,376,4],[417,10,376,8],[417,14,376,12],[417,15,376,13,"state"],[417,20,376,18],[417,21,376,19,"drawerState"],[417,32,376,30],[417,37,376,35,"IDLE"],[417,41,376,39],[417,43,376,41],[418,8,377,6,"overlayOpacity"],[418,22,377,20],[418,25,377,23],[418,29,377,27],[418,30,377,28,"openValue"],[418,39,377,37],[419,6,378,4],[419,7,378,5],[419,13,378,11],[420,8,379,6,"overlayOpacity"],[420,22,379,20],[420,25,379,23],[420,29,379,27],[420,30,379,28,"state"],[420,35,379,33],[420,36,379,34,"drawerOpened"],[420,48,379,46],[420,51,379,49],[420,52,379,50],[420,55,379,53],[420,56,379,54],[421,6,380,4],[422,6,381,4],[422,12,381,10,"dynamicOverlayStyles"],[422,32,381,30],[422,35,381,33],[423,8,382,6,"opacity"],[423,15,382,13],[423,17,382,15,"overlayOpacity"],[423,31,382,29],[424,8,383,6,"backgroundColor"],[424,23,383,21],[424,25,383,23],[424,29,383,27],[424,30,383,28,"props"],[424,35,383,33],[424,36,383,34,"overlayColor"],[425,6,384,4],[425,7,384,5],[426,6,385,4],[426,13,385,11],[426,26,385,24],[426,30,385,24,"_jsx"],[426,46,385,28],[426,47,385,28,"jsx"],[426,50,385,28],[426,52,385,29,"TapGestureHandler"],[426,78,385,46],[426,79,385,46,"TapGestureHandler"],[426,96,385,46],[426,98,385,48],[427,8,386,6,"onHandlerStateChange"],[427,28,386,26],[427,30,386,28],[427,34,386,32],[427,35,386,33,"onTapHandlerStateChange"],[427,58,386,56],[428,8,387,6,"children"],[428,16,387,14],[428,18,387,16],[428,31,387,29],[428,35,387,29,"_jsx"],[428,51,387,33],[428,52,387,33,"jsx"],[428,55,387,33],[428,57,387,34,"Animated"],[428,65,387,42],[428,66,387,42,"default"],[428,73,387,42],[428,74,387,43,"View"],[428,78,387,47],[428,80,387,49],[429,10,388,8,"pointerEvents"],[429,23,388,21],[429,25,388,23],[429,29,388,27],[429,30,388,28,"drawerShown"],[429,41,388,39],[429,44,388,42],[429,50,388,48],[429,53,388,51],[429,59,388,57],[430,10,389,8,"ref"],[430,13,389,11],[430,15,389,13],[430,19,389,17],[430,20,389,18,"pointerEventsView"],[430,37,389,35],[431,10,390,8,"style"],[431,15,390,13],[431,17,390,15],[431,18,390,16,"styles"],[431,24,390,22],[431,25,390,23,"overlay"],[431,32,390,30],[431,34,390,32,"dynamicOverlayStyles"],[431,54,390,52],[432,8,391,6],[432,9,391,7],[433,6,392,4],[433,7,392,5],[433,8,392,6],[434,4,393,2],[434,5,393,3],[435,4,394,2,"renderDrawer"],[435,16,394,14],[435,19,394,17,"renderDrawer"],[435,20,394,17],[435,25,394,23],[436,6,395,4],[436,12,395,10],[437,8,396,6,"drawerBackgroundColor"],[437,29,396,27],[438,8,397,6,"drawerWidth"],[438,19,397,17],[439,8,398,6,"drawerPosition"],[439,22,398,20],[440,8,399,6,"drawerType"],[440,18,399,16],[441,8,400,6,"drawerContainerStyle"],[441,28,400,26],[442,8,401,6,"contentContainerStyle"],[443,6,402,4],[443,7,402,5],[443,10,402,8],[443,14,402,12],[443,15,402,13,"props"],[443,20,402,18],[444,6,403,4],[444,12,403,10,"fromLeft"],[444,20,403,18],[444,23,403,21,"drawerPosition"],[444,37,403,35],[444,42,403,40],[444,48,403,46],[445,6,404,4],[445,12,404,10,"drawerSlide"],[445,23,404,21],[445,26,404,24,"drawerType"],[445,36,404,34],[445,41,404,39],[445,47,404,45],[446,6,405,4],[446,12,405,10,"containerSlide"],[446,26,405,24],[446,29,405,27,"drawerType"],[446,39,405,37],[446,44,405,42],[446,51,405,49],[448,6,407,4],[449,6,408,4],[450,6,409,4],[451,6,410,4],[452,6,411,4],[452,12,411,10,"reverseContentDirection"],[452,35,411,33],[452,38,411,36,"I18nManager"],[452,49,411,47],[452,50,411,47,"default"],[452,57,411,47],[452,58,411,48,"isRTL"],[452,63,411,53],[452,66,411,56,"fromLeft"],[452,74,411,64],[452,77,411,67],[452,78,411,68,"fromLeft"],[452,86,411,76],[453,6,412,4],[453,12,412,10,"dynamicDrawerStyles"],[453,31,412,29],[453,34,412,32],[454,8,413,6,"backgroundColor"],[454,23,413,21],[454,25,413,23,"drawerBackgroundColor"],[454,46,413,44],[455,8,414,6,"width"],[455,13,414,11],[455,15,414,13,"drawerWidth"],[456,6,415,4],[456,7,415,5],[457,6,416,4],[457,12,416,10,"openValue"],[457,21,416,19],[457,24,416,22],[457,28,416,26],[457,29,416,27,"openValue"],[457,38,416,36],[458,6,417,4],[458,10,417,4,"invariant"],[458,19,417,13],[458,20,417,13,"default"],[458,27,417,13],[458,29,417,14,"openValue"],[458,38,417,23],[458,40,417,25],[458,55,417,40],[458,56,417,41],[459,6,418,4],[459,10,418,8,"containerStyles"],[459,25,418,23],[460,6,419,4],[460,10,419,8,"containerSlide"],[460,24,419,22],[460,26,419,24],[461,8,420,6],[461,14,420,12,"containerTranslateX"],[461,33,420,31],[461,36,420,34,"openValue"],[461,45,420,43],[461,46,420,44,"interpolate"],[461,57,420,55],[461,58,420,56],[462,10,421,8,"inputRange"],[462,20,421,18],[462,22,421,20],[462,23,421,21],[462,24,421,22],[462,26,421,24],[462,27,421,25],[462,28,421,26],[463,10,422,8,"outputRange"],[463,21,422,19],[463,23,422,21,"fromLeft"],[463,31,422,29],[463,34,422,32],[463,35,422,33],[463,36,422,34],[463,38,422,36,"drawerWidth"],[463,49,422,47],[463,50,422,48],[463,53,422,51],[463,54,422,52],[463,55,422,53],[463,57,422,55],[463,58,422,56,"drawerWidth"],[463,69,422,67],[463,70,422,68],[464,10,423,8,"extrapolate"],[464,21,423,19],[464,23,423,21],[465,8,424,6],[465,9,424,7],[465,10,424,8],[466,8,425,6,"containerStyles"],[466,23,425,21],[466,26,425,24],[467,10,426,8,"transform"],[467,19,426,17],[467,21,426,19],[467,22,426,20],[468,12,427,10,"translateX"],[468,22,427,20],[468,24,427,22,"containerTranslateX"],[469,10,428,8],[469,11,428,9],[470,8,429,6],[470,9,429,7],[471,6,430,4],[472,6,431,4],[472,10,431,8,"drawerTranslateX"],[472,26,431,24],[472,29,431,27],[472,30,431,28],[473,6,432,4],[473,10,432,8,"drawerSlide"],[473,21,432,19],[473,23,432,21],[474,8,433,6],[474,14,433,12,"closedDrawerOffset"],[474,32,433,30],[474,35,433,33,"fromLeft"],[474,43,433,41],[474,46,433,44],[474,47,433,45,"drawerWidth"],[474,58,433,56],[474,61,433,59,"drawerWidth"],[474,72,433,70],[475,8,434,6],[475,12,434,10],[475,16,434,14],[475,17,434,15,"state"],[475,22,434,20],[475,23,434,21,"drawerState"],[475,34,434,32],[475,39,434,37,"IDLE"],[475,43,434,41],[475,45,434,43],[476,10,435,8,"drawerTranslateX"],[476,26,435,24],[476,29,435,27,"openValue"],[476,38,435,36],[476,39,435,37,"interpolate"],[476,50,435,48],[476,51,435,49],[477,12,436,10,"inputRange"],[477,22,436,20],[477,24,436,22],[477,25,436,23],[477,26,436,24],[477,28,436,26],[477,29,436,27],[477,30,436,28],[478,12,437,10,"outputRange"],[478,23,437,21],[478,25,437,23],[478,26,437,24,"closedDrawerOffset"],[478,44,437,42],[478,46,437,44],[478,47,437,45],[478,48,437,46],[479,12,438,10,"extrapolate"],[479,23,438,21],[479,25,438,23],[480,10,439,8],[480,11,439,9],[480,12,439,10],[481,8,440,6],[481,9,440,7],[481,15,440,13],[482,10,441,8,"drawerTranslateX"],[482,26,441,24],[482,29,441,27],[482,33,441,31],[482,34,441,32,"state"],[482,39,441,37],[482,40,441,38,"drawerOpened"],[482,52,441,50],[482,55,441,53],[482,56,441,54],[482,59,441,57,"closedDrawerOffset"],[482,77,441,75],[483,8,442,6],[484,6,443,4],[485,6,444,4],[485,12,444,10,"drawerStyles"],[485,24,444,22],[485,27,444,25],[486,8,445,6,"transform"],[486,17,445,15],[486,19,445,17],[486,20,445,18],[487,10,446,8,"translateX"],[487,20,446,18],[487,22,446,20,"drawerTranslateX"],[488,8,447,6],[488,9,447,7],[488,10,447,8],[489,8,448,6,"flexDirection"],[489,21,448,19],[489,23,448,21,"reverseContentDirection"],[489,46,448,44],[489,49,448,47],[489,62,448,60],[489,65,448,63],[490,6,449,4],[490,7,449,5],[491,6,450,4],[491,13,450,11],[491,26,450,24],[491,30,450,24,"_jsxs"],[491,46,450,29],[491,47,450,29,"jsxs"],[491,51,450,29],[491,53,450,30,"Animated"],[491,61,450,38],[491,62,450,38,"default"],[491,69,450,38],[491,70,450,39,"View"],[491,74,450,43],[491,76,450,45],[492,8,451,6,"style"],[492,13,451,11],[492,15,451,13,"styles"],[492,21,451,19],[492,22,451,20,"main"],[492,26,451,24],[493,8,452,6,"onLayout"],[493,16,452,14],[493,18,452,16],[493,22,452,20],[493,23,452,21,"handleContainerLayout"],[493,44,452,42],[494,8,453,6,"children"],[494,16,453,14],[494,18,453,16],[494,19,453,17],[494,32,453,30],[494,36,453,30,"_jsxs"],[494,52,453,35],[494,53,453,35,"jsxs"],[494,57,453,35],[494,59,453,36,"Animated"],[494,67,453,44],[494,68,453,44,"default"],[494,75,453,44],[494,76,453,45,"View"],[494,80,453,49],[494,82,453,51],[495,10,454,8,"style"],[495,15,454,13],[495,17,454,15],[495,18,454,16,"drawerType"],[495,28,454,26],[495,33,454,31],[495,40,454,38],[495,43,454,41,"styles"],[495,49,454,47],[495,50,454,48,"containerOnBack"],[495,65,454,63],[495,68,454,66,"styles"],[495,74,454,72],[495,75,454,73,"containerInFront"],[495,91,454,89],[495,93,454,91,"containerStyles"],[495,108,454,106],[495,110,454,108,"contentContainerStyle"],[495,131,454,129],[495,132,454,130],[496,10,455,8,"importantForAccessibility"],[496,35,455,33],[496,37,455,35],[496,41,455,39],[496,42,455,40,"drawerShown"],[496,53,455,51],[496,56,455,54],[496,77,455,75],[496,80,455,78],[496,85,455,83],[497,10,456,8,"children"],[497,18,456,16],[497,20,456,18],[497,21,456,19],[497,28,456,26],[497,32,456,30],[497,33,456,31,"props"],[497,38,456,36],[497,39,456,37,"children"],[497,47,456,45],[497,52,456,50],[497,62,456,60],[497,65,456,63],[497,69,456,67],[497,70,456,68,"props"],[497,75,456,73],[497,76,456,74,"children"],[497,84,456,82],[497,85,456,83],[497,89,456,87],[497,90,456,88,"openValue"],[497,99,456,97],[497,100,456,98],[497,103,456,101],[497,107,456,105],[497,108,456,106,"props"],[497,113,456,111],[497,114,456,112,"children"],[497,122,456,120],[497,124,456,122],[497,128,456,126],[497,129,456,127,"renderOverlay"],[497,142,456,140],[497,143,456,141],[497,144,456,142],[498,8,457,6],[498,9,457,7],[498,10,457,8],[498,12,457,10],[498,25,457,23],[498,29,457,23,"_jsx"],[498,45,457,27],[498,46,457,27,"jsx"],[498,49,457,27],[498,51,457,28,"Animated"],[498,59,457,36],[498,60,457,36,"default"],[498,67,457,36],[498,68,457,37,"View"],[498,72,457,41],[498,74,457,43],[499,10,458,8,"pointerEvents"],[499,23,458,21],[499,25,458,23],[499,35,458,33],[500,10,459,8,"ref"],[500,13,459,11],[500,15,459,13],[500,19,459,17],[500,20,459,18,"accessibilityIsModalView"],[500,44,459,42],[501,10,460,8,"accessibilityViewIsModal"],[501,34,460,32],[501,36,460,34],[501,40,460,38],[501,41,460,39,"drawerShown"],[501,52,460,50],[502,10,461,8,"style"],[502,15,461,13],[502,17,461,15],[502,18,461,16,"styles"],[502,24,461,22],[502,25,461,23,"drawerContainer"],[502,40,461,38],[502,42,461,40,"drawerStyles"],[502,54,461,52],[502,56,461,54,"drawerContainerStyle"],[502,76,461,74],[502,77,461,75],[503,10,462,8,"children"],[503,18,462,16],[503,20,462,18],[503,33,462,31],[503,37,462,31,"_jsx"],[503,53,462,35],[503,54,462,35,"jsx"],[503,57,462,35],[503,59,462,36,"View"],[503,63,462,40],[503,64,462,40,"default"],[503,71,462,40],[503,73,462,42],[504,12,463,10,"style"],[504,17,463,15],[504,19,463,17,"dynamicDrawerStyles"],[504,38,463,36],[505,12,464,10,"children"],[505,20,464,18],[505,22,464,20],[505,26,464,24],[505,27,464,25,"props"],[505,32,464,30],[505,33,464,31,"renderNavigationView"],[505,53,464,51],[505,54,464,52],[505,58,464,56],[505,59,464,57,"openValue"],[505,68,464,66],[506,10,465,8],[506,11,465,9],[507,8,466,6],[507,9,466,7],[507,10,466,8],[508,6,467,4],[508,7,467,5],[508,8,467,6],[509,4,468,2],[509,5,468,3],[510,4,469,2,"setPanGestureRef"],[510,20,469,18],[510,23,469,21,"ref"],[510,26,469,24],[510,30,469,28],[511,6,470,4],[512,6,471,4],[513,6,472,4],[513,10,472,8],[513,11,472,9,"panGestureHandler"],[513,28,472,26],[513,29,472,27,"current"],[513,36,472,34],[513,39,472,37,"ref"],[513,42,472,40],[514,6,473,4],[514,10,473,8],[514,11,473,9,"props"],[514,16,473,14],[514,17,473,15,"onGestureRef"],[514,29,473,27],[514,32,473,30,"ref"],[514,35,473,33],[514,36,473,34],[515,4,474,2],[515,5,474,3],[516,4,475,2,"render"],[516,10,475,8,"render"],[516,11,475,8],[516,13,475,11],[517,6,476,4],[517,12,476,10],[518,8,477,6,"drawerPosition"],[518,22,477,20],[519,8,478,6,"drawerLockMode"],[519,22,478,20],[520,8,479,6,"edgeWidth"],[520,17,479,15],[521,8,480,6,"minSwipeDistance"],[522,6,481,4],[522,7,481,5],[522,10,481,8],[522,14,481,12],[522,15,481,13,"props"],[522,20,481,18],[523,6,482,4],[523,12,482,10,"fromLeft"],[523,20,482,18],[523,23,482,21,"drawerPosition"],[523,37,482,35],[523,42,482,40],[523,48,482,46],[525,6,484,4],[526,6,485,4],[527,6,486,4],[528,6,487,4],[528,12,487,10,"gestureOrientation"],[528,30,487,28],[528,33,487,31],[528,34,487,32,"fromLeft"],[528,42,487,40],[528,45,487,43],[528,46,487,44],[528,49,487,47],[528,50,487,48],[528,51,487,49],[528,56,487,54],[528,60,487,58],[528,61,487,59,"drawerShown"],[528,72,487,70],[528,75,487,73],[528,76,487,74],[528,77,487,75],[528,80,487,78],[528,81,487,79],[528,82,487,80],[530,6,489,4],[531,6,490,4],[532,6,491,4],[533,6,492,4],[533,12,492,10,"hitSlop"],[533,19,492,17],[533,22,492,20,"fromLeft"],[533,30,492,28],[533,33,492,31],[534,8,493,6,"left"],[534,12,493,10],[534,14,493,12],[534,15,493,13],[535,8,494,6,"width"],[535,13,494,11],[535,15,494,13],[535,19,494,17],[535,20,494,18,"drawerShown"],[535,31,494,29],[535,34,494,32,"undefined"],[535,43,494,41],[535,46,494,44,"edgeWidth"],[536,6,495,4],[536,7,495,5],[536,10,495,8],[537,8,496,6,"right"],[537,13,496,11],[537,15,496,13],[537,16,496,14],[538,8,497,6,"width"],[538,13,497,11],[538,15,497,13],[538,19,497,17],[538,20,497,18,"drawerShown"],[538,31,497,29],[538,34,497,32,"undefined"],[538,43,497,41],[538,46,497,44,"edgeWidth"],[539,6,498,4],[539,7,498,5],[540,6,499,4],[540,13,499,11],[540,26,499,24],[540,30,499,24,"_jsx"],[540,46,499,28],[540,47,499,28,"jsx"],[540,50,499,28],[540,52,499,29,"PanGestureHandler"],[540,78,499,46],[540,79,499,46,"PanGestureHandler"],[540,96,499,46],[540,97,500,4],[541,6,500,4],[541,8,501,6],[542,8,502,6,"userSelect"],[542,18,502,16],[542,20,502,18],[542,24,502,22],[542,25,502,23,"props"],[542,30,502,28],[542,31,502,29,"userSelect"],[542,41,502,39],[543,8,503,6,"activeCursor"],[543,20,503,18],[543,22,503,20],[543,26,503,24],[543,27,503,25,"props"],[543,32,503,30],[543,33,503,31,"activeCursor"],[543,45,503,43],[544,8,504,6,"mouseButton"],[544,19,504,17],[544,21,504,19],[544,25,504,23],[544,26,504,24,"props"],[544,31,504,29],[544,32,504,30,"mouseButton"],[544,43,504,41],[545,8,505,6,"enableContextMenu"],[545,25,505,23],[545,27,505,25],[545,31,505,29],[545,32,505,30,"props"],[545,37,505,35],[545,38,505,36,"enableContextMenu"],[545,55,505,53],[546,8,506,6,"ref"],[546,11,506,9],[546,13,506,11],[546,17,506,15],[546,18,506,16,"setPanGestureRef"],[546,34,506,32],[547,8,507,6,"hitSlop"],[547,15,507,13],[547,17,507,15,"hitSlop"],[547,24,507,22],[548,8,508,6,"activeOffsetX"],[548,21,508,19],[548,23,508,21,"gestureOrientation"],[548,41,508,39],[548,44,508,42,"minSwipeDistance"],[548,60,508,58],[549,8,509,6,"failOffsetY"],[549,19,509,17],[549,21,509,19],[549,22,509,20],[549,23,509,21],[549,25,509,23],[549,27,509,25],[549,29,509,27],[549,30,509,28],[550,8,510,6,"onGestureEvent"],[550,22,510,20],[550,24,510,22],[550,28,510,26],[550,29,510,27,"onGestureEvent"],[550,43,510,41],[551,8,511,6,"onHandlerStateChange"],[551,28,511,26],[551,30,511,28],[551,34,511,32],[551,35,511,33,"openingHandlerStateChange"],[551,60,511,58],[552,8,512,6,"enableTrackpadTwoFingerGesture"],[552,38,512,36],[552,40,512,38],[552,44,512,42],[552,45,512,43,"props"],[552,50,512,48],[552,51,512,49,"enableTrackpadTwoFingerGesture"],[552,81,512,79],[553,8,513,6,"enabled"],[553,15,513,13],[553,17,513,15,"drawerLockMode"],[553,31,513,29],[553,36,513,34],[553,51,513,49],[553,55,513,53,"drawerLockMode"],[553,69,513,67],[553,74,513,72],[553,87,513,85],[554,8,514,6,"children"],[554,16,514,14],[554,18,514,16],[554,22,514,20],[554,23,514,21,"renderDrawer"],[554,35,514,33],[554,36,514,34],[555,6,515,4],[555,7,515,5],[555,8,515,6],[556,4,516,2],[557,2,517,0],[558,2,518,0],[558,8,518,6,"styles"],[558,14,518,12],[558,17,518,15,"StyleSheet"],[558,27,518,25],[558,28,518,25,"default"],[558,35,518,25],[558,36,518,26,"create"],[558,42,518,32],[558,43,518,33],[559,4,519,2,"drawerContainer"],[559,19,519,17],[559,21,519,19],[560,6,520,4],[560,9,520,7,"StyleSheet"],[560,19,520,17],[560,20,520,17,"default"],[560,27,520,17],[560,28,520,18,"absoluteFillObject"],[560,46,520,36],[561,6,521,4,"zIndex"],[561,12,521,10],[561,14,521,12],[561,18,521,16],[562,6,522,4,"flexDirection"],[562,19,522,17],[562,21,522,19],[563,4,523,2],[563,5,523,3],[564,4,524,2,"containerInFront"],[564,20,524,18],[564,22,524,20],[565,6,525,4],[565,9,525,7,"StyleSheet"],[565,19,525,17],[565,20,525,17,"default"],[565,27,525,17],[565,28,525,18,"absoluteFillObject"],[565,46,525,36],[566,6,526,4,"zIndex"],[566,12,526,10],[566,14,526,12],[567,4,527,2],[567,5,527,3],[568,4,528,2,"containerOnBack"],[568,19,528,17],[568,21,528,19],[569,6,529,4],[569,9,529,7,"StyleSheet"],[569,19,529,17],[569,20,529,17,"default"],[569,27,529,17],[569,28,529,18,"absoluteFillObject"],[570,4,530,2],[570,5,530,3],[571,4,531,2,"main"],[571,8,531,6],[571,10,531,8],[572,6,532,4,"flex"],[572,10,532,8],[572,12,532,10],[572,13,532,11],[573,6,533,4,"zIndex"],[573,12,533,10],[573,14,533,12],[573,15,533,13],[574,6,534,4,"overflow"],[574,14,534,12],[574,16,534,14],[575,4,535,2],[575,5,535,3],[576,4,536,2,"overlay"],[576,11,536,9],[576,13,536,11],[577,6,537,4],[577,9,537,7,"StyleSheet"],[577,19,537,17],[577,20,537,17,"default"],[577,27,537,17],[577,28,537,18,"absoluteFillObject"],[577,46,537,36],[578,6,538,4,"zIndex"],[578,12,538,10],[578,14,538,12],[579,4,539,2],[580,2,540,0],[580,3,540,1],[580,4,540,2],[581,0,540,3],[581,3]],"functionMap":{"names":["<global>","DrawerLayout","constructor","shouldComponentUpdate","updateAnimatedEvent","gestureOptions.listener","handleContainerLayout","emitStateChanged","openingHandlerStateChange","onTapHandlerStateChange","handleRelease","updateShowing","animateDrawer","Animated.spring.start$argument_0","openDrawer","closeDrawer","renderOverlay","renderDrawer","setPanGestureRef","render"],"mappings":"AAA;eC8D;ECY;GDc;EEC;GFK;wBGS;gCCwE;ODI;GHQ;0BKC;GLM;qBMC;GNE;8BOC;GPmB;4BQC;GRM;kBSC;GToC;kBUC;GViC;kBWC;aCiC;KDqB;GXC;eaG;GbQ;gBcC;GdO;kBeC;GfqB;iBgBC;GhB0E;qBiBC;GjBK;EkBC;GlByC;CDC"},"hasCjsExports":false},"type":"js/module"}]}