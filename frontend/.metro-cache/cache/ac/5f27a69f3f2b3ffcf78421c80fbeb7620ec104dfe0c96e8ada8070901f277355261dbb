{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.fireAfterInterval = fireAfterInterval;\n  exports.TEST_MAX_IF_NOT_NAN = exports.VEC_LEN_SQ = exports.TEST_MIN_IF_NOT_NAN = exports.isValidNumber = exports.isnan = void 0;\n\n  // TODO(TS) remove if not necessary after rewrite\n  const isnan = v => Number.isNaN(v); // TODO(TS) remove if not necessary after rewrite\n\n  exports.isnan = isnan;\n  const isValidNumber = v => typeof v === 'number' && !Number.isNaN(v);\n  exports.isValidNumber = isValidNumber;\n  const TEST_MIN_IF_NOT_NAN = (value, limit) => !isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\n  exports.TEST_MIN_IF_NOT_NAN = TEST_MIN_IF_NOT_NAN;\n  const VEC_LEN_SQ = ({\n    x = 0,\n    y = 0\n  } = {}) => x * x + y * y;\n  exports.VEC_LEN_SQ = VEC_LEN_SQ;\n  const TEST_MAX_IF_NOT_NAN = (value, max) => !isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\n  exports.TEST_MAX_IF_NOT_NAN = TEST_MAX_IF_NOT_NAN;\n  function fireAfterInterval(method, interval) {\n    if (!interval) {\n      method();\n      return null;\n    }\n    return setTimeout(() => method(), interval);\n  }\n});","lineCount":32,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"fireAfterInterval"],[7,27,6,25],[7,30,6,28,"fireAfterInterval"],[7,47,6,45],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"TEST_MAX_IF_NOT_NAN"],[8,29,7,27],[8,32,7,30,"exports"],[8,39,7,37],[8,40,7,38,"VEC_LEN_SQ"],[8,50,7,48],[8,53,7,51,"exports"],[8,60,7,58],[8,61,7,59,"TEST_MIN_IF_NOT_NAN"],[8,80,7,78],[8,83,7,81,"exports"],[8,90,7,88],[8,91,7,89,"isValidNumber"],[8,104,7,102],[8,107,7,105,"exports"],[8,114,7,112],[8,115,7,113,"isnan"],[8,120,7,118],[8,123,7,121],[8,128,7,126],[8,129,7,127],[10,2,9,0],[11,2,10,0],[11,8,10,6,"isnan"],[11,13,10,11],[11,16,10,14,"v"],[11,17,10,15],[11,21,10,19,"Number"],[11,27,10,25],[11,28,10,26,"isNaN"],[11,33,10,31],[11,34,10,32,"v"],[11,35,10,33],[11,36,10,34],[11,37,10,35],[11,38,10,36],[13,2,13,0,"exports"],[13,9,13,7],[13,10,13,8,"isnan"],[13,15,13,13],[13,18,13,16,"isnan"],[13,23,13,21],[14,2,15,0],[14,8,15,6,"isValidNumber"],[14,21,15,19],[14,24,15,22,"v"],[14,25,15,23],[14,29,15,27],[14,36,15,34,"v"],[14,37,15,35],[14,42,15,40],[14,50,15,48],[14,54,15,52],[14,55,15,53,"Number"],[14,61,15,59],[14,62,15,60,"isNaN"],[14,67,15,65],[14,68,15,66,"v"],[14,69,15,67],[14,70,15,68],[15,2,17,0,"exports"],[15,9,17,7],[15,10,17,8,"isValidNumber"],[15,23,17,21],[15,26,17,24,"isValidNumber"],[15,39,17,37],[16,2,19,0],[16,8,19,6,"TEST_MIN_IF_NOT_NAN"],[16,27,19,25],[16,30,19,28,"TEST_MIN_IF_NOT_NAN"],[16,31,19,29,"value"],[16,36,19,34],[16,38,19,36,"limit"],[16,43,19,41],[16,48,19,46],[16,49,19,47,"isnan"],[16,54,19,52],[16,55,19,53,"limit"],[16,60,19,58],[16,61,19,59],[16,66,19,64,"limit"],[16,71,19,69],[16,74,19,72],[16,75,19,73],[16,79,19,77,"value"],[16,84,19,82],[16,88,19,86,"limit"],[16,93,19,91],[16,97,19,95,"limit"],[16,102,19,100],[16,106,19,104],[16,107,19,105],[16,111,19,109,"value"],[16,116,19,114],[16,120,19,118,"limit"],[16,125,19,123],[16,126,19,124],[17,2,21,0,"exports"],[17,9,21,7],[17,10,21,8,"TEST_MIN_IF_NOT_NAN"],[17,29,21,27],[17,32,21,30,"TEST_MIN_IF_NOT_NAN"],[17,51,21,49],[18,2,23,0],[18,8,23,6,"VEC_LEN_SQ"],[18,18,23,16],[18,21,23,19,"VEC_LEN_SQ"],[18,22,23,20],[19,4,24,2,"x"],[19,5,24,3],[19,8,24,6],[19,9,24,7],[20,4,25,2,"y"],[20,5,25,3],[20,8,25,6],[21,2,26,0],[21,3,26,1],[21,6,26,4],[21,7,26,5],[21,8,26,6],[21,13,26,11,"x"],[21,14,26,12],[21,17,26,15,"x"],[21,18,26,16],[21,21,26,19,"y"],[21,22,26,20],[21,25,26,23,"y"],[21,26,26,24],[22,2,28,0,"exports"],[22,9,28,7],[22,10,28,8,"VEC_LEN_SQ"],[22,20,28,18],[22,23,28,21,"VEC_LEN_SQ"],[22,33,28,31],[23,2,30,0],[23,8,30,6,"TEST_MAX_IF_NOT_NAN"],[23,27,30,25],[23,30,30,28,"TEST_MAX_IF_NOT_NAN"],[23,31,30,29,"value"],[23,36,30,34],[23,38,30,36,"max"],[23,41,30,39],[23,46,30,44],[23,47,30,45,"isnan"],[23,52,30,50],[23,53,30,51,"max"],[23,56,30,54],[23,57,30,55],[23,62,30,60,"max"],[23,65,30,63],[23,68,30,66],[23,69,30,67],[23,73,30,71,"value"],[23,78,30,76],[23,81,30,79,"max"],[23,84,30,82],[23,88,30,86,"max"],[23,91,30,89],[23,95,30,93],[23,96,30,94],[23,100,30,98,"value"],[23,105,30,103],[23,108,30,106,"max"],[23,111,30,109],[23,112,30,110],[24,2,32,0,"exports"],[24,9,32,7],[24,10,32,8,"TEST_MAX_IF_NOT_NAN"],[24,29,32,27],[24,32,32,30,"TEST_MAX_IF_NOT_NAN"],[24,51,32,49],[25,2,34,0],[25,11,34,9,"fireAfterInterval"],[25,28,34,26,"fireAfterInterval"],[25,29,34,27,"method"],[25,35,34,33],[25,37,34,35,"interval"],[25,45,34,43],[25,47,34,45],[26,4,35,2],[26,8,35,6],[26,9,35,7,"interval"],[26,17,35,15],[26,19,35,17],[27,6,36,4,"method"],[27,12,36,10],[27,13,36,11],[27,14,36,12],[28,6,37,4],[28,13,37,11],[28,17,37,15],[29,4,38,2],[30,4,40,2],[30,11,40,9,"setTimeout"],[30,21,40,19],[30,22,40,20],[30,28,40,26,"method"],[30,34,40,32],[30,35,40,33],[30,36,40,34],[30,38,40,36,"interval"],[30,46,40,44],[30,47,40,45],[31,2,41,0],[32,0,41,1],[32,3]],"functionMap":{"names":["<global>","isnan","isValidNumber","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","TEST_MAX_IF_NOT_NAN","fireAfterInterval","setTimeout$argument_0"],"mappings":"AAA;cCS,oBD;sBEK,8CF;4BGI,gGH;mBII;wBJG;4BKI,kFL;AMI;oBCM,cD;CNC"},"hasCjsExports":true},"type":"js/module"}]}