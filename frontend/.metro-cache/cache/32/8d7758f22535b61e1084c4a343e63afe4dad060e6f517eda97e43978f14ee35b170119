{"dependencies":[{"name":"./flingGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":46,"index":61}}],"key":"h24ijk3pJCmeakiNLvaxhU4oD+0=","exportNames":["*"],"imports":1}},{"name":"./forceTouchGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":62},"end":{"line":4,"column":56,"index":118}}],"key":"1QIx9s/Hb/tSlS4sC64N+Adyv7M=","exportNames":["*"],"imports":1}},{"name":"./gestureComposition","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":119},"end":{"line":5,"column":94,"index":213}}],"key":"J0ugy1LMUGf5KgbYvNV+9auzxk4=","exportNames":["*"],"imports":1}},{"name":"./longPressGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":214},"end":{"line":6,"column":54,"index":268}}],"key":"1o89s2ZbLCAJzQNlPSeE8o2+cH8=","exportNames":["*"],"imports":1}},{"name":"./panGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":269},"end":{"line":7,"column":42,"index":311}}],"key":"aBzYQKsfDy415OM5yEWHEC+JvOM=","exportNames":["*"],"imports":1}},{"name":"./pinchGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":312},"end":{"line":8,"column":46,"index":358}}],"key":"Dpg/8aAltyIIC/a4wQAoQVMdkg4=","exportNames":["*"],"imports":1}},{"name":"./rotationGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":359},"end":{"line":9,"column":52,"index":411}}],"key":"/7dx2ayCyD336a+OWcSLUeam5aE=","exportNames":["*"],"imports":1}},{"name":"./tapGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":412},"end":{"line":10,"column":42,"index":454}}],"key":"0AhBYBLv6GsrGEF0r8aS4Nb6QGo=","exportNames":["*"],"imports":1}},{"name":"./nativeGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":455},"end":{"line":11,"column":48,"index":503}}],"key":"cjDWt0y1Cq1VxsEGc4geilXmt0Q=","exportNames":["*"],"imports":1}},{"name":"./manualGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":504},"end":{"line":12,"column":48,"index":552}}],"key":"HUWWiRL9QzXRRI3alfUEUrUAkqk=","exportNames":["*"],"imports":1}},{"name":"./hoverGesture","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":553},"end":{"line":13,"column":46,"index":599}}],"key":"+OU9Hr4DiheWQiFQL42cwzfCmfI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"GestureObjects\", {\n    enumerable: true,\n    get: function () {\n      return GestureObjects;\n    }\n  });\n  var _flingGesture = require(_dependencyMap[0], \"./flingGesture\");\n  var _forceTouchGesture = require(_dependencyMap[1], \"./forceTouchGesture\");\n  var _gestureComposition = require(_dependencyMap[2], \"./gestureComposition\");\n  var _longPressGesture = require(_dependencyMap[3], \"./longPressGesture\");\n  var _panGesture = require(_dependencyMap[4], \"./panGesture\");\n  var _pinchGesture = require(_dependencyMap[5], \"./pinchGesture\");\n  var _rotationGesture = require(_dependencyMap[6], \"./rotationGesture\");\n  var _tapGesture = require(_dependencyMap[7], \"./tapGesture\");\n  var _nativeGesture = require(_dependencyMap[8], \"./nativeGesture\");\n  var _manualGesture = require(_dependencyMap[9], \"./manualGesture\");\n  var _hoverGesture = require(_dependencyMap[10], \"./hoverGesture\");\n  /**\n   * `Gesture` is the object that allows you to create and compose gestures.\n   *\n   * ### Remarks\n   * - Consider wrapping your gesture configurations with `useMemo`, as it will reduce the amount of work Gesture Handler has to do under the hood when updating gestures.\n   *\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/gesture\n   */\n  const GestureObjects = {\n    /**\n     * A discrete gesture that recognizes one or many taps.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture\n     */\n    Tap: () => {\n      return new _tapGesture.TapGesture();\n    },\n    /**\n     * A continuous gesture that can recognize a panning (dragging) gesture and track its movement.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture\n     */\n    Pan: () => {\n      return new _panGesture.PanGesture();\n    },\n    /**\n     * A continuous gesture that recognizes pinch gesture. It allows for tracking the distance between two fingers and use that information to scale or zoom your content.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pinch-gesture\n     */\n    Pinch: () => {\n      return new _pinchGesture.PinchGesture();\n    },\n    /**\n     * A continuous gesture that can recognize rotation and track its movement.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/rotation-gesture\n     */\n    Rotation: () => {\n      return new _rotationGesture.RotationGesture();\n    },\n    /**\n     * A discrete gesture that activates when the movement is sufficiently fast.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/fling-gesture\n     */\n    Fling: () => {\n      return new _flingGesture.FlingGesture();\n    },\n    /**\n     * A discrete gesture that activates when the corresponding view is pressed for a sufficiently long time.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/long-press-gesture\n     */\n    LongPress: () => {\n      return new _longPressGesture.LongPressGesture();\n    },\n    /**\n     * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n     *\n     *  #### iOS only\n     * A continuous gesture that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/force-touch-gesture\n     */\n    ForceTouch: () => {\n      return new _forceTouchGesture.ForceTouchGesture();\n    },\n    /**\n     * A gesture that allows other touch handling components to participate in RNGH's gesture system.\n     * When used, the other component should be the direct child of a `GestureDetector`.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/native-gesture\n     */\n    Native: () => {\n      return new _nativeGesture.NativeGesture();\n    },\n    /**\n     * A plain gesture that has no specific activation criteria nor event data set.\n     * Its state has to be controlled manually using a state manager.\n     * It will not fail when all the pointers are lifted from the screen.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/manual-gesture\n     */\n    Manual: () => {\n      return new _manualGesture.ManualGesture();\n    },\n    /**\n     * A continuous gesture that can recognize hovering above the view it's attached to.\n     * The hover effect may be activated by moving a mouse or a stylus over the view.\n     *\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/hover-gesture\n     */\n    Hover: () => {\n      return new _hoverGesture.HoverGesture();\n    },\n    /**\n     * Builds a composed gesture consisting of gestures provided as parameters.\n     * The first one that becomes active cancels the rest of gestures.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#race\n     */\n    Race: (...gestures) => {\n      return new _gestureComposition.ComposedGesture(...gestures);\n    },\n    /**\n     * Builds a composed gesture that allows all base gestures to run simultaneously.\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneous\n     */\n    Simultaneous(...gestures) {\n      return new _gestureComposition.SimultaneousGesture(...gestures);\n    },\n    /**\n     * Builds a composed gesture where only one of the provided gestures can become active.\n     * Priority is decided through the order of gestures: the first one has higher priority\n     * than the second one, second one has higher priority than the third one, and so on.\n     * For example, to make a gesture that recognizes both single and double tap you need\n     * to call Exclusive(doubleTap, singleTap).\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#exclusive\n     */\n    Exclusive(...gestures) {\n      return new _gestureComposition.ExclusiveGesture(...gestures);\n    }\n  };\n});","lineCount":138,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,23,0,"Object"],[7,8,23,0],[7,9,23,0,"defineProperty"],[7,23,23,0],[7,24,23,0,"exports"],[7,31,23,0],[8,4,23,0,"enumerable"],[8,14,23,0],[9,4,23,0,"get"],[9,7,23,0],[9,18,23,0,"get"],[9,19,23,0],[10,6,23,0],[10,13,23,0,"GestureObjects"],[10,27,23,0],[11,4,23,0],[12,2,23,0],[13,2,3,0],[13,6,3,0,"_flingGesture"],[13,19,3,0],[13,22,3,0,"require"],[13,29,3,0],[13,30,3,0,"_dependencyMap"],[13,44,3,0],[14,2,4,0],[14,6,4,0,"_forceTouchGesture"],[14,24,4,0],[14,27,4,0,"require"],[14,34,4,0],[14,35,4,0,"_dependencyMap"],[14,49,4,0],[15,2,5,0],[15,6,5,0,"_gestureComposition"],[15,25,5,0],[15,28,5,0,"require"],[15,35,5,0],[15,36,5,0,"_dependencyMap"],[15,50,5,0],[16,2,6,0],[16,6,6,0,"_longPressGesture"],[16,23,6,0],[16,26,6,0,"require"],[16,33,6,0],[16,34,6,0,"_dependencyMap"],[16,48,6,0],[17,2,7,0],[17,6,7,0,"_panGesture"],[17,17,7,0],[17,20,7,0,"require"],[17,27,7,0],[17,28,7,0,"_dependencyMap"],[17,42,7,0],[18,2,8,0],[18,6,8,0,"_pinchGesture"],[18,19,8,0],[18,22,8,0,"require"],[18,29,8,0],[18,30,8,0,"_dependencyMap"],[18,44,8,0],[19,2,9,0],[19,6,9,0,"_rotationGesture"],[19,22,9,0],[19,25,9,0,"require"],[19,32,9,0],[19,33,9,0,"_dependencyMap"],[19,47,9,0],[20,2,10,0],[20,6,10,0,"_tapGesture"],[20,17,10,0],[20,20,10,0,"require"],[20,27,10,0],[20,28,10,0,"_dependencyMap"],[20,42,10,0],[21,2,11,0],[21,6,11,0,"_nativeGesture"],[21,20,11,0],[21,23,11,0,"require"],[21,30,11,0],[21,31,11,0,"_dependencyMap"],[21,45,11,0],[22,2,12,0],[22,6,12,0,"_manualGesture"],[22,20,12,0],[22,23,12,0,"require"],[22,30,12,0],[22,31,12,0,"_dependencyMap"],[22,45,12,0],[23,2,13,0],[23,6,13,0,"_hoverGesture"],[23,19,13,0],[23,22,13,0,"require"],[23,29,13,0],[23,30,13,0,"_dependencyMap"],[23,44,13,0],[24,2,15,0],[25,0,16,0],[26,0,17,0],[27,0,18,0],[28,0,19,0],[29,0,20,0],[30,0,21,0],[31,0,22,0],[32,2,23,7],[32,8,23,13,"GestureObjects"],[32,22,23,27],[32,25,23,30],[33,4,24,2],[34,0,25,0],[35,0,26,0],[36,0,27,0],[37,4,28,2,"Tap"],[37,7,28,5],[37,9,28,7,"Tap"],[37,10,28,7],[37,15,28,13],[38,6,29,4],[38,13,29,11],[38,17,29,15,"TapGesture"],[38,28,29,25],[38,29,29,25,"TapGesture"],[38,39,29,25],[38,40,29,26],[38,41,29,27],[39,4,30,2],[39,5,30,3],[40,4,31,2],[41,0,32,0],[42,0,33,0],[43,0,34,0],[44,4,35,2,"Pan"],[44,7,35,5],[44,9,35,7,"Pan"],[44,10,35,7],[44,15,35,13],[45,6,36,4],[45,13,36,11],[45,17,36,15,"PanGesture"],[45,28,36,25],[45,29,36,25,"PanGesture"],[45,39,36,25],[45,40,36,26],[45,41,36,27],[46,4,37,2],[46,5,37,3],[47,4,38,2],[48,0,39,0],[49,0,40,0],[50,0,41,0],[51,4,42,2,"Pinch"],[51,9,42,7],[51,11,42,9,"Pinch"],[51,12,42,9],[51,17,42,15],[52,6,43,4],[52,13,43,11],[52,17,43,15,"PinchGesture"],[52,30,43,27],[52,31,43,27,"PinchGesture"],[52,43,43,27],[52,44,43,28],[52,45,43,29],[53,4,44,2],[53,5,44,3],[54,4,45,2],[55,0,46,0],[56,0,47,0],[57,0,48,0],[58,4,49,2,"Rotation"],[58,12,49,10],[58,14,49,12,"Rotation"],[58,15,49,12],[58,20,49,18],[59,6,50,4],[59,13,50,11],[59,17,50,15,"RotationGesture"],[59,33,50,30],[59,34,50,30,"RotationGesture"],[59,49,50,30],[59,50,50,31],[59,51,50,32],[60,4,51,2],[60,5,51,3],[61,4,52,2],[62,0,53,0],[63,0,54,0],[64,0,55,0],[65,4,56,2,"Fling"],[65,9,56,7],[65,11,56,9,"Fling"],[65,12,56,9],[65,17,56,15],[66,6,57,4],[66,13,57,11],[66,17,57,15,"FlingGesture"],[66,30,57,27],[66,31,57,27,"FlingGesture"],[66,43,57,27],[66,44,57,28],[66,45,57,29],[67,4,58,2],[67,5,58,3],[68,4,59,2],[69,0,60,0],[70,0,61,0],[71,0,62,0],[72,4,63,2,"LongPress"],[72,13,63,11],[72,15,63,13,"LongPress"],[72,16,63,13],[72,21,63,19],[73,6,64,4],[73,13,64,11],[73,17,64,15,"LongPressGesture"],[73,34,64,31],[73,35,64,31,"LongPressGesture"],[73,51,64,31],[73,52,64,32],[73,53,64,33],[74,4,65,2],[74,5,65,3],[75,4,66,2],[76,0,67,0],[77,0,68,0],[78,0,69,0],[79,0,70,0],[80,0,71,0],[81,0,72,0],[82,4,73,2,"ForceTouch"],[82,14,73,12],[82,16,73,14,"ForceTouch"],[82,17,73,14],[82,22,73,20],[83,6,74,4],[83,13,74,11],[83,17,74,15,"ForceTouchGesture"],[83,35,74,32],[83,36,74,32,"ForceTouchGesture"],[83,53,74,32],[83,54,74,33],[83,55,74,34],[84,4,75,2],[84,5,75,3],[85,4,76,2],[86,0,77,0],[87,0,78,0],[88,0,79,0],[89,0,80,0],[90,4,81,2,"Native"],[90,10,81,8],[90,12,81,10,"Native"],[90,13,81,10],[90,18,81,16],[91,6,82,4],[91,13,82,11],[91,17,82,15,"NativeGesture"],[91,31,82,28],[91,32,82,28,"NativeGesture"],[91,45,82,28],[91,46,82,29],[91,47,82,30],[92,4,83,2],[92,5,83,3],[93,4,84,2],[94,0,85,0],[95,0,86,0],[96,0,87,0],[97,0,88,0],[98,0,89,0],[99,4,90,2,"Manual"],[99,10,90,8],[99,12,90,10,"Manual"],[99,13,90,10],[99,18,90,16],[100,6,91,4],[100,13,91,11],[100,17,91,15,"ManualGesture"],[100,31,91,28],[100,32,91,28,"ManualGesture"],[100,45,91,28],[100,46,91,29],[100,47,91,30],[101,4,92,2],[101,5,92,3],[102,4,93,2],[103,0,94,0],[104,0,95,0],[105,0,96,0],[106,0,97,0],[107,0,98,0],[108,4,99,2,"Hover"],[108,9,99,7],[108,11,99,9,"Hover"],[108,12,99,9],[108,17,99,15],[109,6,100,4],[109,13,100,11],[109,17,100,15,"HoverGesture"],[109,30,100,27],[109,31,100,27,"HoverGesture"],[109,43,100,27],[109,44,100,28],[109,45,100,29],[110,4,101,2],[110,5,101,3],[111,4,102,2],[112,0,103,0],[113,0,104,0],[114,0,105,0],[115,0,106,0],[116,4,107,2,"Race"],[116,8,107,6],[116,10,107,8,"Race"],[116,11,107,9],[116,14,107,12,"gestures"],[116,22,107,20],[116,27,107,25],[117,6,108,4],[117,13,108,11],[117,17,108,15,"ComposedGesture"],[117,36,108,30],[117,37,108,30,"ComposedGesture"],[117,52,108,30],[117,53,108,31],[117,56,108,34,"gestures"],[117,64,108,42],[117,65,108,43],[118,4,109,2],[118,5,109,3],[119,4,110,2],[120,0,111,0],[121,0,112,0],[122,0,113,0],[123,4,114,2,"Simultaneous"],[123,16,114,14,"Simultaneous"],[123,17,114,15],[123,20,114,18,"gestures"],[123,28,114,26],[123,30,114,28],[124,6,115,4],[124,13,115,11],[124,17,115,15,"SimultaneousGesture"],[124,36,115,34],[124,37,115,34,"SimultaneousGesture"],[124,56,115,34],[124,57,115,35],[124,60,115,38,"gestures"],[124,68,115,46],[124,69,115,47],[125,4,116,2],[125,5,116,3],[126,4,117,2],[127,0,118,0],[128,0,119,0],[129,0,120,0],[130,0,121,0],[131,0,122,0],[132,0,123,0],[133,0,124,0],[134,4,125,2,"Exclusive"],[134,13,125,11,"Exclusive"],[134,14,125,12],[134,17,125,15,"gestures"],[134,25,125,23],[134,27,125,25],[135,6,126,4],[135,13,126,11],[135,17,126,15,"ExclusiveGesture"],[135,36,126,31],[135,37,126,31,"ExclusiveGesture"],[135,53,126,31],[135,54,126,32],[135,57,126,35,"gestures"],[135,65,126,43],[135,66,126,44],[136,4,127,2],[137,2,128,0],[137,3,128,1],[138,0,128,2],[138,3]],"functionMap":{"names":["<global>","GestureObjects.Tap","GestureObjects.Pan","GestureObjects.Pinch","GestureObjects.Rotation","GestureObjects.Fling","GestureObjects.LongPress","GestureObjects.ForceTouch","GestureObjects.Native","GestureObjects.Manual","GestureObjects.Hover","GestureObjects.Race","GestureObjects.Simultaneous","GestureObjects.Exclusive"],"mappings":"AAA;OC2B;GDE;OEK;GFE;SGK;GHE;YIK;GJE;SKK;GLE;aMK;GNE;cOQ;GPE;UQM;GRE;USO;GTE;SUO;GVE;QWM;GXE;EYK;GZE;EaS;GbE"},"hasCjsExports":false},"type":"js/module"}]}