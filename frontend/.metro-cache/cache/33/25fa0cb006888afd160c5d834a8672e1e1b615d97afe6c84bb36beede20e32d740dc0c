{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ClipboardPasteButton","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":67},"end":{"line":2,"column":62,"index":129}}],"key":"LUcIX+CIhB4XU+2a8Ub9n3L2I8w=","exportNames":["*"],"imports":1}},{"name":"./ExpoClipboard","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":130},"end":{"line":3,"column":44,"index":174}}],"key":"64y7yRjbBRJxCbEo7THAGLu8m4I=","exportNames":["*"],"imports":1}},{"name":"./Clipboard.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":216,"column":0,"index":7899},"end":{"line":216,"column":34,"index":7933}}],"key":"meqRnb9IzYBTuycFxx1YZMmO78c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getStringAsync = getStringAsync;\n  exports.setStringAsync = setStringAsync;\n  exports.setString = setString;\n  exports.hasStringAsync = hasStringAsync;\n  exports.getUrlAsync = getUrlAsync;\n  exports.setUrlAsync = setUrlAsync;\n  exports.hasUrlAsync = hasUrlAsync;\n  exports.getImageAsync = getImageAsync;\n  exports.setImageAsync = setImageAsync;\n  exports.hasImageAsync = hasImageAsync;\n  exports.addClipboardListener = addClipboardListener;\n  exports.removeClipboardListener = removeClipboardListener;\n  Object.defineProperty(exports, \"isPasteButtonAvailable\", {\n    enumerable: true,\n    get: function () {\n      return isPasteButtonAvailable;\n    }\n  });\n  Object.defineProperty(exports, \"ClipboardPasteButton\", {\n    enumerable: true,\n    get: function () {\n      return _ClipboardPasteButton.ClipboardPasteButton;\n    }\n  });\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _ClipboardPasteButton = require(_dependencyMap[1], \"./ClipboardPasteButton\");\n  var _ExpoClipboard = require(_dependencyMap[2], \"./ExpoClipboard\");\n  var ExpoClipboard = _interopDefault(_ExpoClipboard);\n  var _ClipboardTypes = require(_dependencyMap[3], \"./Clipboard.types\");\n  Object.keys(_ClipboardTypes).forEach(function (k) {\n    if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) {\n      Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n          return _ClipboardTypes[k];\n        }\n      });\n    }\n  });\n  const onClipboardEventName = 'onClipboardChanged';\n  /**\n   * Gets the content of the user's clipboard. Calling this method on web will prompt\n   * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options Options for the clipboard content to be retrieved.\n   * @returns A promise that resolves to the content of the clipboard.\n   */\n  async function getStringAsync(options = {}) {\n    if (!ExpoClipboard.default.getStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getStringAsync');\n    }\n    return await ExpoClipboard.default.getStringAsync(options);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   *\n   * @param text The string to save to the clipboard.\n   * @param options Options for the clipboard content to be set.\n   * @returns On web, this returns a promise that fulfills to a boolean value indicating whether or not\n   * the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.\n   */\n  async function setStringAsync(text, options = {}) {\n    if (!ExpoClipboard.default.setStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setStringAsync');\n    }\n    return ExpoClipboard.default.setStringAsync(text, options);\n  }\n  /**\n   * Sets the content of the user's clipboard.\n   * @deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.\n   *\n   * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n   * the user's clipboard. On iOS and Android, nothing is returned.\n   */\n  function setString(text) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      // on web, we need to return legacy method,\n      // because of different return type\n      return ExpoClipboard.default.setString(text);\n    } else {\n      setStringAsync(text);\n    }\n  }\n  /**\n   * Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.\n   */\n  function hasStringAsync() {\n    if (!ExpoClipboard.default.hasStringAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasStringAsync');\n    }\n    return ExpoClipboard.default.hasStringAsync();\n  }\n  /**\n   * Gets the URL from the user's clipboard.\n   *\n   * @returns A promise that fulfills to the URL in the clipboard.\n   * @platform ios\n   */\n  async function getUrlAsync() {\n    if (!ExpoClipboard.default.getUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getUrlAsync');\n    }\n    return await ExpoClipboard.default.getUrlAsync();\n  }\n  /**\n   * Sets a URL in the user's clipboard.\n   *\n   * This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that\n   * it sets the clipboard content type to be a URL. It lets your app or other apps know that the\n   * clipboard contains a URL and behave accordingly.\n   *\n   * @param url The URL to save to the clipboard.\n   * @platform ios\n   */\n  async function setUrlAsync(url) {\n    if (!ExpoClipboard.default.setUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setUrlAsync');\n    }\n    return ExpoClipboard.default.setUrlAsync(url);\n  }\n  /**\n   * Returns whether the clipboard has a URL content.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.\n   * @platform ios\n   */\n  async function hasUrlAsync() {\n    if (!ExpoClipboard.default.hasUrlAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasUrlAsync');\n    }\n    return await ExpoClipboard.default.hasUrlAsync();\n  }\n  /**\n   * Gets the image from the user's clipboard and returns it in the specified\n   * format. Calling this method on web will prompt the user to grant your app\n   * permission to \"see text and images copied to the clipboard.\"\n   *\n   * @param options A `GetImageOptions` object to specify the desired format of the image.\n   * @returns If there was an image in the clipboard, the promise resolves to\n   * a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image.\n   * Otherwise, it resolves to `null`.\n   *\n   * @example\n   * ```tsx\n   * const img = await Clipboard.getImageAsync({ format: 'png' });\n   * // ...\n   * <Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />\n   * ```\n   */\n  async function getImageAsync(options) {\n    if (!ExpoClipboard.default.getImageAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'getImageAsync');\n    }\n    return await ExpoClipboard.default.getImageAsync(options);\n  }\n  /**\n   * Sets an image in the user's clipboard.\n   *\n   * @param base64Image Image encoded as a base64 string, without MIME type.\n   *\n   * @example\n   * ```tsx\n   * const result = await ImagePicker.launchImageLibraryAsync({\n   *   mediaTypes: ImagePicker.MediaTypeOptions.Images,\n   *   base64: true,\n   * });\n   * await Clipboard.setImageAsync(result.base64);\n   * ```\n   */\n  async function setImageAsync(base64Image) {\n    if (!ExpoClipboard.default.setImageAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'setImageAsync');\n    }\n    return ExpoClipboard.default.setImageAsync(base64Image);\n  }\n  /**\n   * Returns whether the clipboard has an image content.\n   *\n   * On web, this requires the user to grant your app permission to _\"see text and images copied to the clipboard\"_.\n   *\n   * @returns A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.\n   */\n  async function hasImageAsync() {\n    if (!ExpoClipboard.default.hasImageAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Clipboard', 'hasImageAsync');\n    }\n    return ExpoClipboard.default.hasImageAsync();\n  }\n  /**\n   * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n   * is a no-op on Web.\n   *\n   * @param listener Callback to execute when listener is triggered. The callback is provided a\n   * single argument that is an object containing information about clipboard contents.\n   *\n   * @example\n   * ```typescript\n   * Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {\n   *   if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {\n   *     Clipboard.getStringAsync().then(content => {\n   *       alert('Copy pasta! Here\\'s the string that was copied: ' + content)\n   *     });\n   *   } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {\n   *     alert('Yay! Clipboard contains an image');\n   *   }\n   * });\n   * ```\n   */\n  function addClipboardListener(listener) {\n    // TODO: Get rid of this wrapper once we remove deprecated `content` property (not before SDK47)\n    const listenerWrapper = event => {\n      const wrappedEvent = {\n        ...event,\n        get content() {\n          console.warn(\"The 'content' property of the clipboard event is deprecated. Use 'getStringAsync()' instead to get clipboard content\");\n          return '';\n        }\n      };\n      listener(wrappedEvent);\n    };\n    return ExpoClipboard.default.addListener(onClipboardEventName, listenerWrapper);\n  }\n  /**\n   * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n   *\n   * @param subscription The subscription to remove (created by addClipboardListener).\n   *\n   * @example\n   * ```typescript\n   * const subscription = addClipboardListener(() => {\n   *   alert('Copy pasta!');\n   * });\n   * removeClipboardListener(subscription);\n   * ```\n   */\n  function removeClipboardListener(subscription) {\n    subscription.remove();\n  }\n  /**\n   * Property that determines if the `ClipboardPasteButton` is available.\n   *\n   * This requires the users device to be using at least iOS 16.\n   *\n   * `true` if the component is available, and `false` otherwise.\n   */\n  const isPasteButtonAvailable = _expoModulesCore.Platform.OS === 'ios' ? ExpoClipboard.default.isPasteButtonAvailable : false;\n});","lineCount":262,"map":[[12,2,12,0,"exports"],[12,9,12,0],[12,10,12,0,"getStringAsync"],[12,24,12,0],[12,27,12,0,"getStringAsync"],[12,41,12,0],[13,2,26,0,"exports"],[13,9,26,0],[13,10,26,0,"setStringAsync"],[13,24,26,0],[13,27,26,0,"setStringAsync"],[13,41,26,0],[14,2,39,0,"exports"],[14,9,39,0],[14,10,39,0,"setString"],[14,19,39,0],[14,22,39,0,"setString"],[14,31,39,0],[15,2,56,0,"exports"],[15,9,56,0],[15,10,56,0,"hasStringAsync"],[15,24,56,0],[15,27,56,0,"hasStringAsync"],[15,41,56,0],[16,2,68,0,"exports"],[16,9,68,0],[16,10,68,0,"getUrlAsync"],[16,21,68,0],[16,24,68,0,"getUrlAsync"],[16,35,68,0],[17,2,84,0,"exports"],[17,9,84,0],[17,10,84,0,"setUrlAsync"],[17,21,84,0],[17,24,84,0,"setUrlAsync"],[17,35,84,0],[18,2,96,0,"exports"],[18,9,96,0],[18,10,96,0,"hasUrlAsync"],[18,21,96,0],[18,24,96,0,"hasUrlAsync"],[18,35,96,0],[19,2,119,0,"exports"],[19,9,119,0],[19,10,119,0,"getImageAsync"],[19,23,119,0],[19,26,119,0,"getImageAsync"],[19,39,119,0],[20,2,139,0,"exports"],[20,9,139,0],[20,10,139,0,"setImageAsync"],[20,23,139,0],[20,26,139,0,"setImageAsync"],[20,39,139,0],[21,2,152,0,"exports"],[21,9,152,0],[21,10,152,0,"hasImageAsync"],[21,23,152,0],[21,26,152,0,"hasImageAsync"],[21,39,152,0],[22,2,178,0,"exports"],[22,9,178,0],[22,10,178,0,"addClipboardListener"],[22,30,178,0],[22,33,178,0,"addClipboardListener"],[22,53,178,0],[23,2,205,0,"exports"],[23,9,205,0],[23,10,205,0,"removeClipboardListener"],[23,33,205,0],[23,36,205,0,"removeClipboardListener"],[23,59,205,0],[24,2,215,0,"Object"],[24,8,215,0],[24,9,215,0,"defineProperty"],[24,23,215,0],[24,24,215,0,"exports"],[24,31,215,0],[25,4,215,0,"enumerable"],[25,14,215,0],[26,4,215,0,"get"],[26,7,215,0],[26,18,215,0,"get"],[26,19,215,0],[27,6,215,0],[27,13,215,0,"isPasteButtonAvailable"],[27,35,215,0],[28,4,215,0],[29,2,215,0],[30,2,217,0,"Object"],[30,8,217,0],[30,9,217,0,"defineProperty"],[30,23,217,0],[30,24,217,0,"exports"],[30,31,217,0],[31,4,217,0,"enumerable"],[31,14,217,0],[32,4,217,0,"get"],[32,7,217,0],[32,18,217,0,"get"],[32,19,217,0],[33,6,217,0],[33,13,217,9,"ClipboardPasteButton"],[33,34,217,29],[33,35,217,29,"ClipboardPasteButton"],[33,55,217,29],[34,4,217,29],[35,2,217,29],[36,2,1,0],[36,6,1,0,"_expoModulesCore"],[36,22,1,0],[36,25,1,0,"require"],[36,32,1,0],[36,33,1,0,"_dependencyMap"],[36,47,1,0],[37,2,2,0],[37,6,2,0,"_ClipboardPasteButton"],[37,27,2,0],[37,30,2,0,"require"],[37,37,2,0],[37,38,2,0,"_dependencyMap"],[37,52,2,0],[38,2,3,0],[38,6,3,0,"_ExpoClipboard"],[38,20,3,0],[38,23,3,0,"require"],[38,30,3,0],[38,31,3,0,"_dependencyMap"],[38,45,3,0],[39,2,3,0],[39,6,3,0,"ExpoClipboard"],[39,19,3,0],[39,22,3,0,"_interopDefault"],[39,37,3,0],[39,38,3,0,"_ExpoClipboard"],[39,52,3,0],[40,2,216,0],[40,6,216,0,"_ClipboardTypes"],[40,21,216,0],[40,24,216,0,"require"],[40,31,216,0],[40,32,216,0,"_dependencyMap"],[40,46,216,0],[41,2,216,0,"Object"],[41,8,216,0],[41,9,216,0,"keys"],[41,13,216,0],[41,14,216,0,"_ClipboardTypes"],[41,29,216,0],[41,31,216,0,"forEach"],[41,38,216,0],[41,49,216,0,"k"],[41,50,216,0],[42,4,216,0],[42,8,216,0,"k"],[42,9,216,0],[42,28,216,0,"Object"],[42,34,216,0],[42,35,216,0,"prototype"],[42,44,216,0],[42,45,216,0,"hasOwnProperty"],[42,59,216,0],[42,60,216,0,"call"],[42,64,216,0],[42,65,216,0,"exports"],[42,72,216,0],[42,74,216,0,"k"],[42,75,216,0],[43,6,216,0,"Object"],[43,12,216,0],[43,13,216,0,"defineProperty"],[43,27,216,0],[43,28,216,0,"exports"],[43,35,216,0],[43,37,216,0,"k"],[43,38,216,0],[44,8,216,0,"enumerable"],[44,18,216,0],[45,8,216,0,"get"],[45,11,216,0],[45,22,216,0,"get"],[45,23,216,0],[46,10,216,0],[46,17,216,0,"_ClipboardTypes"],[46,32,216,0],[46,33,216,0,"k"],[46,34,216,0],[47,8,216,0],[48,6,216,0],[49,4,216,0],[50,2,216,0],[51,2,4,0],[51,8,4,6,"onClipboardEventName"],[51,28,4,26],[51,31,4,29],[51,51,4,49],[52,2,5,0],[53,0,6,0],[54,0,7,0],[55,0,8,0],[56,0,9,0],[57,0,10,0],[58,0,11,0],[59,2,12,7],[59,17,12,22,"getStringAsync"],[59,31,12,36,"getStringAsync"],[59,32,12,37,"options"],[59,39,12,44],[59,42,12,47],[59,43,12,48],[59,44,12,49],[59,46,12,51],[60,4,13,4],[60,8,13,8],[60,9,13,9,"ExpoClipboard"],[60,22,13,22],[60,23,13,22,"default"],[60,30,13,22],[60,31,13,23,"getStringAsync"],[60,45,13,37],[60,47,13,39],[61,6,14,8],[61,12,14,14],[61,16,14,18,"UnavailabilityError"],[61,32,14,37],[61,33,14,37,"UnavailabilityError"],[61,52,14,37],[61,53,14,38],[61,64,14,49],[61,66,14,51],[61,82,14,67],[61,83,14,68],[62,4,15,4],[63,4,16,4],[63,11,16,11],[63,17,16,17,"ExpoClipboard"],[63,30,16,30],[63,31,16,30,"default"],[63,38,16,30],[63,39,16,31,"getStringAsync"],[63,53,16,45],[63,54,16,46,"options"],[63,61,16,53],[63,62,16,54],[64,2,17,0],[65,2,18,0],[66,0,19,0],[67,0,20,0],[68,0,21,0],[69,0,22,0],[70,0,23,0],[71,0,24,0],[72,0,25,0],[73,2,26,7],[73,17,26,22,"setStringAsync"],[73,31,26,36,"setStringAsync"],[73,32,26,37,"text"],[73,36,26,41],[73,38,26,43,"options"],[73,45,26,50],[73,48,26,53],[73,49,26,54],[73,50,26,55],[73,52,26,57],[74,4,27,4],[74,8,27,8],[74,9,27,9,"ExpoClipboard"],[74,22,27,22],[74,23,27,22,"default"],[74,30,27,22],[74,31,27,23,"setStringAsync"],[74,45,27,37],[74,47,27,39],[75,6,28,8],[75,12,28,14],[75,16,28,18,"UnavailabilityError"],[75,32,28,37],[75,33,28,37,"UnavailabilityError"],[75,52,28,37],[75,53,28,38],[75,64,28,49],[75,66,28,51],[75,82,28,67],[75,83,28,68],[76,4,29,4],[77,4,30,4],[77,11,30,11,"ExpoClipboard"],[77,24,30,24],[77,25,30,24,"default"],[77,32,30,24],[77,33,30,25,"setStringAsync"],[77,47,30,39],[77,48,30,40,"text"],[77,52,30,44],[77,54,30,46,"options"],[77,61,30,53],[77,62,30,54],[78,2,31,0],[79,2,32,0],[80,0,33,0],[81,0,34,0],[82,0,35,0],[83,0,36,0],[84,0,37,0],[85,0,38,0],[86,2,39,7],[86,11,39,16,"setString"],[86,20,39,25,"setString"],[86,21,39,26,"text"],[86,25,39,30],[86,27,39,32],[87,4,40,4],[87,8,40,8,"Platform"],[87,24,40,16],[87,25,40,16,"Platform"],[87,33,40,16],[87,34,40,17,"OS"],[87,36,40,19],[87,41,40,24],[87,46,40,29],[87,48,40,31],[88,6,41,8],[89,6,42,8],[90,6,43,8],[90,13,43,15,"ExpoClipboard"],[90,26,43,28],[90,27,43,28,"default"],[90,34,43,28],[90,35,43,29,"setString"],[90,44,43,38],[90,45,43,39,"text"],[90,49,43,43],[90,50,43,44],[91,4,44,4],[91,5,44,5],[91,11,45,9],[92,6,46,8,"setStringAsync"],[92,20,46,22],[92,21,46,23,"text"],[92,25,46,27],[92,26,46,28],[93,4,47,4],[94,2,48,0],[95,2,49,0],[96,0,50,0],[97,0,51,0],[98,0,52,0],[99,0,53,0],[100,0,54,0],[101,0,55,0],[102,2,56,7],[102,11,56,16,"hasStringAsync"],[102,25,56,30,"hasStringAsync"],[102,26,56,30],[102,28,56,33],[103,4,57,4],[103,8,57,8],[103,9,57,9,"ExpoClipboard"],[103,22,57,22],[103,23,57,22,"default"],[103,30,57,22],[103,31,57,23,"hasStringAsync"],[103,45,57,37],[103,47,57,39],[104,6,58,8],[104,12,58,14],[104,16,58,18,"UnavailabilityError"],[104,32,58,37],[104,33,58,37,"UnavailabilityError"],[104,52,58,37],[104,53,58,38],[104,64,58,49],[104,66,58,51],[104,82,58,67],[104,83,58,68],[105,4,59,4],[106,4,60,4],[106,11,60,11,"ExpoClipboard"],[106,24,60,24],[106,25,60,24,"default"],[106,32,60,24],[106,33,60,25,"hasStringAsync"],[106,47,60,39],[106,48,60,40],[106,49,60,41],[107,2,61,0],[108,2,62,0],[109,0,63,0],[110,0,64,0],[111,0,65,0],[112,0,66,0],[113,0,67,0],[114,2,68,7],[114,17,68,22,"getUrlAsync"],[114,28,68,33,"getUrlAsync"],[114,29,68,33],[114,31,68,36],[115,4,69,4],[115,8,69,8],[115,9,69,9,"ExpoClipboard"],[115,22,69,22],[115,23,69,22,"default"],[115,30,69,22],[115,31,69,23,"getUrlAsync"],[115,42,69,34],[115,44,69,36],[116,6,70,8],[116,12,70,14],[116,16,70,18,"UnavailabilityError"],[116,32,70,37],[116,33,70,37,"UnavailabilityError"],[116,52,70,37],[116,53,70,38],[116,64,70,49],[116,66,70,51],[116,79,70,64],[116,80,70,65],[117,4,71,4],[118,4,72,4],[118,11,72,11],[118,17,72,17,"ExpoClipboard"],[118,30,72,30],[118,31,72,30,"default"],[118,38,72,30],[118,39,72,31,"getUrlAsync"],[118,50,72,42],[118,51,72,43],[118,52,72,44],[119,2,73,0],[120,2,74,0],[121,0,75,0],[122,0,76,0],[123,0,77,0],[124,0,78,0],[125,0,79,0],[126,0,80,0],[127,0,81,0],[128,0,82,0],[129,0,83,0],[130,2,84,7],[130,17,84,22,"setUrlAsync"],[130,28,84,33,"setUrlAsync"],[130,29,84,34,"url"],[130,32,84,37],[130,34,84,39],[131,4,85,4],[131,8,85,8],[131,9,85,9,"ExpoClipboard"],[131,22,85,22],[131,23,85,22,"default"],[131,30,85,22],[131,31,85,23,"setUrlAsync"],[131,42,85,34],[131,44,85,36],[132,6,86,8],[132,12,86,14],[132,16,86,18,"UnavailabilityError"],[132,32,86,37],[132,33,86,37,"UnavailabilityError"],[132,52,86,37],[132,53,86,38],[132,64,86,49],[132,66,86,51],[132,79,86,64],[132,80,86,65],[133,4,87,4],[134,4,88,4],[134,11,88,11,"ExpoClipboard"],[134,24,88,24],[134,25,88,24,"default"],[134,32,88,24],[134,33,88,25,"setUrlAsync"],[134,44,88,36],[134,45,88,37,"url"],[134,48,88,40],[134,49,88,41],[135,2,89,0],[136,2,90,0],[137,0,91,0],[138,0,92,0],[139,0,93,0],[140,0,94,0],[141,0,95,0],[142,2,96,7],[142,17,96,22,"hasUrlAsync"],[142,28,96,33,"hasUrlAsync"],[142,29,96,33],[142,31,96,36],[143,4,97,4],[143,8,97,8],[143,9,97,9,"ExpoClipboard"],[143,22,97,22],[143,23,97,22,"default"],[143,30,97,22],[143,31,97,23,"hasUrlAsync"],[143,42,97,34],[143,44,97,36],[144,6,98,8],[144,12,98,14],[144,16,98,18,"UnavailabilityError"],[144,32,98,37],[144,33,98,37,"UnavailabilityError"],[144,52,98,37],[144,53,98,38],[144,64,98,49],[144,66,98,51],[144,79,98,64],[144,80,98,65],[145,4,99,4],[146,4,100,4],[146,11,100,11],[146,17,100,17,"ExpoClipboard"],[146,30,100,30],[146,31,100,30,"default"],[146,38,100,30],[146,39,100,31,"hasUrlAsync"],[146,50,100,42],[146,51,100,43],[146,52,100,44],[147,2,101,0],[148,2,102,0],[149,0,103,0],[150,0,104,0],[151,0,105,0],[152,0,106,0],[153,0,107,0],[154,0,108,0],[155,0,109,0],[156,0,110,0],[157,0,111,0],[158,0,112,0],[159,0,113,0],[160,0,114,0],[161,0,115,0],[162,0,116,0],[163,0,117,0],[164,0,118,0],[165,2,119,7],[165,17,119,22,"getImageAsync"],[165,30,119,35,"getImageAsync"],[165,31,119,36,"options"],[165,38,119,43],[165,40,119,45],[166,4,120,4],[166,8,120,8],[166,9,120,9,"ExpoClipboard"],[166,22,120,22],[166,23,120,22,"default"],[166,30,120,22],[166,31,120,23,"getImageAsync"],[166,44,120,36],[166,46,120,38],[167,6,121,8],[167,12,121,14],[167,16,121,18,"UnavailabilityError"],[167,32,121,37],[167,33,121,37,"UnavailabilityError"],[167,52,121,37],[167,53,121,38],[167,64,121,49],[167,66,121,51],[167,81,121,66],[167,82,121,67],[168,4,122,4],[169,4,123,4],[169,11,123,11],[169,17,123,17,"ExpoClipboard"],[169,30,123,30],[169,31,123,30,"default"],[169,38,123,30],[169,39,123,31,"getImageAsync"],[169,52,123,44],[169,53,123,45,"options"],[169,60,123,52],[169,61,123,53],[170,2,124,0],[171,2,125,0],[172,0,126,0],[173,0,127,0],[174,0,128,0],[175,0,129,0],[176,0,130,0],[177,0,131,0],[178,0,132,0],[179,0,133,0],[180,0,134,0],[181,0,135,0],[182,0,136,0],[183,0,137,0],[184,0,138,0],[185,2,139,7],[185,17,139,22,"setImageAsync"],[185,30,139,35,"setImageAsync"],[185,31,139,36,"base64Image"],[185,42,139,47],[185,44,139,49],[186,4,140,4],[186,8,140,8],[186,9,140,9,"ExpoClipboard"],[186,22,140,22],[186,23,140,22,"default"],[186,30,140,22],[186,31,140,23,"setImageAsync"],[186,44,140,36],[186,46,140,38],[187,6,141,8],[187,12,141,14],[187,16,141,18,"UnavailabilityError"],[187,32,141,37],[187,33,141,37,"UnavailabilityError"],[187,52,141,37],[187,53,141,38],[187,64,141,49],[187,66,141,51],[187,81,141,66],[187,82,141,67],[188,4,142,4],[189,4,143,4],[189,11,143,11,"ExpoClipboard"],[189,24,143,24],[189,25,143,24,"default"],[189,32,143,24],[189,33,143,25,"setImageAsync"],[189,46,143,38],[189,47,143,39,"base64Image"],[189,58,143,50],[189,59,143,51],[190,2,144,0],[191,2,145,0],[192,0,146,0],[193,0,147,0],[194,0,148,0],[195,0,149,0],[196,0,150,0],[197,0,151,0],[198,2,152,7],[198,17,152,22,"hasImageAsync"],[198,30,152,35,"hasImageAsync"],[198,31,152,35],[198,33,152,38],[199,4,153,4],[199,8,153,8],[199,9,153,9,"ExpoClipboard"],[199,22,153,22],[199,23,153,22,"default"],[199,30,153,22],[199,31,153,23,"hasImageAsync"],[199,44,153,36],[199,46,153,38],[200,6,154,8],[200,12,154,14],[200,16,154,18,"UnavailabilityError"],[200,32,154,37],[200,33,154,37,"UnavailabilityError"],[200,52,154,37],[200,53,154,38],[200,64,154,49],[200,66,154,51],[200,81,154,66],[200,82,154,67],[201,4,155,4],[202,4,156,4],[202,11,156,11,"ExpoClipboard"],[202,24,156,24],[202,25,156,24,"default"],[202,32,156,24],[202,33,156,25,"hasImageAsync"],[202,46,156,38],[202,47,156,39],[202,48,156,40],[203,2,157,0],[204,2,158,0],[205,0,159,0],[206,0,160,0],[207,0,161,0],[208,0,162,0],[209,0,163,0],[210,0,164,0],[211,0,165,0],[212,0,166,0],[213,0,167,0],[214,0,168,0],[215,0,169,0],[216,0,170,0],[217,0,171,0],[218,0,172,0],[219,0,173,0],[220,0,174,0],[221,0,175,0],[222,0,176,0],[223,0,177,0],[224,2,178,7],[224,11,178,16,"addClipboardListener"],[224,31,178,36,"addClipboardListener"],[224,32,178,37,"listener"],[224,40,178,45],[224,42,178,47],[225,4,179,4],[226,4,180,4],[226,10,180,10,"listenerWrapper"],[226,25,180,25],[226,28,180,29,"event"],[226,33,180,34],[226,37,180,39],[227,6,181,8],[227,12,181,14,"wrappedEvent"],[227,24,181,26],[227,27,181,29],[228,8,182,12],[228,11,182,15,"event"],[228,16,182,20],[229,8,183,12],[229,12,183,16,"content"],[229,19,183,23,"content"],[229,20,183,23],[229,22,183,26],[230,10,184,16,"console"],[230,17,184,23],[230,18,184,24,"warn"],[230,22,184,28],[230,23,184,29],[230,141,184,147],[230,142,184,148],[231,10,185,16],[231,17,185,23],[231,19,185,25],[232,8,186,12],[233,6,187,8],[233,7,187,9],[234,6,188,8,"listener"],[234,14,188,16],[234,15,188,17,"wrappedEvent"],[234,27,188,29],[234,28,188,30],[235,4,189,4],[235,5,189,5],[236,4,190,4],[236,11,190,11,"ExpoClipboard"],[236,24,190,24],[236,25,190,24,"default"],[236,32,190,24],[236,33,190,25,"addListener"],[236,44,190,36],[236,45,190,37,"onClipboardEventName"],[236,65,190,57],[236,67,190,59,"listenerWrapper"],[236,82,190,74],[236,83,190,75],[237,2,191,0],[238,2,192,0],[239,0,193,0],[240,0,194,0],[241,0,195,0],[242,0,196,0],[243,0,197,0],[244,0,198,0],[245,0,199,0],[246,0,200,0],[247,0,201,0],[248,0,202,0],[249,0,203,0],[250,0,204,0],[251,2,205,7],[251,11,205,16,"removeClipboardListener"],[251,34,205,39,"removeClipboardListener"],[251,35,205,40,"subscription"],[251,47,205,52],[251,49,205,54],[252,4,206,4,"subscription"],[252,16,206,16],[252,17,206,17,"remove"],[252,23,206,23],[252,24,206,24],[252,25,206,25],[253,2,207,0],[254,2,208,0],[255,0,209,0],[256,0,210,0],[257,0,211,0],[258,0,212,0],[259,0,213,0],[260,0,214,0],[261,2,215,7],[261,8,215,13,"isPasteButtonAvailable"],[261,30,215,35],[261,33,215,38,"Platform"],[261,49,215,46],[261,50,215,46,"Platform"],[261,58,215,46],[261,59,215,47,"OS"],[261,61,215,49],[261,66,215,54],[261,71,215,59],[261,74,215,62,"ExpoClipboard"],[261,87,215,75],[261,88,215,75,"default"],[261,95,215,75],[261,96,215,76,"isPasteButtonAvailable"],[261,118,215,98],[261,121,215,101],[261,126,215,106],[262,0,215,107],[262,3]],"functionMap":{"names":["<global>","getStringAsync","setStringAsync","setString","hasStringAsync","getUrlAsync","setUrlAsync","hasUrlAsync","getImageAsync","setImageAsync","hasImageAsync","addClipboardListener","listenerWrapper","wrappedEvent.get__content","removeClipboardListener"],"mappings":"AAA;OCW;CDK;OES;CFK;OGQ;CHS;OIQ;CJK;OKO;CLK;OMW;CNK;OOO;CPK;OQkB;CRK;OSe;CTK;OUQ;CVK;OWqB;4BCE;YCG;aDG;KDG;CXE;Occ;CdE"},"hasCjsExports":false},"type":"js/module"}]}