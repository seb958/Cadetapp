{"dependencies":[{"name":"./CircularBuffer","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":46,"index":61}}],"key":"uVgm5B14gvsefJ8WOcz2JJQif+Q=","exportNames":["*"],"imports":1}},{"name":"./LeastSquareSolver","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":62},"end":{"line":4,"column":52,"index":114}}],"key":"pL+OKV6zXpveMrqrg91kFAGJP/w=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return VelocityTracker;\n    }\n  });\n  var _CircularBuffer = require(_dependencyMap[0], \"./CircularBuffer\");\n  var CircularBuffer = _interopDefault(_CircularBuffer);\n  var _LeastSquareSolver = require(_dependencyMap[1], \"./LeastSquareSolver\");\n  var LeastSquareSolver = _interopDefault(_LeastSquareSolver);\n  class VelocityTracker {\n    assumePointerMoveStoppedMilliseconds = 40;\n    historySize = 20;\n    horizonMilliseconds = 300;\n    minSampleSize = 3;\n    constructor() {\n      this.samples = new CircularBuffer.default(this.historySize);\n    }\n    add(event) {\n      this.samples.push(event);\n    }\n\n    // Returns an estimate of the velocity of the object being tracked by the\n    // tracker given the current information available to the tracker.\n    //\n    // Information is added using [addPosition].\n    //\n    // Returns null if there is no data on which to base an estimate.\n    getVelocityEstimate() {\n      const x = [];\n      const y = [];\n      const w = [];\n      const time = [];\n      let sampleCount = 0;\n      let index = this.samples.size - 1;\n      const newestSample = this.samples.get(index);\n      if (!newestSample) {\n        return null;\n      }\n      let previousSample = newestSample;\n\n      // Starting with the most recent PointAtTime sample, iterate backwards while\n      // the samples represent continuous motion.\n      while (sampleCount < this.samples.size) {\n        const sample = this.samples.get(index);\n        const age = newestSample.time - sample.time;\n        const delta = Math.abs(sample.time - previousSample.time);\n        previousSample = sample;\n        if (age > this.horizonMilliseconds || delta > this.assumePointerMoveStoppedMilliseconds) {\n          break;\n        }\n        x.push(sample.x);\n        y.push(sample.y);\n        w.push(1);\n        time.push(-age);\n        sampleCount++;\n        index--;\n      }\n      if (sampleCount >= this.minSampleSize) {\n        const xSolver = new LeastSquareSolver.default(time, x, w);\n        const xFit = xSolver.solve(2);\n        if (xFit !== null) {\n          const ySolver = new LeastSquareSolver.default(time, y, w);\n          const yFit = ySolver.solve(2);\n          if (yFit !== null) {\n            const xVelocity = xFit.coefficients[1] * 1000;\n            const yVelocity = yFit.coefficients[1] * 1000;\n            return [xVelocity, yVelocity];\n          }\n        }\n      }\n      return null;\n    }\n    get velocity() {\n      const estimate = this.getVelocityEstimate();\n      if (estimate !== null) {\n        return estimate;\n      }\n      return [0, 0];\n    }\n    reset() {\n      this.samples.clear();\n    }\n  }\n});","lineCount":96,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,5,15,"Object"],[12,8,5,15],[12,9,5,15,"defineProperty"],[12,23,5,15],[12,24,5,15,"exports"],[12,31,5,15],[13,4,5,15,"enumerable"],[13,14,5,15],[14,4,5,15,"get"],[14,7,5,15],[14,18,5,15,"get"],[14,19,5,15],[15,6,5,15],[15,13,5,15,"VelocityTracker"],[15,28,5,15],[16,4,5,15],[17,2,5,15],[18,2,3,0],[18,6,3,0,"_CircularBuffer"],[18,21,3,0],[18,24,3,0,"require"],[18,31,3,0],[18,32,3,0,"_dependencyMap"],[18,46,3,0],[19,2,3,0],[19,6,3,0,"CircularBuffer"],[19,20,3,0],[19,23,3,0,"_interopDefault"],[19,38,3,0],[19,39,3,0,"_CircularBuffer"],[19,54,3,0],[20,2,4,0],[20,6,4,0,"_LeastSquareSolver"],[20,24,4,0],[20,27,4,0,"require"],[20,34,4,0],[20,35,4,0,"_dependencyMap"],[20,49,4,0],[21,2,4,0],[21,6,4,0,"LeastSquareSolver"],[21,23,4,0],[21,26,4,0,"_interopDefault"],[21,41,4,0],[21,42,4,0,"_LeastSquareSolver"],[21,60,4,0],[22,2,5,15],[22,8,5,21,"VelocityTracker"],[22,23,5,36],[22,24,5,37],[23,4,6,2,"assumePointerMoveStoppedMilliseconds"],[23,40,6,38],[23,43,6,41],[23,45,6,43],[24,4,7,2,"historySize"],[24,15,7,13],[24,18,7,16],[24,20,7,18],[25,4,8,2,"horizonMilliseconds"],[25,23,8,21],[25,26,8,24],[25,29,8,27],[26,4,9,2,"minSampleSize"],[26,17,9,15],[26,20,9,18],[26,21,9,19],[27,4,10,2,"constructor"],[27,15,10,13,"constructor"],[27,16,10,13],[27,18,10,16],[28,6,11,4],[28,10,11,8],[28,11,11,9,"samples"],[28,18,11,16],[28,21,11,19],[28,25,11,23,"CircularBuffer"],[28,39,11,37],[28,40,11,37,"default"],[28,47,11,37],[28,48,11,38],[28,52,11,42],[28,53,11,43,"historySize"],[28,64,11,54],[28,65,11,55],[29,4,12,2],[30,4,13,2,"add"],[30,7,13,5,"add"],[30,8,13,6,"event"],[30,13,13,11],[30,15,13,13],[31,6,14,4],[31,10,14,8],[31,11,14,9,"samples"],[31,18,14,16],[31,19,14,17,"push"],[31,23,14,21],[31,24,14,22,"event"],[31,29,14,27],[31,30,14,28],[32,4,15,2],[34,4,17,2],[35,4,18,2],[36,4,19,2],[37,4,20,2],[38,4,21,2],[39,4,22,2],[40,4,23,2,"getVelocityEstimate"],[40,23,23,21,"getVelocityEstimate"],[40,24,23,21],[40,26,23,24],[41,6,24,4],[41,12,24,10,"x"],[41,13,24,11],[41,16,24,14],[41,18,24,16],[42,6,25,4],[42,12,25,10,"y"],[42,13,25,11],[42,16,25,14],[42,18,25,16],[43,6,26,4],[43,12,26,10,"w"],[43,13,26,11],[43,16,26,14],[43,18,26,16],[44,6,27,4],[44,12,27,10,"time"],[44,16,27,14],[44,19,27,17],[44,21,27,19],[45,6,28,4],[45,10,28,8,"sampleCount"],[45,21,28,19],[45,24,28,22],[45,25,28,23],[46,6,29,4],[46,10,29,8,"index"],[46,15,29,13],[46,18,29,16],[46,22,29,20],[46,23,29,21,"samples"],[46,30,29,28],[46,31,29,29,"size"],[46,35,29,33],[46,38,29,36],[46,39,29,37],[47,6,30,4],[47,12,30,10,"newestSample"],[47,24,30,22],[47,27,30,25],[47,31,30,29],[47,32,30,30,"samples"],[47,39,30,37],[47,40,30,38,"get"],[47,43,30,41],[47,44,30,42,"index"],[47,49,30,47],[47,50,30,48],[48,6,31,4],[48,10,31,8],[48,11,31,9,"newestSample"],[48,23,31,21],[48,25,31,23],[49,8,32,6],[49,15,32,13],[49,19,32,17],[50,6,33,4],[51,6,34,4],[51,10,34,8,"previousSample"],[51,24,34,22],[51,27,34,25,"newestSample"],[51,39,34,37],[53,6,36,4],[54,6,37,4],[55,6,38,4],[55,13,38,11,"sampleCount"],[55,24,38,22],[55,27,38,25],[55,31,38,29],[55,32,38,30,"samples"],[55,39,38,37],[55,40,38,38,"size"],[55,44,38,42],[55,46,38,44],[56,8,39,6],[56,14,39,12,"sample"],[56,20,39,18],[56,23,39,21],[56,27,39,25],[56,28,39,26,"samples"],[56,35,39,33],[56,36,39,34,"get"],[56,39,39,37],[56,40,39,38,"index"],[56,45,39,43],[56,46,39,44],[57,8,40,6],[57,14,40,12,"age"],[57,17,40,15],[57,20,40,18,"newestSample"],[57,32,40,30],[57,33,40,31,"time"],[57,37,40,35],[57,40,40,38,"sample"],[57,46,40,44],[57,47,40,45,"time"],[57,51,40,49],[58,8,41,6],[58,14,41,12,"delta"],[58,19,41,17],[58,22,41,20,"Math"],[58,26,41,24],[58,27,41,25,"abs"],[58,30,41,28],[58,31,41,29,"sample"],[58,37,41,35],[58,38,41,36,"time"],[58,42,41,40],[58,45,41,43,"previousSample"],[58,59,41,57],[58,60,41,58,"time"],[58,64,41,62],[58,65,41,63],[59,8,42,6,"previousSample"],[59,22,42,20],[59,25,42,23,"sample"],[59,31,42,29],[60,8,43,6],[60,12,43,10,"age"],[60,15,43,13],[60,18,43,16],[60,22,43,20],[60,23,43,21,"horizonMilliseconds"],[60,42,43,40],[60,46,43,44,"delta"],[60,51,43,49],[60,54,43,52],[60,58,43,56],[60,59,43,57,"assumePointerMoveStoppedMilliseconds"],[60,95,43,93],[60,97,43,95],[61,10,44,8],[62,8,45,6],[63,8,46,6,"x"],[63,9,46,7],[63,10,46,8,"push"],[63,14,46,12],[63,15,46,13,"sample"],[63,21,46,19],[63,22,46,20,"x"],[63,23,46,21],[63,24,46,22],[64,8,47,6,"y"],[64,9,47,7],[64,10,47,8,"push"],[64,14,47,12],[64,15,47,13,"sample"],[64,21,47,19],[64,22,47,20,"y"],[64,23,47,21],[64,24,47,22],[65,8,48,6,"w"],[65,9,48,7],[65,10,48,8,"push"],[65,14,48,12],[65,15,48,13],[65,16,48,14],[65,17,48,15],[66,8,49,6,"time"],[66,12,49,10],[66,13,49,11,"push"],[66,17,49,15],[66,18,49,16],[66,19,49,17,"age"],[66,22,49,20],[66,23,49,21],[67,8,50,6,"sampleCount"],[67,19,50,17],[67,21,50,19],[68,8,51,6,"index"],[68,13,51,11],[68,15,51,13],[69,6,52,4],[70,6,53,4],[70,10,53,8,"sampleCount"],[70,21,53,19],[70,25,53,23],[70,29,53,27],[70,30,53,28,"minSampleSize"],[70,43,53,41],[70,45,53,43],[71,8,54,6],[71,14,54,12,"xSolver"],[71,21,54,19],[71,24,54,22],[71,28,54,26,"LeastSquareSolver"],[71,45,54,43],[71,46,54,43,"default"],[71,53,54,43],[71,54,54,44,"time"],[71,58,54,48],[71,60,54,50,"x"],[71,61,54,51],[71,63,54,53,"w"],[71,64,54,54],[71,65,54,55],[72,8,55,6],[72,14,55,12,"xFit"],[72,18,55,16],[72,21,55,19,"xSolver"],[72,28,55,26],[72,29,55,27,"solve"],[72,34,55,32],[72,35,55,33],[72,36,55,34],[72,37,55,35],[73,8,56,6],[73,12,56,10,"xFit"],[73,16,56,14],[73,21,56,19],[73,25,56,23],[73,27,56,25],[74,10,57,8],[74,16,57,14,"ySolver"],[74,23,57,21],[74,26,57,24],[74,30,57,28,"LeastSquareSolver"],[74,47,57,45],[74,48,57,45,"default"],[74,55,57,45],[74,56,57,46,"time"],[74,60,57,50],[74,62,57,52,"y"],[74,63,57,53],[74,65,57,55,"w"],[74,66,57,56],[74,67,57,57],[75,10,58,8],[75,16,58,14,"yFit"],[75,20,58,18],[75,23,58,21,"ySolver"],[75,30,58,28],[75,31,58,29,"solve"],[75,36,58,34],[75,37,58,35],[75,38,58,36],[75,39,58,37],[76,10,59,8],[76,14,59,12,"yFit"],[76,18,59,16],[76,23,59,21],[76,27,59,25],[76,29,59,27],[77,12,60,10],[77,18,60,16,"xVelocity"],[77,27,60,25],[77,30,60,28,"xFit"],[77,34,60,32],[77,35,60,33,"coefficients"],[77,47,60,45],[77,48,60,46],[77,49,60,47],[77,50,60,48],[77,53,60,51],[77,57,60,55],[78,12,61,10],[78,18,61,16,"yVelocity"],[78,27,61,25],[78,30,61,28,"yFit"],[78,34,61,32],[78,35,61,33,"coefficients"],[78,47,61,45],[78,48,61,46],[78,49,61,47],[78,50,61,48],[78,53,61,51],[78,57,61,55],[79,12,62,10],[79,19,62,17],[79,20,62,18,"xVelocity"],[79,29,62,27],[79,31,62,29,"yVelocity"],[79,40,62,38],[79,41,62,39],[80,10,63,8],[81,8,64,6],[82,6,65,4],[83,6,66,4],[83,13,66,11],[83,17,66,15],[84,4,67,2],[85,4,68,2],[85,8,68,6,"velocity"],[85,16,68,14,"velocity"],[85,17,68,14],[85,19,68,17],[86,6,69,4],[86,12,69,10,"estimate"],[86,20,69,18],[86,23,69,21],[86,27,69,25],[86,28,69,26,"getVelocityEstimate"],[86,47,69,45],[86,48,69,46],[86,49,69,47],[87,6,70,4],[87,10,70,8,"estimate"],[87,18,70,16],[87,23,70,21],[87,27,70,25],[87,29,70,27],[88,8,71,6],[88,15,71,13,"estimate"],[88,23,71,21],[89,6,72,4],[90,6,73,4],[90,13,73,11],[90,14,73,12],[90,15,73,13],[90,17,73,15],[90,18,73,16],[90,19,73,17],[91,4,74,2],[92,4,75,2,"reset"],[92,9,75,7,"reset"],[92,10,75,7],[92,12,75,10],[93,6,76,4],[93,10,76,8],[93,11,76,9,"samples"],[93,18,76,16],[93,19,76,17,"clear"],[93,24,76,22],[93,25,76,23],[93,26,76,24],[94,4,77,2],[95,2,78,0],[96,0,78,1],[96,3]],"functionMap":{"names":["<global>","VelocityTracker","constructor","add","getVelocityEstimate","get__velocity","reset"],"mappings":"AAA;eCI;ECK;GDE;EEC;GFE;EGQ;GH4C;EIC;GJM;EKC;GLE;CDC"},"hasCjsExports":false},"type":"js/module"}]}