{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.VEC_LEN_SQ = exports.TEST_MIN_IF_NOT_NAN = exports.TEST_MAX_IF_NOT_NAN = void 0;\n  exports.fireAfterInterval = fireAfterInterval;\n  exports.isnan = exports.isValidNumber = void 0;\n  // TODO(TS) remove if not necessary after rewrite\n  const isnan = v => Number.isNaN(v);\n\n  // TODO(TS) remove if not necessary after rewrite\n  exports.isnan = isnan;\n  const isValidNumber = v => typeof v === 'number' && !Number.isNaN(v);\n  exports.isValidNumber = isValidNumber;\n  const TEST_MIN_IF_NOT_NAN = (value, limit) => !isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\n  exports.TEST_MIN_IF_NOT_NAN = TEST_MIN_IF_NOT_NAN;\n  const VEC_LEN_SQ = ({\n    x = 0,\n    y = 0\n  } = {}) => x * x + y * y;\n  exports.VEC_LEN_SQ = VEC_LEN_SQ;\n  const TEST_MAX_IF_NOT_NAN = (value, max) => !isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\n  exports.TEST_MAX_IF_NOT_NAN = TEST_MAX_IF_NOT_NAN;\n  function fireAfterInterval(method, interval) {\n    if (!interval) {\n      method();\n      return null;\n    }\n    return setTimeout(() => method(), interval);\n  }\n});","lineCount":33,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"VEC_LEN_SQ"],[7,20,6,18],[7,23,6,21,"exports"],[7,30,6,28],[7,31,6,29,"TEST_MIN_IF_NOT_NAN"],[7,50,6,48],[7,53,6,51,"exports"],[7,60,6,58],[7,61,6,59,"TEST_MAX_IF_NOT_NAN"],[7,80,6,78],[7,83,6,81],[7,88,6,86],[7,89,6,87],[8,2,7,0,"exports"],[8,9,7,7],[8,10,7,8,"fireAfterInterval"],[8,27,7,25],[8,30,7,28,"fireAfterInterval"],[8,47,7,45],[9,2,8,0,"exports"],[9,9,8,7],[9,10,8,8,"isnan"],[9,15,8,13],[9,18,8,16,"exports"],[9,25,8,23],[9,26,8,24,"isValidNumber"],[9,39,8,37],[9,42,8,40],[9,47,8,45],[9,48,8,46],[10,2,9,0],[11,2,10,0],[11,8,10,6,"isnan"],[11,13,10,11],[11,16,10,14,"v"],[11,17,10,15],[11,21,10,19,"Number"],[11,27,10,25],[11,28,10,26,"isNaN"],[11,33,10,31],[11,34,10,32,"v"],[11,35,10,33],[11,36,10,34],[13,2,12,0],[14,2,13,0,"exports"],[14,9,13,7],[14,10,13,8,"isnan"],[14,15,13,13],[14,18,13,16,"isnan"],[14,23,13,21],[15,2,14,0],[15,8,14,6,"isValidNumber"],[15,21,14,19],[15,24,14,22,"v"],[15,25,14,23],[15,29,14,27],[15,36,14,34,"v"],[15,37,14,35],[15,42,14,40],[15,50,14,48],[15,54,14,52],[15,55,14,53,"Number"],[15,61,14,59],[15,62,14,60,"isNaN"],[15,67,14,65],[15,68,14,66,"v"],[15,69,14,67],[15,70,14,68],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"isValidNumber"],[16,23,15,21],[16,26,15,24,"isValidNumber"],[16,39,15,37],[17,2,16,0],[17,8,16,6,"TEST_MIN_IF_NOT_NAN"],[17,27,16,25],[17,30,16,28,"TEST_MIN_IF_NOT_NAN"],[17,31,16,29,"value"],[17,36,16,34],[17,38,16,36,"limit"],[17,43,16,41],[17,48,16,46],[17,49,16,47,"isnan"],[17,54,16,52],[17,55,16,53,"limit"],[17,60,16,58],[17,61,16,59],[17,66,16,64,"limit"],[17,71,16,69],[17,74,16,72],[17,75,16,73],[17,79,16,77,"value"],[17,84,16,82],[17,88,16,86,"limit"],[17,93,16,91],[17,97,16,95,"limit"],[17,102,16,100],[17,106,16,104],[17,107,16,105],[17,111,16,109,"value"],[17,116,16,114],[17,120,16,118,"limit"],[17,125,16,123],[17,126,16,124],[18,2,17,0,"exports"],[18,9,17,7],[18,10,17,8,"TEST_MIN_IF_NOT_NAN"],[18,29,17,27],[18,32,17,30,"TEST_MIN_IF_NOT_NAN"],[18,51,17,49],[19,2,18,0],[19,8,18,6,"VEC_LEN_SQ"],[19,18,18,16],[19,21,18,19,"VEC_LEN_SQ"],[19,22,18,20],[20,4,19,2,"x"],[20,5,19,3],[20,8,19,6],[20,9,19,7],[21,4,20,2,"y"],[21,5,20,3],[21,8,20,6],[22,2,21,0],[22,3,21,1],[22,6,21,4],[22,7,21,5],[22,8,21,6],[22,13,21,11,"x"],[22,14,21,12],[22,17,21,15,"x"],[22,18,21,16],[22,21,21,19,"y"],[22,22,21,20],[22,25,21,23,"y"],[22,26,21,24],[23,2,22,0,"exports"],[23,9,22,7],[23,10,22,8,"VEC_LEN_SQ"],[23,20,22,18],[23,23,22,21,"VEC_LEN_SQ"],[23,33,22,31],[24,2,23,0],[24,8,23,6,"TEST_MAX_IF_NOT_NAN"],[24,27,23,25],[24,30,23,28,"TEST_MAX_IF_NOT_NAN"],[24,31,23,29,"value"],[24,36,23,34],[24,38,23,36,"max"],[24,41,23,39],[24,46,23,44],[24,47,23,45,"isnan"],[24,52,23,50],[24,53,23,51,"max"],[24,56,23,54],[24,57,23,55],[24,62,23,60,"max"],[24,65,23,63],[24,68,23,66],[24,69,23,67],[24,73,23,71,"value"],[24,78,23,76],[24,81,23,79,"max"],[24,84,23,82],[24,88,23,86,"max"],[24,91,23,89],[24,95,23,93],[24,96,23,94],[24,100,23,98,"value"],[24,105,23,103],[24,108,23,106,"max"],[24,111,23,109],[24,112,23,110],[25,2,24,0,"exports"],[25,9,24,7],[25,10,24,8,"TEST_MAX_IF_NOT_NAN"],[25,29,24,27],[25,32,24,30,"TEST_MAX_IF_NOT_NAN"],[25,51,24,49],[26,2,25,0],[26,11,25,9,"fireAfterInterval"],[26,28,25,26,"fireAfterInterval"],[26,29,25,27,"method"],[26,35,25,33],[26,37,25,35,"interval"],[26,45,25,43],[26,47,25,45],[27,4,26,2],[27,8,26,6],[27,9,26,7,"interval"],[27,17,26,15],[27,19,26,17],[28,6,27,4,"method"],[28,12,27,10],[28,13,27,11],[28,14,27,12],[29,6,28,4],[29,13,28,11],[29,17,28,15],[30,4,29,2],[31,4,30,2],[31,11,30,9,"setTimeout"],[31,21,30,19],[31,22,30,20],[31,28,30,26,"method"],[31,34,30,32],[31,35,30,33],[31,36,30,34],[31,38,30,36,"interval"],[31,46,30,44],[31,47,30,45],[32,2,31,0],[33,0,31,1],[33,3]],"functionMap":{"names":["<global>","isnan","isValidNumber","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","TEST_MAX_IF_NOT_NAN","fireAfterInterval","setTimeout$argument_0"],"mappings":"AAA;cCS,oBD;sBEI,8CF;4BGE,gGH;mBIE;wBJG;4BKE,kFL;AME;oBCK,cD;CNC"},"hasCjsExports":true},"type":"js/module"}]}