{"dependencies":[{"name":"../getNextHandlerTag","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":25,"index":208},"end":{"line":7,"column":56,"index":239}}],"key":"KIZmhsnmTiJp1so9G89LIFKgbLc=","exportNames":["*"],"imports":1}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":13,"index":254},"end":{"line":8,"column":35,"index":276}}],"key":"/gxgMVIBQIOS9WgzAWnJsYriGvM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Gesture = exports.ContinousBaseGesture = exports.CALLBACK_TYPE = exports.BaseGesture = void 0;\n  var _getNextHandlerTag = require(_dependencyMap[0], \"../getNextHandlerTag\");\n  var _utils = require(_dependencyMap[1], \"../../utils\");\n  // Allow adding a ref to a gesture handler\n\n  const CALLBACK_TYPE = exports.CALLBACK_TYPE = {\n    UNDEFINED: 0,\n    BEGAN: 1,\n    START: 2,\n    UPDATE: 3,\n    CHANGE: 4,\n    END: 5,\n    FINALIZE: 6,\n    TOUCHES_DOWN: 7,\n    TOUCHES_MOVE: 8,\n    TOUCHES_UP: 9,\n    TOUCHES_CANCELLED: 10\n  };\n\n  // Allow using CALLBACK_TYPE as object and type\n  // eslint-disable-next-line @typescript-eslint/no-redeclare\n\n  class Gesture {}\n  exports.Gesture = Gesture;\n  let nextGestureId = 0;\n  class BaseGesture extends Gesture {\n    gestureId = -1;\n    handlerTag = -1;\n    handlerName = '';\n    config = {};\n    handlers = {\n      gestureId: -1,\n      handlerTag: -1,\n      isWorklet: []\n    };\n    constructor() {\n      super();\n\n      // Used to check whether the gesture config has been updated when wrapping it\n      // with `useMemo`. Since every config will have a unique id, when the dependencies\n      // don't change, the config won't be recreated and the id will stay the same.\n      // If the id is different, it means that the config has changed and the gesture\n      // needs to be updated.\n      this.gestureId = nextGestureId++;\n      this.handlers.gestureId = this.gestureId;\n    }\n    addDependency(key, gesture) {\n      const value = this.config[key];\n      this.config[key] = value ? Array().concat(value, gesture) : [gesture];\n    }\n\n    /**\n     * Sets a `ref` to the gesture object, allowing for interoperability with the old API.\n     * @param ref\n     */\n    withRef(ref) {\n      this.config.ref = ref;\n      return this;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    isWorklet(callback) {\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      return callback.__workletHash !== undefined;\n    }\n\n    /**\n     * Set the callback that is being called when given gesture handler starts receiving touches.\n     * At the moment of this callback the handler is in `BEGAN` state and we don't know yet if it will recognize the gesture at all.\n     * @param callback\n     */\n    onBegin(callback) {\n      this.handlers.onBegin = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the gesture is recognized by the handler and it transitions to the `ACTIVE` state.\n     * @param callback\n     */\n    onStart(callback) {\n      this.handlers.onStart = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the gesture that was recognized by the handler finishes and handler reaches `END` state.\n     * It will be called only if the handler was previously in the `ACTIVE` state.\n     * @param callback\n     */\n    onEnd(callback) {\n      this.handlers.onEnd = callback;\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called when the handler finalizes handling gesture - the gesture was recognized and has finished or it failed to recognize.\n     * @param callback\n     */\n    onFinalize(callback) {\n      this.handlers.onFinalize = callback;\n      // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n      this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesDown` callback which is called every time a pointer is placed on the screen.\n     * @param callback\n     */\n    onTouchesDown(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesDown = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesMove` callback which is called every time a pointer is moved on the screen.\n     * @param callback\n     */\n    onTouchesMove(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesMove = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesUp` callback which is called every time a pointer is lifted from the screen.\n     * @param callback\n     */\n    onTouchesUp(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesUp = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the `onTouchesCancelled` callback which is called every time a pointer stops being tracked, for example when the gesture finishes.\n     * @param callback\n     */\n    onTouchesCancelled(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesCancelled = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Indicates whether the given handler should be analyzing stream of touch events or not.\n     * @param enabled\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#enabledvalue-boolean\n     */\n    enabled(enabled) {\n      this.config.enabled = enabled;\n      return this;\n    }\n\n    /**\n     * When true the handler will cancel or fail recognition (depending on its current state) whenever the finger leaves the area of the connected view.\n     * @param value\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#shouldcancelwhenoutsidevalue-boolean\n     */\n    shouldCancelWhenOutside(value) {\n      this.config.shouldCancelWhenOutside = value;\n      return this;\n    }\n\n    /**\n     * This parameter enables control over what part of the connected view area can be used to begin recognizing the gesture.\n     * When a negative number is provided the bounds of the view will reduce the area by the given number of points in each of the sides evenly.\n     * @param hitSlop\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#hitslopsettings\n     */\n    hitSlop(hitSlop) {\n      this.config.hitSlop = hitSlop;\n      return this;\n    }\n\n    /**\n     * #### Web only\n     * This parameter allows to specify which `cursor` should be used when gesture activates.\n     * Supports all CSS cursor values (e.g. `\"grab\"`, `\"zoom-in\"`). Default value is set to `\"auto\"`.\n     * @param activeCursor\n     */\n    activeCursor(activeCursor) {\n      this.config.activeCursor = activeCursor;\n      return this;\n    }\n\n    /**\n     * #### Web & Android only\n     * Allows users to choose which mouse button should handler respond to.\n     * Arguments can be combined using `|` operator, e.g. `mouseButton(MouseButton.LEFT | MouseButton.RIGHT)`.\n     * Default value is set to `MouseButton.LEFT`.\n     * @param mouseButton\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#mousebuttonvalue-mousebutton-web--android-only\n     */\n    mouseButton(mouseButton) {\n      this.config.mouseButton = mouseButton;\n      return this;\n    }\n\n    /**\n     * When `react-native-reanimated` is installed, the callbacks passed to the gestures are automatically workletized and run on the UI thread when called.\n     * This option allows for changing this behavior: when `true`, all the callbacks will be run on the JS thread instead of the UI thread, regardless of whether they are worklets or not.\n     * Defaults to `false`.\n     * @param runOnJS\n     */\n    runOnJS(runOnJS) {\n      this.config.runOnJS = runOnJS;\n      return this;\n    }\n\n    /**\n     * Allows gestures across different components to be recognized simultaneously.\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneouswithexternalgesture\n     */\n    simultaneousWithExternalGesture(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('simultaneousWith', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Allows to delay activation of the handler until all handlers passed as arguments to this method fail (or don't begin at all).\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#requireexternalgesturetofail\n     */\n    requireExternalGestureToFail(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('requireToFail', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Works similarily to `requireExternalGestureToFail` but the direction of the relation is reversed - instead of being one-to-many relation, it's many-to-one.\n     * @param gestures\n     * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#blocksexternalgesture\n     */\n    blocksExternalGesture(...gestures) {\n      for (const gesture of gestures) {\n        this.addDependency('blocksHandlers', gesture);\n      }\n      return this;\n    }\n\n    /**\n     * Sets a `testID` property for gesture object, allowing for querying for it in tests.\n     * @param id\n     */\n    withTestId(id) {\n      this.config.testId = id;\n      return this;\n    }\n\n    /**\n     * #### iOS only\n     * When `true`, the handler will cancel touches for native UI components (`UIButton`, `UISwitch`, etc) it's attached to when it becomes `ACTIVE`.\n     * Default value is `true`.\n     * @param value\n     */\n    cancelsTouchesInView(value) {\n      this.config.cancelsTouchesInView = value;\n      return this;\n    }\n    initialize() {\n      this.handlerTag = (0, _getNextHandlerTag.getNextHandlerTag)();\n      this.handlers = {\n        ...this.handlers,\n        handlerTag: this.handlerTag\n      };\n      if (this.config.ref) {\n        this.config.ref.current = this;\n      }\n    }\n    toGestureArray() {\n      return [this];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    prepare() {}\n    get shouldUseReanimated() {\n      // Use Reanimated when runOnJS isn't set explicitly,\n      // all defined callbacks are worklets\n      // and remote debugging is disabled\n      return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !(0, _utils.isRemoteDebuggingEnabled)();\n    }\n  }\n  exports.BaseGesture = BaseGesture;\n  class ContinousBaseGesture extends BaseGesture {\n    /**\n     * Set the callback that is being called every time the gesture receives an update while it's active.\n     * @param callback\n     */\n    onUpdate(callback) {\n      this.handlers.onUpdate = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * Set the callback that is being called every time the gesture receives an update while it's active.\n     * This callback will receive information about change in value in relation to the last received event.\n     * @param callback\n     */\n    onChange(callback) {\n      this.handlers.onChange = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n      return this;\n    }\n\n    /**\n     * When `true` the handler will not activate by itself even if its activation criteria are met.\n     * Instead you can manipulate its state using state manager.\n     * @param manualActivation\n     */\n    manualActivation(manualActivation) {\n      this.config.manualActivation = manualActivation;\n      return this;\n    }\n  }\n  exports.ContinousBaseGesture = ContinousBaseGesture;\n});","lineCount":339,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"Gesture"],[7,17,6,15],[7,20,6,18,"exports"],[7,27,6,25],[7,28,6,26,"ContinousBaseGesture"],[7,48,6,46],[7,51,6,49,"exports"],[7,58,6,56],[7,59,6,57,"CALLBACK_TYPE"],[7,72,6,70],[7,75,6,73,"exports"],[7,82,6,80],[7,83,6,81,"BaseGesture"],[7,94,6,92],[7,97,6,95],[7,102,6,100],[7,103,6,101],[8,2,7,0],[8,6,7,4,"_getNextHandlerTag"],[8,24,7,22],[8,27,7,25,"require"],[8,34,7,32],[8,35,7,32,"_dependencyMap"],[8,49,7,32],[8,76,7,55],[8,77,7,56],[9,2,8,0],[9,6,8,4,"_utils"],[9,12,8,10],[9,15,8,13,"require"],[9,22,8,20],[9,23,8,20,"_dependencyMap"],[9,37,8,20],[9,55,8,34],[9,56,8,35],[10,2,9,0],[12,2,11,0],[12,8,11,6,"CALLBACK_TYPE"],[12,21,11,19],[12,24,11,22,"exports"],[12,31,11,29],[12,32,11,30,"CALLBACK_TYPE"],[12,45,11,43],[12,48,11,46],[13,4,12,2,"UNDEFINED"],[13,13,12,11],[13,15,12,13],[13,16,12,14],[14,4,13,2,"BEGAN"],[14,9,13,7],[14,11,13,9],[14,12,13,10],[15,4,14,2,"START"],[15,9,14,7],[15,11,14,9],[15,12,14,10],[16,4,15,2,"UPDATE"],[16,10,15,8],[16,12,15,10],[16,13,15,11],[17,4,16,2,"CHANGE"],[17,10,16,8],[17,12,16,10],[17,13,16,11],[18,4,17,2,"END"],[18,7,17,5],[18,9,17,7],[18,10,17,8],[19,4,18,2,"FINALIZE"],[19,12,18,10],[19,14,18,12],[19,15,18,13],[20,4,19,2,"TOUCHES_DOWN"],[20,16,19,14],[20,18,19,16],[20,19,19,17],[21,4,20,2,"TOUCHES_MOVE"],[21,16,20,14],[21,18,20,16],[21,19,20,17],[22,4,21,2,"TOUCHES_UP"],[22,14,21,12],[22,16,21,14],[22,17,21,15],[23,4,22,2,"TOUCHES_CANCELLED"],[23,21,22,19],[23,23,22,21],[24,2,23,0],[24,3,23,1],[26,2,25,0],[27,2,26,0],[29,2,28,0],[29,8,28,6,"Gesture"],[29,15,28,13],[29,16,28,14],[30,2,29,0,"exports"],[30,9,29,7],[30,10,29,8,"Gesture"],[30,17,29,15],[30,20,29,18,"Gesture"],[30,27,29,25],[31,2,30,0],[31,6,30,4,"nextGestureId"],[31,19,30,17],[31,22,30,20],[31,23,30,21],[32,2,31,0],[32,8,31,6,"BaseGesture"],[32,19,31,17],[32,28,31,26,"Gesture"],[32,35,31,33],[32,36,31,34],[33,4,32,2,"gestureId"],[33,13,32,11],[33,16,32,14],[33,17,32,15],[33,18,32,16],[34,4,33,2,"handlerTag"],[34,14,33,12],[34,17,33,15],[34,18,33,16],[34,19,33,17],[35,4,34,2,"handlerName"],[35,15,34,13],[35,18,34,16],[35,20,34,18],[36,4,35,2,"config"],[36,10,35,8],[36,13,35,11],[36,14,35,12],[36,15,35,13],[37,4,36,2,"handlers"],[37,12,36,10],[37,15,36,13],[38,6,37,4,"gestureId"],[38,15,37,13],[38,17,37,15],[38,18,37,16],[38,19,37,17],[39,6,38,4,"handlerTag"],[39,16,38,14],[39,18,38,16],[39,19,38,17],[39,20,38,18],[40,6,39,4,"isWorklet"],[40,15,39,13],[40,17,39,15],[41,4,40,2],[41,5,40,3],[42,4,41,2,"constructor"],[42,15,41,13,"constructor"],[42,16,41,13],[42,18,41,16],[43,6,42,4],[43,11,42,9],[43,12,42,10],[43,13,42,11],[45,6,44,4],[46,6,45,4],[47,6,46,4],[48,6,47,4],[49,6,48,4],[50,6,49,4],[50,10,49,8],[50,11,49,9,"gestureId"],[50,20,49,18],[50,23,49,21,"nextGestureId"],[50,36,49,34],[50,38,49,36],[51,6,50,4],[51,10,50,8],[51,11,50,9,"handlers"],[51,19,50,17],[51,20,50,18,"gestureId"],[51,29,50,27],[51,32,50,30],[51,36,50,34],[51,37,50,35,"gestureId"],[51,46,50,44],[52,4,51,2],[53,4,52,2,"addDependency"],[53,17,52,15,"addDependency"],[53,18,52,16,"key"],[53,21,52,19],[53,23,52,21,"gesture"],[53,30,52,28],[53,32,52,30],[54,6,53,4],[54,12,53,10,"value"],[54,17,53,15],[54,20,53,18],[54,24,53,22],[54,25,53,23,"config"],[54,31,53,29],[54,32,53,30,"key"],[54,35,53,33],[54,36,53,34],[55,6,54,4],[55,10,54,8],[55,11,54,9,"config"],[55,17,54,15],[55,18,54,16,"key"],[55,21,54,19],[55,22,54,20],[55,25,54,23,"value"],[55,30,54,28],[55,33,54,31,"Array"],[55,38,54,36],[55,39,54,37],[55,40,54,38],[55,41,54,39,"concat"],[55,47,54,45],[55,48,54,46,"value"],[55,53,54,51],[55,55,54,53,"gesture"],[55,62,54,60],[55,63,54,61],[55,66,54,64],[55,67,54,65,"gesture"],[55,74,54,72],[55,75,54,73],[56,4,55,2],[58,4,57,2],[59,0,58,0],[60,0,59,0],[61,0,60,0],[62,4,61,2,"withRef"],[62,11,61,9,"withRef"],[62,12,61,10,"ref"],[62,15,61,13],[62,17,61,15],[63,6,62,4],[63,10,62,8],[63,11,62,9,"config"],[63,17,62,15],[63,18,62,16,"ref"],[63,21,62,19],[63,24,62,22,"ref"],[63,27,62,25],[64,6,63,4],[64,13,63,11],[64,17,63,15],[65,4,64,2],[67,4,66,2],[68,4,67,2,"isWorklet"],[68,13,67,11,"isWorklet"],[68,14,67,12,"callback"],[68,22,67,20],[68,24,67,22],[69,6,68,4],[70,6,69,4],[70,13,69,11,"callback"],[70,21,69,19],[70,22,69,20,"__workletHash"],[70,35,69,33],[70,40,69,38,"undefined"],[70,49,69,47],[71,4,70,2],[73,4,72,2],[74,0,73,0],[75,0,74,0],[76,0,75,0],[77,0,76,0],[78,4,77,2,"onBegin"],[78,11,77,9,"onBegin"],[78,12,77,10,"callback"],[78,20,77,18],[78,22,77,20],[79,6,78,4],[79,10,78,8],[79,11,78,9,"handlers"],[79,19,78,17],[79,20,78,18,"onBegin"],[79,27,78,25],[79,30,78,28,"callback"],[79,38,78,36],[80,6,79,4],[80,10,79,8],[80,11,79,9,"handlers"],[80,19,79,17],[80,20,79,18,"isWorklet"],[80,29,79,27],[80,30,79,28,"CALLBACK_TYPE"],[80,43,79,41],[80,44,79,42,"BEGAN"],[80,49,79,47],[80,50,79,48],[80,53,79,51],[80,57,79,55],[80,58,79,56,"isWorklet"],[80,67,79,65],[80,68,79,66,"callback"],[80,76,79,74],[80,77,79,75],[81,6,80,4],[81,13,80,11],[81,17,80,15],[82,4,81,2],[84,4,83,2],[85,0,84,0],[86,0,85,0],[87,0,86,0],[88,4,87,2,"onStart"],[88,11,87,9,"onStart"],[88,12,87,10,"callback"],[88,20,87,18],[88,22,87,20],[89,6,88,4],[89,10,88,8],[89,11,88,9,"handlers"],[89,19,88,17],[89,20,88,18,"onStart"],[89,27,88,25],[89,30,88,28,"callback"],[89,38,88,36],[90,6,89,4],[90,10,89,8],[90,11,89,9,"handlers"],[90,19,89,17],[90,20,89,18,"isWorklet"],[90,29,89,27],[90,30,89,28,"CALLBACK_TYPE"],[90,43,89,41],[90,44,89,42,"START"],[90,49,89,47],[90,50,89,48],[90,53,89,51],[90,57,89,55],[90,58,89,56,"isWorklet"],[90,67,89,65],[90,68,89,66,"callback"],[90,76,89,74],[90,77,89,75],[91,6,90,4],[91,13,90,11],[91,17,90,15],[92,4,91,2],[94,4,93,2],[95,0,94,0],[96,0,95,0],[97,0,96,0],[98,0,97,0],[99,4,98,2,"onEnd"],[99,9,98,7,"onEnd"],[99,10,98,8,"callback"],[99,18,98,16],[99,20,98,18],[100,6,99,4],[100,10,99,8],[100,11,99,9,"handlers"],[100,19,99,17],[100,20,99,18,"onEnd"],[100,25,99,23],[100,28,99,26,"callback"],[100,36,99,34],[101,6,100,4],[102,6,101,4],[102,10,101,8],[102,11,101,9,"handlers"],[102,19,101,17],[102,20,101,18,"isWorklet"],[102,29,101,27],[102,30,101,28,"CALLBACK_TYPE"],[102,43,101,41],[102,44,101,42,"END"],[102,47,101,45],[102,48,101,46],[102,51,101,49],[102,55,101,53],[102,56,101,54,"isWorklet"],[102,65,101,63],[102,66,101,64,"callback"],[102,74,101,72],[102,75,101,73],[103,6,102,4],[103,13,102,11],[103,17,102,15],[104,4,103,2],[106,4,105,2],[107,0,106,0],[108,0,107,0],[109,0,108,0],[110,4,109,2,"onFinalize"],[110,14,109,12,"onFinalize"],[110,15,109,13,"callback"],[110,23,109,21],[110,25,109,23],[111,6,110,4],[111,10,110,8],[111,11,110,9,"handlers"],[111,19,110,17],[111,20,110,18,"onFinalize"],[111,30,110,28],[111,33,110,31,"callback"],[111,41,110,39],[112,6,111,4],[113,6,112,4],[113,10,112,8],[113,11,112,9,"handlers"],[113,19,112,17],[113,20,112,18,"isWorklet"],[113,29,112,27],[113,30,112,28,"CALLBACK_TYPE"],[113,43,112,41],[113,44,112,42,"FINALIZE"],[113,52,112,50],[113,53,112,51],[113,56,112,54],[113,60,112,58],[113,61,112,59,"isWorklet"],[113,70,112,68],[113,71,112,69,"callback"],[113,79,112,77],[113,80,112,78],[114,6,113,4],[114,13,113,11],[114,17,113,15],[115,4,114,2],[117,4,116,2],[118,0,117,0],[119,0,118,0],[120,0,119,0],[121,4,120,2,"onTouchesDown"],[121,17,120,15,"onTouchesDown"],[121,18,120,16,"callback"],[121,26,120,24],[121,28,120,26],[122,6,121,4],[122,10,121,8],[122,11,121,9,"config"],[122,17,121,15],[122,18,121,16,"needsPointerData"],[122,34,121,32],[122,37,121,35],[122,41,121,39],[123,6,122,4],[123,10,122,8],[123,11,122,9,"handlers"],[123,19,122,17],[123,20,122,18,"onTouchesDown"],[123,33,122,31],[123,36,122,34,"callback"],[123,44,122,42],[124,6,123,4],[124,10,123,8],[124,11,123,9,"handlers"],[124,19,123,17],[124,20,123,18,"isWorklet"],[124,29,123,27],[124,30,123,28,"CALLBACK_TYPE"],[124,43,123,41],[124,44,123,42,"TOUCHES_DOWN"],[124,56,123,54],[124,57,123,55],[124,60,123,58],[124,64,123,62],[124,65,123,63,"isWorklet"],[124,74,123,72],[124,75,123,73,"callback"],[124,83,123,81],[124,84,123,82],[125,6,124,4],[125,13,124,11],[125,17,124,15],[126,4,125,2],[128,4,127,2],[129,0,128,0],[130,0,129,0],[131,0,130,0],[132,4,131,2,"onTouchesMove"],[132,17,131,15,"onTouchesMove"],[132,18,131,16,"callback"],[132,26,131,24],[132,28,131,26],[133,6,132,4],[133,10,132,8],[133,11,132,9,"config"],[133,17,132,15],[133,18,132,16,"needsPointerData"],[133,34,132,32],[133,37,132,35],[133,41,132,39],[134,6,133,4],[134,10,133,8],[134,11,133,9,"handlers"],[134,19,133,17],[134,20,133,18,"onTouchesMove"],[134,33,133,31],[134,36,133,34,"callback"],[134,44,133,42],[135,6,134,4],[135,10,134,8],[135,11,134,9,"handlers"],[135,19,134,17],[135,20,134,18,"isWorklet"],[135,29,134,27],[135,30,134,28,"CALLBACK_TYPE"],[135,43,134,41],[135,44,134,42,"TOUCHES_MOVE"],[135,56,134,54],[135,57,134,55],[135,60,134,58],[135,64,134,62],[135,65,134,63,"isWorklet"],[135,74,134,72],[135,75,134,73,"callback"],[135,83,134,81],[135,84,134,82],[136,6,135,4],[136,13,135,11],[136,17,135,15],[137,4,136,2],[139,4,138,2],[140,0,139,0],[141,0,140,0],[142,0,141,0],[143,4,142,2,"onTouchesUp"],[143,15,142,13,"onTouchesUp"],[143,16,142,14,"callback"],[143,24,142,22],[143,26,142,24],[144,6,143,4],[144,10,143,8],[144,11,143,9,"config"],[144,17,143,15],[144,18,143,16,"needsPointerData"],[144,34,143,32],[144,37,143,35],[144,41,143,39],[145,6,144,4],[145,10,144,8],[145,11,144,9,"handlers"],[145,19,144,17],[145,20,144,18,"onTouchesUp"],[145,31,144,29],[145,34,144,32,"callback"],[145,42,144,40],[146,6,145,4],[146,10,145,8],[146,11,145,9,"handlers"],[146,19,145,17],[146,20,145,18,"isWorklet"],[146,29,145,27],[146,30,145,28,"CALLBACK_TYPE"],[146,43,145,41],[146,44,145,42,"TOUCHES_UP"],[146,54,145,52],[146,55,145,53],[146,58,145,56],[146,62,145,60],[146,63,145,61,"isWorklet"],[146,72,145,70],[146,73,145,71,"callback"],[146,81,145,79],[146,82,145,80],[147,6,146,4],[147,13,146,11],[147,17,146,15],[148,4,147,2],[150,4,149,2],[151,0,150,0],[152,0,151,0],[153,0,152,0],[154,4,153,2,"onTouchesCancelled"],[154,22,153,20,"onTouchesCancelled"],[154,23,153,21,"callback"],[154,31,153,29],[154,33,153,31],[155,6,154,4],[155,10,154,8],[155,11,154,9,"config"],[155,17,154,15],[155,18,154,16,"needsPointerData"],[155,34,154,32],[155,37,154,35],[155,41,154,39],[156,6,155,4],[156,10,155,8],[156,11,155,9,"handlers"],[156,19,155,17],[156,20,155,18,"onTouchesCancelled"],[156,38,155,36],[156,41,155,39,"callback"],[156,49,155,47],[157,6,156,4],[157,10,156,8],[157,11,156,9,"handlers"],[157,19,156,17],[157,20,156,18,"isWorklet"],[157,29,156,27],[157,30,156,28,"CALLBACK_TYPE"],[157,43,156,41],[157,44,156,42,"TOUCHES_CANCELLED"],[157,61,156,59],[157,62,156,60],[157,65,156,63],[157,69,156,67],[157,70,156,68,"isWorklet"],[157,79,156,77],[157,80,156,78,"callback"],[157,88,156,86],[157,89,156,87],[158,6,157,4],[158,13,157,11],[158,17,157,15],[159,4,158,2],[161,4,160,2],[162,0,161,0],[163,0,162,0],[164,0,163,0],[165,0,164,0],[166,4,165,2,"enabled"],[166,11,165,9,"enabled"],[166,12,165,10,"enabled"],[166,19,165,17],[166,21,165,19],[167,6,166,4],[167,10,166,8],[167,11,166,9,"config"],[167,17,166,15],[167,18,166,16,"enabled"],[167,25,166,23],[167,28,166,26,"enabled"],[167,35,166,33],[168,6,167,4],[168,13,167,11],[168,17,167,15],[169,4,168,2],[171,4,170,2],[172,0,171,0],[173,0,172,0],[174,0,173,0],[175,0,174,0],[176,4,175,2,"shouldCancelWhenOutside"],[176,27,175,25,"shouldCancelWhenOutside"],[176,28,175,26,"value"],[176,33,175,31],[176,35,175,33],[177,6,176,4],[177,10,176,8],[177,11,176,9,"config"],[177,17,176,15],[177,18,176,16,"shouldCancelWhenOutside"],[177,41,176,39],[177,44,176,42,"value"],[177,49,176,47],[178,6,177,4],[178,13,177,11],[178,17,177,15],[179,4,178,2],[181,4,180,2],[182,0,181,0],[183,0,182,0],[184,0,183,0],[185,0,184,0],[186,0,185,0],[187,4,186,2,"hitSlop"],[187,11,186,9,"hitSlop"],[187,12,186,10,"hitSlop"],[187,19,186,17],[187,21,186,19],[188,6,187,4],[188,10,187,8],[188,11,187,9,"config"],[188,17,187,15],[188,18,187,16,"hitSlop"],[188,25,187,23],[188,28,187,26,"hitSlop"],[188,35,187,33],[189,6,188,4],[189,13,188,11],[189,17,188,15],[190,4,189,2],[192,4,191,2],[193,0,192,0],[194,0,193,0],[195,0,194,0],[196,0,195,0],[197,0,196,0],[198,4,197,2,"activeCursor"],[198,16,197,14,"activeCursor"],[198,17,197,15,"activeCursor"],[198,29,197,27],[198,31,197,29],[199,6,198,4],[199,10,198,8],[199,11,198,9,"config"],[199,17,198,15],[199,18,198,16,"activeCursor"],[199,30,198,28],[199,33,198,31,"activeCursor"],[199,45,198,43],[200,6,199,4],[200,13,199,11],[200,17,199,15],[201,4,200,2],[203,4,202,2],[204,0,203,0],[205,0,204,0],[206,0,205,0],[207,0,206,0],[208,0,207,0],[209,0,208,0],[210,0,209,0],[211,4,210,2,"mouseButton"],[211,15,210,13,"mouseButton"],[211,16,210,14,"mouseButton"],[211,27,210,25],[211,29,210,27],[212,6,211,4],[212,10,211,8],[212,11,211,9,"config"],[212,17,211,15],[212,18,211,16,"mouseButton"],[212,29,211,27],[212,32,211,30,"mouseButton"],[212,43,211,41],[213,6,212,4],[213,13,212,11],[213,17,212,15],[214,4,213,2],[216,4,215,2],[217,0,216,0],[218,0,217,0],[219,0,218,0],[220,0,219,0],[221,0,220,0],[222,4,221,2,"runOnJS"],[222,11,221,9,"runOnJS"],[222,12,221,10,"runOnJS"],[222,19,221,17],[222,21,221,19],[223,6,222,4],[223,10,222,8],[223,11,222,9,"config"],[223,17,222,15],[223,18,222,16,"runOnJS"],[223,25,222,23],[223,28,222,26,"runOnJS"],[223,35,222,33],[224,6,223,4],[224,13,223,11],[224,17,223,15],[225,4,224,2],[227,4,226,2],[228,0,227,0],[229,0,228,0],[230,0,229,0],[231,0,230,0],[232,4,231,2,"simultaneousWithExternalGesture"],[232,35,231,33,"simultaneousWithExternalGesture"],[232,36,231,34],[232,39,231,37,"gestures"],[232,47,231,45],[232,49,231,47],[233,6,232,4],[233,11,232,9],[233,17,232,15,"gesture"],[233,24,232,22],[233,28,232,26,"gestures"],[233,36,232,34],[233,38,232,36],[234,8,233,6],[234,12,233,10],[234,13,233,11,"addDependency"],[234,26,233,24],[234,27,233,25],[234,45,233,43],[234,47,233,45,"gesture"],[234,54,233,52],[234,55,233,53],[235,6,234,4],[236,6,235,4],[236,13,235,11],[236,17,235,15],[237,4,236,2],[239,4,238,2],[240,0,239,0],[241,0,240,0],[242,0,241,0],[243,0,242,0],[244,4,243,2,"requireExternalGestureToFail"],[244,32,243,30,"requireExternalGestureToFail"],[244,33,243,31],[244,36,243,34,"gestures"],[244,44,243,42],[244,46,243,44],[245,6,244,4],[245,11,244,9],[245,17,244,15,"gesture"],[245,24,244,22],[245,28,244,26,"gestures"],[245,36,244,34],[245,38,244,36],[246,8,245,6],[246,12,245,10],[246,13,245,11,"addDependency"],[246,26,245,24],[246,27,245,25],[246,42,245,40],[246,44,245,42,"gesture"],[246,51,245,49],[246,52,245,50],[247,6,246,4],[248,6,247,4],[248,13,247,11],[248,17,247,15],[249,4,248,2],[251,4,250,2],[252,0,251,0],[253,0,252,0],[254,0,253,0],[255,0,254,0],[256,4,255,2,"blocksExternalGesture"],[256,25,255,23,"blocksExternalGesture"],[256,26,255,24],[256,29,255,27,"gestures"],[256,37,255,35],[256,39,255,37],[257,6,256,4],[257,11,256,9],[257,17,256,15,"gesture"],[257,24,256,22],[257,28,256,26,"gestures"],[257,36,256,34],[257,38,256,36],[258,8,257,6],[258,12,257,10],[258,13,257,11,"addDependency"],[258,26,257,24],[258,27,257,25],[258,43,257,41],[258,45,257,43,"gesture"],[258,52,257,50],[258,53,257,51],[259,6,258,4],[260,6,259,4],[260,13,259,11],[260,17,259,15],[261,4,260,2],[263,4,262,2],[264,0,263,0],[265,0,264,0],[266,0,265,0],[267,4,266,2,"withTestId"],[267,14,266,12,"withTestId"],[267,15,266,13,"id"],[267,17,266,15],[267,19,266,17],[268,6,267,4],[268,10,267,8],[268,11,267,9,"config"],[268,17,267,15],[268,18,267,16,"testId"],[268,24,267,22],[268,27,267,25,"id"],[268,29,267,27],[269,6,268,4],[269,13,268,11],[269,17,268,15],[270,4,269,2],[272,4,271,2],[273,0,272,0],[274,0,273,0],[275,0,274,0],[276,0,275,0],[277,0,276,0],[278,4,277,2,"cancelsTouchesInView"],[278,24,277,22,"cancelsTouchesInView"],[278,25,277,23,"value"],[278,30,277,28],[278,32,277,30],[279,6,278,4],[279,10,278,8],[279,11,278,9,"config"],[279,17,278,15],[279,18,278,16,"cancelsTouchesInView"],[279,38,278,36],[279,41,278,39,"value"],[279,46,278,44],[280,6,279,4],[280,13,279,11],[280,17,279,15],[281,4,280,2],[282,4,281,2,"initialize"],[282,14,281,12,"initialize"],[282,15,281,12],[282,17,281,15],[283,6,282,4],[283,10,282,8],[283,11,282,9,"handlerTag"],[283,21,282,19],[283,24,282,22],[283,25,282,23],[283,26,282,24],[283,28,282,26,"_getNextHandlerTag"],[283,46,282,44],[283,47,282,45,"getNextHandlerTag"],[283,64,282,62],[283,66,282,64],[283,67,282,65],[284,6,283,4],[284,10,283,8],[284,11,283,9,"handlers"],[284,19,283,17],[284,22,283,20],[285,8,284,6],[285,11,284,9],[285,15,284,13],[285,16,284,14,"handlers"],[285,24,284,22],[286,8,285,6,"handlerTag"],[286,18,285,16],[286,20,285,18],[286,24,285,22],[286,25,285,23,"handlerTag"],[287,6,286,4],[287,7,286,5],[288,6,287,4],[288,10,287,8],[288,14,287,12],[288,15,287,13,"config"],[288,21,287,19],[288,22,287,20,"ref"],[288,25,287,23],[288,27,287,25],[289,8,288,6],[289,12,288,10],[289,13,288,11,"config"],[289,19,288,17],[289,20,288,18,"ref"],[289,23,288,21],[289,24,288,22,"current"],[289,31,288,29],[289,34,288,32],[289,38,288,36],[290,6,289,4],[291,4,290,2],[292,4,291,2,"toGestureArray"],[292,18,291,16,"toGestureArray"],[292,19,291,16],[292,21,291,19],[293,6,292,4],[293,13,292,11],[293,14,292,12],[293,18,292,16],[293,19,292,17],[294,4,293,2],[296,4,295,2],[297,4,296,2,"prepare"],[297,11,296,9,"prepare"],[297,12,296,9],[297,14,296,12],[297,15,296,13],[298,4,297,2],[298,8,297,6,"shouldUseReanimated"],[298,27,297,25,"shouldUseReanimated"],[298,28,297,25],[298,30,297,28],[299,6,298,4],[300,6,299,4],[301,6,300,4],[302,6,301,4],[302,13,301,11],[302,17,301,15],[302,18,301,16,"config"],[302,24,301,22],[302,25,301,23,"runOnJS"],[302,32,301,30],[302,37,301,35],[302,41,301,39],[302,45,301,43],[302,46,301,44],[302,50,301,48],[302,51,301,49,"handlers"],[302,59,301,57],[302,60,301,58,"isWorklet"],[302,69,301,67],[302,70,301,68,"includes"],[302,78,301,76],[302,79,301,77],[302,84,301,82],[302,85,301,83],[302,89,301,87],[302,90,301,88],[302,91,301,89],[302,92,301,90],[302,94,301,92,"_utils"],[302,100,301,98],[302,101,301,99,"isRemoteDebuggingEnabled"],[302,125,301,123],[302,127,301,125],[302,128,301,126],[303,4,302,2],[304,2,303,0],[305,2,304,0,"exports"],[305,9,304,7],[305,10,304,8,"BaseGesture"],[305,21,304,19],[305,24,304,22,"BaseGesture"],[305,35,304,33],[306,2,305,0],[306,8,305,6,"ContinousBaseGesture"],[306,28,305,26],[306,37,305,35,"BaseGesture"],[306,48,305,46],[306,49,305,47],[307,4,306,2],[308,0,307,0],[309,0,308,0],[310,0,309,0],[311,4,310,2,"onUpdate"],[311,12,310,10,"onUpdate"],[311,13,310,11,"callback"],[311,21,310,19],[311,23,310,21],[312,6,311,4],[312,10,311,8],[312,11,311,9,"handlers"],[312,19,311,17],[312,20,311,18,"onUpdate"],[312,28,311,26],[312,31,311,29,"callback"],[312,39,311,37],[313,6,312,4],[313,10,312,8],[313,11,312,9,"handlers"],[313,19,312,17],[313,20,312,18,"isWorklet"],[313,29,312,27],[313,30,312,28,"CALLBACK_TYPE"],[313,43,312,41],[313,44,312,42,"UPDATE"],[313,50,312,48],[313,51,312,49],[313,54,312,52],[313,58,312,56],[313,59,312,57,"isWorklet"],[313,68,312,66],[313,69,312,67,"callback"],[313,77,312,75],[313,78,312,76],[314,6,313,4],[314,13,313,11],[314,17,313,15],[315,4,314,2],[317,4,316,2],[318,0,317,0],[319,0,318,0],[320,0,319,0],[321,0,320,0],[322,4,321,2,"onChange"],[322,12,321,10,"onChange"],[322,13,321,11,"callback"],[322,21,321,19],[322,23,321,21],[323,6,322,4],[323,10,322,8],[323,11,322,9,"handlers"],[323,19,322,17],[323,20,322,18,"onChange"],[323,28,322,26],[323,31,322,29,"callback"],[323,39,322,37],[324,6,323,4],[324,10,323,8],[324,11,323,9,"handlers"],[324,19,323,17],[324,20,323,18,"isWorklet"],[324,29,323,27],[324,30,323,28,"CALLBACK_TYPE"],[324,43,323,41],[324,44,323,42,"CHANGE"],[324,50,323,48],[324,51,323,49],[324,54,323,52],[324,58,323,56],[324,59,323,57,"isWorklet"],[324,68,323,66],[324,69,323,67,"callback"],[324,77,323,75],[324,78,323,76],[325,6,324,4],[325,13,324,11],[325,17,324,15],[326,4,325,2],[328,4,327,2],[329,0,328,0],[330,0,329,0],[331,0,330,0],[332,0,331,0],[333,4,332,2,"manualActivation"],[333,20,332,18,"manualActivation"],[333,21,332,19,"manualActivation"],[333,37,332,35],[333,39,332,37],[334,6,333,4],[334,10,333,8],[334,11,333,9,"config"],[334,17,333,15],[334,18,333,16,"manualActivation"],[334,34,333,32],[334,37,333,35,"manualActivation"],[334,53,333,51],[335,6,334,4],[335,13,334,11],[335,17,334,15],[336,4,335,2],[337,2,336,0],[338,2,337,0,"exports"],[338,9,337,7],[338,10,337,8,"ContinousBaseGesture"],[338,30,337,28],[338,33,337,31,"ContinousBaseGesture"],[338,53,337,51],[339,0,337,52],[339,3]],"functionMap":{"names":["<global>","Gesture","BaseGesture","BaseGesture#constructor","BaseGesture#addDependency","BaseGesture#withRef","BaseGesture#isWorklet","BaseGesture#onBegin","BaseGesture#onStart","BaseGesture#onEnd","BaseGesture#onFinalize","BaseGesture#onTouchesDown","BaseGesture#onTouchesMove","BaseGesture#onTouchesUp","BaseGesture#onTouchesCancelled","BaseGesture#enabled","BaseGesture#shouldCancelWhenOutside","BaseGesture#hitSlop","BaseGesture#activeCursor","BaseGesture#mouseButton","BaseGesture#runOnJS","BaseGesture#simultaneousWithExternalGesture","BaseGesture#requireExternalGestureToFail","BaseGesture#blocksExternalGesture","BaseGesture#withTestId","BaseGesture#cancelsTouchesInView","BaseGesture#initialize","BaseGesture#toGestureArray","BaseGesture#prepare","BaseGesture#get__shouldUseReanimated","ContinousBaseGesture","ContinousBaseGesture#onUpdate","ContinousBaseGesture#onChange","ContinousBaseGesture#manualActivation"],"mappings":"AAA;AC2B,gBD;AEG;ECU;GDU;EEC;GFG;EGM;GHG;EIG;GJG;EKO;GLI;EMM;GNI;EOO;GPK;EQM;GRK;ESM;GTK;EUM;GVK;EWM;GXK;EYM;GZK;EaO;GbG;EcO;GdG;EeQ;GfG;EgBQ;GhBG;EiBU;GjBG;EkBQ;GlBG;EmBO;GnBK;EoBO;GpBK;EqBO;GrBK;EsBM;GtBG;EuBQ;GvBG;EwBC;GxBS;EyBC;GzBE;E0BG,Y1B;E2BC;G3BK;CFC;A8BE;ECK;GDI;EEO;GFI;EGO;GHG;C9BC"},"hasCjsExports":true},"type":"js/module"}]}