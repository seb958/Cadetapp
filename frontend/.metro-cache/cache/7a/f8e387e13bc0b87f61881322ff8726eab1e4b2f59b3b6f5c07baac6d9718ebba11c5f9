{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  // TODO(TS) remove if not necessary after rewrite\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"isnan\", {\n    enumerable: true,\n    get: function () {\n      return isnan;\n    }\n  });\n  Object.defineProperty(exports, \"isValidNumber\", {\n    enumerable: true,\n    get: function () {\n      return isValidNumber;\n    }\n  });\n  Object.defineProperty(exports, \"TEST_MIN_IF_NOT_NAN\", {\n    enumerable: true,\n    get: function () {\n      return TEST_MIN_IF_NOT_NAN;\n    }\n  });\n  Object.defineProperty(exports, \"VEC_LEN_SQ\", {\n    enumerable: true,\n    get: function () {\n      return VEC_LEN_SQ;\n    }\n  });\n  Object.defineProperty(exports, \"TEST_MAX_IF_NOT_NAN\", {\n    enumerable: true,\n    get: function () {\n      return TEST_MAX_IF_NOT_NAN;\n    }\n  });\n  exports.fireAfterInterval = fireAfterInterval;\n  const isnan = v => Number.isNaN(v);\n\n  // TODO(TS) remove if not necessary after rewrite\n  const isValidNumber = v => typeof v === 'number' && !Number.isNaN(v);\n  const TEST_MIN_IF_NOT_NAN = (value, limit) => !isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\n  const VEC_LEN_SQ = ({\n    x = 0,\n    y = 0\n  } = {}) => x * x + y * y;\n  const TEST_MAX_IF_NOT_NAN = (value, max) => !isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\n  function fireAfterInterval(method, interval) {\n    if (!interval) {\n      method();\n      return null;\n    }\n    return setTimeout(() => method(), interval);\n  }\n});","lineCount":56,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,3,0,"Object"],[5,8,3,0],[5,9,3,0,"defineProperty"],[5,23,3,0],[5,24,3,0,"exports"],[5,31,3,0],[6,4,3,0,"value"],[6,9,3,0],[7,2,3,0],[8,2,4,0,"Object"],[8,8,4,0],[8,9,4,0,"defineProperty"],[8,23,4,0],[8,24,4,0,"exports"],[8,31,4,0],[9,4,4,0,"enumerable"],[9,14,4,0],[10,4,4,0,"get"],[10,7,4,0],[10,18,4,0,"get"],[10,19,4,0],[11,6,4,0],[11,13,4,0,"isnan"],[11,18,4,0],[12,4,4,0],[13,2,4,0],[14,2,7,0,"Object"],[14,8,7,0],[14,9,7,0,"defineProperty"],[14,23,7,0],[14,24,7,0,"exports"],[14,31,7,0],[15,4,7,0,"enumerable"],[15,14,7,0],[16,4,7,0,"get"],[16,7,7,0],[16,18,7,0,"get"],[16,19,7,0],[17,6,7,0],[17,13,7,0,"isValidNumber"],[17,26,7,0],[18,4,7,0],[19,2,7,0],[20,2,8,0,"Object"],[20,8,8,0],[20,9,8,0,"defineProperty"],[20,23,8,0],[20,24,8,0,"exports"],[20,31,8,0],[21,4,8,0,"enumerable"],[21,14,8,0],[22,4,8,0,"get"],[22,7,8,0],[22,18,8,0,"get"],[22,19,8,0],[23,6,8,0],[23,13,8,0,"TEST_MIN_IF_NOT_NAN"],[23,32,8,0],[24,4,8,0],[25,2,8,0],[26,2,9,0,"Object"],[26,8,9,0],[26,9,9,0,"defineProperty"],[26,23,9,0],[26,24,9,0,"exports"],[26,31,9,0],[27,4,9,0,"enumerable"],[27,14,9,0],[28,4,9,0,"get"],[28,7,9,0],[28,18,9,0,"get"],[28,19,9,0],[29,6,9,0],[29,13,9,0,"VEC_LEN_SQ"],[29,23,9,0],[30,4,9,0],[31,2,9,0],[32,2,13,0,"Object"],[32,8,13,0],[32,9,13,0,"defineProperty"],[32,23,13,0],[32,24,13,0,"exports"],[32,31,13,0],[33,4,13,0,"enumerable"],[33,14,13,0],[34,4,13,0,"get"],[34,7,13,0],[34,18,13,0,"get"],[34,19,13,0],[35,6,13,0],[35,13,13,0,"TEST_MAX_IF_NOT_NAN"],[35,32,13,0],[36,4,13,0],[37,2,13,0],[38,2,14,0,"exports"],[38,9,14,0],[38,10,14,0,"fireAfterInterval"],[38,27,14,0],[38,30,14,0,"fireAfterInterval"],[38,47,14,0],[39,2,4,7],[39,8,4,13,"isnan"],[39,13,4,18],[39,16,4,21,"v"],[39,17,4,22],[39,21,4,26,"Number"],[39,27,4,32],[39,28,4,33,"isNaN"],[39,33,4,38],[39,34,4,39,"v"],[39,35,4,40],[39,36,4,41],[41,2,6,0],[42,2,7,7],[42,8,7,13,"isValidNumber"],[42,21,7,26],[42,24,7,29,"v"],[42,25,7,30],[42,29,7,34],[42,36,7,41,"v"],[42,37,7,42],[42,42,7,47],[42,50,7,55],[42,54,7,59],[42,55,7,60,"Number"],[42,61,7,66],[42,62,7,67,"isNaN"],[42,67,7,72],[42,68,7,73,"v"],[42,69,7,74],[42,70,7,75],[43,2,8,7],[43,8,8,13,"TEST_MIN_IF_NOT_NAN"],[43,27,8,32],[43,30,8,35,"TEST_MIN_IF_NOT_NAN"],[43,31,8,36,"value"],[43,36,8,41],[43,38,8,43,"limit"],[43,43,8,48],[43,48,8,53],[43,49,8,54,"isnan"],[43,54,8,59],[43,55,8,60,"limit"],[43,60,8,65],[43,61,8,66],[43,66,8,71,"limit"],[43,71,8,76],[43,74,8,79],[43,75,8,80],[43,79,8,84,"value"],[43,84,8,89],[43,88,8,93,"limit"],[43,93,8,98],[43,97,8,102,"limit"],[43,102,8,107],[43,106,8,111],[43,107,8,112],[43,111,8,116,"value"],[43,116,8,121],[43,120,8,125,"limit"],[43,125,8,130],[43,126,8,131],[44,2,9,7],[44,8,9,13,"VEC_LEN_SQ"],[44,18,9,23],[44,21,9,26,"VEC_LEN_SQ"],[44,22,9,27],[45,4,10,2,"x"],[45,5,10,3],[45,8,10,6],[45,9,10,7],[46,4,11,2,"y"],[46,5,11,3],[46,8,11,6],[47,2,12,0],[47,3,12,1],[47,6,12,4],[47,7,12,5],[47,8,12,6],[47,13,12,11,"x"],[47,14,12,12],[47,17,12,15,"x"],[47,18,12,16],[47,21,12,19,"y"],[47,22,12,20],[47,25,12,23,"y"],[47,26,12,24],[48,2,13,7],[48,8,13,13,"TEST_MAX_IF_NOT_NAN"],[48,27,13,32],[48,30,13,35,"TEST_MAX_IF_NOT_NAN"],[48,31,13,36,"value"],[48,36,13,41],[48,38,13,43,"max"],[48,41,13,46],[48,46,13,51],[48,47,13,52,"isnan"],[48,52,13,57],[48,53,13,58,"max"],[48,56,13,61],[48,57,13,62],[48,62,13,67,"max"],[48,65,13,70],[48,68,13,73],[48,69,13,74],[48,73,13,78,"value"],[48,78,13,83],[48,81,13,86,"max"],[48,84,13,89],[48,88,13,93,"max"],[48,91,13,96],[48,95,13,100],[48,96,13,101],[48,100,13,105,"value"],[48,105,13,110],[48,108,13,113,"max"],[48,111,13,116],[48,112,13,117],[49,2,14,7],[49,11,14,16,"fireAfterInterval"],[49,28,14,33,"fireAfterInterval"],[49,29,14,34,"method"],[49,35,14,40],[49,37,14,42,"interval"],[49,45,14,50],[49,47,14,52],[50,4,15,2],[50,8,15,6],[50,9,15,7,"interval"],[50,17,15,15],[50,19,15,17],[51,6,16,4,"method"],[51,12,16,10],[51,13,16,11],[51,14,16,12],[52,6,17,4],[52,13,17,11],[52,17,17,15],[53,4,18,2],[54,4,19,2],[54,11,19,9,"setTimeout"],[54,21,19,19],[54,22,19,20],[54,28,19,26,"method"],[54,34,19,32],[54,35,19,33],[54,36,19,34],[54,38,19,36,"interval"],[54,46,19,44],[54,47,19,45],[55,2,20,0],[56,0,20,1],[56,3]],"functionMap":{"names":["<global>","isnan","isValidNumber","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","TEST_MAX_IF_NOT_NAN","fireAfterInterval","setTimeout$argument_0"],"mappings":"AAA;qBCG,oBD;6BEG,8CF;mCGC,gGH;0BIC;wBJG;mCKC,kFL;OMC;oBCK,cD;CNC"},"hasCjsExports":false},"type":"js/module"}]}