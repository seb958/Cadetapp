{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"isnan\", {\n    enumerable: true,\n    get: function () {\n      return isnan;\n    }\n  });\n  Object.defineProperty(exports, \"isValidNumber\", {\n    enumerable: true,\n    get: function () {\n      return isValidNumber;\n    }\n  });\n  Object.defineProperty(exports, \"TEST_MIN_IF_NOT_NAN\", {\n    enumerable: true,\n    get: function () {\n      return TEST_MIN_IF_NOT_NAN;\n    }\n  });\n  Object.defineProperty(exports, \"VEC_LEN_SQ\", {\n    enumerable: true,\n    get: function () {\n      return VEC_LEN_SQ;\n    }\n  });\n  Object.defineProperty(exports, \"TEST_MAX_IF_NOT_NAN\", {\n    enumerable: true,\n    get: function () {\n      return TEST_MAX_IF_NOT_NAN;\n    }\n  });\n  exports.fireAfterInterval = fireAfterInterval;\n  // TODO(TS) remove if not necessary after rewrite\n  const isnan = v => Number.isNaN(v); // TODO(TS) remove if not necessary after rewrite\n\n  const isValidNumber = v => typeof v === 'number' && !Number.isNaN(v);\n  const TEST_MIN_IF_NOT_NAN = (value, limit) => !isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\n  const VEC_LEN_SQ = ({\n    x = 0,\n    y = 0\n  } = {}) => x * x + y * y;\n  const TEST_MAX_IF_NOT_NAN = (value, max) => !isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\n  function fireAfterInterval(method, interval) {\n    if (!interval) {\n      method();\n      return null;\n    }\n    return setTimeout(() => method(), interval);\n  }\n});","lineCount":55,"map":[[7,2,2,0,"Object"],[7,8,2,0],[7,9,2,0,"defineProperty"],[7,23,2,0],[7,24,2,0,"exports"],[7,31,2,0],[8,4,2,0,"enumerable"],[8,14,2,0],[9,4,2,0,"get"],[9,7,2,0],[9,18,2,0,"get"],[9,19,2,0],[10,6,2,0],[10,13,2,0,"isnan"],[10,18,2,0],[11,4,2,0],[12,2,2,0],[13,2,4,0,"Object"],[13,8,4,0],[13,9,4,0,"defineProperty"],[13,23,4,0],[13,24,4,0,"exports"],[13,31,4,0],[14,4,4,0,"enumerable"],[14,14,4,0],[15,4,4,0,"get"],[15,7,4,0],[15,18,4,0,"get"],[15,19,4,0],[16,6,4,0],[16,13,4,0,"isValidNumber"],[16,26,4,0],[17,4,4,0],[18,2,4,0],[19,2,5,0,"Object"],[19,8,5,0],[19,9,5,0,"defineProperty"],[19,23,5,0],[19,24,5,0,"exports"],[19,31,5,0],[20,4,5,0,"enumerable"],[20,14,5,0],[21,4,5,0,"get"],[21,7,5,0],[21,18,5,0,"get"],[21,19,5,0],[22,6,5,0],[22,13,5,0,"TEST_MIN_IF_NOT_NAN"],[22,32,5,0],[23,4,5,0],[24,2,5,0],[25,2,6,0,"Object"],[25,8,6,0],[25,9,6,0,"defineProperty"],[25,23,6,0],[25,24,6,0,"exports"],[25,31,6,0],[26,4,6,0,"enumerable"],[26,14,6,0],[27,4,6,0,"get"],[27,7,6,0],[27,18,6,0,"get"],[27,19,6,0],[28,6,6,0],[28,13,6,0,"VEC_LEN_SQ"],[28,23,6,0],[29,4,6,0],[30,2,6,0],[31,2,10,0,"Object"],[31,8,10,0],[31,9,10,0,"defineProperty"],[31,23,10,0],[31,24,10,0,"exports"],[31,31,10,0],[32,4,10,0,"enumerable"],[32,14,10,0],[33,4,10,0,"get"],[33,7,10,0],[33,18,10,0,"get"],[33,19,10,0],[34,6,10,0],[34,13,10,0,"TEST_MAX_IF_NOT_NAN"],[34,32,10,0],[35,4,10,0],[36,2,10,0],[37,2,11,0,"exports"],[37,9,11,0],[37,10,11,0,"fireAfterInterval"],[37,27,11,0],[37,30,11,0,"fireAfterInterval"],[37,47,11,0],[38,2,1,0],[39,2,2,7],[39,8,2,13,"isnan"],[39,13,2,18],[39,16,2,21,"v"],[39,17,2,22],[39,21,2,26,"Number"],[39,27,2,32],[39,28,2,33,"isNaN"],[39,33,2,38],[39,34,2,39,"v"],[39,35,2,40],[39,36,2,41],[39,37,2,42],[39,38,2,43],[41,2,4,7],[41,8,4,13,"isValidNumber"],[41,21,4,26],[41,24,4,29,"v"],[41,25,4,30],[41,29,4,34],[41,36,4,41,"v"],[41,37,4,42],[41,42,4,47],[41,50,4,55],[41,54,4,59],[41,55,4,60,"Number"],[41,61,4,66],[41,62,4,67,"isNaN"],[41,67,4,72],[41,68,4,73,"v"],[41,69,4,74],[41,70,4,75],[42,2,5,7],[42,8,5,13,"TEST_MIN_IF_NOT_NAN"],[42,27,5,32],[42,30,5,35,"TEST_MIN_IF_NOT_NAN"],[42,31,5,36,"value"],[42,36,5,41],[42,38,5,43,"limit"],[42,43,5,48],[42,48,5,53],[42,49,5,54,"isnan"],[42,54,5,59],[42,55,5,60,"limit"],[42,60,5,65],[42,61,5,66],[42,66,5,71,"limit"],[42,71,5,76],[42,74,5,79],[42,75,5,80],[42,79,5,84,"value"],[42,84,5,89],[42,88,5,93,"limit"],[42,93,5,98],[42,97,5,102,"limit"],[42,102,5,107],[42,106,5,111],[42,107,5,112],[42,111,5,116,"value"],[42,116,5,121],[42,120,5,125,"limit"],[42,125,5,130],[42,126,5,131],[43,2,6,7],[43,8,6,13,"VEC_LEN_SQ"],[43,18,6,23],[43,21,6,26,"VEC_LEN_SQ"],[43,22,6,27],[44,4,7,2,"x"],[44,5,7,3],[44,8,7,6],[44,9,7,7],[45,4,8,2,"y"],[45,5,8,3],[45,8,8,6],[46,2,9,0],[46,3,9,1],[46,6,9,4],[46,7,9,5],[46,8,9,6],[46,13,9,11,"x"],[46,14,9,12],[46,17,9,15,"x"],[46,18,9,16],[46,21,9,19,"y"],[46,22,9,20],[46,25,9,23,"y"],[46,26,9,24],[47,2,10,7],[47,8,10,13,"TEST_MAX_IF_NOT_NAN"],[47,27,10,32],[47,30,10,35,"TEST_MAX_IF_NOT_NAN"],[47,31,10,36,"value"],[47,36,10,41],[47,38,10,43,"max"],[47,41,10,46],[47,46,10,51],[47,47,10,52,"isnan"],[47,52,10,57],[47,53,10,58,"max"],[47,56,10,61],[47,57,10,62],[47,62,10,67,"max"],[47,65,10,70],[47,68,10,73],[47,69,10,74],[47,73,10,78,"value"],[47,78,10,83],[47,81,10,86,"max"],[47,84,10,89],[47,88,10,93,"max"],[47,91,10,96],[47,95,10,100],[47,96,10,101],[47,100,10,105,"value"],[47,105,10,110],[47,108,10,113,"max"],[47,111,10,116],[47,112,10,117],[48,2,11,7],[48,11,11,16,"fireAfterInterval"],[48,28,11,33,"fireAfterInterval"],[48,29,11,34,"method"],[48,35,11,40],[48,37,11,42,"interval"],[48,45,11,50],[48,47,11,52],[49,4,12,2],[49,8,12,6],[49,9,12,7,"interval"],[49,17,12,15],[49,19,12,17],[50,6,13,4,"method"],[50,12,13,10],[50,13,13,11],[50,14,13,12],[51,6,14,4],[51,13,14,11],[51,17,14,15],[52,4,15,2],[53,4,17,2],[53,11,17,9,"setTimeout"],[53,21,17,19],[53,22,17,20],[53,28,17,26,"method"],[53,34,17,32],[53,35,17,33],[53,36,17,34],[53,38,17,36,"interval"],[53,46,17,44],[53,47,17,45],[54,2,18,0],[55,0,18,1],[55,3]],"functionMap":{"names":["<global>","isnan","isValidNumber","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","TEST_MAX_IF_NOT_NAN","fireAfterInterval","setTimeout$argument_0"],"mappings":"AAA;qBCC,oBD;6BEE,8CF;mCGC,gGH;0BIC;wBJG;mCKC,kFL;OMC;oBCM,cD;CNC"},"hasCjsExports":false},"type":"js/module"}]}