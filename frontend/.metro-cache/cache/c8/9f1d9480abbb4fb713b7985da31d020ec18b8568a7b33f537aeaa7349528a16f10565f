{"dependencies":[{"name":"./DiscreteGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":62,"index":62}}],"key":"dpOMqAtzFjjUQychI3TYNsYmXQE=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":114},"end":{"line":3,"column":45,"index":159}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"],"imports":1}},{"name":"./PressGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":160},"end":{"line":4,"column":56,"index":216}}],"key":"K7JCCzt/0tQ/4D2w8oVjath5+4I=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":217},"end":{"line":5,"column":58,"index":275}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _DiscreteGestureHandler = require(_dependencyMap[0], \"./DiscreteGestureHandler\");\n  var DiscreteGestureHandler = _interopDefault(_DiscreteGestureHandler);\n  var _NodeManager = require(_dependencyMap[1], \"./NodeManager\");\n  var NodeManager = _interopNamespace(_NodeManager);\n  var _PressGestureHandler = require(_dependencyMap[2], \"./PressGestureHandler\");\n  var PressGestureHandler = _interopDefault(_PressGestureHandler);\n  var _utils = require(_dependencyMap[3], \"./utils\");\n  class NativeViewGestureHandler extends PressGestureHandler.default {\n    get isNative() {\n      return true;\n    }\n    onRawEvent(ev) {\n      super.onRawEvent(ev);\n      if (!ev.isFinal) {\n        // if (this.ref instanceof ScrollView) {\n        if ((0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          // @ts-ignore FIXME(TS) config type\n          if (this.config.disallowInterruption) {\n            const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n              const {\n                handlerTag,\n                view,\n                isGestureRunning\n              } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler.default &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            });\n            // Cancel all of the gestures that passed the filter\n            for (const gesture of gestures) {\n              // TODO: Bacon: Send some cached event.\n              gesture.forceInvalidate(ev);\n            }\n          }\n        }\n      }\n    }\n  }\n  var _default = NativeViewGestureHandler;\n});","lineCount":84,"map":[[27,2,47,0,"Object"],[27,8,47,0],[27,9,47,0,"defineProperty"],[27,23,47,0],[27,24,47,0,"exports"],[27,31,47,0],[28,4,47,0,"enumerable"],[28,14,47,0],[29,4,47,0,"get"],[29,7,47,0],[29,18,47,0,"get"],[29,19,47,0],[30,6,47,0],[30,13,47,0,"_default"],[30,21,47,0],[31,4,47,0],[32,2,47,0],[33,2,1,0],[33,6,1,0,"_DiscreteGestureHandler"],[33,29,1,0],[33,32,1,0,"require"],[33,39,1,0],[33,40,1,0,"_dependencyMap"],[33,54,1,0],[34,2,1,0],[34,6,1,0,"DiscreteGestureHandler"],[34,28,1,0],[34,31,1,0,"_interopDefault"],[34,46,1,0],[34,47,1,0,"_DiscreteGestureHandler"],[34,70,1,0],[35,2,3,0],[35,6,3,0,"_NodeManager"],[35,18,3,0],[35,21,3,0,"require"],[35,28,3,0],[35,29,3,0,"_dependencyMap"],[35,43,3,0],[36,2,3,0],[36,6,3,0,"NodeManager"],[36,17,3,0],[36,20,3,0,"_interopNamespace"],[36,37,3,0],[36,38,3,0,"_NodeManager"],[36,50,3,0],[37,2,4,0],[37,6,4,0,"_PressGestureHandler"],[37,26,4,0],[37,29,4,0,"require"],[37,36,4,0],[37,37,4,0,"_dependencyMap"],[37,51,4,0],[38,2,4,0],[38,6,4,0,"PressGestureHandler"],[38,25,4,0],[38,28,4,0,"_interopDefault"],[38,43,4,0],[38,44,4,0,"_PressGestureHandler"],[38,64,4,0],[39,2,5,0],[39,6,5,0,"_utils"],[39,12,5,0],[39,15,5,0,"require"],[39,22,5,0],[39,23,5,0,"_dependencyMap"],[39,37,5,0],[40,2,7,0],[40,8,7,6,"NativeViewGestureHandler"],[40,32,7,30],[40,41,7,39,"PressGestureHandler"],[40,60,7,58],[40,61,7,58,"default"],[40,68,7,58],[40,69,7,59],[41,4,8,2],[41,8,8,6,"isNative"],[41,16,8,14,"isNative"],[41,17,8,14],[41,19,8,17],[42,6,9,4],[42,13,9,11],[42,17,9,15],[43,4,10,2],[44,4,12,2,"onRawEvent"],[44,14,12,12,"onRawEvent"],[44,15,12,13,"ev"],[44,17,12,31],[44,19,12,33],[45,6,13,4],[45,11,13,9],[45,12,13,10,"onRawEvent"],[45,22,13,20],[45,23,13,21,"ev"],[45,25,13,23],[45,26,13,24],[46,6,14,4],[46,10,14,8],[46,11,14,9,"ev"],[46,13,14,11],[46,14,14,12,"isFinal"],[46,21,14,19],[46,23,14,21],[47,8,15,6],[48,8,16,6],[48,12,16,10],[48,16,16,10,"TEST_MIN_IF_NOT_NAN"],[48,22,16,29],[48,23,16,29,"TEST_MIN_IF_NOT_NAN"],[48,42,16,29],[48,44,16,30],[48,48,16,30,"VEC_LEN_SQ"],[48,54,16,40],[48,55,16,40,"VEC_LEN_SQ"],[48,65,16,40],[48,67,16,41],[49,10,16,43,"x"],[49,11,16,44],[49,13,16,46,"ev"],[49,15,16,48],[49,16,16,49,"deltaX"],[49,22,16,55],[50,10,16,57,"y"],[50,11,16,58],[50,13,16,60,"ev"],[50,15,16,62],[50,16,16,63,"deltaY"],[51,8,16,70],[51,9,16,71],[51,10,16,72],[51,12,16,74],[51,14,16,76],[51,15,16,77],[51,17,16,79],[52,10,17,8],[53,10,18,8],[53,14,18,12],[53,18,18,16],[53,19,18,17,"config"],[53,25,18,23],[53,26,18,24,"disallowInterruption"],[53,46,18,44],[53,48,18,46],[54,12,19,10],[54,18,19,16,"gestures"],[54,26,19,24],[54,29,19,27,"Object"],[54,35,19,33],[54,36,19,34,"values"],[54,42,19,40],[54,43,19,41,"NodeManager"],[54,54,19,52],[54,55,19,53,"getNodes"],[54,63,19,61],[54,64,19,62],[54,65,19,63],[54,66,19,64],[54,67,19,65,"filter"],[54,73,19,71],[54,74,20,13,"gesture"],[54,81,20,20],[54,85,20,25],[55,14,21,14],[55,20,21,20],[56,16,21,22,"handlerTag"],[56,26,21,32],[57,16,21,34,"view"],[57,20,21,38],[58,16,21,40,"isGestureRunning"],[59,14,21,57],[59,15,21,58],[59,18,21,61,"gesture"],[59,25,21,68],[60,14,22,14],[61,16,23,16],[62,16,24,16,"handlerTag"],[62,26,24,26],[62,31,24,31],[62,35,24,35],[62,36,24,36,"handlerTag"],[62,46,24,46],[63,16,25,16],[64,16,26,16,"isGestureRunning"],[64,32,26,32],[65,16,27,16],[66,16,28,16,"gesture"],[66,23,28,23],[66,35,28,35,"DiscreteGestureHandler"],[66,57,28,57],[66,58,28,57,"default"],[66,65,28,57],[67,16,29,16],[68,16,30,16,"view"],[68,20,30,20],[69,16,31,16],[70,16,32,16],[70,20,32,20],[70,21,32,21,"view"],[70,25,32,25],[70,26,32,26,"contains"],[70,34,32,34],[70,35,32,35,"view"],[70,39,32,39],[71,14,32,40],[72,12,34,12],[72,13,35,10],[72,14,35,11],[73,12,36,10],[74,12,37,10],[74,17,37,15],[74,23,37,21,"gesture"],[74,30,37,28],[74,34,37,32,"gestures"],[74,42,37,40],[74,44,37,42],[75,14,38,12],[76,14,39,12,"gesture"],[76,21,39,19],[76,22,39,20,"forceInvalidate"],[76,37,39,35],[76,38,39,36,"ev"],[76,40,39,38],[76,41,39,39],[77,12,40,10],[78,10,41,8],[79,8,42,6],[80,6,43,4],[81,4,44,2],[82,2,45,0],[83,2,47,0],[83,6,47,0,"_default"],[83,14,47,0],[83,17,47,15,"NativeViewGestureHandler"],[83,41,47,39],[84,0,47,40],[84,3]],"functionMap":{"names":["<global>","NativeViewGestureHandler","get__isNative","onRawEvent","Object.values.filter$argument_0"],"mappings":"AAA;ACM;ECC;GDE;EEE;YCQ;aDc;GFU;CDC"},"hasCjsExports":false},"type":"js/module"}]}