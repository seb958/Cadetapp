{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  // Implementation taken from Flutter's LeastSquareSolver\n  // https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n\n  class Vector {\n    constructor(length) {\n      this.offset = 0;\n      this.length = length;\n      this.elements = new Array(length);\n    }\n    static fromVOL(values, offset, length) {\n      const result = new Vector(0);\n      result.offset = offset;\n      result.length = length;\n      result.elements = values;\n      return result;\n    }\n    get(index) {\n      return this.elements[this.offset + index];\n    }\n    set(index, value) {\n      this.elements[this.offset + index] = value;\n    }\n    dot(other) {\n      let result = 0;\n      for (let i = 0; i < this.length; i++) {\n        result += this.get(i) * other.get(i);\n      }\n      return result;\n    }\n    norm() {\n      return Math.sqrt(this.dot(this));\n    }\n  }\n  class Matrix {\n    constructor(rows, columns) {\n      this.columns = columns;\n      this.elements = new Array(rows * columns);\n    }\n    get(row, column) {\n      return this.elements[row * this.columns + column];\n    }\n    set(row, column, value) {\n      this.elements[row * this.columns + column] = value;\n    }\n    getRow(row) {\n      return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n    }\n  }\n\n  // An nth degree polynomial fit to a dataset.\n  class PolynomialFit {\n    // The polynomial coefficients of the fit.\n    //\n    // For each `i`, the element `coefficients[i]` is the coefficient of\n    // the `i`-th power of the variable.\n\n    // Creates a polynomial fit of the given degree.\n    //\n    // There are n + 1 coefficients in a fit of degree n.\n    constructor(degree) {\n      this.coefficients = new Array(degree + 1);\n    }\n  }\n  const precisionErrorTolerance = 1e-10;\n\n  // Uses the least-squares algorithm to fit a polynomial to a set of data.\n  class LeastSquareSolver {\n    // The x-coordinates of each data point.\n\n    // The y-coordinates of each data point.\n\n    // The weight to use for each data point.\n\n    // Creates a least-squares solver.\n    //\n    // The [x], [y], and [w] arguments must not be null.\n    constructor(x, y, w) {\n      this.x = x;\n      this.y = y;\n      this.w = w;\n    }\n\n    // Fits a polynomial of the given degree to the data points.\n    //\n    // When there is not enough data to fit a curve null is returned.\n    solve(degree) {\n      if (degree > this.x.length) {\n        // Not enough data to fit a curve.\n        return null;\n      }\n      const result = new PolynomialFit(degree);\n\n      // Shorthands for the purpose of notation equivalence to original C++ code.\n      const m = this.x.length;\n      const n = degree + 1;\n\n      // Expand the X vector to a matrix A, pre-multiplied by the weights.\n      const a = new Matrix(n, m);\n      for (let h = 0; h < m; h++) {\n        a.set(0, h, this.w[h]);\n        for (let i = 1; i < n; i++) {\n          a.set(i, h, a.get(i - 1, h) * this.x[h]);\n        }\n      }\n\n      // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n      // Orthonormal basis, column-major ordVectorer.\n      const q = new Matrix(n, m);\n      // Upper triangular matrix, row-major order.\n      const r = new Matrix(n, m);\n      for (let j = 0; j < n; j += 1) {\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, a.get(j, h));\n        }\n        for (let i = 0; i < j; i += 1) {\n          const dot = q.getRow(j).dot(q.getRow(i));\n          for (let h = 0; h < m; h += 1) {\n            q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n          }\n        }\n        const norm = q.getRow(j).norm();\n        if (norm < precisionErrorTolerance) {\n          // Vectors are linearly dependent or zero so no solution.\n          return null;\n        }\n        const inverseNorm = 1.0 / norm;\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) * inverseNorm);\n        }\n        for (let i = 0; i < n; i += 1) {\n          r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n        }\n      }\n\n      // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n      // We just work from bottom-right to top-left calculating B's coefficients.\n      const wy = new Vector(m);\n      for (let h = 0; h < m; h += 1) {\n        wy.set(h, this.y[h] * this.w[h]);\n      }\n      for (let i = n - 1; i >= 0; i -= 1) {\n        result.coefficients[i] = q.getRow(i).dot(wy);\n        for (let j = n - 1; j > i; j -= 1) {\n          result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n        }\n        result.coefficients[i] /= r.get(i, i);\n      }\n      return result;\n    }\n  }\n  exports.default = LeastSquareSolver;\n});","lineCount":160,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,15],[7,20,6,18],[7,25,6,23],[7,26,6,24],[8,2,7,0],[9,2,8,0],[11,2,10,0],[11,8,10,6,"Vector"],[11,14,10,12],[11,15,10,13],[12,4,11,2,"constructor"],[12,15,11,13,"constructor"],[12,16,11,14,"length"],[12,22,11,20],[12,24,11,22],[13,6,12,4],[13,10,12,8],[13,11,12,9,"offset"],[13,17,12,15],[13,20,12,18],[13,21,12,19],[14,6,13,4],[14,10,13,8],[14,11,13,9,"length"],[14,17,13,15],[14,20,13,18,"length"],[14,26,13,24],[15,6,14,4],[15,10,14,8],[15,11,14,9,"elements"],[15,19,14,17],[15,22,14,20],[15,26,14,24,"Array"],[15,31,14,29],[15,32,14,30,"length"],[15,38,14,36],[15,39,14,37],[16,4,15,2],[17,4,16,2],[17,11,16,9,"fromVOL"],[17,18,16,16,"fromVOL"],[17,19,16,17,"values"],[17,25,16,23],[17,27,16,25,"offset"],[17,33,16,31],[17,35,16,33,"length"],[17,41,16,39],[17,43,16,41],[18,6,17,4],[18,12,17,10,"result"],[18,18,17,16],[18,21,17,19],[18,25,17,23,"Vector"],[18,31,17,29],[18,32,17,30],[18,33,17,31],[18,34,17,32],[19,6,18,4,"result"],[19,12,18,10],[19,13,18,11,"offset"],[19,19,18,17],[19,22,18,20,"offset"],[19,28,18,26],[20,6,19,4,"result"],[20,12,19,10],[20,13,19,11,"length"],[20,19,19,17],[20,22,19,20,"length"],[20,28,19,26],[21,6,20,4,"result"],[21,12,20,10],[21,13,20,11,"elements"],[21,21,20,19],[21,24,20,22,"values"],[21,30,20,28],[22,6,21,4],[22,13,21,11,"result"],[22,19,21,17],[23,4,22,2],[24,4,23,2,"get"],[24,7,23,5,"get"],[24,8,23,6,"index"],[24,13,23,11],[24,15,23,13],[25,6,24,4],[25,13,24,11],[25,17,24,15],[25,18,24,16,"elements"],[25,26,24,24],[25,27,24,25],[25,31,24,29],[25,32,24,30,"offset"],[25,38,24,36],[25,41,24,39,"index"],[25,46,24,44],[25,47,24,45],[26,4,25,2],[27,4,26,2,"set"],[27,7,26,5,"set"],[27,8,26,6,"index"],[27,13,26,11],[27,15,26,13,"value"],[27,20,26,18],[27,22,26,20],[28,6,27,4],[28,10,27,8],[28,11,27,9,"elements"],[28,19,27,17],[28,20,27,18],[28,24,27,22],[28,25,27,23,"offset"],[28,31,27,29],[28,34,27,32,"index"],[28,39,27,37],[28,40,27,38],[28,43,27,41,"value"],[28,48,27,46],[29,4,28,2],[30,4,29,2,"dot"],[30,7,29,5,"dot"],[30,8,29,6,"other"],[30,13,29,11],[30,15,29,13],[31,6,30,4],[31,10,30,8,"result"],[31,16,30,14],[31,19,30,17],[31,20,30,18],[32,6,31,4],[32,11,31,9],[32,15,31,13,"i"],[32,16,31,14],[32,19,31,17],[32,20,31,18],[32,22,31,20,"i"],[32,23,31,21],[32,26,31,24],[32,30,31,28],[32,31,31,29,"length"],[32,37,31,35],[32,39,31,37,"i"],[32,40,31,38],[32,42,31,40],[32,44,31,42],[33,8,32,6,"result"],[33,14,32,12],[33,18,32,16],[33,22,32,20],[33,23,32,21,"get"],[33,26,32,24],[33,27,32,25,"i"],[33,28,32,26],[33,29,32,27],[33,32,32,30,"other"],[33,37,32,35],[33,38,32,36,"get"],[33,41,32,39],[33,42,32,40,"i"],[33,43,32,41],[33,44,32,42],[34,6,33,4],[35,6,34,4],[35,13,34,11,"result"],[35,19,34,17],[36,4,35,2],[37,4,36,2,"norm"],[37,8,36,6,"norm"],[37,9,36,6],[37,11,36,9],[38,6,37,4],[38,13,37,11,"Math"],[38,17,37,15],[38,18,37,16,"sqrt"],[38,22,37,20],[38,23,37,21],[38,27,37,25],[38,28,37,26,"dot"],[38,31,37,29],[38,32,37,30],[38,36,37,34],[38,37,37,35],[38,38,37,36],[39,4,38,2],[40,2,39,0],[41,2,40,0],[41,8,40,6,"Matrix"],[41,14,40,12],[41,15,40,13],[42,4,41,2,"constructor"],[42,15,41,13,"constructor"],[42,16,41,14,"rows"],[42,20,41,18],[42,22,41,20,"columns"],[42,29,41,27],[42,31,41,29],[43,6,42,4],[43,10,42,8],[43,11,42,9,"columns"],[43,18,42,16],[43,21,42,19,"columns"],[43,28,42,26],[44,6,43,4],[44,10,43,8],[44,11,43,9,"elements"],[44,19,43,17],[44,22,43,20],[44,26,43,24,"Array"],[44,31,43,29],[44,32,43,30,"rows"],[44,36,43,34],[44,39,43,37,"columns"],[44,46,43,44],[44,47,43,45],[45,4,44,2],[46,4,45,2,"get"],[46,7,45,5,"get"],[46,8,45,6,"row"],[46,11,45,9],[46,13,45,11,"column"],[46,19,45,17],[46,21,45,19],[47,6,46,4],[47,13,46,11],[47,17,46,15],[47,18,46,16,"elements"],[47,26,46,24],[47,27,46,25,"row"],[47,30,46,28],[47,33,46,31],[47,37,46,35],[47,38,46,36,"columns"],[47,45,46,43],[47,48,46,46,"column"],[47,54,46,52],[47,55,46,53],[48,4,47,2],[49,4,48,2,"set"],[49,7,48,5,"set"],[49,8,48,6,"row"],[49,11,48,9],[49,13,48,11,"column"],[49,19,48,17],[49,21,48,19,"value"],[49,26,48,24],[49,28,48,26],[50,6,49,4],[50,10,49,8],[50,11,49,9,"elements"],[50,19,49,17],[50,20,49,18,"row"],[50,23,49,21],[50,26,49,24],[50,30,49,28],[50,31,49,29,"columns"],[50,38,49,36],[50,41,49,39,"column"],[50,47,49,45],[50,48,49,46],[50,51,49,49,"value"],[50,56,49,54],[51,4,50,2],[52,4,51,2,"getRow"],[52,10,51,8,"getRow"],[52,11,51,9,"row"],[52,14,51,12],[52,16,51,14],[53,6,52,4],[53,13,52,11,"Vector"],[53,19,52,17],[53,20,52,18,"fromVOL"],[53,27,52,25],[53,28,52,26],[53,32,52,30],[53,33,52,31,"elements"],[53,41,52,39],[53,43,52,41,"row"],[53,46,52,44],[53,49,52,47],[53,53,52,51],[53,54,52,52,"columns"],[53,61,52,59],[53,63,52,61],[53,67,52,65],[53,68,52,66,"columns"],[53,75,52,73],[53,76,52,74],[54,4,53,2],[55,2,54,0],[57,2,56,0],[58,2,57,0],[58,8,57,6,"PolynomialFit"],[58,21,57,19],[58,22,57,20],[59,4,58,2],[60,4,59,2],[61,4,60,2],[62,4,61,2],[64,4,63,2],[65,4,64,2],[66,4,65,2],[67,4,66,2,"constructor"],[67,15,66,13,"constructor"],[67,16,66,14,"degree"],[67,22,66,20],[67,24,66,22],[68,6,67,4],[68,10,67,8],[68,11,67,9,"coefficients"],[68,23,67,21],[68,26,67,24],[68,30,67,28,"Array"],[68,35,67,33],[68,36,67,34,"degree"],[68,42,67,40],[68,45,67,43],[68,46,67,44],[68,47,67,45],[69,4,68,2],[70,2,69,0],[71,2,70,0],[71,8,70,6,"precisionErrorTolerance"],[71,31,70,29],[71,34,70,32],[71,39,70,37],[73,2,72,0],[74,2,73,0],[74,8,73,6,"LeastSquareSolver"],[74,25,73,23],[74,26,73,24],[75,4,74,2],[77,4,76,2],[79,4,78,2],[81,4,80,2],[82,4,81,2],[83,4,82,2],[84,4,83,2,"constructor"],[84,15,83,13,"constructor"],[84,16,83,14,"x"],[84,17,83,15],[84,19,83,17,"y"],[84,20,83,18],[84,22,83,20,"w"],[84,23,83,21],[84,25,83,23],[85,6,84,4],[85,10,84,8],[85,11,84,9,"x"],[85,12,84,10],[85,15,84,13,"x"],[85,16,84,14],[86,6,85,4],[86,10,85,8],[86,11,85,9,"y"],[86,12,85,10],[86,15,85,13,"y"],[86,16,85,14],[87,6,86,4],[87,10,86,8],[87,11,86,9,"w"],[87,12,86,10],[87,15,86,13,"w"],[87,16,86,14],[88,4,87,2],[90,4,89,2],[91,4,90,2],[92,4,91,2],[93,4,92,2,"solve"],[93,9,92,7,"solve"],[93,10,92,8,"degree"],[93,16,92,14],[93,18,92,16],[94,6,93,4],[94,10,93,8,"degree"],[94,16,93,14],[94,19,93,17],[94,23,93,21],[94,24,93,22,"x"],[94,25,93,23],[94,26,93,24,"length"],[94,32,93,30],[94,34,93,32],[95,8,94,6],[96,8,95,6],[96,15,95,13],[96,19,95,17],[97,6,96,4],[98,6,97,4],[98,12,97,10,"result"],[98,18,97,16],[98,21,97,19],[98,25,97,23,"PolynomialFit"],[98,38,97,36],[98,39,97,37,"degree"],[98,45,97,43],[98,46,97,44],[100,6,99,4],[101,6,100,4],[101,12,100,10,"m"],[101,13,100,11],[101,16,100,14],[101,20,100,18],[101,21,100,19,"x"],[101,22,100,20],[101,23,100,21,"length"],[101,29,100,27],[102,6,101,4],[102,12,101,10,"n"],[102,13,101,11],[102,16,101,14,"degree"],[102,22,101,20],[102,25,101,23],[102,26,101,24],[104,6,103,4],[105,6,104,4],[105,12,104,10,"a"],[105,13,104,11],[105,16,104,14],[105,20,104,18,"Matrix"],[105,26,104,24],[105,27,104,25,"n"],[105,28,104,26],[105,30,104,28,"m"],[105,31,104,29],[105,32,104,30],[106,6,105,4],[106,11,105,9],[106,15,105,13,"h"],[106,16,105,14],[106,19,105,17],[106,20,105,18],[106,22,105,20,"h"],[106,23,105,21],[106,26,105,24,"m"],[106,27,105,25],[106,29,105,27,"h"],[106,30,105,28],[106,32,105,30],[106,34,105,32],[107,8,106,6,"a"],[107,9,106,7],[107,10,106,8,"set"],[107,13,106,11],[107,14,106,12],[107,15,106,13],[107,17,106,15,"h"],[107,18,106,16],[107,20,106,18],[107,24,106,22],[107,25,106,23,"w"],[107,26,106,24],[107,27,106,25,"h"],[107,28,106,26],[107,29,106,27],[107,30,106,28],[108,8,107,6],[108,13,107,11],[108,17,107,15,"i"],[108,18,107,16],[108,21,107,19],[108,22,107,20],[108,24,107,22,"i"],[108,25,107,23],[108,28,107,26,"n"],[108,29,107,27],[108,31,107,29,"i"],[108,32,107,30],[108,34,107,32],[108,36,107,34],[109,10,108,8,"a"],[109,11,108,9],[109,12,108,10,"set"],[109,15,108,13],[109,16,108,14,"i"],[109,17,108,15],[109,19,108,17,"h"],[109,20,108,18],[109,22,108,20,"a"],[109,23,108,21],[109,24,108,22,"get"],[109,27,108,25],[109,28,108,26,"i"],[109,29,108,27],[109,32,108,30],[109,33,108,31],[109,35,108,33,"h"],[109,36,108,34],[109,37,108,35],[109,40,108,38],[109,44,108,42],[109,45,108,43,"x"],[109,46,108,44],[109,47,108,45,"h"],[109,48,108,46],[109,49,108,47],[109,50,108,48],[110,8,109,6],[111,6,110,4],[113,6,112,4],[115,6,114,4],[116,6,115,4],[116,12,115,10,"q"],[116,13,115,11],[116,16,115,14],[116,20,115,18,"Matrix"],[116,26,115,24],[116,27,115,25,"n"],[116,28,115,26],[116,30,115,28,"m"],[116,31,115,29],[116,32,115,30],[117,6,116,4],[118,6,117,4],[118,12,117,10,"r"],[118,13,117,11],[118,16,117,14],[118,20,117,18,"Matrix"],[118,26,117,24],[118,27,117,25,"n"],[118,28,117,26],[118,30,117,28,"m"],[118,31,117,29],[118,32,117,30],[119,6,118,4],[119,11,118,9],[119,15,118,13,"j"],[119,16,118,14],[119,19,118,17],[119,20,118,18],[119,22,118,20,"j"],[119,23,118,21],[119,26,118,24,"n"],[119,27,118,25],[119,29,118,27,"j"],[119,30,118,28],[119,34,118,32],[119,35,118,33],[119,37,118,35],[120,8,119,6],[120,13,119,11],[120,17,119,15,"h"],[120,18,119,16],[120,21,119,19],[120,22,119,20],[120,24,119,22,"h"],[120,25,119,23],[120,28,119,26,"m"],[120,29,119,27],[120,31,119,29,"h"],[120,32,119,30],[120,36,119,34],[120,37,119,35],[120,39,119,37],[121,10,120,8,"q"],[121,11,120,9],[121,12,120,10,"set"],[121,15,120,13],[121,16,120,14,"j"],[121,17,120,15],[121,19,120,17,"h"],[121,20,120,18],[121,22,120,20,"a"],[121,23,120,21],[121,24,120,22,"get"],[121,27,120,25],[121,28,120,26,"j"],[121,29,120,27],[121,31,120,29,"h"],[121,32,120,30],[121,33,120,31],[121,34,120,32],[122,8,121,6],[123,8,122,6],[123,13,122,11],[123,17,122,15,"i"],[123,18,122,16],[123,21,122,19],[123,22,122,20],[123,24,122,22,"i"],[123,25,122,23],[123,28,122,26,"j"],[123,29,122,27],[123,31,122,29,"i"],[123,32,122,30],[123,36,122,34],[123,37,122,35],[123,39,122,37],[124,10,123,8],[124,16,123,14,"dot"],[124,19,123,17],[124,22,123,20,"q"],[124,23,123,21],[124,24,123,22,"getRow"],[124,30,123,28],[124,31,123,29,"j"],[124,32,123,30],[124,33,123,31],[124,34,123,32,"dot"],[124,37,123,35],[124,38,123,36,"q"],[124,39,123,37],[124,40,123,38,"getRow"],[124,46,123,44],[124,47,123,45,"i"],[124,48,123,46],[124,49,123,47],[124,50,123,48],[125,10,124,8],[125,15,124,13],[125,19,124,17,"h"],[125,20,124,18],[125,23,124,21],[125,24,124,22],[125,26,124,24,"h"],[125,27,124,25],[125,30,124,28,"m"],[125,31,124,29],[125,33,124,31,"h"],[125,34,124,32],[125,38,124,36],[125,39,124,37],[125,41,124,39],[126,12,125,10,"q"],[126,13,125,11],[126,14,125,12,"set"],[126,17,125,15],[126,18,125,16,"j"],[126,19,125,17],[126,21,125,19,"h"],[126,22,125,20],[126,24,125,22,"q"],[126,25,125,23],[126,26,125,24,"get"],[126,29,125,27],[126,30,125,28,"j"],[126,31,125,29],[126,33,125,31,"h"],[126,34,125,32],[126,35,125,33],[126,38,125,36,"dot"],[126,41,125,39],[126,44,125,42,"q"],[126,45,125,43],[126,46,125,44,"get"],[126,49,125,47],[126,50,125,48,"i"],[126,51,125,49],[126,53,125,51,"h"],[126,54,125,52],[126,55,125,53],[126,56,125,54],[127,10,126,8],[128,8,127,6],[129,8,128,6],[129,14,128,12,"norm"],[129,18,128,16],[129,21,128,19,"q"],[129,22,128,20],[129,23,128,21,"getRow"],[129,29,128,27],[129,30,128,28,"j"],[129,31,128,29],[129,32,128,30],[129,33,128,31,"norm"],[129,37,128,35],[129,38,128,36],[129,39,128,37],[130,8,129,6],[130,12,129,10,"norm"],[130,16,129,14],[130,19,129,17,"precisionErrorTolerance"],[130,42,129,40],[130,44,129,42],[131,10,130,8],[132,10,131,8],[132,17,131,15],[132,21,131,19],[133,8,132,6],[134,8,133,6],[134,14,133,12,"inverseNorm"],[134,25,133,23],[134,28,133,26],[134,31,133,29],[134,34,133,32,"norm"],[134,38,133,36],[135,8,134,6],[135,13,134,11],[135,17,134,15,"h"],[135,18,134,16],[135,21,134,19],[135,22,134,20],[135,24,134,22,"h"],[135,25,134,23],[135,28,134,26,"m"],[135,29,134,27],[135,31,134,29,"h"],[135,32,134,30],[135,36,134,34],[135,37,134,35],[135,39,134,37],[136,10,135,8,"q"],[136,11,135,9],[136,12,135,10,"set"],[136,15,135,13],[136,16,135,14,"j"],[136,17,135,15],[136,19,135,17,"h"],[136,20,135,18],[136,22,135,20,"q"],[136,23,135,21],[136,24,135,22,"get"],[136,27,135,25],[136,28,135,26,"j"],[136,29,135,27],[136,31,135,29,"h"],[136,32,135,30],[136,33,135,31],[136,36,135,34,"inverseNorm"],[136,47,135,45],[136,48,135,46],[137,8,136,6],[138,8,137,6],[138,13,137,11],[138,17,137,15,"i"],[138,18,137,16],[138,21,137,19],[138,22,137,20],[138,24,137,22,"i"],[138,25,137,23],[138,28,137,26,"n"],[138,29,137,27],[138,31,137,29,"i"],[138,32,137,30],[138,36,137,34],[138,37,137,35],[138,39,137,37],[139,10,138,8,"r"],[139,11,138,9],[139,12,138,10,"set"],[139,15,138,13],[139,16,138,14,"j"],[139,17,138,15],[139,19,138,17,"i"],[139,20,138,18],[139,22,138,20,"i"],[139,23,138,21],[139,26,138,24,"j"],[139,27,138,25],[139,30,138,28],[139,33,138,31],[139,36,138,34,"q"],[139,37,138,35],[139,38,138,36,"getRow"],[139,44,138,42],[139,45,138,43,"j"],[139,46,138,44],[139,47,138,45],[139,48,138,46,"dot"],[139,51,138,49],[139,52,138,50,"a"],[139,53,138,51],[139,54,138,52,"getRow"],[139,60,138,58],[139,61,138,59,"i"],[139,62,138,60],[139,63,138,61],[139,64,138,62],[139,65,138,63],[140,8,139,6],[141,6,140,4],[143,6,142,4],[144,6,143,4],[145,6,144,4],[145,12,144,10,"wy"],[145,14,144,12],[145,17,144,15],[145,21,144,19,"Vector"],[145,27,144,25],[145,28,144,26,"m"],[145,29,144,27],[145,30,144,28],[146,6,145,4],[146,11,145,9],[146,15,145,13,"h"],[146,16,145,14],[146,19,145,17],[146,20,145,18],[146,22,145,20,"h"],[146,23,145,21],[146,26,145,24,"m"],[146,27,145,25],[146,29,145,27,"h"],[146,30,145,28],[146,34,145,32],[146,35,145,33],[146,37,145,35],[147,8,146,6,"wy"],[147,10,146,8],[147,11,146,9,"set"],[147,14,146,12],[147,15,146,13,"h"],[147,16,146,14],[147,18,146,16],[147,22,146,20],[147,23,146,21,"y"],[147,24,146,22],[147,25,146,23,"h"],[147,26,146,24],[147,27,146,25],[147,30,146,28],[147,34,146,32],[147,35,146,33,"w"],[147,36,146,34],[147,37,146,35,"h"],[147,38,146,36],[147,39,146,37],[147,40,146,38],[148,6,147,4],[149,6,148,4],[149,11,148,9],[149,15,148,13,"i"],[149,16,148,14],[149,19,148,17,"n"],[149,20,148,18],[149,23,148,21],[149,24,148,22],[149,26,148,24,"i"],[149,27,148,25],[149,31,148,29],[149,32,148,30],[149,34,148,32,"i"],[149,35,148,33],[149,39,148,37],[149,40,148,38],[149,42,148,40],[150,8,149,6,"result"],[150,14,149,12],[150,15,149,13,"coefficients"],[150,27,149,25],[150,28,149,26,"i"],[150,29,149,27],[150,30,149,28],[150,33,149,31,"q"],[150,34,149,32],[150,35,149,33,"getRow"],[150,41,149,39],[150,42,149,40,"i"],[150,43,149,41],[150,44,149,42],[150,45,149,43,"dot"],[150,48,149,46],[150,49,149,47,"wy"],[150,51,149,49],[150,52,149,50],[151,8,150,6],[151,13,150,11],[151,17,150,15,"j"],[151,18,150,16],[151,21,150,19,"n"],[151,22,150,20],[151,25,150,23],[151,26,150,24],[151,28,150,26,"j"],[151,29,150,27],[151,32,150,30,"i"],[151,33,150,31],[151,35,150,33,"j"],[151,36,150,34],[151,40,150,38],[151,41,150,39],[151,43,150,41],[152,10,151,8,"result"],[152,16,151,14],[152,17,151,15,"coefficients"],[152,29,151,27],[152,30,151,28,"i"],[152,31,151,29],[152,32,151,30],[152,36,151,34,"r"],[152,37,151,35],[152,38,151,36,"get"],[152,41,151,39],[152,42,151,40,"i"],[152,43,151,41],[152,45,151,43,"j"],[152,46,151,44],[152,47,151,45],[152,50,151,48,"result"],[152,56,151,54],[152,57,151,55,"coefficients"],[152,69,151,67],[152,70,151,68,"j"],[152,71,151,69],[152,72,151,70],[153,8,152,6],[154,8,153,6,"result"],[154,14,153,12],[154,15,153,13,"coefficients"],[154,27,153,25],[154,28,153,26,"i"],[154,29,153,27],[154,30,153,28],[154,34,153,32,"r"],[154,35,153,33],[154,36,153,34,"get"],[154,39,153,37],[154,40,153,38,"i"],[154,41,153,39],[154,43,153,41,"i"],[154,44,153,42],[154,45,153,43],[155,6,154,4],[156,6,155,4],[156,13,155,11,"result"],[156,19,155,17],[157,4,156,2],[158,2,157,0],[159,2,158,0,"exports"],[159,9,158,7],[159,10,158,8,"default"],[159,17,158,15],[159,20,158,18,"LeastSquareSolver"],[159,37,158,35],[160,0,158,36],[160,3]],"functionMap":{"names":["<global>","Vector","Vector#constructor","Vector.fromVOL","Vector#get","Vector#set","Vector#dot","Vector#norm","Matrix","Matrix#constructor","Matrix#get","Matrix#set","Matrix#getRow","PolynomialFit","PolynomialFit#constructor","LeastSquareSolver","constructor","solve"],"mappings":"AAA;ACS;ECC;GDI;EEC;GFM;EGC;GHE;EIC;GJE;EKC;GLM;EMC;GNE;CDC;AQC;ECC;GDG;EEC;GFE;EGC;GHE;EIC;GJE;CRC;AaG;ECS;GDE;CbC;AeI;ECU;GDI;EEK;GFgE;CfC"},"hasCjsExports":true},"type":"js/module"}]}