{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":624},"end":{"line":10,"column":31,"index":655}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":691},"end":{"line":12,"column":34,"index":725}}],"key":"4HPAaDQ25ZwZ2dzTLatXuUucZUM=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Animated","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dNPzxVfn0yBoRxvhD+vE+lN7k4Q=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/StyleSheet","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"MK7+k1V+KnvCVW7Kj2k/ydtjmVU=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/View","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4kYBDC6LJJXoH7P9rWDi3vkLVB0=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/Keyboard","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"4H7FkS8ywD5HLTNk4ggLktoHubI=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/StatusBar","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"zzHKpVbCjTP+fv+3SRvKiN2M8pI=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/I18nManager","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YXFxy1JKR54teS+Ykb7Z7cVZrH8=","exportNames":["*"],"imports":1}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":819},"end":{"line":14,"column":66,"index":885}}],"key":"Z7WldcovRqVbXERv5Mkjp/bqHuA=","exportNames":["*"],"imports":1}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":886},"end":{"line":15,"column":66,"index":952}}],"key":"+Msf+8iAdn6txPXicJvQZ0hdOZ0=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":953},"end":{"line":16,"column":33,"index":986}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return DrawerLayout;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var React = _interopNamespace(_react);\n  var _invariant = require(_dependencyMap[1], \"invariant\");\n  var invariant = _interopDefault(_invariant);\n  var _reactNativeWebDistExportsAnimated = require(_dependencyMap[2], \"react-native-web/dist/exports/Animated\");\n  var Animated = _interopDefault(_reactNativeWebDistExportsAnimated);\n  var _reactNativeWebDistExportsStyleSheet = require(_dependencyMap[3], \"react-native-web/dist/exports/StyleSheet\");\n  var StyleSheet = _interopDefault(_reactNativeWebDistExportsStyleSheet);\n  var _reactNativeWebDistExportsView = require(_dependencyMap[4], \"react-native-web/dist/exports/View\");\n  var View = _interopDefault(_reactNativeWebDistExportsView);\n  var _reactNativeWebDistExportsKeyboard = require(_dependencyMap[5], \"react-native-web/dist/exports/Keyboard\");\n  var Keyboard = _interopDefault(_reactNativeWebDistExportsKeyboard);\n  var _reactNativeWebDistExportsStatusBar = require(_dependencyMap[6], \"react-native-web/dist/exports/StatusBar\");\n  var StatusBar = _interopDefault(_reactNativeWebDistExportsStatusBar);\n  var _reactNativeWebDistExportsI18nManager = require(_dependencyMap[7], \"react-native-web/dist/exports/I18nManager\");\n  var I18nManager = _interopDefault(_reactNativeWebDistExportsI18nManager);\n  var _handlersPanGestureHandler = require(_dependencyMap[8], \"../handlers/PanGestureHandler\");\n  var _handlersTapGestureHandler = require(_dependencyMap[9], \"../handlers/TapGestureHandler\");\n  var _State = require(_dependencyMap[10], \"../State\");\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n\n  const DRAG_TOSS = 0.05;\n  const IDLE = 'Idle';\n  const DRAGGING = 'Dragging';\n  const SETTLING = 'Settling';\n  /**\n   * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n   */\n\n  /**\n   * @deprecated use Reanimated version of DrawerLayout instead\n   */\n  class DrawerLayout extends _react.Component {\n    constructor(_props) {\n      super(_props);\n      _defineProperty(this, \"openValue\", void 0);\n      _defineProperty(this, \"onGestureEvent\", void 0);\n      _defineProperty(this, \"accessibilityIsModalView\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"pointerEventsView\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"panGestureHandler\", /*#__PURE__*/React.createRef());\n      _defineProperty(this, \"drawerShown\", false);\n      _defineProperty(this, \"updateAnimatedEvent\", (props, state) => {\n        // Event definition is based on\n        const {\n          drawerPosition,\n          drawerWidth,\n          drawerType\n        } = props;\n        const {\n          dragX: dragXValue,\n          touchX: touchXValue,\n          drawerTranslation,\n          containerWidth\n        } = state;\n        let dragX = dragXValue;\n        let touchX = touchXValue;\n        if (drawerPosition !== 'left') {\n          // Most of the code is written in a way to handle left-side drawer. In\n          // order to handle right-side drawer the only thing we need to do is to\n          // reverse events coming from gesture handler in a way they emulate\n          // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n          // calulcated by subtracing real touchX from the width of the container\n          // (such that when touch happens at the right edge the value is simply 0)\n          dragX = Animated.default.multiply(new Animated.default.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n\n          touchX = Animated.default.add(new Animated.default.Value(containerWidth), Animated.default.multiply(new Animated.default.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        } // While closing the drawer when user starts gesture outside of its area (in greyed\n        // out part of the window), we want the drawer to follow only once finger reaches the\n        // edge of the drawer.\n        // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n        // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n        // an arrow pointing left\n        // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    +---------------+    +---------------+    +---------------+    +---------------+\n        //\n        // For the above to work properly we define animated value that will keep\n        // start position of the gesture. Then we use that value to calculate how\n        // much we need to subtract from the dragX. If the gesture started on the\n        // greyed out area we take the distance from the edge of the drawer to the\n        // start position. Otherwise we don't subtract at all and the drawer be\n        // pulled back as soon as you start the pan.\n        //\n        // This is used only when drawerType is \"front\"\n        //\n\n        let translationX = dragX;\n        if (drawerType === 'front') {\n          const startPositionX = Animated.default.add(touchX, Animated.default.multiply(new Animated.default.Value(-1), dragX));\n          const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = Animated.default.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n        }\n        this.openValue = Animated.default.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        const gestureOptions = {\n          useNativeDriver: props.useNativeAnimations\n        };\n        if (this.props.onDrawerSlide) {\n          gestureOptions.listener = ev => {\n            var _this$props$onDrawerS, _this$props;\n            const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n            const position = translationX / this.state.containerWidth;\n            (_this$props$onDrawerS = (_this$props = this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n          };\n        }\n        this.onGestureEvent = Animated.default.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], gestureOptions);\n      });\n      _defineProperty(this, \"handleContainerLayout\", ({\n        nativeEvent\n      }) => {\n        this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      });\n      _defineProperty(this, \"emitStateChanged\", (newState, drawerWillShow) => {\n        var _this$props$onDrawerS2, _this$props2;\n        (_this$props$onDrawerS2 = (_this$props2 = this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n      });\n      _defineProperty(this, \"openingHandlerStateChange\", ({\n        nativeEvent\n      }) => {\n        if (nativeEvent.oldState === _State.State.ACTIVE) {\n          this.handleRelease({\n            nativeEvent\n          });\n        } else if (nativeEvent.state === _State.State.ACTIVE) {\n          this.emitStateChanged(DRAGGING, false);\n          this.setState({\n            drawerState: DRAGGING\n          });\n          if (this.props.keyboardDismissMode === 'on-drag') {\n            Keyboard.default.dismiss();\n          }\n          if (this.props.hideStatusBar) {\n            StatusBar.default.setHidden(true, this.props.statusBarAnimation || 'slide');\n          }\n        }\n      });\n      _defineProperty(this, \"onTapHandlerStateChange\", ({\n        nativeEvent\n      }) => {\n        if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n          this.closeDrawer();\n        }\n      });\n      _defineProperty(this, \"handleRelease\", ({\n        nativeEvent\n      }) => {\n        const {\n          drawerWidth,\n          drawerPosition,\n          drawerType\n        } = this.props;\n        const {\n          containerWidth\n        } = this.state;\n        let {\n          translationX: dragX,\n          velocityX,\n          x: touchX\n        } = nativeEvent;\n        if (drawerPosition !== 'left') {\n          // See description in _updateAnimatedEvent about why events are flipped\n          // for right-side drawer\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n        const gestureStartX = touchX - dragX;\n        let dragOffsetBasedOnStart = 0;\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n        const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n        const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        const shouldOpen = projOffsetX > drawerWidth / 2;\n        if (shouldOpen) {\n          this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          this.animateDrawer(startOffsetX, 0, velocityX);\n        }\n      });\n      _defineProperty(this, \"updateShowing\", showing => {\n        var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n        this.drawerShown = showing;\n        (_this$accessibilityIs = this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n          accessibilityViewIsModal: showing\n        });\n        (_this$pointerEventsVi = this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n          pointerEvents: showing ? 'auto' : 'none'\n        });\n        const {\n          drawerPosition,\n          minSwipeDistance,\n          edgeWidth\n        } = this.props;\n        const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n\n        const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n\n        const hitSlop = fromLeft ? {\n          left: 0,\n          width: showing ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: showing ? undefined : edgeWidth\n        }; // @ts-ignore internal API, maybe could be fixed in handler types\n\n        (_this$panGestureHandl = this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n          hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance\n        });\n      });\n      _defineProperty(this, \"animateDrawer\", (fromValue, toValue, velocity, speed) => {\n        this.state.dragX.setValue(0);\n        this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n        if (fromValue != null) {\n          let nextFramePosition = fromValue;\n          if (this.props.useNativeAnimations) {\n            // When using native driver, we predict the next position of the\n            // animation because it takes one frame of a roundtrip to pass RELEASE\n            // event from native driver to JS before we can start animating. Without\n            // it, it is more noticable that the frame is dropped.\n            if (fromValue < toValue && velocity > 0) {\n              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n            } else if (fromValue > toValue && velocity < 0) {\n              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n            }\n          }\n          this.state.drawerTranslation.setValue(nextFramePosition);\n        }\n        const willShow = toValue !== 0;\n        this.updateShowing(willShow);\n        this.emitStateChanged(SETTLING, willShow);\n        this.setState({\n          drawerState: SETTLING\n        });\n        if (this.props.hideStatusBar) {\n          StatusBar.default.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n        }\n        Animated.default.spring(this.state.drawerTranslation, {\n          velocity,\n          bounciness: 0,\n          toValue,\n          useNativeDriver: this.props.useNativeAnimations,\n          speed: speed !== null && speed !== void 0 ? speed : undefined\n        }).start(({\n          finished\n        }) => {\n          if (finished) {\n            this.emitStateChanged(IDLE, willShow);\n            this.setState({\n              drawerOpened: willShow\n            });\n            if (this.state.drawerState !== DRAGGING) {\n              // It's possilbe that user started drag while the drawer\n              // was settling, don't override state in this case\n              this.setState({\n                drawerState: IDLE\n              });\n            }\n            if (willShow) {\n              var _this$props$onDrawerO, _this$props3;\n              (_this$props$onDrawerO = (_this$props3 = this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n            } else {\n              var _this$props$onDrawerC, _this$props4;\n              (_this$props$onDrawerC = (_this$props4 = this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n            }\n          }\n        });\n      });\n      _defineProperty(this, \"openDrawer\", (options = {}) => {\n        this.animateDrawer(\n        // TODO: decide if it should be null or undefined is the proper value\n        undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n        // it would not be clickable\n\n        this.forceUpdate();\n      });\n      _defineProperty(this, \"closeDrawer\", (options = {}) => {\n        // TODO: decide if it should be null or undefined is the proper value\n        this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n        // it would be still clickable\n\n        this.forceUpdate();\n      });\n      _defineProperty(this, \"renderOverlay\", () => {\n        /* Overlay styles */\n        (0, invariant.default)(this.openValue, 'should be set');\n        let overlayOpacity;\n        if (this.state.drawerState !== IDLE) {\n          overlayOpacity = this.openValue;\n        } else {\n          overlayOpacity = this.state.drawerOpened ? 1 : 0;\n        }\n        const dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: this.props.overlayColor\n        };\n        return /*#__PURE__*/React.createElement(_handlersTapGestureHandler.TapGestureHandler, {\n          onHandlerStateChange: this.onTapHandlerStateChange\n        }, /*#__PURE__*/React.createElement(Animated.default.View, {\n          pointerEvents: this.drawerShown ? 'auto' : 'none',\n          ref: this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        }));\n      });\n      _defineProperty(this, \"renderDrawer\", () => {\n        const {\n          drawerBackgroundColor,\n          drawerWidth,\n          drawerPosition,\n          drawerType,\n          drawerContainerStyle,\n          contentContainerStyle\n        } = this.props;\n        const fromLeft = drawerPosition === 'left';\n        const drawerSlide = drawerType !== 'back';\n        const containerSlide = drawerType !== 'front'; // We rely on row and row-reverse flex directions to position the drawer\n        // properly. Apparently for RTL these are flipped which requires us to use\n        // the opposite setting for the drawer to appear from left or right\n        // according to the drawerPosition prop\n\n        const reverseContentDirection = I18nManager.default.isRTL ? fromLeft : !fromLeft;\n        const dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        const openValue = this.openValue;\n        (0, invariant.default)(openValue, 'should be set');\n        let containerStyles;\n        if (containerSlide) {\n          const containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n        let drawerTranslateX = 0;\n        if (drawerSlide) {\n          const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          if (this.state.drawerState !== IDLE) {\n            drawerTranslateX = openValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [closedDrawerOffset, 0],\n              extrapolate: 'clamp'\n            });\n          } else {\n            drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n          }\n        }\n        const drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n        };\n        return /*#__PURE__*/React.createElement(Animated.default.View, {\n          style: styles.main,\n          onLayout: this.handleContainerLayout\n        }, /*#__PURE__*/React.createElement(Animated.default.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes'\n        }, typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()), /*#__PURE__*/React.createElement(Animated.default.View, {\n          pointerEvents: \"box-none\",\n          ref: this.accessibilityIsModalView,\n          accessibilityViewIsModal: this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n        }, /*#__PURE__*/React.createElement(View.default, {\n          style: dynamicDrawerStyles\n        }, this.props.renderNavigationView(this.openValue))));\n      });\n      _defineProperty(this, \"setPanGestureRef\", ref => {\n        var _this$props$onGesture, _this$props5;\n\n        // TODO(TS): make sure it is OK taken from\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n        this.panGestureHandler.current = ref;\n        (_this$props$onGesture = (_this$props5 = this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n      });\n      const _dragX = new Animated.default.Value(0);\n      const _touchX = new Animated.default.Value(0);\n      const _drawerTranslation = new Animated.default.Value(0);\n      this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      this.updateAnimatedEvent(_props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n    render() {\n      const {\n        drawerPosition,\n        drawerLockMode,\n        edgeWidth,\n        minSwipeDistance\n      } = this.props;\n      const fromLeft = drawerPosition === 'left'; // gestureOrientation is 1 if the expected gesture is from left to right and\n      // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n      // to right gesture, thus orientation will be 1.\n\n      const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n      // the container size by the value of SLOP. This will make it only activate\n      // when gesture happens not further than SLOP away from the edge\n\n      const hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return /*#__PURE__*/React.createElement(_handlersPanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n      , {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }\n  _defineProperty(DrawerLayout, \"defaultProps\", {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  });\n  _defineProperty(DrawerLayout, \"positions\", {\n    Left: 'left',\n    Right: 'right'\n  });\n  const styles = StyleSheet.default.create({\n    drawerContainer: Object.assign({}, StyleSheet.default.absoluteFillObject, {\n      zIndex: 1001,\n      flexDirection: 'row'\n    }),\n    containerInFront: Object.assign({}, StyleSheet.default.absoluteFillObject, {\n      zIndex: 1002\n    }),\n    containerOnBack: Object.assign({}, StyleSheet.default.absoluteFillObject),\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: Object.assign({}, StyleSheet.default.absoluteFillObject, {\n      zIndex: 1000\n    })\n  });\n});","lineCount":554,"map":[[27,2,28,15,"Object"],[27,8,28,15],[27,9,28,15,"defineProperty"],[27,23,28,15],[27,24,28,15,"exports"],[27,31,28,15],[28,4,28,15,"enumerable"],[28,14,28,15],[29,4,28,15,"get"],[29,7,28,15],[29,18,28,15,"get"],[29,19,28,15],[30,6,28,15],[30,13,28,15,"DrawerLayout"],[30,25,28,15],[31,4,28,15],[32,2,28,15],[33,2,10,0],[33,6,10,0,"_react"],[33,12,10,0],[33,15,10,0,"require"],[33,22,10,0],[33,23,10,0,"_dependencyMap"],[33,37,10,0],[34,2,10,0],[34,6,10,0,"React"],[34,11,10,0],[34,14,10,0,"_interopNamespace"],[34,31,10,0],[34,32,10,0,"_react"],[34,38,10,0],[35,2,12,0],[35,6,12,0,"_invariant"],[35,16,12,0],[35,19,12,0,"require"],[35,26,12,0],[35,27,12,0,"_dependencyMap"],[35,41,12,0],[36,2,12,0],[36,6,12,0,"invariant"],[36,15,12,0],[36,18,12,0,"_interopDefault"],[36,33,12,0],[36,34,12,0,"_invariant"],[36,44,12,0],[37,2,12,34],[37,6,12,34,"_reactNativeWebDistExportsAnimated"],[37,40,12,34],[37,43,12,34,"require"],[37,50,12,34],[37,51,12,34,"_dependencyMap"],[37,65,12,34],[38,2,12,34],[38,6,12,34,"Animated"],[38,14,12,34],[38,17,12,34,"_interopDefault"],[38,32,12,34],[38,33,12,34,"_reactNativeWebDistExportsAnimated"],[38,67,12,34],[39,2,12,34],[39,6,12,34,"_reactNativeWebDistExportsStyleSheet"],[39,42,12,34],[39,45,12,34,"require"],[39,52,12,34],[39,53,12,34,"_dependencyMap"],[39,67,12,34],[40,2,12,34],[40,6,12,34,"StyleSheet"],[40,16,12,34],[40,19,12,34,"_interopDefault"],[40,34,12,34],[40,35,12,34,"_reactNativeWebDistExportsStyleSheet"],[40,71,12,34],[41,2,12,34],[41,6,12,34,"_reactNativeWebDistExportsView"],[41,36,12,34],[41,39,12,34,"require"],[41,46,12,34],[41,47,12,34,"_dependencyMap"],[41,61,12,34],[42,2,12,34],[42,6,12,34,"View"],[42,10,12,34],[42,13,12,34,"_interopDefault"],[42,28,12,34],[42,29,12,34,"_reactNativeWebDistExportsView"],[42,59,12,34],[43,2,12,34],[43,6,12,34,"_reactNativeWebDistExportsKeyboard"],[43,40,12,34],[43,43,12,34,"require"],[43,50,12,34],[43,51,12,34,"_dependencyMap"],[43,65,12,34],[44,2,12,34],[44,6,12,34,"Keyboard"],[44,14,12,34],[44,17,12,34,"_interopDefault"],[44,32,12,34],[44,33,12,34,"_reactNativeWebDistExportsKeyboard"],[44,67,12,34],[45,2,12,34],[45,6,12,34,"_reactNativeWebDistExportsStatusBar"],[45,41,12,34],[45,44,12,34,"require"],[45,51,12,34],[45,52,12,34,"_dependencyMap"],[45,66,12,34],[46,2,12,34],[46,6,12,34,"StatusBar"],[46,15,12,34],[46,18,12,34,"_interopDefault"],[46,33,12,34],[46,34,12,34,"_reactNativeWebDistExportsStatusBar"],[46,69,12,34],[47,2,12,34],[47,6,12,34,"_reactNativeWebDistExportsI18nManager"],[47,43,12,34],[47,46,12,34,"require"],[47,53,12,34],[47,54,12,34,"_dependencyMap"],[47,68,12,34],[48,2,12,34],[48,6,12,34,"I18nManager"],[48,17,12,34],[48,20,12,34,"_interopDefault"],[48,35,12,34],[48,36,12,34,"_reactNativeWebDistExportsI18nManager"],[48,73,12,34],[49,2,14,0],[49,6,14,0,"_handlersPanGestureHandler"],[49,32,14,0],[49,35,14,0,"require"],[49,42,14,0],[49,43,14,0,"_dependencyMap"],[49,57,14,0],[50,2,15,0],[50,6,15,0,"_handlersTapGestureHandler"],[50,32,15,0],[50,35,15,0,"require"],[50,42,15,0],[50,43,15,0,"_dependencyMap"],[50,57,15,0],[51,2,16,0],[51,6,16,0,"_State"],[51,12,16,0],[51,15,16,0,"require"],[51,22,16,0],[51,23,16,0,"_dependencyMap"],[51,37,16,0],[52,2,1,0],[52,11,1,9,"_defineProperty"],[52,26,1,24,"_defineProperty"],[52,27,1,25,"obj"],[52,30,1,28],[52,32,1,30,"key"],[52,35,1,33],[52,37,1,35,"value"],[52,42,1,40],[52,44,1,42],[53,4,1,44],[53,8,1,48,"key"],[53,11,1,51],[53,15,1,55,"obj"],[53,18,1,58],[53,20,1,60],[54,6,1,62,"Object"],[54,12,1,68],[54,13,1,69,"defineProperty"],[54,27,1,83],[54,28,1,84,"obj"],[54,31,1,87],[54,33,1,89,"key"],[54,36,1,92],[54,38,1,94],[55,8,1,96,"value"],[55,13,1,101],[55,15,1,103,"value"],[55,20,1,108],[56,8,1,110,"enumerable"],[56,18,1,120],[56,20,1,122],[56,24,1,126],[57,8,1,128,"configurable"],[57,20,1,140],[57,22,1,142],[57,26,1,146],[58,8,1,148,"writable"],[58,16,1,156],[58,18,1,158],[59,6,1,163],[59,7,1,164],[59,8,1,165],[60,4,1,167],[60,5,1,168],[60,11,1,174],[61,6,1,176,"obj"],[61,9,1,179],[61,10,1,180,"key"],[61,13,1,183],[61,14,1,184],[61,17,1,187,"value"],[61,22,1,192],[62,4,1,194],[63,4,1,196],[63,11,1,203,"obj"],[63,14,1,206],[64,2,1,208],[66,2,3,0],[67,2,4,0],[68,2,5,0],[69,2,6,0],[70,2,7,0],[71,2,8,0],[72,2,9,0],[74,2,17,0],[74,8,17,6,"DRAG_TOSS"],[74,17,17,15],[74,20,17,18],[74,24,17,22],[75,2,18,0],[75,8,18,6,"IDLE"],[75,12,18,10],[75,15,18,13],[75,21,18,19],[76,2,19,0],[76,8,19,6,"DRAGGING"],[76,16,19,14],[76,19,19,17],[76,29,19,27],[77,2,20,0],[77,8,20,6,"SETTLING"],[77,16,20,14],[77,19,20,17],[77,29,20,27],[78,2,21,0],[79,0,22,0],[80,0,23,0],[82,2,25,0],[83,0,26,0],[84,0,27,0],[85,2,28,15],[85,8,28,21,"DrawerLayout"],[85,20,28,33],[85,29,28,42,"Component"],[85,35,28,51],[85,36,28,51,"Component"],[85,45,28,51],[85,46,28,52],[86,4,29,2,"constructor"],[86,15,29,13,"constructor"],[86,16,29,14,"_props"],[86,22,29,20],[86,24,29,22],[87,6,30,4],[87,11,30,9],[87,12,30,10,"_props"],[87,18,30,16],[87,19,30,17],[88,6,32,4,"_defineProperty"],[88,21,32,19],[88,22,32,20],[88,26,32,24],[88,28,32,26],[88,39,32,37],[88,41,32,39],[88,46,32,44],[88,47,32,45],[88,48,32,46],[89,6,34,4,"_defineProperty"],[89,21,34,19],[89,22,34,20],[89,26,34,24],[89,28,34,26],[89,44,34,42],[89,46,34,44],[89,51,34,49],[89,52,34,50],[89,53,34,51],[90,6,36,4,"_defineProperty"],[90,21,36,19],[90,22,36,20],[90,26,36,24],[90,28,36,26],[90,54,36,52],[90,56,36,54],[90,69,36,67,"React"],[90,74,36,72],[90,75,36,73,"createRef"],[90,84,36,82],[90,85,36,83],[90,86,36,84],[90,87,36,85],[91,6,38,4,"_defineProperty"],[91,21,38,19],[91,22,38,20],[91,26,38,24],[91,28,38,26],[91,47,38,45],[91,49,38,47],[91,62,38,60,"React"],[91,67,38,65],[91,68,38,66,"createRef"],[91,77,38,75],[91,78,38,76],[91,79,38,77],[91,80,38,78],[92,6,40,4,"_defineProperty"],[92,21,40,19],[92,22,40,20],[92,26,40,24],[92,28,40,26],[92,47,40,45],[92,49,40,47],[92,62,40,60,"React"],[92,67,40,65],[92,68,40,66,"createRef"],[92,77,40,75],[92,78,40,76],[92,79,40,77],[92,80,40,78],[93,6,42,4,"_defineProperty"],[93,21,42,19],[93,22,42,20],[93,26,42,24],[93,28,42,26],[93,41,42,39],[93,43,42,41],[93,48,42,46],[93,49,42,47],[94,6,44,4,"_defineProperty"],[94,21,44,19],[94,22,44,20],[94,26,44,24],[94,28,44,26],[94,49,44,47],[94,51,44,49],[94,52,44,50,"props"],[94,57,44,55],[94,59,44,57,"state"],[94,64,44,62],[94,69,44,67],[95,8,45,6],[96,8,46,6],[96,14,46,12],[97,10,47,8,"drawerPosition"],[97,24,47,22],[98,10,48,8,"drawerWidth"],[98,21,48,19],[99,10,49,8,"drawerType"],[100,8,50,6],[100,9,50,7],[100,12,50,10,"props"],[100,17,50,15],[101,8,51,6],[101,14,51,12],[102,10,52,8,"dragX"],[102,15,52,13],[102,17,52,15,"dragXValue"],[102,27,52,25],[103,10,53,8,"touchX"],[103,16,53,14],[103,18,53,16,"touchXValue"],[103,29,53,27],[104,10,54,8,"drawerTranslation"],[104,27,54,25],[105,10,55,8,"containerWidth"],[106,8,56,6],[106,9,56,7],[106,12,56,10,"state"],[106,17,56,15],[107,8,57,6],[107,12,57,10,"dragX"],[107,17,57,15],[107,20,57,18,"dragXValue"],[107,30,57,28],[108,8,58,6],[108,12,58,10,"touchX"],[108,18,58,16],[108,21,58,19,"touchXValue"],[108,32,58,30],[109,8,60,6],[109,12,60,10,"drawerPosition"],[109,26,60,24],[109,31,60,29],[109,37,60,35],[109,39,60,37],[110,10,61,8],[111,10,62,8],[112,10,63,8],[113,10,64,8],[114,10,65,8],[115,10,66,8],[116,10,67,8,"dragX"],[116,15,67,13],[116,18,67,16,"Animated"],[116,26,67,24],[116,27,67,24,"default"],[116,34,67,24],[116,35,67,25,"multiply"],[116,43,67,33],[116,44,67,34],[116,48,67,38,"Animated"],[116,56,67,46],[116,57,67,46,"default"],[116,64,67,46],[116,65,67,47,"Value"],[116,70,67,52],[116,71,67,53],[116,72,67,54],[116,73,67,55],[116,74,67,56],[116,76,67,58,"dragXValue"],[116,86,67,68],[116,87,67,69],[116,88,67,70],[116,89,67,71],[118,10,69,8,"touchX"],[118,16,69,14],[118,19,69,17,"Animated"],[118,27,69,25],[118,28,69,25,"default"],[118,35,69,25],[118,36,69,26,"add"],[118,39,69,29],[118,40,69,30],[118,44,69,34,"Animated"],[118,52,69,42],[118,53,69,42,"default"],[118,60,69,42],[118,61,69,43,"Value"],[118,66,69,48],[118,67,69,49,"containerWidth"],[118,81,69,63],[118,82,69,64],[118,84,69,66,"Animated"],[118,92,69,74],[118,93,69,74,"default"],[118,100,69,74],[118,101,69,75,"multiply"],[118,109,69,83],[118,110,69,84],[118,114,69,88,"Animated"],[118,122,69,96],[118,123,69,96,"default"],[118,130,69,96],[118,131,69,97,"Value"],[118,136,69,102],[118,137,69,103],[118,138,69,104],[118,139,69,105],[118,140,69,106],[118,142,69,108,"touchXValue"],[118,153,69,119],[118,154,69,120],[118,155,69,121],[118,156,69,122],[118,157,69,123],[120,10,71,8,"touchXValue"],[120,21,71,19],[120,22,71,20,"setValue"],[120,30,71,28],[120,31,71,29,"containerWidth"],[120,45,71,43],[120,46,71,44],[121,8,72,6],[121,9,72,7],[121,15,72,13],[122,10,73,8,"touchXValue"],[122,21,73,19],[122,22,73,20,"setValue"],[122,30,73,28],[122,31,73,29],[122,32,73,30],[122,33,73,31],[123,8,74,6],[123,9,74,7],[123,10,74,8],[124,8,75,6],[125,8,76,6],[126,8,77,6],[127,8,78,6],[128,8,79,6],[129,8,80,6],[130,8,81,6],[131,8,82,6],[132,8,83,6],[133,8,84,6],[134,8,85,6],[135,8,86,6],[136,8,87,6],[137,8,88,6],[138,8,89,6],[139,8,90,6],[140,8,91,6],[141,8,92,6],[142,8,93,6],[143,8,94,6],[144,8,95,6],[145,8,96,6],[146,8,97,6],[147,8,98,6],[149,8,101,6],[149,12,101,10,"translationX"],[149,24,101,22],[149,27,101,25,"dragX"],[149,32,101,30],[150,8,103,6],[150,12,103,10,"drawerType"],[150,22,103,20],[150,27,103,25],[150,34,103,32],[150,36,103,34],[151,10,104,8],[151,16,104,14,"startPositionX"],[151,30,104,28],[151,33,104,31,"Animated"],[151,41,104,39],[151,42,104,39,"default"],[151,49,104,39],[151,50,104,40,"add"],[151,53,104,43],[151,54,104,44,"touchX"],[151,60,104,50],[151,62,104,52,"Animated"],[151,70,104,60],[151,71,104,60,"default"],[151,78,104,60],[151,79,104,61,"multiply"],[151,87,104,69],[151,88,104,70],[151,92,104,74,"Animated"],[151,100,104,82],[151,101,104,82,"default"],[151,108,104,82],[151,109,104,83,"Value"],[151,114,104,88],[151,115,104,89],[151,116,104,90],[151,117,104,91],[151,118,104,92],[151,120,104,94,"dragX"],[151,125,104,99],[151,126,104,100],[151,127,104,101],[152,10,105,8],[152,16,105,14,"dragOffsetFromOnStartPosition"],[152,45,105,43],[152,48,105,46,"startPositionX"],[152,62,105,60],[152,63,105,61,"interpolate"],[152,74,105,72],[152,75,105,73],[153,12,106,10,"inputRange"],[153,22,106,20],[153,24,106,22],[153,25,106,23,"drawerWidth"],[153,36,106,34],[153,39,106,37],[153,40,106,38],[153,42,106,40,"drawerWidth"],[153,53,106,51],[153,55,106,53,"drawerWidth"],[153,66,106,64],[153,69,106,67],[153,70,106,68],[153,71,106,69],[154,12,107,10,"outputRange"],[154,23,107,21],[154,25,107,23],[154,26,107,24],[154,27,107,25],[154,29,107,27],[154,30,107,28],[154,32,107,30],[154,33,107,31],[155,10,108,8],[155,11,108,9],[155,12,108,10],[156,10,109,8,"translationX"],[156,22,109,20],[156,25,109,23,"Animated"],[156,33,109,31],[156,34,109,31,"default"],[156,41,109,31],[156,42,109,32,"add"],[156,45,109,35],[156,46,109,36,"dragX"],[156,51,109,41],[156,53,109,43,"dragOffsetFromOnStartPosition"],[156,82,109,72],[156,83,109,73],[156,84,109,74],[156,85,109,75],[157,8,110,6],[158,8,112,6],[158,12,112,10],[158,13,112,11,"openValue"],[158,22,112,20],[158,25,112,23,"Animated"],[158,33,112,31],[158,34,112,31,"default"],[158,41,112,31],[158,42,112,32,"add"],[158,45,112,35],[158,46,112,36,"translationX"],[158,58,112,48],[158,60,112,50,"drawerTranslation"],[158,77,112,67],[158,78,112,68],[158,79,112,69,"interpolate"],[158,90,112,80],[158,91,112,81],[159,10,113,8,"inputRange"],[159,20,113,18],[159,22,113,20],[159,23,113,21],[159,24,113,22],[159,26,113,24,"drawerWidth"],[159,37,113,35],[159,38,113,36],[160,10,114,8,"outputRange"],[160,21,114,19],[160,23,114,21],[160,24,114,22],[160,25,114,23],[160,27,114,25],[160,28,114,26],[160,29,114,27],[161,10,115,8,"extrapolate"],[161,21,115,19],[161,23,115,21],[162,8,116,6],[162,9,116,7],[162,10,116,8],[163,8,117,6],[163,14,117,12,"gestureOptions"],[163,28,117,26],[163,31,117,29],[164,10,118,8,"useNativeDriver"],[164,25,118,23],[164,27,118,25,"props"],[164,32,118,30],[164,33,118,31,"useNativeAnimations"],[165,8,119,6],[165,9,119,7],[166,8,121,6],[166,12,121,10],[166,16,121,14],[166,17,121,15,"props"],[166,22,121,20],[166,23,121,21,"onDrawerSlide"],[166,36,121,34],[166,38,121,36],[167,10,122,8,"gestureOptions"],[167,24,122,22],[167,25,122,23,"listener"],[167,33,122,31],[167,36,122,34,"ev"],[167,38,122,36],[167,42,122,40],[168,12,123,10],[168,16,123,14,"_this$props$onDrawerS"],[168,37,123,35],[168,39,123,37,"_this$props"],[168,50,123,48],[169,12,125,10],[169,18,125,16,"translationX"],[169,30,125,28],[169,33,125,31,"Math"],[169,37,125,35],[169,38,125,36,"floor"],[169,43,125,41],[169,44,125,42,"Math"],[169,48,125,46],[169,49,125,47,"abs"],[169,52,125,50],[169,53,125,51,"ev"],[169,55,125,53],[169,56,125,54,"nativeEvent"],[169,67,125,65],[169,68,125,66,"translationX"],[169,80,125,78],[169,81,125,79],[169,82,125,80],[170,12,126,10],[170,18,126,16,"position"],[170,26,126,24],[170,29,126,27,"translationX"],[170,41,126,39],[170,44,126,42],[170,48,126,46],[170,49,126,47,"state"],[170,54,126,52],[170,55,126,53,"containerWidth"],[170,69,126,67],[171,12,127,10],[171,13,127,11,"_this$props$onDrawerS"],[171,34,127,32],[171,37,127,35],[171,38,127,36,"_this$props"],[171,49,127,47],[171,52,127,50],[171,56,127,54],[171,57,127,55,"props"],[171,62,127,60],[171,64,127,62,"onDrawerSlide"],[171,77,127,75],[171,83,127,81],[171,87,127,85],[171,91,127,89,"_this$props$onDrawerS"],[171,112,127,110],[171,117,127,115],[171,122,127,120],[171,123,127,121],[171,126,127,124],[171,131,127,129],[171,132,127,130],[171,135,127,133,"_this$props$onDrawerS"],[171,156,127,154],[171,157,127,155,"call"],[171,161,127,159],[171,162,127,160,"_this$props"],[171,173,127,171],[171,175,127,173,"position"],[171,183,127,181],[171,184,127,182],[172,10,128,8],[172,11,128,9],[173,8,129,6],[174,8,131,6],[174,12,131,10],[174,13,131,11,"onGestureEvent"],[174,27,131,25],[174,30,131,28,"Animated"],[174,38,131,36],[174,39,131,36,"default"],[174,46,131,36],[174,47,131,37,"event"],[174,52,131,42],[174,53,131,43],[174,54,131,44],[175,10,132,8,"nativeEvent"],[175,21,132,19],[175,23,132,21],[176,12,133,10,"translationX"],[176,24,133,22],[176,26,133,24,"dragXValue"],[176,36,133,34],[177,12,134,10,"x"],[177,13,134,11],[177,15,134,13,"touchXValue"],[178,10,135,8],[179,8,136,6],[179,9,136,7],[179,10,136,8],[179,12,136,10,"gestureOptions"],[179,26,136,24],[179,27,136,25],[180,6,137,4],[180,7,137,5],[180,8,137,6],[181,6,139,4,"_defineProperty"],[181,21,139,19],[181,22,139,20],[181,26,139,24],[181,28,139,26],[181,51,139,49],[181,53,139,51],[181,54,139,52],[182,8,140,6,"nativeEvent"],[183,6,141,4],[183,7,141,5],[183,12,141,10],[184,8,142,6],[184,12,142,10],[184,13,142,11,"setState"],[184,21,142,19],[184,22,142,20],[185,10,143,8,"containerWidth"],[185,24,143,22],[185,26,143,24,"nativeEvent"],[185,37,143,35],[185,38,143,36,"layout"],[185,44,143,42],[185,45,143,43,"width"],[186,8,144,6],[186,9,144,7],[186,10,144,8],[187,6,145,4],[187,7,145,5],[187,8,145,6],[188,6,147,4,"_defineProperty"],[188,21,147,19],[188,22,147,20],[188,26,147,24],[188,28,147,26],[188,46,147,44],[188,48,147,46],[188,49,147,47,"newState"],[188,57,147,55],[188,59,147,57,"drawerWillShow"],[188,73,147,71],[188,78,147,76],[189,8,148,6],[189,12,148,10,"_this$props$onDrawerS2"],[189,34,148,32],[189,36,148,34,"_this$props2"],[189,48,148,46],[190,8,150,6],[190,9,150,7,"_this$props$onDrawerS2"],[190,31,150,29],[190,34,150,32],[190,35,150,33,"_this$props2"],[190,47,150,45],[190,50,150,48],[190,54,150,52],[190,55,150,53,"props"],[190,60,150,58],[190,62,150,60,"onDrawerStateChanged"],[190,82,150,80],[190,88,150,86],[190,92,150,90],[190,96,150,94,"_this$props$onDrawerS2"],[190,118,150,116],[190,123,150,121],[190,128,150,126],[190,129,150,127],[190,132,150,130],[190,137,150,135],[190,138,150,136],[190,141,150,139,"_this$props$onDrawerS2"],[190,163,150,161],[190,164,150,162,"call"],[190,168,150,166],[190,169,150,167,"_this$props2"],[190,181,150,179],[190,183,150,181,"newState"],[190,191,150,189],[190,193,150,191,"drawerWillShow"],[190,207,150,205],[190,208,150,206],[191,6,151,4],[191,7,151,5],[191,8,151,6],[192,6,153,4,"_defineProperty"],[192,21,153,19],[192,22,153,20],[192,26,153,24],[192,28,153,26],[192,55,153,53],[192,57,153,55],[192,58,153,56],[193,8,154,6,"nativeEvent"],[194,6,155,4],[194,7,155,5],[194,12,155,10],[195,8,156,6],[195,12,156,10,"nativeEvent"],[195,23,156,21],[195,24,156,22,"oldState"],[195,32,156,30],[195,37,156,35,"State"],[195,43,156,40],[195,44,156,40,"State"],[195,49,156,40],[195,50,156,41,"ACTIVE"],[195,56,156,47],[195,58,156,49],[196,10,157,8],[196,14,157,12],[196,15,157,13,"handleRelease"],[196,28,157,26],[196,29,157,27],[197,12,158,10,"nativeEvent"],[198,10,159,8],[198,11,159,9],[198,12,159,10],[199,8,160,6],[199,9,160,7],[199,15,160,13],[199,19,160,17,"nativeEvent"],[199,30,160,28],[199,31,160,29,"state"],[199,36,160,34],[199,41,160,39,"State"],[199,47,160,44],[199,48,160,44,"State"],[199,53,160,44],[199,54,160,45,"ACTIVE"],[199,60,160,51],[199,62,160,53],[200,10,161,8],[200,14,161,12],[200,15,161,13,"emitStateChanged"],[200,31,161,29],[200,32,161,30,"DRAGGING"],[200,40,161,38],[200,42,161,40],[200,47,161,45],[200,48,161,46],[201,10,162,8],[201,14,162,12],[201,15,162,13,"setState"],[201,23,162,21],[201,24,162,22],[202,12,163,10,"drawerState"],[202,23,163,21],[202,25,163,23,"DRAGGING"],[203,10,164,8],[203,11,164,9],[203,12,164,10],[204,10,166,8],[204,14,166,12],[204,18,166,16],[204,19,166,17,"props"],[204,24,166,22],[204,25,166,23,"keyboardDismissMode"],[204,44,166,42],[204,49,166,47],[204,58,166,56],[204,60,166,58],[205,12,167,10,"Keyboard"],[205,20,167,18],[205,21,167,18,"default"],[205,28,167,18],[205,29,167,19,"dismiss"],[205,36,167,26],[205,37,167,27],[205,38,167,28],[206,10,168,8],[207,10,170,8],[207,14,170,12],[207,18,170,16],[207,19,170,17,"props"],[207,24,170,22],[207,25,170,23,"hideStatusBar"],[207,38,170,36],[207,40,170,38],[208,12,171,10,"StatusBar"],[208,21,171,19],[208,22,171,19,"default"],[208,29,171,19],[208,30,171,20,"setHidden"],[208,39,171,29],[208,40,171,30],[208,44,171,34],[208,46,171,36],[208,50,171,40],[208,51,171,41,"props"],[208,56,171,46],[208,57,171,47,"statusBarAnimation"],[208,75,171,65],[208,79,171,69],[208,86,171,76],[208,87,171,77],[209,10,172,8],[210,8,173,6],[211,6,174,4],[211,7,174,5],[211,8,174,6],[212,6,176,4,"_defineProperty"],[212,21,176,19],[212,22,176,20],[212,26,176,24],[212,28,176,26],[212,53,176,51],[212,55,176,53],[212,56,176,54],[213,8,177,6,"nativeEvent"],[214,6,178,4],[214,7,178,5],[214,12,178,10],[215,8,179,6],[215,12,179,10],[215,16,179,14],[215,17,179,15,"drawerShown"],[215,28,179,26],[215,32,179,30,"nativeEvent"],[215,43,179,41],[215,44,179,42,"oldState"],[215,52,179,50],[215,57,179,55,"State"],[215,63,179,60],[215,64,179,60,"State"],[215,69,179,60],[215,70,179,61,"ACTIVE"],[215,76,179,67],[215,80,179,71],[215,84,179,75],[215,85,179,76,"props"],[215,90,179,81],[215,91,179,82,"drawerLockMode"],[215,105,179,96],[215,110,179,101],[215,123,179,114],[215,125,179,116],[216,10,180,8],[216,14,180,12],[216,15,180,13,"closeDrawer"],[216,26,180,24],[216,27,180,25],[216,28,180,26],[217,8,181,6],[218,6,182,4],[218,7,182,5],[218,8,182,6],[219,6,184,4,"_defineProperty"],[219,21,184,19],[219,22,184,20],[219,26,184,24],[219,28,184,26],[219,43,184,41],[219,45,184,43],[219,46,184,44],[220,8,185,6,"nativeEvent"],[221,6,186,4],[221,7,186,5],[221,12,186,10],[222,8,187,6],[222,14,187,12],[223,10,188,8,"drawerWidth"],[223,21,188,19],[224,10,189,8,"drawerPosition"],[224,24,189,22],[225,10,190,8,"drawerType"],[226,8,191,6],[226,9,191,7],[226,12,191,10],[226,16,191,14],[226,17,191,15,"props"],[226,22,191,20],[227,8,192,6],[227,14,192,12],[228,10,193,8,"containerWidth"],[229,8,194,6],[229,9,194,7],[229,12,194,10],[229,16,194,14],[229,17,194,15,"state"],[229,22,194,20],[230,8,195,6],[230,12,195,10],[231,10,196,8,"translationX"],[231,22,196,20],[231,24,196,22,"dragX"],[231,29,196,27],[232,10,197,8,"velocityX"],[232,19,197,17],[233,10,198,8,"x"],[233,11,198,9],[233,13,198,11,"touchX"],[234,8,199,6],[234,9,199,7],[234,12,199,10,"nativeEvent"],[234,23,199,21],[235,8,201,6],[235,12,201,10,"drawerPosition"],[235,26,201,24],[235,31,201,29],[235,37,201,35],[235,39,201,37],[236,10,202,8],[237,10,203,8],[238,10,204,8,"dragX"],[238,15,204,13],[238,18,204,16],[238,19,204,17,"dragX"],[238,24,204,22],[239,10,205,8,"touchX"],[239,16,205,14],[239,19,205,17,"containerWidth"],[239,33,205,31],[239,36,205,34,"touchX"],[239,42,205,40],[240,10,206,8,"velocityX"],[240,19,206,17],[240,22,206,20],[240,23,206,21,"velocityX"],[240,32,206,30],[241,8,207,6],[242,8,209,6],[242,14,209,12,"gestureStartX"],[242,27,209,25],[242,30,209,28,"touchX"],[242,36,209,34],[242,39,209,37,"dragX"],[242,44,209,42],[243,8,210,6],[243,12,210,10,"dragOffsetBasedOnStart"],[243,34,210,32],[243,37,210,35],[243,38,210,36],[244,8,212,6],[244,12,212,10,"drawerType"],[244,22,212,20],[244,27,212,25],[244,34,212,32],[244,36,212,34],[245,10,213,8,"dragOffsetBasedOnStart"],[245,32,213,30],[245,35,213,33,"gestureStartX"],[245,48,213,46],[245,51,213,49,"drawerWidth"],[245,62,213,60],[245,65,213,63,"gestureStartX"],[245,78,213,76],[245,81,213,79,"drawerWidth"],[245,92,213,90],[245,95,213,93],[245,96,213,94],[246,8,214,6],[247,8,216,6],[247,14,216,12,"startOffsetX"],[247,26,216,24],[247,29,216,27,"dragX"],[247,34,216,32],[247,37,216,35,"dragOffsetBasedOnStart"],[247,59,216,57],[247,63,216,61],[247,67,216,65],[247,68,216,66,"drawerShown"],[247,79,216,77],[247,82,216,80,"drawerWidth"],[247,93,216,91],[247,96,216,94],[247,97,216,95],[247,98,216,96],[248,8,217,6],[248,14,217,12,"projOffsetX"],[248,25,217,23],[248,28,217,26,"startOffsetX"],[248,40,217,38],[248,43,217,41,"DRAG_TOSS"],[248,52,217,50],[248,55,217,53,"velocityX"],[248,64,217,62],[249,8,218,6],[249,14,218,12,"shouldOpen"],[249,24,218,22],[249,27,218,25,"projOffsetX"],[249,38,218,36],[249,41,218,39,"drawerWidth"],[249,52,218,50],[249,55,218,53],[249,56,218,54],[250,8,220,6],[250,12,220,10,"shouldOpen"],[250,22,220,20],[250,24,220,22],[251,10,221,8],[251,14,221,12],[251,15,221,13,"animateDrawer"],[251,28,221,26],[251,29,221,27,"startOffsetX"],[251,41,221,39],[251,43,221,41,"drawerWidth"],[251,54,221,52],[251,56,221,54,"velocityX"],[251,65,221,63],[251,66,221,64],[252,8,222,6],[252,9,222,7],[252,15,222,13],[253,10,223,8],[253,14,223,12],[253,15,223,13,"animateDrawer"],[253,28,223,26],[253,29,223,27,"startOffsetX"],[253,41,223,39],[253,43,223,41],[253,44,223,42],[253,46,223,44,"velocityX"],[253,55,223,53],[253,56,223,54],[254,8,224,6],[255,6,225,4],[255,7,225,5],[255,8,225,6],[256,6,227,4,"_defineProperty"],[256,21,227,19],[256,22,227,20],[256,26,227,24],[256,28,227,26],[256,43,227,41],[256,45,227,43,"showing"],[256,52,227,50],[256,56,227,54],[257,8,228,6],[257,12,228,10,"_this$accessibilityIs"],[257,33,228,31],[257,35,228,33,"_this$pointerEventsVi"],[257,56,228,54],[257,58,228,56,"_this$panGestureHandl"],[257,79,228,77],[258,8,230,6],[258,12,230,10],[258,13,230,11,"drawerShown"],[258,24,230,22],[258,27,230,25,"showing"],[258,34,230,32],[259,8,231,6],[259,9,231,7,"_this$accessibilityIs"],[259,30,231,28],[259,33,231,31],[259,37,231,35],[259,38,231,36,"accessibilityIsModalView"],[259,62,231,60],[259,63,231,61,"current"],[259,70,231,68],[259,76,231,74],[259,80,231,78],[259,84,231,82,"_this$accessibilityIs"],[259,105,231,103],[259,110,231,108],[259,115,231,113],[259,116,231,114],[259,119,231,117],[259,124,231,122],[259,125,231,123],[259,128,231,126,"_this$accessibilityIs"],[259,149,231,147],[259,150,231,148,"setNativeProps"],[259,164,231,162],[259,165,231,163],[260,10,232,8,"accessibilityViewIsModal"],[260,34,232,32],[260,36,232,34,"showing"],[261,8,233,6],[261,9,233,7],[261,10,233,8],[262,8,234,6],[262,9,234,7,"_this$pointerEventsVi"],[262,30,234,28],[262,33,234,31],[262,37,234,35],[262,38,234,36,"pointerEventsView"],[262,55,234,53],[262,56,234,54,"current"],[262,63,234,61],[262,69,234,67],[262,73,234,71],[262,77,234,75,"_this$pointerEventsVi"],[262,98,234,96],[262,103,234,101],[262,108,234,106],[262,109,234,107],[262,112,234,110],[262,117,234,115],[262,118,234,116],[262,121,234,119,"_this$pointerEventsVi"],[262,142,234,140],[262,143,234,141,"setNativeProps"],[262,157,234,155],[262,158,234,156],[263,10,235,8,"pointerEvents"],[263,23,235,21],[263,25,235,23,"showing"],[263,32,235,30],[263,35,235,33],[263,41,235,39],[263,44,235,42],[264,8,236,6],[264,9,236,7],[264,10,236,8],[265,8,237,6],[265,14,237,12],[266,10,238,8,"drawerPosition"],[266,24,238,22],[267,10,239,8,"minSwipeDistance"],[267,26,239,24],[268,10,240,8,"edgeWidth"],[269,8,241,6],[269,9,241,7],[269,12,241,10],[269,16,241,14],[269,17,241,15,"props"],[269,22,241,20],[270,8,242,6],[270,14,242,12,"fromLeft"],[270,22,242,20],[270,25,242,23,"drawerPosition"],[270,39,242,37],[270,44,242,42],[270,50,242,48],[270,51,242,49],[270,52,242,50],[271,8,243,6],[272,8,244,6],[274,8,246,6],[274,14,246,12,"gestureOrientation"],[274,32,246,30],[274,35,246,33],[274,36,246,34,"fromLeft"],[274,44,246,42],[274,47,246,45],[274,48,246,46],[274,51,246,49],[274,52,246,50],[274,53,246,51],[274,58,246,56],[274,62,246,60],[274,63,246,61,"drawerShown"],[274,74,246,72],[274,77,246,75],[274,78,246,76],[274,79,246,77],[274,82,246,80],[274,83,246,81],[274,84,246,82],[274,85,246,83],[274,86,246,84],[275,8,247,6],[276,8,248,6],[278,8,250,6],[278,14,250,12,"hitSlop"],[278,21,250,19],[278,24,250,22,"fromLeft"],[278,32,250,30],[278,35,250,33],[279,10,251,8,"left"],[279,14,251,12],[279,16,251,14],[279,17,251,15],[280,10,252,8,"width"],[280,15,252,13],[280,17,252,15,"showing"],[280,24,252,22],[280,27,252,25,"undefined"],[280,36,252,34],[280,39,252,37,"edgeWidth"],[281,8,253,6],[281,9,253,7],[281,12,253,10],[282,10,254,8,"right"],[282,15,254,13],[282,17,254,15],[282,18,254,16],[283,10,255,8,"width"],[283,15,255,13],[283,17,255,15,"showing"],[283,24,255,22],[283,27,255,25,"undefined"],[283,36,255,34],[283,39,255,37,"edgeWidth"],[284,8,256,6],[284,9,256,7],[284,10,256,8],[284,11,256,9],[286,8,258,6],[286,9,258,7,"_this$panGestureHandl"],[286,30,258,28],[286,33,258,31],[286,37,258,35],[286,38,258,36,"panGestureHandler"],[286,55,258,53],[286,56,258,54,"current"],[286,63,258,61],[286,69,258,67],[286,73,258,71],[286,77,258,75,"_this$panGestureHandl"],[286,98,258,96],[286,103,258,101],[286,108,258,106],[286,109,258,107],[286,112,258,110],[286,117,258,115],[286,118,258,116],[286,121,258,119,"_this$panGestureHandl"],[286,142,258,140],[286,143,258,141,"setNativeProps"],[286,157,258,155],[286,158,258,156],[287,10,259,8,"hitSlop"],[287,17,259,15],[288,10,260,8,"activeOffsetX"],[288,23,260,21],[288,25,260,23,"gestureOrientation"],[288,43,260,41],[288,46,260,44,"minSwipeDistance"],[289,8,261,6],[289,9,261,7],[289,10,261,8],[290,6,262,4],[290,7,262,5],[290,8,262,6],[291,6,264,4,"_defineProperty"],[291,21,264,19],[291,22,264,20],[291,26,264,24],[291,28,264,26],[291,43,264,41],[291,45,264,43],[291,46,264,44,"fromValue"],[291,55,264,53],[291,57,264,55,"toValue"],[291,64,264,62],[291,66,264,64,"velocity"],[291,74,264,72],[291,76,264,74,"speed"],[291,81,264,79],[291,86,264,84],[292,8,265,6],[292,12,265,10],[292,13,265,11,"state"],[292,18,265,16],[292,19,265,17,"dragX"],[292,24,265,22],[292,25,265,23,"setValue"],[292,33,265,31],[292,34,265,32],[292,35,265,33],[292,36,265,34],[293,8,266,6],[293,12,266,10],[293,13,266,11,"state"],[293,18,266,16],[293,19,266,17,"touchX"],[293,25,266,23],[293,26,266,24,"setValue"],[293,34,266,32],[293,35,266,33],[293,39,266,37],[293,40,266,38,"props"],[293,45,266,43],[293,46,266,44,"drawerPosition"],[293,60,266,58],[293,65,266,63],[293,71,266,69],[293,74,266,72],[293,75,266,73],[293,78,266,76],[293,82,266,80],[293,83,266,81,"state"],[293,88,266,86],[293,89,266,87,"containerWidth"],[293,103,266,101],[293,104,266,102],[294,8,268,6],[294,12,268,10,"fromValue"],[294,21,268,19],[294,25,268,23],[294,29,268,27],[294,31,268,29],[295,10,269,8],[295,14,269,12,"nextFramePosition"],[295,31,269,29],[295,34,269,32,"fromValue"],[295,43,269,41],[296,10,271,8],[296,14,271,12],[296,18,271,16],[296,19,271,17,"props"],[296,24,271,22],[296,25,271,23,"useNativeAnimations"],[296,44,271,42],[296,46,271,44],[297,12,272,10],[298,12,273,10],[299,12,274,10],[300,12,275,10],[301,12,276,10],[301,16,276,14,"fromValue"],[301,25,276,23],[301,28,276,26,"toValue"],[301,35,276,33],[301,39,276,37,"velocity"],[301,47,276,45],[301,50,276,48],[301,51,276,49],[301,53,276,51],[302,14,277,12,"nextFramePosition"],[302,31,277,29],[302,34,277,32,"Math"],[302,38,277,36],[302,39,277,37,"min"],[302,42,277,40],[302,43,277,41,"fromValue"],[302,52,277,50],[302,55,277,53,"velocity"],[302,63,277,61],[302,66,277,64],[302,70,277,68],[302,72,277,70,"toValue"],[302,79,277,77],[302,80,277,78],[303,12,278,10],[303,13,278,11],[303,19,278,17],[303,23,278,21,"fromValue"],[303,32,278,30],[303,35,278,33,"toValue"],[303,42,278,40],[303,46,278,44,"velocity"],[303,54,278,52],[303,57,278,55],[303,58,278,56],[303,60,278,58],[304,14,279,12,"nextFramePosition"],[304,31,279,29],[304,34,279,32,"Math"],[304,38,279,36],[304,39,279,37,"max"],[304,42,279,40],[304,43,279,41,"fromValue"],[304,52,279,50],[304,55,279,53,"velocity"],[304,63,279,61],[304,66,279,64],[304,70,279,68],[304,72,279,70,"toValue"],[304,79,279,77],[304,80,279,78],[305,12,280,10],[306,10,281,8],[307,10,283,8],[307,14,283,12],[307,15,283,13,"state"],[307,20,283,18],[307,21,283,19,"drawerTranslation"],[307,38,283,36],[307,39,283,37,"setValue"],[307,47,283,45],[307,48,283,46,"nextFramePosition"],[307,65,283,63],[307,66,283,64],[308,8,284,6],[309,8,286,6],[309,14,286,12,"willShow"],[309,22,286,20],[309,25,286,23,"toValue"],[309,32,286,30],[309,37,286,35],[309,38,286,36],[310,8,287,6],[310,12,287,10],[310,13,287,11,"updateShowing"],[310,26,287,24],[310,27,287,25,"willShow"],[310,35,287,33],[310,36,287,34],[311,8,288,6],[311,12,288,10],[311,13,288,11,"emitStateChanged"],[311,29,288,27],[311,30,288,28,"SETTLING"],[311,38,288,36],[311,40,288,38,"willShow"],[311,48,288,46],[311,49,288,47],[312,8,289,6],[312,12,289,10],[312,13,289,11,"setState"],[312,21,289,19],[312,22,289,20],[313,10,290,8,"drawerState"],[313,21,290,19],[313,23,290,21,"SETTLING"],[314,8,291,6],[314,9,291,7],[314,10,291,8],[315,8,293,6],[315,12,293,10],[315,16,293,14],[315,17,293,15,"props"],[315,22,293,20],[315,23,293,21,"hideStatusBar"],[315,36,293,34],[315,38,293,36],[316,10,294,8,"StatusBar"],[316,19,294,17],[316,20,294,17,"default"],[316,27,294,17],[316,28,294,18,"setHidden"],[316,37,294,27],[316,38,294,28,"willShow"],[316,46,294,36],[316,48,294,38],[316,52,294,42],[316,53,294,43,"props"],[316,58,294,48],[316,59,294,49,"statusBarAnimation"],[316,77,294,67],[316,81,294,71],[316,88,294,78],[316,89,294,79],[317,8,295,6],[318,8,297,6,"Animated"],[318,16,297,14],[318,17,297,14,"default"],[318,24,297,14],[318,25,297,15,"spring"],[318,31,297,21],[318,32,297,22],[318,36,297,26],[318,37,297,27,"state"],[318,42,297,32],[318,43,297,33,"drawerTranslation"],[318,60,297,50],[318,62,297,52],[319,10,298,8,"velocity"],[319,18,298,16],[320,10,299,8,"bounciness"],[320,20,299,18],[320,22,299,20],[320,23,299,21],[321,10,300,8,"toValue"],[321,17,300,15],[322,10,301,8,"useNativeDriver"],[322,25,301,23],[322,27,301,25],[322,31,301,29],[322,32,301,30,"props"],[322,37,301,35],[322,38,301,36,"useNativeAnimations"],[322,57,301,55],[323,10,302,8,"speed"],[323,15,302,13],[323,17,302,15,"speed"],[323,22,302,20],[323,27,302,25],[323,31,302,29],[323,35,302,33,"speed"],[323,40,302,38],[323,45,302,43],[323,50,302,48],[323,51,302,49],[323,54,302,52,"speed"],[323,59,302,57],[323,62,302,60,"undefined"],[324,8,303,6],[324,9,303,7],[324,10,303,8],[324,11,303,9,"start"],[324,16,303,14],[324,17,303,15],[324,18,303,16],[325,10,304,8,"finished"],[326,8,305,6],[326,9,305,7],[326,14,305,12],[327,10,306,8],[327,14,306,12,"finished"],[327,22,306,20],[327,24,306,22],[328,12,307,10],[328,16,307,14],[328,17,307,15,"emitStateChanged"],[328,33,307,31],[328,34,307,32,"IDLE"],[328,38,307,36],[328,40,307,38,"willShow"],[328,48,307,46],[328,49,307,47],[329,12,308,10],[329,16,308,14],[329,17,308,15,"setState"],[329,25,308,23],[329,26,308,24],[330,14,309,12,"drawerOpened"],[330,26,309,24],[330,28,309,26,"willShow"],[331,12,310,10],[331,13,310,11],[331,14,310,12],[332,12,312,10],[332,16,312,14],[332,20,312,18],[332,21,312,19,"state"],[332,26,312,24],[332,27,312,25,"drawerState"],[332,38,312,36],[332,43,312,41,"DRAGGING"],[332,51,312,49],[332,53,312,51],[333,14,313,12],[334,14,314,12],[335,14,315,12],[335,18,315,16],[335,19,315,17,"setState"],[335,27,315,25],[335,28,315,26],[336,16,316,14,"drawerState"],[336,27,316,25],[336,29,316,27,"IDLE"],[337,14,317,12],[337,15,317,13],[337,16,317,14],[338,12,318,10],[339,12,320,10],[339,16,320,14,"willShow"],[339,24,320,22],[339,26,320,24],[340,14,321,12],[340,18,321,16,"_this$props$onDrawerO"],[340,39,321,37],[340,41,321,39,"_this$props3"],[340,53,321,51],[341,14,323,12],[341,15,323,13,"_this$props$onDrawerO"],[341,36,323,34],[341,39,323,37],[341,40,323,38,"_this$props3"],[341,52,323,50],[341,55,323,53],[341,59,323,57],[341,60,323,58,"props"],[341,65,323,63],[341,67,323,65,"onDrawerOpen"],[341,79,323,77],[341,85,323,83],[341,89,323,87],[341,93,323,91,"_this$props$onDrawerO"],[341,114,323,112],[341,119,323,117],[341,124,323,122],[341,125,323,123],[341,128,323,126],[341,133,323,131],[341,134,323,132],[341,137,323,135,"_this$props$onDrawerO"],[341,158,323,156],[341,159,323,157,"call"],[341,163,323,161],[341,164,323,162,"_this$props3"],[341,176,323,174],[341,177,323,175],[342,12,324,10],[342,13,324,11],[342,19,324,17],[343,14,325,12],[343,18,325,16,"_this$props$onDrawerC"],[343,39,325,37],[343,41,325,39,"_this$props4"],[343,53,325,51],[344,14,327,12],[344,15,327,13,"_this$props$onDrawerC"],[344,36,327,34],[344,39,327,37],[344,40,327,38,"_this$props4"],[344,52,327,50],[344,55,327,53],[344,59,327,57],[344,60,327,58,"props"],[344,65,327,63],[344,67,327,65,"onDrawerClose"],[344,80,327,78],[344,86,327,84],[344,90,327,88],[344,94,327,92,"_this$props$onDrawerC"],[344,115,327,113],[344,120,327,118],[344,125,327,123],[344,126,327,124],[344,129,327,127],[344,134,327,132],[344,135,327,133],[344,138,327,136,"_this$props$onDrawerC"],[344,159,327,157],[344,160,327,158,"call"],[344,164,327,162],[344,165,327,163,"_this$props4"],[344,177,327,175],[344,178,327,176],[345,12,328,10],[346,10,329,8],[347,8,330,6],[347,9,330,7],[347,10,330,8],[348,6,331,4],[348,7,331,5],[348,8,331,6],[349,6,333,4,"_defineProperty"],[349,21,333,19],[349,22,333,20],[349,26,333,24],[349,28,333,26],[349,40,333,38],[349,42,333,40],[349,43,333,41,"options"],[349,50,333,48],[349,53,333,51],[349,54,333,52],[349,55,333,53],[349,60,333,58],[350,8,334,6],[350,12,334,10],[350,13,334,11,"animateDrawer"],[350,26,334,24],[351,8,334,26],[352,8,335,6,"undefined"],[352,17,335,15],[352,19,335,17],[352,23,335,21],[352,24,335,22,"props"],[352,29,335,27],[352,30,335,28,"drawerWidth"],[352,41,335,39],[352,43,335,41,"options"],[352,50,335,48],[352,51,335,49,"velocity"],[352,59,335,57],[352,62,335,60,"options"],[352,69,335,67],[352,70,335,68,"velocity"],[352,78,335,76],[352,81,335,79],[352,82,335,80],[352,84,335,82,"options"],[352,91,335,89],[352,92,335,90,"speed"],[352,97,335,95],[352,98,335,96],[352,99,335,97],[352,100,335,98],[353,8,336,6],[355,8,338,6],[355,12,338,10],[355,13,338,11,"forceUpdate"],[355,24,338,22],[355,25,338,23],[355,26,338,24],[356,6,339,4],[356,7,339,5],[356,8,339,6],[357,6,341,4,"_defineProperty"],[357,21,341,19],[357,22,341,20],[357,26,341,24],[357,28,341,26],[357,41,341,39],[357,43,341,41],[357,44,341,42,"options"],[357,51,341,49],[357,54,341,52],[357,55,341,53],[357,56,341,54],[357,61,341,59],[358,8,342,6],[359,8,343,6],[359,12,343,10],[359,13,343,11,"animateDrawer"],[359,26,343,24],[359,27,343,25,"undefined"],[359,36,343,34],[359,38,343,36],[359,39,343,37],[359,41,343,39,"options"],[359,48,343,46],[359,49,343,47,"velocity"],[359,57,343,55],[359,60,343,58,"options"],[359,67,343,65],[359,68,343,66,"velocity"],[359,76,343,74],[359,79,343,77],[359,80,343,78],[359,82,343,80,"options"],[359,89,343,87],[359,90,343,88,"speed"],[359,95,343,93],[359,96,343,94],[359,97,343,95],[359,98,343,96],[360,8,344,6],[362,8,346,6],[362,12,346,10],[362,13,346,11,"forceUpdate"],[362,24,346,22],[362,25,346,23],[362,26,346,24],[363,6,347,4],[363,7,347,5],[363,8,347,6],[364,6,349,4,"_defineProperty"],[364,21,349,19],[364,22,349,20],[364,26,349,24],[364,28,349,26],[364,43,349,41],[364,45,349,43],[364,51,349,49],[365,8,350,6],[366,8,351,6],[366,12,351,6,"invariant"],[366,21,351,15],[366,22,351,15,"default"],[366,29,351,15],[366,31,351,16],[366,35,351,20],[366,36,351,21,"openValue"],[366,45,351,30],[366,47,351,32],[366,62,351,47],[366,63,351,48],[367,8,352,6],[367,12,352,10,"overlayOpacity"],[367,26,352,24],[368,8,354,6],[368,12,354,10],[368,16,354,14],[368,17,354,15,"state"],[368,22,354,20],[368,23,354,21,"drawerState"],[368,34,354,32],[368,39,354,37,"IDLE"],[368,43,354,41],[368,45,354,43],[369,10,355,8,"overlayOpacity"],[369,24,355,22],[369,27,355,25],[369,31,355,29],[369,32,355,30,"openValue"],[369,41,355,39],[370,8,356,6],[370,9,356,7],[370,15,356,13],[371,10,357,8,"overlayOpacity"],[371,24,357,22],[371,27,357,25],[371,31,357,29],[371,32,357,30,"state"],[371,37,357,35],[371,38,357,36,"drawerOpened"],[371,50,357,48],[371,53,357,51],[371,54,357,52],[371,57,357,55],[371,58,357,56],[372,8,358,6],[373,8,360,6],[373,14,360,12,"dynamicOverlayStyles"],[373,34,360,32],[373,37,360,35],[374,10,361,8,"opacity"],[374,17,361,15],[374,19,361,17,"overlayOpacity"],[374,33,361,31],[375,10,362,8,"backgroundColor"],[375,25,362,23],[375,27,362,25],[375,31,362,29],[375,32,362,30,"props"],[375,37,362,35],[375,38,362,36,"overlayColor"],[376,8,363,6],[376,9,363,7],[377,8,364,6],[377,15,364,13],[377,28,364,26,"React"],[377,33,364,31],[377,34,364,32,"createElement"],[377,47,364,45],[377,48,364,46,"TapGestureHandler"],[377,74,364,63],[377,75,364,63,"TapGestureHandler"],[377,92,364,63],[377,94,364,65],[378,10,365,8,"onHandlerStateChange"],[378,30,365,28],[378,32,365,30],[378,36,365,34],[378,37,365,35,"onTapHandlerStateChange"],[379,8,366,6],[379,9,366,7],[379,11,366,9],[379,24,366,22,"React"],[379,29,366,27],[379,30,366,28,"createElement"],[379,43,366,41],[379,44,366,42,"Animated"],[379,52,366,50],[379,53,366,50,"default"],[379,60,366,50],[379,61,366,51,"View"],[379,65,366,55],[379,67,366,57],[380,10,367,8,"pointerEvents"],[380,23,367,21],[380,25,367,23],[380,29,367,27],[380,30,367,28,"drawerShown"],[380,41,367,39],[380,44,367,42],[380,50,367,48],[380,53,367,51],[380,59,367,57],[381,10,368,8,"ref"],[381,13,368,11],[381,15,368,13],[381,19,368,17],[381,20,368,18,"pointerEventsView"],[381,37,368,35],[382,10,369,8,"style"],[382,15,369,13],[382,17,369,15],[382,18,369,16,"styles"],[382,24,369,22],[382,25,369,23,"overlay"],[382,32,369,30],[382,34,369,32,"dynamicOverlayStyles"],[382,54,369,52],[383,8,370,6],[383,9,370,7],[383,10,370,8],[383,11,370,9],[384,6,371,4],[384,7,371,5],[384,8,371,6],[385,6,373,4,"_defineProperty"],[385,21,373,19],[385,22,373,20],[385,26,373,24],[385,28,373,26],[385,42,373,40],[385,44,373,42],[385,50,373,48],[386,8,374,6],[386,14,374,12],[387,10,375,8,"drawerBackgroundColor"],[387,31,375,29],[388,10,376,8,"drawerWidth"],[388,21,376,19],[389,10,377,8,"drawerPosition"],[389,24,377,22],[390,10,378,8,"drawerType"],[390,20,378,18],[391,10,379,8,"drawerContainerStyle"],[391,30,379,28],[392,10,380,8,"contentContainerStyle"],[393,8,381,6],[393,9,381,7],[393,12,381,10],[393,16,381,14],[393,17,381,15,"props"],[393,22,381,20],[394,8,382,6],[394,14,382,12,"fromLeft"],[394,22,382,20],[394,25,382,23,"drawerPosition"],[394,39,382,37],[394,44,382,42],[394,50,382,48],[395,8,383,6],[395,14,383,12,"drawerSlide"],[395,25,383,23],[395,28,383,26,"drawerType"],[395,38,383,36],[395,43,383,41],[395,49,383,47],[396,8,384,6],[396,14,384,12,"containerSlide"],[396,28,384,26],[396,31,384,29,"drawerType"],[396,41,384,39],[396,46,384,44],[396,53,384,51],[396,54,384,52],[396,55,384,53],[397,8,385,6],[398,8,386,6],[399,8,387,6],[401,8,389,6],[401,14,389,12,"reverseContentDirection"],[401,37,389,35],[401,40,389,38,"I18nManager"],[401,51,389,49],[401,52,389,49,"default"],[401,59,389,49],[401,60,389,50,"isRTL"],[401,65,389,55],[401,68,389,58,"fromLeft"],[401,76,389,66],[401,79,389,69],[401,80,389,70,"fromLeft"],[401,88,389,78],[402,8,390,6],[402,14,390,12,"dynamicDrawerStyles"],[402,33,390,31],[402,36,390,34],[403,10,391,8,"backgroundColor"],[403,25,391,23],[403,27,391,25,"drawerBackgroundColor"],[403,48,391,46],[404,10,392,8,"width"],[404,15,392,13],[404,17,392,15,"drawerWidth"],[405,8,393,6],[405,9,393,7],[406,8,394,6],[406,14,394,12,"openValue"],[406,23,394,21],[406,26,394,24],[406,30,394,28],[406,31,394,29,"openValue"],[406,40,394,38],[407,8,395,6],[407,12,395,6,"invariant"],[407,21,395,15],[407,22,395,15,"default"],[407,29,395,15],[407,31,395,16,"openValue"],[407,40,395,25],[407,42,395,27],[407,57,395,42],[407,58,395,43],[408,8,396,6],[408,12,396,10,"containerStyles"],[408,27,396,25],[409,8,398,6],[409,12,398,10,"containerSlide"],[409,26,398,24],[409,28,398,26],[410,10,399,8],[410,16,399,14,"containerTranslateX"],[410,35,399,33],[410,38,399,36,"openValue"],[410,47,399,45],[410,48,399,46,"interpolate"],[410,59,399,57],[410,60,399,58],[411,12,400,10,"inputRange"],[411,22,400,20],[411,24,400,22],[411,25,400,23],[411,26,400,24],[411,28,400,26],[411,29,400,27],[411,30,400,28],[412,12,401,10,"outputRange"],[412,23,401,21],[412,25,401,23,"fromLeft"],[412,33,401,31],[412,36,401,34],[412,37,401,35],[412,38,401,36],[412,40,401,38,"drawerWidth"],[412,51,401,49],[412,52,401,50],[412,55,401,53],[412,56,401,54],[412,57,401,55],[412,59,401,57],[412,60,401,58,"drawerWidth"],[412,71,401,69],[412,72,401,70],[413,12,402,10,"extrapolate"],[413,23,402,21],[413,25,402,23],[414,10,403,8],[414,11,403,9],[414,12,403,10],[415,10,404,8,"containerStyles"],[415,25,404,23],[415,28,404,26],[416,12,405,10,"transform"],[416,21,405,19],[416,23,405,21],[416,24,405,22],[417,14,406,12,"translateX"],[417,24,406,22],[417,26,406,24,"containerTranslateX"],[418,12,407,10],[418,13,407,11],[419,10,408,8],[419,11,408,9],[420,8,409,6],[421,8,411,6],[421,12,411,10,"drawerTranslateX"],[421,28,411,26],[421,31,411,29],[421,32,411,30],[422,8,413,6],[422,12,413,10,"drawerSlide"],[422,23,413,21],[422,25,413,23],[423,10,414,8],[423,16,414,14,"closedDrawerOffset"],[423,34,414,32],[423,37,414,35,"fromLeft"],[423,45,414,43],[423,48,414,46],[423,49,414,47,"drawerWidth"],[423,60,414,58],[423,63,414,61,"drawerWidth"],[423,74,414,72],[424,10,416,8],[424,14,416,12],[424,18,416,16],[424,19,416,17,"state"],[424,24,416,22],[424,25,416,23,"drawerState"],[424,36,416,34],[424,41,416,39,"IDLE"],[424,45,416,43],[424,47,416,45],[425,12,417,10,"drawerTranslateX"],[425,28,417,26],[425,31,417,29,"openValue"],[425,40,417,38],[425,41,417,39,"interpolate"],[425,52,417,50],[425,53,417,51],[426,14,418,12,"inputRange"],[426,24,418,22],[426,26,418,24],[426,27,418,25],[426,28,418,26],[426,30,418,28],[426,31,418,29],[426,32,418,30],[427,14,419,12,"outputRange"],[427,25,419,23],[427,27,419,25],[427,28,419,26,"closedDrawerOffset"],[427,46,419,44],[427,48,419,46],[427,49,419,47],[427,50,419,48],[428,14,420,12,"extrapolate"],[428,25,420,23],[428,27,420,25],[429,12,421,10],[429,13,421,11],[429,14,421,12],[430,10,422,8],[430,11,422,9],[430,17,422,15],[431,12,423,10,"drawerTranslateX"],[431,28,423,26],[431,31,423,29],[431,35,423,33],[431,36,423,34,"state"],[431,41,423,39],[431,42,423,40,"drawerOpened"],[431,54,423,52],[431,57,423,55],[431,58,423,56],[431,61,423,59,"closedDrawerOffset"],[431,79,423,77],[432,10,424,8],[433,8,425,6],[434,8,427,6],[434,14,427,12,"drawerStyles"],[434,26,427,24],[434,29,427,27],[435,10,428,8,"transform"],[435,19,428,17],[435,21,428,19],[435,22,428,20],[436,12,429,10,"translateX"],[436,22,429,20],[436,24,429,22,"drawerTranslateX"],[437,10,430,8],[437,11,430,9],[437,12,430,10],[438,10,431,8,"flexDirection"],[438,23,431,21],[438,25,431,23,"reverseContentDirection"],[438,48,431,46],[438,51,431,49],[438,64,431,62],[438,67,431,65],[439,8,432,6],[439,9,432,7],[440,8,433,6],[440,15,433,13],[440,28,433,26,"React"],[440,33,433,31],[440,34,433,32,"createElement"],[440,47,433,45],[440,48,433,46,"Animated"],[440,56,433,54],[440,57,433,54,"default"],[440,64,433,54],[440,65,433,55,"View"],[440,69,433,59],[440,71,433,61],[441,10,434,8,"style"],[441,15,434,13],[441,17,434,15,"styles"],[441,23,434,21],[441,24,434,22,"main"],[441,28,434,26],[442,10,435,8,"onLayout"],[442,18,435,16],[442,20,435,18],[442,24,435,22],[442,25,435,23,"handleContainerLayout"],[443,8,436,6],[443,9,436,7],[443,11,436,9],[443,24,436,22,"React"],[443,29,436,27],[443,30,436,28,"createElement"],[443,43,436,41],[443,44,436,42,"Animated"],[443,52,436,50],[443,53,436,50,"default"],[443,60,436,50],[443,61,436,51,"View"],[443,65,436,55],[443,67,436,57],[444,10,437,8,"style"],[444,15,437,13],[444,17,437,15],[444,18,437,16,"drawerType"],[444,28,437,26],[444,33,437,31],[444,40,437,38],[444,43,437,41,"styles"],[444,49,437,47],[444,50,437,48,"containerOnBack"],[444,65,437,63],[444,68,437,66,"styles"],[444,74,437,72],[444,75,437,73,"containerInFront"],[444,91,437,89],[444,93,437,91,"containerStyles"],[444,108,437,106],[444,110,437,108,"contentContainerStyle"],[444,131,437,129],[444,132,437,130],[445,10,438,8,"importantForAccessibility"],[445,35,438,33],[445,37,438,35],[445,41,438,39],[445,42,438,40,"drawerShown"],[445,53,438,51],[445,56,438,54],[445,77,438,75],[445,80,438,78],[446,8,439,6],[446,9,439,7],[446,11,439,9],[446,18,439,16],[446,22,439,20],[446,23,439,21,"props"],[446,28,439,26],[446,29,439,27,"children"],[446,37,439,35],[446,42,439,40],[446,52,439,50],[446,55,439,53],[446,59,439,57],[446,60,439,58,"props"],[446,65,439,63],[446,66,439,64,"children"],[446,74,439,72],[446,75,439,73],[446,79,439,77],[446,80,439,78,"openValue"],[446,89,439,87],[446,90,439,88],[446,93,439,91],[446,97,439,95],[446,98,439,96,"props"],[446,103,439,101],[446,104,439,102,"children"],[446,112,439,110],[446,114,439,112],[446,118,439,116],[446,119,439,117,"renderOverlay"],[446,132,439,130],[446,133,439,131],[446,134,439,132],[446,135,439,133],[446,137,439,135],[446,150,439,148,"React"],[446,155,439,153],[446,156,439,154,"createElement"],[446,169,439,167],[446,170,439,168,"Animated"],[446,178,439,176],[446,179,439,176,"default"],[446,186,439,176],[446,187,439,177,"View"],[446,191,439,181],[446,193,439,183],[447,10,440,8,"pointerEvents"],[447,23,440,21],[447,25,440,23],[447,35,440,33],[448,10,441,8,"ref"],[448,13,441,11],[448,15,441,13],[448,19,441,17],[448,20,441,18,"accessibilityIsModalView"],[448,44,441,42],[449,10,442,8,"accessibilityViewIsModal"],[449,34,442,32],[449,36,442,34],[449,40,442,38],[449,41,442,39,"drawerShown"],[449,52,442,50],[450,10,443,8,"style"],[450,15,443,13],[450,17,443,15],[450,18,443,16,"styles"],[450,24,443,22],[450,25,443,23,"drawerContainer"],[450,40,443,38],[450,42,443,40,"drawerStyles"],[450,54,443,52],[450,56,443,54,"drawerContainerStyle"],[450,76,443,74],[451,8,444,6],[451,9,444,7],[451,11,444,9],[451,24,444,22,"React"],[451,29,444,27],[451,30,444,28,"createElement"],[451,43,444,41],[451,44,444,42,"View"],[451,48,444,46],[451,49,444,46,"default"],[451,56,444,46],[451,58,444,48],[452,10,445,8,"style"],[452,15,445,13],[452,17,445,15,"dynamicDrawerStyles"],[453,8,446,6],[453,9,446,7],[453,11,446,9],[453,15,446,13],[453,16,446,14,"props"],[453,21,446,19],[453,22,446,20,"renderNavigationView"],[453,42,446,40],[453,43,446,41],[453,47,446,45],[453,48,446,46,"openValue"],[453,57,446,55],[453,58,446,56],[453,59,446,57],[453,60,446,58],[453,61,446,59],[454,6,447,4],[454,7,447,5],[454,8,447,6],[455,6,449,4,"_defineProperty"],[455,21,449,19],[455,22,449,20],[455,26,449,24],[455,28,449,26],[455,46,449,44],[455,48,449,46,"ref"],[455,51,449,49],[455,55,449,53],[456,8,450,6],[456,12,450,10,"_this$props$onGesture"],[456,33,450,31],[456,35,450,33,"_this$props5"],[456,47,450,45],[458,8,452,6],[459,8,453,6],[460,8,454,6],[460,12,454,10],[460,13,454,11,"panGestureHandler"],[460,30,454,28],[460,31,454,29,"current"],[460,38,454,36],[460,41,454,39,"ref"],[460,44,454,42],[461,8,455,6],[461,9,455,7,"_this$props$onGesture"],[461,30,455,28],[461,33,455,31],[461,34,455,32,"_this$props5"],[461,46,455,44],[461,49,455,47],[461,53,455,51],[461,54,455,52,"props"],[461,59,455,57],[461,61,455,59,"onGestureRef"],[461,73,455,71],[461,79,455,77],[461,83,455,81],[461,87,455,85,"_this$props$onGesture"],[461,108,455,106],[461,113,455,111],[461,118,455,116],[461,119,455,117],[461,122,455,120],[461,127,455,125],[461,128,455,126],[461,131,455,129,"_this$props$onGesture"],[461,152,455,150],[461,153,455,151,"call"],[461,157,455,155],[461,158,455,156,"_this$props5"],[461,170,455,168],[461,172,455,170,"ref"],[461,175,455,173],[461,176,455,174],[462,6,456,4],[462,7,456,5],[462,8,456,6],[463,6,458,4],[463,12,458,10,"_dragX"],[463,18,458,16],[463,21,458,19],[463,25,458,23,"Animated"],[463,33,458,31],[463,34,458,31,"default"],[463,41,458,31],[463,42,458,32,"Value"],[463,47,458,37],[463,48,458,38],[463,49,458,39],[463,50,458,40],[464,6,460,4],[464,12,460,10,"_touchX"],[464,19,460,17],[464,22,460,20],[464,26,460,24,"Animated"],[464,34,460,32],[464,35,460,32,"default"],[464,42,460,32],[464,43,460,33,"Value"],[464,48,460,38],[464,49,460,39],[464,50,460,40],[464,51,460,41],[465,6,462,4],[465,12,462,10,"_drawerTranslation"],[465,30,462,28],[465,33,462,31],[465,37,462,35,"Animated"],[465,45,462,43],[465,46,462,43,"default"],[465,53,462,43],[465,54,462,44,"Value"],[465,59,462,49],[465,60,462,50],[465,61,462,51],[465,62,462,52],[466,6,464,4],[466,10,464,8],[466,11,464,9,"state"],[466,16,464,14],[466,19,464,17],[467,8,465,6,"dragX"],[467,13,465,11],[467,15,465,13,"_dragX"],[467,21,465,19],[468,8,466,6,"touchX"],[468,14,466,12],[468,16,466,14,"_touchX"],[468,23,466,21],[469,8,467,6,"drawerTranslation"],[469,25,467,23],[469,27,467,25,"_drawerTranslation"],[469,45,467,43],[470,8,468,6,"containerWidth"],[470,22,468,20],[470,24,468,22],[470,25,468,23],[471,8,469,6,"drawerState"],[471,19,469,17],[471,21,469,19,"IDLE"],[471,25,469,23],[472,8,470,6,"drawerOpened"],[472,20,470,18],[472,22,470,20],[473,6,471,4],[473,7,471,5],[474,6,472,4],[474,10,472,8],[474,11,472,9,"updateAnimatedEvent"],[474,30,472,28],[474,31,472,29,"_props"],[474,37,472,35],[474,39,472,37],[474,43,472,41],[474,44,472,42,"state"],[474,49,472,47],[474,50,472,48],[475,4,473,2],[476,4,475,2,"shouldComponentUpdate"],[476,25,475,23,"shouldComponentUpdate"],[476,26,475,24,"props"],[476,31,475,29],[476,33,475,31,"state"],[476,38,475,36],[476,40,475,38],[477,6,476,4],[477,10,476,8],[477,14,476,12],[477,15,476,13,"props"],[477,20,476,18],[477,21,476,19,"drawerPosition"],[477,35,476,33],[477,40,476,38,"props"],[477,45,476,43],[477,46,476,44,"drawerPosition"],[477,60,476,58],[477,64,476,62],[477,68,476,66],[477,69,476,67,"props"],[477,74,476,72],[477,75,476,73,"drawerWidth"],[477,86,476,84],[477,91,476,89,"props"],[477,96,476,94],[477,97,476,95,"drawerWidth"],[477,108,476,106],[477,112,476,110],[477,116,476,114],[477,117,476,115,"props"],[477,122,476,120],[477,123,476,121,"drawerType"],[477,133,476,131],[477,138,476,136,"props"],[477,143,476,141],[477,144,476,142,"drawerType"],[477,154,476,152],[477,158,476,156],[477,162,476,160],[477,163,476,161,"state"],[477,168,476,166],[477,169,476,167,"containerWidth"],[477,183,476,181],[477,188,476,186,"state"],[477,193,476,191],[477,194,476,192,"containerWidth"],[477,208,476,206],[477,210,476,208],[478,8,477,6],[478,12,477,10],[478,13,477,11,"updateAnimatedEvent"],[478,32,477,30],[478,33,477,31,"props"],[478,38,477,36],[478,40,477,38,"state"],[478,45,477,43],[478,46,477,44],[479,6,478,4],[480,6,480,4],[480,13,480,11],[480,17,480,15],[481,4,481,2],[482,4,483,2,"render"],[482,10,483,8,"render"],[482,11,483,8],[482,13,483,11],[483,6,484,4],[483,12,484,10],[484,8,485,6,"drawerPosition"],[484,22,485,20],[485,8,486,6,"drawerLockMode"],[485,22,486,20],[486,8,487,6,"edgeWidth"],[486,17,487,15],[487,8,488,6,"minSwipeDistance"],[488,6,489,4],[488,7,489,5],[488,10,489,8],[488,14,489,12],[488,15,489,13,"props"],[488,20,489,18],[489,6,490,4],[489,12,490,10,"fromLeft"],[489,20,490,18],[489,23,490,21,"drawerPosition"],[489,37,490,35],[489,42,490,40],[489,48,490,46],[489,49,490,47],[489,50,490,48],[490,6,491,4],[491,6,492,4],[493,6,494,4],[493,12,494,10,"gestureOrientation"],[493,30,494,28],[493,33,494,31],[493,34,494,32,"fromLeft"],[493,42,494,40],[493,45,494,43],[493,46,494,44],[493,49,494,47],[493,50,494,48],[493,51,494,49],[493,56,494,54],[493,60,494,58],[493,61,494,59,"drawerShown"],[493,72,494,70],[493,75,494,73],[493,76,494,74],[493,77,494,75],[493,80,494,78],[493,81,494,79],[493,82,494,80],[493,83,494,81],[493,84,494,82],[494,6,495,4],[495,6,496,4],[497,6,498,4],[497,12,498,10,"hitSlop"],[497,19,498,17],[497,22,498,20,"fromLeft"],[497,30,498,28],[497,33,498,31],[498,8,499,6,"left"],[498,12,499,10],[498,14,499,12],[498,15,499,13],[499,8,500,6,"width"],[499,13,500,11],[499,15,500,13],[499,19,500,17],[499,20,500,18,"drawerShown"],[499,31,500,29],[499,34,500,32,"undefined"],[499,43,500,41],[499,46,500,44,"edgeWidth"],[500,6,501,4],[500,7,501,5],[500,10,501,8],[501,8,502,6,"right"],[501,13,502,11],[501,15,502,13],[501,16,502,14],[502,8,503,6,"width"],[502,13,503,11],[502,15,503,13],[502,19,503,17],[502,20,503,18,"drawerShown"],[502,31,503,29],[502,34,503,32,"undefined"],[502,43,503,41],[502,46,503,44,"edgeWidth"],[503,6,504,4],[503,7,504,5],[504,6,505,4],[504,13,505,11],[504,26,505,24,"React"],[504,31,505,29],[504,32,505,30,"createElement"],[504,45,505,43],[504,46,505,44,"PanGestureHandler"],[504,72,505,61],[504,73,505,61,"PanGestureHandler"],[504,90,505,61],[504,91,505,62],[505,6,505,62],[505,8,506,6],[506,8,507,6,"userSelect"],[506,18,507,16],[506,20,507,18],[506,24,507,22],[506,25,507,23,"props"],[506,30,507,28],[506,31,507,29,"userSelect"],[506,41,507,39],[507,8,508,6,"activeCursor"],[507,20,508,18],[507,22,508,20],[507,26,508,24],[507,27,508,25,"props"],[507,32,508,30],[507,33,508,31,"activeCursor"],[507,45,508,43],[508,8,509,6,"mouseButton"],[508,19,509,17],[508,21,509,19],[508,25,509,23],[508,26,509,24,"props"],[508,31,509,29],[508,32,509,30,"mouseButton"],[508,43,509,41],[509,8,510,6,"enableContextMenu"],[509,25,510,23],[509,27,510,25],[509,31,510,29],[509,32,510,30,"props"],[509,37,510,35],[509,38,510,36,"enableContextMenu"],[509,55,510,53],[510,8,511,6,"ref"],[510,11,511,9],[510,13,511,11],[510,17,511,15],[510,18,511,16,"setPanGestureRef"],[510,34,511,32],[511,8,512,6,"hitSlop"],[511,15,512,13],[511,17,512,15,"hitSlop"],[511,24,512,22],[512,8,513,6,"activeOffsetX"],[512,21,513,19],[512,23,513,21,"gestureOrientation"],[512,41,513,39],[512,44,513,42,"minSwipeDistance"],[512,60,513,58],[513,8,514,6,"failOffsetY"],[513,19,514,17],[513,21,514,19],[513,22,514,20],[513,23,514,21],[513,25,514,23],[513,27,514,25],[513,29,514,27],[513,30,514,28],[514,8,515,6,"onGestureEvent"],[514,22,515,20],[514,24,515,22],[514,28,515,26],[514,29,515,27,"onGestureEvent"],[514,43,515,41],[515,8,516,6,"onHandlerStateChange"],[515,28,516,26],[515,30,516,28],[515,34,516,32],[515,35,516,33,"openingHandlerStateChange"],[515,60,516,58],[516,8,517,6,"enableTrackpadTwoFingerGesture"],[516,38,517,36],[516,40,517,38],[516,44,517,42],[516,45,517,43,"props"],[516,50,517,48],[516,51,517,49,"enableTrackpadTwoFingerGesture"],[516,81,517,79],[517,8,518,6,"enabled"],[517,15,518,13],[517,17,518,15,"drawerLockMode"],[517,31,518,29],[517,36,518,34],[517,51,518,49],[517,55,518,53,"drawerLockMode"],[517,69,518,67],[517,74,518,72],[518,6,519,4],[518,7,519,5],[518,9,519,7],[518,13,519,11],[518,14,519,12,"renderDrawer"],[518,26,519,24],[518,27,519,25],[518,28,519,26],[518,29,519,27],[519,4,520,2],[520,2,522,0],[521,2,524,0,"_defineProperty"],[521,17,524,15],[521,18,524,16,"DrawerLayout"],[521,30,524,28],[521,32,524,30],[521,46,524,44],[521,48,524,46],[522,4,525,2,"drawerWidth"],[522,15,525,13],[522,17,525,15],[522,20,525,18],[523,4,526,2,"drawerPosition"],[523,18,526,16],[523,20,526,18],[523,26,526,24],[524,4,527,2,"useNativeAnimations"],[524,23,527,21],[524,25,527,23],[524,29,527,27],[525,4,528,2,"drawerType"],[525,14,528,12],[525,16,528,14],[525,23,528,21],[526,4,529,2,"edgeWidth"],[526,13,529,11],[526,15,529,13],[526,17,529,15],[527,4,530,2,"minSwipeDistance"],[527,20,530,18],[527,22,530,20],[527,23,530,21],[528,4,531,2,"overlayColor"],[528,16,531,14],[528,18,531,16],[528,38,531,36],[529,4,532,2,"drawerLockMode"],[529,18,532,16],[529,20,532,18],[529,30,532,28],[530,4,533,2,"enableTrackpadTwoFingerGesture"],[530,34,533,32],[530,36,533,34],[531,2,534,0],[531,3,534,1],[531,4,534,2],[532,2,536,0,"_defineProperty"],[532,17,536,15],[532,18,536,16,"DrawerLayout"],[532,30,536,28],[532,32,536,30],[532,43,536,41],[532,45,536,43],[533,4,537,2,"Left"],[533,8,537,6],[533,10,537,8],[533,16,537,14],[534,4,538,2,"Right"],[534,9,538,7],[534,11,538,9],[535,2,539,0],[535,3,539,1],[535,4,539,2],[536,2,541,0],[536,8,541,6,"styles"],[536,14,541,12],[536,17,541,15,"StyleSheet"],[536,27,541,25],[536,28,541,25,"default"],[536,35,541,25],[536,36,541,26,"create"],[536,42,541,32],[536,43,541,33],[537,4,542,2,"drawerContainer"],[537,19,542,17],[537,21,542,17,"Object"],[537,27,542,17],[537,28,542,17,"assign"],[537,34,542,17],[537,39,542,24,"StyleSheet"],[537,49,542,34],[537,50,542,34,"default"],[537,57,542,34],[537,58,542,35,"absoluteFillObject"],[537,76,542,53],[538,6,543,4,"zIndex"],[538,12,543,10],[538,14,543,12],[538,18,543,16],[539,6,544,4,"flexDirection"],[539,19,544,17],[539,21,544,19],[540,4,544,24],[540,6,545,3],[541,4,546,2,"containerInFront"],[541,20,546,18],[541,22,546,18,"Object"],[541,28,546,18],[541,29,546,18,"assign"],[541,35,546,18],[541,40,546,25,"StyleSheet"],[541,50,546,35],[541,51,546,35,"default"],[541,58,546,35],[541,59,546,36,"absoluteFillObject"],[541,77,546,54],[542,6,547,4,"zIndex"],[542,12,547,10],[542,14,547,12],[543,4,547,16],[543,6,548,3],[544,4,549,2,"containerOnBack"],[544,19,549,17],[544,21,549,17,"Object"],[544,27,549,17],[544,28,549,17,"assign"],[544,34,549,17],[544,39,549,24,"StyleSheet"],[544,49,549,34],[544,50,549,34,"default"],[544,57,549,34],[544,58,549,35,"absoluteFillObject"],[544,76,549,53],[544,77,550,3],[545,4,551,2,"main"],[545,8,551,6],[545,10,551,8],[546,6,552,4,"flex"],[546,10,552,8],[546,12,552,10],[546,13,552,11],[547,6,553,4,"zIndex"],[547,12,553,10],[547,14,553,12],[547,15,553,13],[548,6,554,4,"overflow"],[548,14,554,12],[548,16,554,14],[549,4,555,2],[549,5,555,3],[550,4,556,2,"overlay"],[550,11,556,9],[550,13,556,9,"Object"],[550,19,556,9],[550,20,556,9,"assign"],[550,26,556,9],[550,31,556,16,"StyleSheet"],[550,41,556,26],[550,42,556,26,"default"],[550,49,556,26],[550,50,556,27,"absoluteFillObject"],[550,68,556,45],[551,6,557,4,"zIndex"],[551,12,557,10],[551,14,557,12],[552,4,557,16],[553,2,559,0],[553,3,559,1],[553,4,559,2],[554,0,559,3],[554,3]],"functionMap":{"names":["_defineProperty","<global>","DrawerLayout","constructor","_defineProperty$argument_2","gestureOptions.listener","Animated.spring.start$argument_0","shouldComponentUpdate","render"],"mappings":"AAA,iNC;eC2B;ECC;iDCe;kCC8E;SDM;KDS;mDCE;KDM;8CCE;KDI;uDCE;KDqB;qDCE;KDM;2CCE;KDyC;2CCE;KDmC;2CCE;eEuC;OF2B;KDC;wCCE;KDM;yCCE;KDM;2CCE;KDsB;0CCE;KD0E;8CCE;KDO;GDiB;EKE;GLM;EME;GNqC;CDE"},"hasCjsExports":false},"type":"js/module"}]}