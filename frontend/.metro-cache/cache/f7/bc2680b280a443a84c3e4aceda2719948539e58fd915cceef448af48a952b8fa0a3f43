{"dependencies":[{"name":"../../handlersRegistry","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":60},"end":{"line":2,"column":57,"index":117}}],"key":"Q8MtNj8/mrt1iN8Kay94o881ERE=","exportNames":["*"],"imports":1}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":118},"end":{"line":3,"column":69,"index":187}}],"key":"2BYIjnTRSFId8SRJ7sJFxLD1BD4=","exportNames":["*"],"imports":1}},{"name":"../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":68,"index":256}}],"key":"ByXat9lt9duIJLDmSeH0V+tRq1s=","exportNames":["*"],"imports":1}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":61,"index":375}}],"key":"6QYiO8x9sAoDBctSRJ19A8sqUNk=","exportNames":["*"],"imports":1}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.updateHandlers = updateHandlers;\n  var _handlersRegistry = require(_dependencyMap[0], \"../../handlersRegistry\");\n  var _RNGestureHandlerModule = require(_dependencyMap[1], \"../../../RNGestureHandlerModule\");\n  var RNGestureHandlerModule = _interopDefault(_RNGestureHandlerModule);\n  var _utils = require(_dependencyMap[2], \"../../utils\");\n  var _ghQueueMicrotask = require(_dependencyMap[3], \"../../../ghQueueMicrotask\");\n  var _utils2 = require(_dependencyMap[4], \"./utils\");\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (var i = 0; i < newGestures.length; i++) {\n      var handler = preparedGesture.attachedGestures[i];\n      (0, _utils2.checkGestureCallbacksForWorklets)(handler);\n\n      // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    }\n\n    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n      if (!preparedGesture.isMounted) {\n        return;\n      }\n\n      // If amount of gesture configs changes, we need to update the callbacks in shared value\n      var shouldUpdateSharedValueIfUsed = preparedGesture.attachedGestures.length !== newGestures.length;\n      for (var _i = 0; _i < newGestures.length; _i++) {\n        var _handler = preparedGesture.attachedGestures[_i];\n\n        // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n        if (_handler.handlers.gestureId !== newGestures[_i].handlers.gestureId && (newGestures[_i].shouldUseReanimated || _handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        _handler.config = newGestures[_i].config;\n        _handler.handlers = newGestures[_i].handlers;\n        RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _utils.filterConfig)(_handler.config, _utils2.ALLOWED_PROPS, (0, _utils2.extractGestureRelations)(_handler)));\n        (0, _handlersRegistry.registerHandler)(_handler.handlerTag, _handler, _handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        var newHandlersValue = preparedGesture.attachedGestures.filter(g => g.shouldUseReanimated) // Ignore gestures that shouldn't run on UI\n        .map(g => g.handlers);\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _utils.scheduleFlushOperations)();\n    });\n  }\n});","lineCount":64,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"updateHandlers"],[12,24,14,0],[12,27,14,0,"updateHandlers"],[12,41,14,0],[13,2,2,0],[13,6,2,0,"_handlersRegistry"],[13,23,2,0],[13,26,2,0,"require"],[13,33,2,0],[13,34,2,0,"_dependencyMap"],[13,48,2,0],[14,2,3,0],[14,6,3,0,"_RNGestureHandlerModule"],[14,29,3,0],[14,32,3,0,"require"],[14,39,3,0],[14,40,3,0,"_dependencyMap"],[14,54,3,0],[15,2,3,0],[15,6,3,0,"RNGestureHandlerModule"],[15,28,3,0],[15,31,3,0,"_interopDefault"],[15,46,3,0],[15,47,3,0,"_RNGestureHandlerModule"],[15,70,3,0],[16,2,4,0],[16,6,4,0,"_utils"],[16,12,4,0],[16,15,4,0,"require"],[16,22,4,0],[16,23,4,0,"_dependencyMap"],[16,37,4,0],[17,2,6,0],[17,6,6,0,"_ghQueueMicrotask"],[17,23,6,0],[17,26,6,0,"require"],[17,33,6,0],[17,34,6,0,"_dependencyMap"],[17,48,6,0],[18,2,8,0],[18,6,8,0,"_utils2"],[18,13,8,0],[18,16,8,0,"require"],[18,23,8,0],[18,24,8,0,"_dependencyMap"],[18,38,8,0],[19,2,14,7],[19,11,14,16,"updateHandlers"],[19,25,14,30,"updateHandlers"],[19,26,15,2,"preparedGesture"],[19,41,15,39],[19,43,16,2,"gestureConfig"],[19,56,16,46],[19,58,17,2,"newGestures"],[19,69,17,28],[19,71,18,2],[20,4,19,2,"gestureConfig"],[20,17,19,15],[20,18,19,16,"prepare"],[20,25,19,23],[20,26,19,24],[20,27,19,25],[21,4,21,2],[21,9,21,7],[21,13,21,11,"i"],[21,14,21,12],[21,17,21,15],[21,18,21,16],[21,20,21,18,"i"],[21,21,21,19],[21,24,21,22,"newGestures"],[21,35,21,33],[21,36,21,34,"length"],[21,42,21,40],[21,44,21,42,"i"],[21,45,21,43],[21,47,21,45],[21,49,21,47],[22,6,22,4],[22,10,22,10,"handler"],[22,17,22,17],[22,20,22,20,"preparedGesture"],[22,35,22,35],[22,36,22,36,"attachedGestures"],[22,52,22,52],[22,53,22,53,"i"],[22,54,22,54],[22,55,22,55],[23,6,23,4],[23,10,23,4,"checkGestureCallbacksForWorklets"],[23,17,23,36],[23,18,23,36,"checkGestureCallbacksForWorklets"],[23,50,23,36],[23,52,23,37,"handler"],[23,59,23,44],[23,60,23,45],[25,6,25,4],[26,6,26,4],[27,6,27,4],[27,10,27,8,"newGestures"],[27,21,27,19],[27,22,27,20,"i"],[27,23,27,21],[27,24,27,22],[27,25,27,23,"handlerTag"],[27,35,27,33],[27,40,27,38,"handler"],[27,47,27,45],[27,48,27,46,"handlerTag"],[27,58,27,56],[27,60,27,58],[28,8,28,6,"newGestures"],[28,19,28,17],[28,20,28,18,"i"],[28,21,28,19],[28,22,28,20],[28,23,28,21,"handlerTag"],[28,33,28,31],[28,36,28,34,"handler"],[28,43,28,41],[28,44,28,42,"handlerTag"],[28,54,28,52],[29,8,29,6,"newGestures"],[29,19,29,17],[29,20,29,18,"i"],[29,21,29,19],[29,22,29,20],[29,23,29,21,"handlers"],[29,31,29,29],[29,32,29,30,"handlerTag"],[29,42,29,40],[29,45,29,43,"handler"],[29,52,29,50],[29,53,29,51,"handlerTag"],[29,63,29,61],[30,6,30,4],[31,4,31,2],[33,4,33,2],[34,4,34,2],[35,4,35,2],[36,4,36,2],[36,8,36,2,"ghQueueMicrotask"],[36,25,36,18],[36,26,36,18,"ghQueueMicrotask"],[36,42,36,18],[36,44,36,19],[36,50,36,25],[37,6,37,4],[37,10,37,8],[37,11,37,9,"preparedGesture"],[37,26,37,24],[37,27,37,25,"isMounted"],[37,36,37,34],[37,38,37,36],[38,8,38,6],[39,6,39,4],[41,6,41,4],[42,6,42,4],[42,10,42,8,"shouldUpdateSharedValueIfUsed"],[42,39,42,37],[42,42,43,6,"preparedGesture"],[42,57,43,21],[42,58,43,22,"attachedGestures"],[42,74,43,38],[42,75,43,39,"length"],[42,81,43,45],[42,86,43,50,"newGestures"],[42,97,43,61],[42,98,43,62,"length"],[42,104,43,68],[43,6,45,4],[43,11,45,9],[43,15,45,13,"i"],[43,17,45,14],[43,20,45,17],[43,21,45,18],[43,23,45,20,"i"],[43,25,45,21],[43,28,45,24,"newGestures"],[43,39,45,35],[43,40,45,36,"length"],[43,46,45,42],[43,48,45,44,"i"],[43,50,45,45],[43,52,45,47],[43,54,45,49],[44,8,46,6],[44,12,46,12,"handler"],[44,20,46,19],[44,23,46,22,"preparedGesture"],[44,38,46,37],[44,39,46,38,"attachedGestures"],[44,55,46,54],[44,56,46,55,"i"],[44,58,46,56],[44,59,46,57],[46,8,48,6],[47,8,49,6],[48,8,50,6],[48,12,51,8,"handler"],[48,20,51,15],[48,21,51,16,"handlers"],[48,29,51,24],[48,30,51,25,"gestureId"],[48,39,51,34],[48,44,51,39,"newGestures"],[48,55,51,50],[48,56,51,51,"i"],[48,58,51,52],[48,59,51,53],[48,60,51,54,"handlers"],[48,68,51,62],[48,69,51,63,"gestureId"],[48,78,51,72],[48,83,52,9,"newGestures"],[48,94,52,20],[48,95,52,21,"i"],[48,97,52,22],[48,98,52,23],[48,99,52,24,"shouldUseReanimated"],[48,118,52,43],[48,122,52,47,"handler"],[48,130,52,54],[48,131,52,55,"shouldUseReanimated"],[48,150,52,74],[48,151,52,75],[48,153,53,8],[49,10,54,8,"shouldUpdateSharedValueIfUsed"],[49,39,54,37],[49,42,54,40],[49,46,54,44],[50,8,55,6],[51,8,57,6,"handler"],[51,16,57,13],[51,17,57,14,"config"],[51,23,57,20],[51,26,57,23,"newGestures"],[51,37,57,34],[51,38,57,35,"i"],[51,40,57,36],[51,41,57,37],[51,42,57,38,"config"],[51,48,57,44],[52,8,58,6,"handler"],[52,16,58,13],[52,17,58,14,"handlers"],[52,25,58,22],[52,28,58,25,"newGestures"],[52,39,58,36],[52,40,58,37,"i"],[52,42,58,38],[52,43,58,39],[52,44,58,40,"handlers"],[52,52,58,48],[53,8,60,6,"RNGestureHandlerModule"],[53,30,60,28],[53,31,60,28,"default"],[53,38,60,28],[53,39,60,29,"updateGestureHandler"],[53,59,60,49],[53,60,61,8,"handler"],[53,68,61,15],[53,69,61,16,"handlerTag"],[53,79,61,26],[53,81,62,8],[53,85,62,8,"filterConfig"],[53,91,62,20],[53,92,62,20,"filterConfig"],[53,104,62,20],[53,106,63,10,"handler"],[53,114,63,17],[53,115,63,18,"config"],[53,121,63,24],[53,123,64,10,"ALLOWED_PROPS"],[53,130,64,23],[53,131,64,23,"ALLOWED_PROPS"],[53,144,64,23],[53,146,65,10],[53,150,65,10,"extractGestureRelations"],[53,157,65,33],[53,158,65,33,"extractGestureRelations"],[53,181,65,33],[53,183,65,34,"handler"],[53,191,65,41],[53,192,66,8],[53,193,67,6],[53,194,67,7],[54,8,69,6],[54,12,69,6,"registerHandler"],[54,29,69,21],[54,30,69,21,"registerHandler"],[54,45,69,21],[54,47,69,22,"handler"],[54,55,69,29],[54,56,69,30,"handlerTag"],[54,66,69,40],[54,68,69,42,"handler"],[54,76,69,49],[54,78,69,51,"handler"],[54,86,69,58],[54,87,69,59,"config"],[54,93,69,65],[54,94,69,66,"testId"],[54,100,69,72],[54,101,69,73],[55,6,70,4],[56,6,72,4],[56,10,72,8,"preparedGesture"],[56,25,72,23],[56,26,72,24,"animatedHandlers"],[56,42,72,40],[56,46,72,44,"shouldUpdateSharedValueIfUsed"],[56,75,72,73],[56,77,72,75],[57,8,73,6],[57,12,73,12,"newHandlersValue"],[57,28,73,28],[57,31,73,31,"preparedGesture"],[57,46,73,46],[57,47,73,47,"attachedGestures"],[57,63,73,63],[57,64,74,9,"filter"],[57,70,74,15],[57,71,74,17,"g"],[57,72,74,18],[57,76,74,23,"g"],[57,77,74,24],[57,78,74,25,"shouldUseReanimated"],[57,97,74,44],[57,98,74,45],[57,99,74,46],[58,8,74,46],[58,9,75,9,"map"],[58,12,75,12],[58,13,75,14,"g"],[58,14,75,15],[58,18,75,20,"g"],[58,19,75,21],[58,20,75,22,"handlers"],[58,28,75,30],[58,29,77,9],[59,8,79,6,"preparedGesture"],[59,23,79,21],[59,24,79,22,"animatedHandlers"],[59,40,79,38],[59,41,79,39,"value"],[59,46,79,44],[59,49,79,47,"newHandlersValue"],[59,65,79,63],[60,6,80,4],[61,6,82,4],[61,10,82,4,"scheduleFlushOperations"],[61,16,82,27],[61,17,82,27,"scheduleFlushOperations"],[61,40,82,27],[61,42,82,28],[61,43,82,29],[62,4,83,2],[62,5,83,3],[62,6,83,4],[63,2,84,0],[64,0,84,1],[64,3]],"functionMap":{"names":["<global>","updateHandlers","ghQueueMicrotask$argument_0","preparedGesture.attachedGestures.filter$argument_0","preparedGesture.attachedGestures.filter.map$argument_0"],"mappings":"AAA;OCa;mBCsB;gBCsC,4BD;aEC,iBF;GDQ;CDC"},"hasCjsExports":false},"type":"js/module"}]}