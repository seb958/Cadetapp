{"dependencies":[{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":39,"index":145},"end":{"line":7,"column":64,"index":170}}],"key":"TIRD4n0vm1viGfriWDBtxYTyDXo=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/index","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"55efhPHw3gz2FoQtoN2yI1VuhbM=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":13,"index":230},"end":{"line":9,"column":32,"index":249}}],"key":"6QJYsgIYyXDoX6Ak1wmI7AHik6U=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":17,"index":268},"end":{"line":10,"column":39,"index":290}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":42,"index":334},"end":{"line":11,"column":66,"index":358}}],"key":"F3nYMqO1jf4y4SLdde+ijNjAXe4=","exportNames":["*"],"imports":1}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":24,"index":385},"end":{"line":12,"column":54,"index":415}}],"key":"S1M4JF0i9x6zcvs3ggNUoVkhnZ0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _hammerjs = _interopRequireDefault(require(_dependencyMap[0], \"@egjs/hammerjs\"));\n  var _reactNative = require(_dependencyMap[1], \"react-native-web/dist/index\");\n  var _State = require(_dependencyMap[2], \"../State\");\n  var _constants = require(_dependencyMap[3], \"./constants\");\n  var NodeManager = _interopRequireWildcard(require(_dependencyMap[4], \"./NodeManager\"));\n  var _ghQueueMicrotask = require(_dependencyMap[5], \"../ghQueueMicrotask\");\n  function _interopRequireWildcard(e, t) {\n    if (\"function\" == typeof WeakMap) var r = new WeakMap(),\n      n = new WeakMap();\n    return (_interopRequireWildcard = function (e, t) {\n      if (!t && e && e.__esModule) return e;\n      var o,\n        i,\n        f = {\n          __proto__: null,\n          default: e\n        };\n      if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f;\n      if (o = t ? n : r) {\n        if (o.has(e)) return o.get(e);\n        o.set(e, f);\n      }\n      for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]);\n      return f;\n    })(e, t);\n  }\n  function _interopRequireDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  /* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable */\n  /* eslint-disable */\n\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\n  let gestureInstances = 0;\n  class GestureHandler {\n    isGestureRunning = false;\n    view = null;\n    hasGestureFailed = false;\n    hammer = null;\n    initialRotation = null;\n    config = {};\n    previousState = _State.State.UNDETERMINED;\n    pendingGestures = {};\n    oldState = _State.State.UNDETERMINED;\n    lastSentState = null;\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    }\n\n    // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    clearSelfAsPending = () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    };\n    updateGestureConfig({\n      enabled = true,\n      ...props\n    }) {\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig({\n        enabled,\n        ...props\n      });\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    destroy = () => {\n      this.clearSelfAsPending();\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n      this.hammer = null;\n    };\n    isPointInView = ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event;\n      // const direction = DirectionMap[ev.direction];\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n\n      // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: {\n          numberOfPointers,\n          state,\n          pointerInside,\n          ...this.transformNativeEvent(event),\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        },\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    sendEvent = nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n\n    // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent({\n        ...event,\n        eventType: _hammerjs.default.INPUT_CANCEL,\n        isFinal: true\n      });\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      return config.simultaneousHandlers?.some(handler => handler.isNative) ?? false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n\n      // @ts-ignore\n      this.view = (0, _reactNative.findNodeHandle)(ref);\n\n      // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new _hammerjs.default.Manager(this.view, {\n        inputClass: _hammerjs.default.TouchInput\n      }) : new _hammerjs.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this;\n      // @ts-ignore TODO(TS)\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev);\n\n        // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    sync = () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        }\n\n        // Prevent events before the system is ready.\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n        if (this.hasGestureFailed) {\n          return false;\n        }\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          }\n          // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n          this._stillWaiting = this._getPendingGestures();\n          // This gesture should continue waiting.\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            }\n            // This gesture shouldn't start until the others have finished.\n            return false;\n          }\n        }\n\n        // Use default behaviour\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n        // @ts-ignore FIXME(TS)\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n          ...inputData,\n          deltaRotation\n        });\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      const params = this.getHammerConfig();\n      // @ts-ignore FIXME(TS)\n      gesture.set({\n        ...params,\n        enable\n      });\n    };\n    simulateCancelEvent(_inputData) {}\n\n    // Validate the props\n    ensureConfig(config) {\n      const props = {\n        ...config\n      };\n\n      // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  }\n\n  // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = exports.default = GestureHandler;\n});","lineCount":508,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,15],[7,20,6,18],[7,25,6,23],[7,26,6,24],[8,2,7,0],[8,6,7,4,"_hammerjs"],[8,15,7,13],[8,18,7,16,"_interopRequireDefault"],[8,40,7,38],[8,41,7,39,"require"],[8,48,7,46],[8,49,7,46,"_dependencyMap"],[8,63,7,46],[8,84,7,63],[8,85,7,64],[8,86,7,65],[9,2,7,66],[9,6,7,66,"_reactNative"],[9,18,7,66],[9,21,7,66,"require"],[9,28,7,66],[9,29,7,66,"_dependencyMap"],[9,43,7,66],[10,2,9,0],[10,6,9,4,"_State"],[10,12,9,10],[10,15,9,13,"require"],[10,22,9,20],[10,23,9,20,"_dependencyMap"],[10,37,9,20],[10,52,9,31],[10,53,9,32],[11,2,10,0],[11,6,10,4,"_constants"],[11,16,10,14],[11,19,10,17,"require"],[11,26,10,24],[11,27,10,24,"_dependencyMap"],[11,41,10,24],[11,59,10,38],[11,60,10,39],[12,2,11,0],[12,6,11,4,"NodeManager"],[12,17,11,15],[12,20,11,18,"_interopRequireWildcard"],[12,43,11,41],[12,44,11,42,"require"],[12,51,11,49],[12,52,11,49,"_dependencyMap"],[12,66,11,49],[12,86,11,65],[12,87,11,66],[12,88,11,67],[13,2,12,0],[13,6,12,4,"_ghQueueMicrotask"],[13,23,12,21],[13,26,12,24,"require"],[13,33,12,31],[13,34,12,31,"_dependencyMap"],[13,48,12,31],[13,74,12,53],[13,75,12,54],[14,2,13,0],[14,11,13,9,"_interopRequireWildcard"],[14,34,13,32,"_interopRequireWildcard"],[14,35,13,33,"e"],[14,36,13,34],[14,38,13,36,"t"],[14,39,13,37],[14,41,13,39],[15,4,13,41],[15,8,13,45],[15,18,13,55],[15,22,13,59],[15,29,13,66,"WeakMap"],[15,36,13,73],[15,38,13,75],[15,42,13,79,"r"],[15,43,13,80],[15,46,13,83],[15,50,13,87,"WeakMap"],[15,57,13,94],[15,58,13,95],[15,59,13,96],[16,6,13,98,"n"],[16,7,13,99],[16,10,13,102],[16,14,13,106,"WeakMap"],[16,21,13,113],[16,22,13,114],[16,23,13,115],[17,4,13,117],[17,11,13,124],[17,12,13,125,"_interopRequireWildcard"],[17,35,13,148],[17,38,13,151],[17,47,13,151,"_interopRequireWildcard"],[17,48,13,161,"e"],[17,49,13,162],[17,51,13,164,"t"],[17,52,13,165],[17,54,13,167],[18,6,13,169],[18,10,13,173],[18,11,13,174,"t"],[18,12,13,175],[18,16,13,179,"e"],[18,17,13,180],[18,21,13,184,"e"],[18,22,13,185],[18,23,13,186,"__esModule"],[18,33,13,196],[18,35,13,198],[18,42,13,205,"e"],[18,43,13,206],[19,6,13,208],[19,10,13,212,"o"],[19,11,13,213],[20,8,13,215,"i"],[20,9,13,216],[21,8,13,218,"f"],[21,9,13,219],[21,12,13,222],[22,10,13,224,"__proto__"],[22,19,13,233],[22,21,13,235],[22,25,13,239],[23,10,13,241,"default"],[23,17,13,248],[23,19,13,250,"e"],[24,8,13,252],[24,9,13,253],[25,6,13,255],[25,10,13,259],[25,14,13,263],[25,19,13,268,"e"],[25,20,13,269],[25,24,13,273],[25,32,13,281],[25,36,13,285],[25,43,13,292,"e"],[25,44,13,293],[25,48,13,297],[25,58,13,307],[25,62,13,311],[25,69,13,318,"e"],[25,70,13,319],[25,72,13,321],[25,79,13,328,"f"],[25,80,13,329],[26,6,13,331],[26,10,13,335,"o"],[26,11,13,336],[26,14,13,339,"t"],[26,15,13,340],[26,18,13,343,"n"],[26,19,13,344],[26,22,13,347,"r"],[26,23,13,348],[26,25,13,350],[27,8,13,352],[27,12,13,356,"o"],[27,13,13,357],[27,14,13,358,"has"],[27,17,13,361],[27,18,13,362,"e"],[27,19,13,363],[27,20,13,364],[27,22,13,366],[27,29,13,373,"o"],[27,30,13,374],[27,31,13,375,"get"],[27,34,13,378],[27,35,13,379,"e"],[27,36,13,380],[27,37,13,381],[28,8,13,383,"o"],[28,9,13,384],[28,10,13,385,"set"],[28,13,13,388],[28,14,13,389,"e"],[28,15,13,390],[28,17,13,392,"f"],[28,18,13,393],[28,19,13,394],[29,6,13,396],[30,6,13,398],[30,11,13,403],[30,17,13,409,"t"],[30,18,13,410],[30,22,13,414,"e"],[30,23,13,415],[30,25,13,417],[30,34,13,426],[30,39,13,431,"t"],[30,40,13,432],[30,44,13,436],[30,45,13,437],[30,46,13,438],[30,47,13,439,"hasOwnProperty"],[30,61,13,453],[30,62,13,454,"call"],[30,66,13,458],[30,67,13,459,"e"],[30,68,13,460],[30,70,13,462,"t"],[30,71,13,463],[30,72,13,464],[30,77,13,469],[30,78,13,470,"i"],[30,79,13,471],[30,82,13,474],[30,83,13,475,"o"],[30,84,13,476],[30,87,13,479,"Object"],[30,93,13,485],[30,94,13,486,"defineProperty"],[30,108,13,500],[30,113,13,505,"Object"],[30,119,13,511],[30,120,13,512,"getOwnPropertyDescriptor"],[30,144,13,536],[30,145,13,537,"e"],[30,146,13,538],[30,148,13,540,"t"],[30,149,13,541],[30,150,13,542],[30,156,13,548,"i"],[30,157,13,549],[30,158,13,550,"get"],[30,161,13,553],[30,165,13,557,"i"],[30,166,13,558],[30,167,13,559,"set"],[30,170,13,562],[30,171,13,563],[30,174,13,566,"o"],[30,175,13,567],[30,176,13,568,"f"],[30,177,13,569],[30,179,13,571,"t"],[30,180,13,572],[30,182,13,574,"i"],[30,183,13,575],[30,184,13,576],[30,187,13,579,"f"],[30,188,13,580],[30,189,13,581,"t"],[30,190,13,582],[30,191,13,583],[30,194,13,586,"e"],[30,195,13,587],[30,196,13,588,"t"],[30,197,13,589],[30,198,13,590],[30,199,13,591],[31,6,13,593],[31,13,13,600,"f"],[31,14,13,601],[32,4,13,603],[32,5,13,604],[32,7,13,606,"e"],[32,8,13,607],[32,10,13,609,"t"],[32,11,13,610],[32,12,13,611],[33,2,13,613],[34,2,14,0],[34,11,14,9,"_interopRequireDefault"],[34,33,14,31,"_interopRequireDefault"],[34,34,14,32,"e"],[34,35,14,33],[34,37,14,35],[35,4,14,37],[35,11,14,44,"e"],[35,12,14,45],[35,16,14,49,"e"],[35,17,14,50],[35,18,14,51,"__esModule"],[35,28,14,61],[35,31,14,64,"e"],[35,32,14,65],[35,35,14,68],[36,6,14,70,"default"],[36,13,14,77],[36,15,14,79,"e"],[37,4,14,81],[37,5,14,82],[38,2,14,84],[39,2,15,0],[40,2,16,0],[42,2,18,0],[44,2,20,0],[44,6,20,4,"gestureInstances"],[44,22,20,20],[44,25,20,23],[44,26,20,24],[45,2,21,0],[45,8,21,6,"GestureHandler"],[45,22,21,20],[45,23,21,21],[46,4,22,2,"isGestureRunning"],[46,20,22,18],[46,23,22,21],[46,28,22,26],[47,4,23,2,"view"],[47,8,23,6],[47,11,23,9],[47,15,23,13],[48,4,24,2,"hasGestureFailed"],[48,20,24,18],[48,23,24,21],[48,28,24,26],[49,4,25,2,"hammer"],[49,10,25,8],[49,13,25,11],[49,17,25,15],[50,4,26,2,"initialRotation"],[50,19,26,17],[50,22,26,20],[50,26,26,24],[51,4,27,2,"config"],[51,10,27,8],[51,13,27,11],[51,14,27,12],[51,15,27,13],[52,4,28,2,"previousState"],[52,17,28,15],[52,20,28,18,"_State"],[52,26,28,24],[52,27,28,25,"State"],[52,32,28,30],[52,33,28,31,"UNDETERMINED"],[52,45,28,43],[53,4,29,2,"pendingGestures"],[53,19,29,17],[53,22,29,20],[53,23,29,21],[53,24,29,22],[54,4,30,2,"oldState"],[54,12,30,10],[54,15,30,13,"_State"],[54,21,30,19],[54,22,30,20,"State"],[54,27,30,25],[54,28,30,26,"UNDETERMINED"],[54,40,30,38],[55,4,31,2,"lastSentState"],[55,17,31,15],[55,20,31,18],[55,24,31,22],[56,4,32,2],[56,8,32,6,"id"],[56,10,32,8,"id"],[56,11,32,8],[56,13,32,11],[57,6,33,4],[57,13,33,11],[57,16,33,14],[57,20,33,18],[57,21,33,19,"name"],[57,25,33,23],[57,28,33,26],[57,32,33,30],[57,33,33,31,"gestureInstance"],[57,48,33,46],[57,50,33,48],[58,4,34,2],[60,4,36,2],[61,4,37,2],[62,4,38,2],[62,8,38,6,"isNative"],[62,16,38,14,"isNative"],[62,17,38,14],[62,19,38,17],[63,6,39,4],[63,13,39,11],[63,18,39,16],[64,4,40,2],[65,4,41,2],[65,8,41,6,"isDiscrete"],[65,18,41,16,"isDiscrete"],[65,19,41,16],[65,21,41,19],[66,6,42,4],[66,13,42,11],[66,18,42,16],[67,4,43,2],[68,4,44,2],[68,8,44,6,"shouldEnableGestureOnSetup"],[68,34,44,32,"shouldEnableGestureOnSetup"],[68,35,44,32],[68,37,44,35],[69,6,45,4],[69,12,45,10],[69,16,45,14,"Error"],[69,21,45,19],[69,22,45,20],[69,79,45,77],[69,80,45,78],[70,4,46,2],[71,4,47,2,"constructor"],[71,15,47,13,"constructor"],[71,16,47,13],[71,18,47,16],[72,6,48,4],[72,10,48,8],[72,11,48,9,"gestureInstance"],[72,26,48,24],[72,29,48,27,"gestureInstances"],[72,45,48,43],[72,47,48,45],[73,6,49,4],[73,10,49,8],[73,11,49,9,"hasCustomActivationCriteria"],[73,38,49,36],[73,41,49,39],[73,46,49,44],[74,4,50,2],[75,4,51,2,"getConfig"],[75,13,51,11,"getConfig"],[75,14,51,11],[75,16,51,14],[76,6,52,4],[76,13,52,11],[76,17,52,15],[76,18,52,16,"config"],[76,24,52,22],[77,4,53,2],[78,4,54,2,"onWaitingEnded"],[78,18,54,16,"onWaitingEnded"],[78,19,54,17,"_gesture"],[78,27,54,25],[78,29,54,27],[78,30,54,28],[79,4,55,2,"removePendingGesture"],[79,24,55,22,"removePendingGesture"],[79,25,55,23,"id"],[79,27,55,25],[79,29,55,27],[80,6,56,4],[80,13,56,11],[80,17,56,15],[80,18,56,16,"pendingGestures"],[80,33,56,31],[80,34,56,32,"id"],[80,36,56,34],[80,37,56,35],[81,4,57,2],[82,4,58,2,"addPendingGesture"],[82,21,58,19,"addPendingGesture"],[82,22,58,20,"gesture"],[82,29,58,27],[82,31,58,29],[83,6,59,4],[83,10,59,8],[83,11,59,9,"pendingGestures"],[83,26,59,24],[83,27,59,25,"gesture"],[83,34,59,32],[83,35,59,33,"id"],[83,37,59,35],[83,38,59,36],[83,41,59,39,"gesture"],[83,48,59,46],[84,4,60,2],[85,4,61,2,"isGestureEnabledForEvent"],[85,28,61,26,"isGestureEnabledForEvent"],[85,29,61,27,"_config"],[85,36,61,34],[85,38,61,36,"_recognizer"],[85,49,61,47],[85,51,61,49,"_event"],[85,57,61,55],[85,59,61,57],[86,6,62,4],[86,13,62,11],[87,8,63,6,"success"],[87,15,63,13],[87,17,63,15],[88,6,64,4],[88,7,64,5],[89,4,65,2],[90,4,66,2],[90,8,66,6,"NativeGestureClass"],[90,26,66,24,"NativeGestureClass"],[90,27,66,24],[90,29,66,27],[91,6,67,4],[91,12,67,10],[91,16,67,14,"Error"],[91,21,67,19],[91,22,67,20],[91,71,67,69],[91,72,67,70],[92,4,68,2],[93,4,69,2,"updateHasCustomActivationCriteria"],[93,37,69,35,"updateHasCustomActivationCriteria"],[93,38,69,36,"_config"],[93,45,69,43],[93,47,69,45],[94,6,70,4],[94,13,70,11],[94,17,70,15],[95,4,71,2],[96,4,72,2,"clearSelfAsPending"],[96,22,72,20],[96,25,72,23,"clearSelfAsPending"],[96,26,72,23],[96,31,72,29],[97,6,73,4],[97,10,73,8,"Array"],[97,15,73,13],[97,16,73,14,"isArray"],[97,23,73,21],[97,24,73,22],[97,28,73,26],[97,29,73,27,"config"],[97,35,73,33],[97,36,73,34,"waitFor"],[97,43,73,41],[97,44,73,42],[97,46,73,44],[98,8,74,6],[98,13,74,11],[98,19,74,17,"gesture"],[98,26,74,24],[98,30,74,28],[98,34,74,32],[98,35,74,33,"config"],[98,41,74,39],[98,42,74,40,"waitFor"],[98,49,74,47],[98,51,74,49],[99,10,75,8,"gesture"],[99,17,75,15],[99,18,75,16,"removePendingGesture"],[99,38,75,36],[99,39,75,37],[99,43,75,41],[99,44,75,42,"id"],[99,46,75,44],[99,47,75,45],[100,8,76,6],[101,6,77,4],[102,4,78,2],[102,5,78,3],[103,4,79,2,"updateGestureConfig"],[103,23,79,21,"updateGestureConfig"],[103,24,79,22],[104,6,80,4,"enabled"],[104,13,80,11],[104,16,80,14],[104,20,80,18],[105,6,81,4],[105,9,81,7,"props"],[106,4,82,2],[106,5,82,3],[106,7,82,5],[107,6,83,4],[107,10,83,8],[107,11,83,9,"clearSelfAsPending"],[107,29,83,27],[107,30,83,28],[107,31,83,29],[108,6,84,4],[108,10,84,8],[108,11,84,9,"config"],[108,17,84,15],[108,20,84,18],[108,24,84,22],[108,25,84,23,"ensureConfig"],[108,37,84,35],[108,38,84,36],[109,8,85,6,"enabled"],[109,15,85,13],[110,8,86,6],[110,11,86,9,"props"],[111,6,87,4],[111,7,87,5],[111,8,87,6],[112,6,88,4],[112,10,88,8],[112,11,88,9,"hasCustomActivationCriteria"],[112,38,88,36],[112,41,88,39],[112,45,88,43],[112,46,88,44,"updateHasCustomActivationCriteria"],[112,79,88,77],[112,80,88,78],[112,84,88,82],[112,85,88,83,"config"],[112,91,88,89],[112,92,88,90],[113,6,89,4],[113,10,89,8,"Array"],[113,15,89,13],[113,16,89,14,"isArray"],[113,23,89,21],[113,24,89,22],[113,28,89,26],[113,29,89,27,"config"],[113,35,89,33],[113,36,89,34,"waitFor"],[113,43,89,41],[113,44,89,42],[113,46,89,44],[114,8,90,6],[114,13,90,11],[114,19,90,17,"gesture"],[114,26,90,24],[114,30,90,28],[114,34,90,32],[114,35,90,33,"config"],[114,41,90,39],[114,42,90,40,"waitFor"],[114,49,90,47],[114,51,90,49],[115,10,91,8,"gesture"],[115,17,91,15],[115,18,91,16,"addPendingGesture"],[115,35,91,33],[115,36,91,34],[115,40,91,38],[115,41,91,39],[116,8,92,6],[117,6,93,4],[118,6,94,4],[118,10,94,8],[118,14,94,12],[118,15,94,13,"hammer"],[118,21,94,19],[118,23,94,21],[119,8,95,6],[119,12,95,10],[119,13,95,11,"sync"],[119,17,95,15],[119,18,95,16],[119,19,95,17],[120,6,96,4],[121,6,97,4],[121,13,97,11],[121,17,97,15],[121,18,97,16,"config"],[121,24,97,22],[122,4,98,2],[123,4,99,2,"destroy"],[123,11,99,9],[123,14,99,12,"destroy"],[123,15,99,12],[123,20,99,18],[124,6,100,4],[124,10,100,8],[124,11,100,9,"clearSelfAsPending"],[124,29,100,27],[124,30,100,28],[124,31,100,29],[125,6,101,4],[125,10,101,8],[125,14,101,12],[125,15,101,13,"hammer"],[125,21,101,19],[125,23,101,21],[126,8,102,6],[126,12,102,10],[126,13,102,11,"hammer"],[126,19,102,17],[126,20,102,18,"stop"],[126,24,102,22],[126,25,102,23],[126,30,102,28],[126,31,102,29],[127,8,103,6],[127,12,103,10],[127,13,103,11,"hammer"],[127,19,103,17],[127,20,103,18,"destroy"],[127,27,103,25],[127,28,103,26],[127,29,103,27],[128,6,104,4],[129,6,105,4],[129,10,105,8],[129,11,105,9,"hammer"],[129,17,105,15],[129,20,105,18],[129,24,105,22],[130,4,106,2],[130,5,106,3],[131,4,107,2,"isPointInView"],[131,17,107,15],[131,20,107,18,"isPointInView"],[131,21,107,19],[132,6,108,4,"x"],[132,7,108,5],[133,6,109,4,"y"],[134,4,110,2],[134,5,110,3],[134,10,110,8],[135,6,111,4],[136,6,112,4],[136,12,112,10,"rect"],[136,16,112,14],[136,19,112,17],[136,23,112,21],[136,24,112,22,"view"],[136,28,112,26],[136,29,112,27,"getBoundingClientRect"],[136,50,112,48],[136,51,112,49],[136,52,112,50],[137,6,113,4],[137,12,113,10,"pointerInside"],[137,25,113,23],[137,28,113,26,"x"],[137,29,113,27],[137,33,113,31,"rect"],[137,37,113,35],[137,38,113,36,"left"],[137,42,113,40],[137,46,113,44,"x"],[137,47,113,45],[137,51,113,49,"rect"],[137,55,113,53],[137,56,113,54,"right"],[137,61,113,59],[137,65,113,63,"y"],[137,66,113,64],[137,70,113,68,"rect"],[137,74,113,72],[137,75,113,73,"top"],[137,78,113,76],[137,82,113,80,"y"],[137,83,113,81],[137,87,113,85,"rect"],[137,91,113,89],[137,92,113,90,"bottom"],[137,98,113,96],[138,6,114,4],[138,13,114,11,"pointerInside"],[138,26,114,24],[139,4,115,2],[139,5,115,3],[140,4,116,2,"getState"],[140,12,116,10,"getState"],[140,13,116,11,"type"],[140,17,116,15],[140,19,116,17],[141,6,117,4],[142,6,118,4],[142,10,118,8,"type"],[142,14,118,12],[142,18,118,16],[142,19,118,17],[142,21,118,19],[143,8,119,6],[143,15,119,13],[143,16,119,14],[144,6,120,4],[145,6,121,4],[145,13,121,11,"_constants"],[145,23,121,21],[145,24,121,22,"EventMap"],[145,32,121,30],[145,33,121,31,"type"],[145,37,121,35],[145,38,121,36],[146,4,122,2],[147,4,123,2,"transformEventData"],[147,22,123,20,"transformEventData"],[147,23,123,21,"event"],[147,28,123,26],[147,30,123,28],[148,6,124,4],[148,12,124,10],[149,8,125,6,"eventType"],[149,17,125,15],[150,8,126,6,"maxPointers"],[150,19,126,17],[150,21,126,19,"numberOfPointers"],[151,6,127,4],[151,7,127,5],[151,10,127,8,"event"],[151,15,127,13],[152,6,128,4],[153,6,129,4],[153,12,129,10,"changedTouch"],[153,24,129,22],[153,27,129,25,"event"],[153,32,129,30],[153,33,129,31,"changedPointers"],[153,48,129,46],[153,49,129,47],[153,50,129,48],[153,51,129,49],[154,6,130,4],[154,12,130,10,"pointerInside"],[154,25,130,23],[154,28,130,26],[154,32,130,30],[154,33,130,31,"isPointInView"],[154,46,130,44],[154,47,130,45],[155,8,131,6,"x"],[155,9,131,7],[155,11,131,9,"changedTouch"],[155,23,131,21],[155,24,131,22,"clientX"],[155,31,131,29],[156,8,132,6,"y"],[156,9,132,7],[156,11,132,9,"changedTouch"],[156,23,132,21],[156,24,132,22,"clientY"],[157,6,133,4],[157,7,133,5],[157,8,133,6],[159,6,135,4],[160,6,136,4],[160,12,136,10,"state"],[160,17,136,15],[160,20,136,18],[160,24,136,22],[160,25,136,23,"getState"],[160,33,136,31],[160,34,136,32,"eventType"],[160,43,136,41],[160,44,136,42],[161,6,137,4],[161,10,137,8,"state"],[161,15,137,13],[161,20,137,18],[161,24,137,22],[161,25,137,23,"previousState"],[161,38,137,36],[161,40,137,38],[162,8,138,6],[162,12,138,10],[162,13,138,11,"oldState"],[162,21,138,19],[162,24,138,22],[162,28,138,26],[162,29,138,27,"previousState"],[162,42,138,40],[163,8,139,6],[163,12,139,10],[163,13,139,11,"previousState"],[163,26,139,24],[163,29,139,27,"state"],[163,34,139,32],[164,6,140,4],[165,6,141,4],[165,13,141,11],[166,8,142,6,"nativeEvent"],[166,19,142,17],[166,21,142,19],[167,10,143,8,"numberOfPointers"],[167,26,143,24],[168,10,144,8,"state"],[168,15,144,13],[169,10,145,8,"pointerInside"],[169,23,145,21],[170,10,146,8],[170,13,146,11],[170,17,146,15],[170,18,146,16,"transformNativeEvent"],[170,38,146,36],[170,39,146,37,"event"],[170,44,146,42],[170,45,146,43],[171,10,147,8],[172,10,148,8,"handlerTag"],[172,20,148,18],[172,22,148,20],[172,26,148,24],[172,27,148,25,"handlerTag"],[172,37,148,35],[173,10,149,8,"target"],[173,16,149,14],[173,18,149,16],[173,22,149,20],[173,23,149,21,"ref"],[173,26,149,24],[174,10,150,8],[175,10,151,8],[176,10,152,8],[177,10,153,8,"oldState"],[177,18,153,16],[177,20,153,18,"state"],[177,25,153,23],[177,30,153,28],[177,34,153,32],[177,35,153,33,"previousState"],[177,48,153,46],[177,52,153,50,"state"],[177,57,153,55],[177,61,153,59],[177,62,153,60],[177,65,153,63],[177,69,153,67],[177,70,153,68,"oldState"],[177,78,153,76],[177,81,153,79,"undefined"],[178,8,154,6],[178,9,154,7],[179,8,155,6,"timeStamp"],[179,17,155,15],[179,19,155,17,"Date"],[179,23,155,21],[179,24,155,22,"now"],[179,27,155,25],[179,28,155,26],[180,6,156,4],[180,7,156,5],[181,4,157,2],[182,4,158,2,"transformNativeEvent"],[182,24,158,22,"transformNativeEvent"],[182,25,158,23,"_event"],[182,31,158,29],[182,33,158,31],[183,6,159,4],[183,13,159,11],[183,14,159,12],[183,15,159,13],[184,4,160,2],[185,4,161,2,"sendEvent"],[185,13,161,11],[185,16,161,14,"nativeEvent"],[185,27,161,25],[185,31,161,29],[186,6,162,4],[186,12,162,10],[187,8,163,6,"onGestureHandlerEvent"],[187,29,163,27],[188,8,164,6,"onGestureHandlerStateChange"],[189,6,165,4],[189,7,165,5],[189,10,165,8],[189,14,165,12],[189,15,165,13,"propsRef"],[189,23,165,21],[189,24,165,22,"current"],[189,31,165,29],[190,6,166,4],[190,12,166,10,"event"],[190,17,166,15],[190,20,166,18],[190,24,166,22],[190,25,166,23,"transformEventData"],[190,43,166,41],[190,44,166,42,"nativeEvent"],[190,55,166,53],[190,56,166,54],[191,6,167,4,"invokeNullableMethod"],[191,26,167,24],[191,27,167,25,"onGestureHandlerEvent"],[191,48,167,46],[191,50,167,48,"event"],[191,55,167,53],[191,56,167,54],[192,6,168,4],[192,10,168,8],[192,14,168,12],[192,15,168,13,"lastSentState"],[192,28,168,26],[192,33,168,31,"event"],[192,38,168,36],[192,39,168,37,"nativeEvent"],[192,50,168,48],[192,51,168,49,"state"],[192,56,168,54],[192,58,168,56],[193,8,169,6],[193,12,169,10],[193,13,169,11,"lastSentState"],[193,26,169,24],[193,29,169,27,"event"],[193,34,169,32],[193,35,169,33,"nativeEvent"],[193,46,169,44],[193,47,169,45,"state"],[193,52,169,50],[194,8,170,6,"invokeNullableMethod"],[194,28,170,26],[194,29,170,27,"onGestureHandlerStateChange"],[194,56,170,54],[194,58,170,56,"event"],[194,63,170,61],[194,64,170,62],[195,6,171,4],[196,4,172,2],[196,5,172,3],[197,4,173,2,"cancelPendingGestures"],[197,25,173,23,"cancelPendingGestures"],[197,26,173,24,"event"],[197,31,173,29],[197,33,173,31],[198,6,174,4],[198,11,174,9],[198,17,174,15,"gesture"],[198,24,174,22],[198,28,174,26,"Object"],[198,34,174,32],[198,35,174,33,"values"],[198,41,174,39],[198,42,174,40],[198,46,174,44],[198,47,174,45,"pendingGestures"],[198,62,174,60],[198,63,174,61],[198,65,174,63],[199,8,175,6],[199,12,175,10,"gesture"],[199,19,175,17],[199,23,175,21,"gesture"],[199,30,175,28],[199,31,175,29,"isGestureRunning"],[199,47,175,45],[199,49,175,47],[200,10,176,8,"gesture"],[200,17,176,15],[200,18,176,16,"hasGestureFailed"],[200,34,176,32],[200,37,176,35],[200,41,176,39],[201,10,177,8,"gesture"],[201,17,177,15],[201,18,177,16,"cancelEvent"],[201,29,177,27],[201,30,177,28,"event"],[201,35,177,33],[201,36,177,34],[202,8,178,6],[203,6,179,4],[204,4,180,2],[205,4,181,2,"notifyPendingGestures"],[205,25,181,23,"notifyPendingGestures"],[205,26,181,23],[205,28,181,26],[206,6,182,4],[206,11,182,9],[206,17,182,15,"gesture"],[206,24,182,22],[206,28,182,26,"Object"],[206,34,182,32],[206,35,182,33,"values"],[206,41,182,39],[206,42,182,40],[206,46,182,44],[206,47,182,45,"pendingGestures"],[206,62,182,60],[206,63,182,61],[206,65,182,63],[207,8,183,6],[207,12,183,10,"gesture"],[207,19,183,17],[207,21,183,19],[208,10,184,8,"gesture"],[208,17,184,15],[208,18,184,16,"onWaitingEnded"],[208,32,184,30],[208,33,184,31],[208,37,184,35],[208,38,184,36],[209,8,185,6],[210,6,186,4],[211,4,187,2],[213,4,189,2],[214,4,190,2,"onGestureEnded"],[214,18,190,16,"onGestureEnded"],[214,19,190,17,"event"],[214,24,190,22],[214,26,190,24],[215,6,191,4],[215,10,191,8],[215,11,191,9,"isGestureRunning"],[215,27,191,25],[215,30,191,28],[215,35,191,33],[216,6,192,4],[216,10,192,8],[216,11,192,9,"cancelPendingGestures"],[216,32,192,30],[216,33,192,31,"event"],[216,38,192,36],[216,39,192,37],[217,4,193,2],[218,4,194,2,"forceInvalidate"],[218,19,194,17,"forceInvalidate"],[218,20,194,18,"event"],[218,25,194,23],[218,27,194,25],[219,6,195,4],[219,10,195,8],[219,14,195,12],[219,15,195,13,"isGestureRunning"],[219,31,195,29],[219,33,195,31],[220,8,196,6],[220,12,196,10],[220,13,196,11,"hasGestureFailed"],[220,29,196,27],[220,32,196,30],[220,36,196,34],[221,8,197,6],[221,12,197,10],[221,13,197,11,"cancelEvent"],[221,24,197,22],[221,25,197,23,"event"],[221,30,197,28],[221,31,197,29],[222,6,198,4],[223,4,199,2],[224,4,200,2,"cancelEvent"],[224,15,200,13,"cancelEvent"],[224,16,200,14,"event"],[224,21,200,19],[224,23,200,21],[225,6,201,4],[225,10,201,8],[225,11,201,9,"notifyPendingGestures"],[225,32,201,30],[225,33,201,31],[225,34,201,32],[226,6,202,4],[226,10,202,8],[226,11,202,9,"sendEvent"],[226,20,202,18],[226,21,202,19],[227,8,203,6],[227,11,203,9,"event"],[227,16,203,14],[228,8,204,6,"eventType"],[228,17,204,15],[228,19,204,17,"_hammerjs"],[228,28,204,26],[228,29,204,27,"default"],[228,36,204,34],[228,37,204,35,"INPUT_CANCEL"],[228,49,204,47],[229,8,205,6,"isFinal"],[229,15,205,13],[229,17,205,15],[230,6,206,4],[230,7,206,5],[230,8,206,6],[231,6,207,4],[231,10,207,8],[231,11,207,9,"onGestureEnded"],[231,25,207,23],[231,26,207,24,"event"],[231,31,207,29],[231,32,207,30],[232,4,208,2],[233,4,209,2,"onRawEvent"],[233,14,209,12,"onRawEvent"],[233,15,209,13],[234,6,210,4,"isFirst"],[235,4,211,2],[235,5,211,3],[235,7,211,5],[236,6,212,4],[236,10,212,8,"isFirst"],[236,17,212,15],[236,19,212,17],[237,8,213,6],[237,12,213,10],[237,13,213,11,"hasGestureFailed"],[237,29,213,27],[237,32,213,30],[237,37,213,35],[238,6,214,4],[239,4,215,2],[240,4,216,2,"shouldUseTouchEvents"],[240,24,216,22,"shouldUseTouchEvents"],[240,25,216,23,"config"],[240,31,216,29],[240,33,216,31],[241,6,217,4],[241,13,217,11,"config"],[241,19,217,17],[241,20,217,18,"simultaneousHandlers"],[241,40,217,38],[241,42,217,40,"some"],[241,46,217,44],[241,47,217,45,"handler"],[241,54,217,52],[241,58,217,56,"handler"],[241,65,217,63],[241,66,217,64,"isNative"],[241,74,217,72],[241,75,217,73],[241,79,217,77],[241,84,217,82],[242,4,218,2],[243,4,219,2,"setView"],[243,11,219,9,"setView"],[243,12,219,10,"ref"],[243,15,219,13],[243,17,219,15,"propsRef"],[243,25,219,23],[243,27,219,25],[244,6,220,4],[244,10,220,8,"ref"],[244,13,220,11],[244,17,220,15],[244,21,220,19],[244,23,220,21],[245,8,221,6],[245,12,221,10],[245,13,221,11,"destroy"],[245,20,221,18],[245,21,221,19],[245,22,221,20],[246,8,222,6],[246,12,222,10],[246,13,222,11,"view"],[246,17,222,15],[246,20,222,18],[246,24,222,22],[247,8,223,6],[248,6,224,4],[250,6,226,4],[251,6,227,4],[251,12,227,10,"SUPPORTS_TOUCH"],[251,26,227,24],[251,29,227,27],[251,43,227,41],[251,47,227,45,"window"],[251,53,227,51],[252,6,228,4],[252,10,228,8],[252,11,228,9,"propsRef"],[252,19,228,17],[252,22,228,20,"propsRef"],[252,30,228,28],[253,6,229,4],[253,10,229,8],[253,11,229,9,"ref"],[253,14,229,12],[253,17,229,15,"ref"],[253,20,229,18],[255,6,231,4],[256,6,232,4],[256,10,232,8],[256,11,232,9,"view"],[256,15,232,13],[256,18,232,16],[256,19,232,17],[256,20,232,18],[256,22,232,20,"_reactNative"],[256,34,232,32],[256,35,232,33,"findNodeHandle"],[256,49,232,47],[256,51,232,49,"ref"],[256,54,232,52],[256,55,232,53],[258,6,234,4],[259,6,235,4],[260,6,236,4],[261,6,237,4],[261,10,237,8],[261,11,237,9,"hammer"],[261,17,237,15],[261,20,237,18,"SUPPORTS_TOUCH"],[261,34,237,32],[261,38,237,36],[261,42,237,40],[261,43,237,41,"shouldUseTouchEvents"],[261,63,237,61],[261,64,237,62],[261,68,237,66],[261,69,237,67,"config"],[261,75,237,73],[261,76,237,74],[261,79,237,77],[261,83,237,81,"_hammerjs"],[261,92,237,90],[261,93,237,91,"default"],[261,100,237,98],[261,101,237,99,"Manager"],[261,108,237,106],[261,109,237,107],[261,113,237,111],[261,114,237,112,"view"],[261,118,237,116],[261,120,237,118],[262,8,238,6,"inputClass"],[262,18,238,16],[262,20,238,18,"_hammerjs"],[262,29,238,27],[262,30,238,28,"default"],[262,37,238,35],[262,38,238,36,"TouchInput"],[263,6,239,4],[263,7,239,5],[263,8,239,6],[263,11,239,9],[263,15,239,13,"_hammerjs"],[263,24,239,22],[263,25,239,23,"default"],[263,32,239,30],[263,33,239,31,"Manager"],[263,40,239,38],[263,41,239,39],[263,45,239,43],[263,46,239,44,"view"],[263,50,239,48],[263,51,239,49],[264,6,240,4],[264,10,240,8],[264,11,240,9,"oldState"],[264,19,240,17],[264,22,240,20,"_State"],[264,28,240,26],[264,29,240,27,"State"],[264,34,240,32],[264,35,240,33,"UNDETERMINED"],[264,47,240,45],[265,6,241,4],[265,10,241,8],[265,11,241,9,"previousState"],[265,24,241,22],[265,27,241,25,"_State"],[265,33,241,31],[265,34,241,32,"State"],[265,39,241,37],[265,40,241,38,"UNDETERMINED"],[265,52,241,50],[266,6,242,4],[266,10,242,8],[266,11,242,9,"lastSentState"],[266,24,242,22],[266,27,242,25],[266,31,242,29],[267,6,243,4],[267,12,243,10],[268,8,244,6,"NativeGestureClass"],[269,6,245,4],[269,7,245,5],[269,10,245,8],[269,14,245,12],[270,6,246,4],[271,6,247,4],[271,12,247,10,"gesture"],[271,19,247,17],[271,22,247,20],[271,26,247,24,"NativeGestureClass"],[271,44,247,42],[271,45,247,43],[271,49,247,47],[271,50,247,48,"getHammerConfig"],[271,65,247,63],[271,66,247,64],[271,67,247,65],[271,68,247,66],[272,6,248,4],[272,10,248,8],[272,11,248,9,"hammer"],[272,17,248,15],[272,18,248,16,"add"],[272,21,248,19],[272,22,248,20,"gesture"],[272,29,248,27],[272,30,248,28],[273,6,249,4],[273,10,249,8],[273,11,249,9,"hammer"],[273,17,249,15],[273,18,249,16,"on"],[273,20,249,18],[273,21,249,19],[273,35,249,33],[273,37,249,35,"ev"],[273,39,249,37],[273,43,249,41],[274,8,250,6],[274,12,250,10],[274,13,250,11],[274,17,250,15],[274,18,250,16,"config"],[274,24,250,22],[274,25,250,23,"enabled"],[274,32,250,30],[274,34,250,32],[275,10,251,8],[275,14,251,12],[275,15,251,13,"hasGestureFailed"],[275,31,251,29],[275,34,251,32],[275,39,251,37],[276,10,252,8],[276,14,252,12],[276,15,252,13,"isGestureRunning"],[276,31,252,29],[276,34,252,32],[276,39,252,37],[277,10,253,8],[278,8,254,6],[279,8,255,6],[279,12,255,10],[279,13,255,11,"onRawEvent"],[279,23,255,21],[279,24,255,22,"ev"],[279,26,255,24],[279,27,255,25],[281,8,257,6],[282,8,258,6],[283,8,259,6],[283,12,259,10],[283,16,259,14],[283,17,259,15,"initialRotation"],[283,32,259,30],[283,37,259,35],[283,41,259,39],[283,45,259,43,"ev"],[283,47,259,45],[283,48,259,46,"rotation"],[283,56,259,54],[283,61,259,59],[283,62,259,60],[283,64,259,62],[284,10,260,8],[284,14,260,12],[284,15,260,13,"initialRotation"],[284,30,260,28],[284,33,260,31,"ev"],[284,35,260,33],[284,36,260,34,"rotation"],[284,44,260,42],[285,8,261,6],[286,8,262,6],[286,12,262,10,"ev"],[286,14,262,12],[286,15,262,13,"isFinal"],[286,22,262,20],[286,24,262,22],[287,10,263,8],[288,10,264,8,"setTimeout"],[288,20,264,18],[288,21,264,19],[288,27,264,25],[289,12,265,10],[289,16,265,14],[289,17,265,15,"initialRotation"],[289,32,265,30],[289,35,265,33],[289,39,265,37],[290,12,266,10],[290,16,266,14],[290,17,266,15,"hasGestureFailed"],[290,33,266,31],[290,36,266,34],[290,41,266,39],[291,10,267,8],[291,11,267,9],[291,12,267,10],[292,8,268,6],[293,6,269,4],[293,7,269,5],[293,8,269,6],[294,6,270,4],[294,10,270,8],[294,11,270,9,"setupEvents"],[294,22,270,20],[294,23,270,21],[294,24,270,22],[295,6,271,4],[295,10,271,8],[295,11,271,9,"sync"],[295,15,271,13],[295,16,271,14],[295,17,271,15],[296,4,272,2],[297,4,273,2,"setupEvents"],[297,15,273,13,"setupEvents"],[297,16,273,13],[297,18,273,16],[298,6,274,4],[299,6,275,4],[299,10,275,8],[299,11,275,9],[299,15,275,13],[299,16,275,14,"isDiscrete"],[299,26,275,24],[299,28,275,26],[300,8,276,6],[300,12,276,10],[300,13,276,11,"hammer"],[300,19,276,17],[300,20,276,18,"on"],[300,22,276,20],[300,23,276,21],[300,26,276,24],[300,30,276,28],[300,31,276,29,"name"],[300,35,276,33],[300,42,276,40],[300,44,276,42,"event"],[300,49,276,47],[300,53,276,51],[300,57,276,55],[300,58,276,56,"onStart"],[300,65,276,63],[300,66,276,64,"event"],[300,71,276,69],[300,72,276,70],[300,73,276,71],[301,8,277,6],[301,12,277,10],[301,13,277,11,"hammer"],[301,19,277,17],[301,20,277,18,"on"],[301,22,277,20],[301,23,277,21],[301,26,277,24],[301,30,277,28],[301,31,277,29,"name"],[301,35,277,33],[301,42,277,40],[301,46,277,44],[301,47,277,45,"name"],[301,51,277,49],[301,59,277,57],[301,61,277,59,"event"],[301,66,277,64],[301,70,277,68],[302,10,278,8],[302,14,278,12],[302,15,278,13,"onGestureEnded"],[302,29,278,27],[302,30,278,28,"event"],[302,35,278,33],[302,36,278,34],[303,8,279,6],[303,9,279,7],[303,10,279,8],[304,6,280,4],[305,6,281,4],[305,10,281,8],[305,11,281,9,"hammer"],[305,17,281,15],[305,18,281,16,"on"],[305,20,281,18],[305,21,281,19],[305,25,281,23],[305,26,281,24,"name"],[305,30,281,28],[305,32,281,30,"ev"],[305,34,281,32],[305,38,281,36],[305,42,281,40],[305,43,281,41,"onGestureActivated"],[305,61,281,59],[305,62,281,60,"ev"],[305,64,281,62],[305,65,281,63],[305,66,281,64],[305,67,281,65],[305,68,281,66],[306,4,282,2],[307,4,283,2,"onStart"],[307,11,283,9,"onStart"],[307,12,283,10],[308,6,284,4,"deltaX"],[308,12,284,10],[309,6,285,4,"deltaY"],[309,12,285,10],[310,6,286,4,"rotation"],[311,4,287,2],[311,5,287,3],[311,7,287,5],[312,6,288,4],[313,6,289,4],[313,10,289,8],[313,11,289,9,"oldState"],[313,19,289,17],[313,22,289,20,"_State"],[313,28,289,26],[313,29,289,27,"State"],[313,34,289,32],[313,35,289,33,"UNDETERMINED"],[313,47,289,45],[314,6,290,4],[314,10,290,8],[314,11,290,9,"previousState"],[314,24,290,22],[314,27,290,25,"_State"],[314,33,290,31],[314,34,290,32,"State"],[314,39,290,37],[314,40,290,38,"UNDETERMINED"],[314,52,290,50],[315,6,291,4],[315,10,291,8],[315,11,291,9,"lastSentState"],[315,24,291,22],[315,27,291,25],[315,31,291,29],[316,6,292,4],[316,10,292,8],[316,11,292,9,"isGestureRunning"],[316,27,292,25],[316,30,292,28],[316,34,292,32],[317,6,293,4],[317,10,293,8],[317,11,293,9,"__initialX"],[317,21,293,19],[317,24,293,22,"deltaX"],[317,30,293,28],[318,6,294,4],[318,10,294,8],[318,11,294,9,"__initialY"],[318,21,294,19],[318,24,294,22,"deltaY"],[318,30,294,28],[319,6,295,4],[319,10,295,8],[319,11,295,9,"initialRotation"],[319,26,295,24],[319,29,295,27,"rotation"],[319,37,295,35],[320,4,296,2],[321,4,297,2,"onGestureActivated"],[321,22,297,20,"onGestureActivated"],[321,23,297,21,"ev"],[321,25,297,23],[321,27,297,25],[322,6,298,4],[322,10,298,8],[322,11,298,9,"sendEvent"],[322,20,298,18],[322,21,298,19,"ev"],[322,23,298,21],[322,24,298,22],[323,4,299,2],[324,4,300,2,"onSuccess"],[324,13,300,11,"onSuccess"],[324,14,300,11],[324,16,300,14],[324,17,300,15],[325,4,301,2,"_getPendingGestures"],[325,23,301,21,"_getPendingGestures"],[325,24,301,21],[325,26,301,24],[326,6,302,4],[326,10,302,8,"Array"],[326,15,302,13],[326,16,302,14,"isArray"],[326,23,302,21],[326,24,302,22],[326,28,302,26],[326,29,302,27,"config"],[326,35,302,33],[326,36,302,34,"waitFor"],[326,43,302,41],[326,44,302,42],[326,48,302,46],[326,52,302,50],[326,53,302,51,"config"],[326,59,302,57],[326,60,302,58,"waitFor"],[326,67,302,65],[326,68,302,66,"length"],[326,74,302,72],[326,76,302,74],[327,8,303,6],[328,8,304,6],[329,8,305,6],[329,14,305,12,"stillWaiting"],[329,26,305,24],[329,29,305,27],[329,33,305,31],[329,34,305,32,"config"],[329,40,305,38],[329,41,305,39,"waitFor"],[329,48,305,46],[329,49,305,47,"filter"],[329,55,305,53],[329,56,305,54],[329,57,305,55],[330,10,306,8,"hasGestureFailed"],[331,8,307,6],[331,9,307,7],[331,14,307,12,"hasGestureFailed"],[331,30,307,28],[331,35,307,33],[331,40,307,38],[331,41,307,39],[332,8,308,6],[332,15,308,13,"stillWaiting"],[332,27,308,25],[333,6,309,4],[334,6,310,4],[334,13,310,11],[334,15,310,13],[335,4,311,2],[336,4,312,2,"getHammerConfig"],[336,19,312,17,"getHammerConfig"],[336,20,312,17],[336,22,312,20],[337,6,313,4],[337,12,313,10,"pointers"],[337,20,313,18],[337,23,313,21],[337,27,313,25],[337,28,313,26,"config"],[337,34,313,32],[337,35,313,33,"minPointers"],[337,46,313,44],[337,51,313,49],[337,55,313,53],[337,56,313,54,"config"],[337,62,313,60],[337,63,313,61,"maxPointers"],[337,74,313,72],[337,77,313,75],[337,81,313,79],[337,82,313,80,"config"],[337,88,313,86],[337,89,313,87,"minPointers"],[337,100,313,98],[337,103,313,101],[337,104,313,102],[338,6,314,4],[338,13,314,11],[339,8,315,6,"pointers"],[340,6,316,4],[340,7,316,5],[341,4,317,2],[342,4,318,2,"sync"],[342,8,318,6],[342,11,318,9,"sync"],[342,12,318,9],[342,17,318,15],[343,6,319,4],[343,12,319,10,"gesture"],[343,19,319,17],[343,22,319,20],[343,26,319,24],[343,27,319,25,"hammer"],[343,33,319,31],[343,34,319,32,"get"],[343,37,319,35],[343,38,319,36],[343,42,319,40],[343,43,319,41,"name"],[343,47,319,45],[343,48,319,46],[344,6,320,4],[344,10,320,8],[344,11,320,9,"gesture"],[344,18,320,16],[344,20,320,18],[345,6,321,4],[345,12,321,10,"enable"],[345,18,321,16],[345,21,321,19,"enable"],[345,22,321,20,"recognizer"],[345,32,321,30],[345,34,321,32,"inputData"],[345,43,321,41],[345,48,321,46],[346,8,322,6],[346,12,322,10],[346,13,322,11],[346,17,322,15],[346,18,322,16,"config"],[346,24,322,22],[346,25,322,23,"enabled"],[346,32,322,30],[346,34,322,32],[347,10,323,8],[347,14,323,12],[347,15,323,13,"isGestureRunning"],[347,31,323,29],[347,34,323,32],[347,39,323,37],[348,10,324,8],[348,14,324,12],[348,15,324,13,"hasGestureFailed"],[348,31,324,29],[348,34,324,32],[348,39,324,37],[349,10,325,8],[349,17,325,15],[349,22,325,20],[350,8,326,6],[352,8,328,6],[353,8,329,6],[353,12,329,10],[353,13,329,11,"inputData"],[353,22,329,20],[353,26,329,24],[353,27,329,25,"recognizer"],[353,37,329,35],[353,38,329,36,"options"],[353,45,329,43],[353,49,329,47],[353,56,329,54,"inputData"],[353,65,329,63],[353,66,329,64,"maxPointers"],[353,77,329,75],[353,82,329,80],[353,93,329,91],[353,95,329,93],[354,10,330,8],[354,17,330,15],[354,21,330,19],[354,22,330,20,"shouldEnableGestureOnSetup"],[354,48,330,46],[355,8,331,6],[356,8,332,6],[356,12,332,10],[356,16,332,14],[356,17,332,15,"hasGestureFailed"],[356,33,332,31],[356,35,332,33],[357,10,333,8],[357,17,333,15],[357,22,333,20],[358,8,334,6],[359,8,335,6],[359,12,335,10],[359,13,335,11],[359,17,335,15],[359,18,335,16,"isDiscrete"],[359,28,335,26],[359,30,335,28],[360,10,336,8],[360,14,336,12],[360,18,336,16],[360,19,336,17,"isGestureRunning"],[360,35,336,33],[360,37,336,35],[361,12,337,10],[361,19,337,17],[361,23,337,21],[362,10,338,8],[363,10,339,8],[364,10,340,8],[365,10,341,8],[365,14,341,12],[365,15,341,13,"_stillWaiting"],[365,28,341,26],[365,31,341,29],[365,35,341,33],[365,36,341,34,"_getPendingGestures"],[365,55,341,53],[365,56,341,54],[365,57,341,55],[366,10,342,8],[367,10,343,8],[367,14,343,12],[367,18,343,16],[367,19,343,17,"_stillWaiting"],[367,32,343,30],[367,33,343,31,"length"],[367,39,343,37],[367,41,343,39],[368,12,344,10],[369,12,345,10],[370,12,346,10],[370,17,346,15],[370,23,346,21,"gesture"],[370,30,346,28],[370,34,346,32],[370,38,346,36],[370,39,346,37,"_stillWaiting"],[370,52,346,50],[370,54,346,52],[371,14,347,12],[372,14,348,12],[372,18,348,16],[372,19,348,17,"gesture"],[372,26,348,24],[372,27,348,25,"isDiscrete"],[372,37,348,35],[372,41,348,39,"gesture"],[372,48,348,46],[372,49,348,47,"isGestureRunning"],[372,65,348,63],[372,67,348,65],[373,16,349,14],[373,20,349,18],[373,21,349,19,"hasGestureFailed"],[373,37,349,35],[373,40,349,38],[373,44,349,42],[374,16,350,14],[374,20,350,18],[374,21,350,19,"isGestureRunning"],[374,37,350,35],[374,40,350,38],[374,45,350,43],[375,16,351,14],[375,23,351,21],[375,28,351,26],[376,14,352,12],[377,12,353,10],[378,12,354,10],[379,12,355,10],[379,19,355,17],[379,24,355,22],[380,10,356,8],[381,8,357,6],[383,8,359,6],[384,8,360,6],[384,12,360,10],[384,13,360,11],[384,17,360,15],[384,18,360,16,"hasCustomActivationCriteria"],[384,45,360,43],[384,47,360,45],[385,10,361,8],[385,17,361,15],[385,21,361,19],[386,8,362,6],[387,8,363,6],[387,14,363,12,"deltaRotation"],[387,27,363,25],[387,30,363,28],[387,34,363,32],[387,35,363,33,"initialRotation"],[387,50,363,48],[387,54,363,52],[387,58,363,56],[387,61,363,59],[387,62,363,60],[387,65,363,63,"inputData"],[387,74,363,72],[387,75,363,73,"rotation"],[387,83,363,81],[387,86,363,84],[387,90,363,88],[387,91,363,89,"initialRotation"],[387,106,363,104],[388,8,364,6],[389,8,365,6],[389,14,365,12],[390,10,366,8,"success"],[390,17,366,15],[391,10,367,8,"failed"],[392,8,368,6],[392,9,368,7],[392,12,368,10],[392,16,368,14],[392,17,368,15,"isGestureEnabledForEvent"],[392,41,368,39],[392,42,368,40],[392,46,368,44],[392,47,368,45,"getConfig"],[392,56,368,54],[392,57,368,55],[392,58,368,56],[392,60,368,58,"recognizer"],[392,70,368,68],[392,72,368,70],[393,10,369,8],[393,13,369,11,"inputData"],[393,22,369,20],[394,10,370,8,"deltaRotation"],[395,8,371,6],[395,9,371,7],[395,10,371,8],[396,8,372,6],[396,12,372,10,"failed"],[396,18,372,16],[396,20,372,18],[397,10,373,8],[397,14,373,12],[397,15,373,13,"simulateCancelEvent"],[397,34,373,32],[397,35,373,33,"inputData"],[397,44,373,42],[397,45,373,43],[398,10,374,8],[398,14,374,12],[398,15,374,13,"hasGestureFailed"],[398,31,374,29],[398,34,374,32],[398,38,374,36],[399,8,375,6],[400,8,376,6],[400,15,376,13,"success"],[400,22,376,20],[401,6,377,4],[401,7,377,5],[402,6,378,4],[402,12,378,10,"params"],[402,18,378,16],[402,21,378,19],[402,25,378,23],[402,26,378,24,"getHammerConfig"],[402,41,378,39],[402,42,378,40],[402,43,378,41],[403,6,379,4],[404,6,380,4,"gesture"],[404,13,380,11],[404,14,380,12,"set"],[404,17,380,15],[404,18,380,16],[405,8,381,6],[405,11,381,9,"params"],[405,17,381,15],[406,8,382,6,"enable"],[407,6,383,4],[407,7,383,5],[407,8,383,6],[408,4,384,2],[408,5,384,3],[409,4,385,2,"simulateCancelEvent"],[409,23,385,21,"simulateCancelEvent"],[409,24,385,22,"_inputData"],[409,34,385,32],[409,36,385,34],[409,37,385,35],[411,4,387,2],[412,4,388,2,"ensureConfig"],[412,16,388,14,"ensureConfig"],[412,17,388,15,"config"],[412,23,388,21],[412,25,388,23],[413,6,389,4],[413,12,389,10,"props"],[413,17,389,15],[413,20,389,18],[414,8,390,6],[414,11,390,9,"config"],[415,6,391,4],[415,7,391,5],[417,6,393,4],[418,6,394,4],[418,10,394,8],[418,19,394,17],[418,23,394,21,"config"],[418,29,394,27],[418,31,394,29],[419,8,395,6,"props"],[419,13,395,11],[419,14,395,12,"minDist"],[419,21,395,19],[419,24,395,22,"config"],[419,30,395,28],[419,31,395,29,"minDist"],[419,38,395,36],[420,8,396,6,"props"],[420,13,396,11],[420,14,396,12,"minDistSq"],[420,23,396,21],[420,26,396,24,"props"],[420,31,396,29],[420,32,396,30,"minDist"],[420,39,396,37],[420,42,396,40,"props"],[420,47,396,45],[420,48,396,46,"minDist"],[420,55,396,53],[421,6,397,4],[422,6,398,4],[422,10,398,8],[422,23,398,21],[422,27,398,25,"config"],[422,33,398,31],[422,35,398,33],[423,8,399,6,"props"],[423,13,399,11],[423,14,399,12,"minVelocity"],[423,25,399,23],[423,28,399,26,"config"],[423,34,399,32],[423,35,399,33,"minVelocity"],[423,46,399,44],[424,8,400,6,"props"],[424,13,400,11],[424,14,400,12,"minVelocitySq"],[424,27,400,25],[424,30,400,28,"props"],[424,35,400,33],[424,36,400,34,"minVelocity"],[424,47,400,45],[424,50,400,48,"props"],[424,55,400,53],[424,56,400,54,"minVelocity"],[424,67,400,65],[425,6,401,4],[426,6,402,4],[426,10,402,8],[426,19,402,17],[426,23,402,21,"config"],[426,29,402,27],[426,31,402,29],[427,8,403,6,"props"],[427,13,403,11],[427,14,403,12,"maxDist"],[427,21,403,19],[427,24,403,22,"config"],[427,30,403,28],[427,31,403,29,"maxDist"],[427,38,403,36],[428,8,404,6,"props"],[428,13,404,11],[428,14,404,12,"maxDistSq"],[428,23,404,21],[428,26,404,24,"config"],[428,32,404,30],[428,33,404,31,"maxDist"],[428,40,404,38],[428,43,404,41,"config"],[428,49,404,47],[428,50,404,48,"maxDist"],[428,57,404,55],[429,6,405,4],[430,6,406,4],[430,10,406,8],[430,19,406,17],[430,23,406,21,"config"],[430,29,406,27],[430,31,406,29],[431,8,407,6,"props"],[431,13,407,11],[431,14,407,12,"waitFor"],[431,21,407,19],[431,24,407,22,"asArray"],[431,31,407,29],[431,32,407,30,"config"],[431,38,407,36],[431,39,407,37,"waitFor"],[431,46,407,44],[431,47,407,45],[431,48,407,46,"map"],[431,51,407,49],[431,52,407,50],[431,53,407,51],[432,10,408,8,"handlerTag"],[433,8,409,6],[433,9,409,7],[433,14,409,12,"NodeManager"],[433,25,409,23],[433,26,409,24,"getHandler"],[433,36,409,34],[433,37,409,35,"handlerTag"],[433,47,409,45],[433,48,409,46],[433,49,409,47],[433,50,409,48,"filter"],[433,56,409,54],[433,57,409,55,"v"],[433,58,409,56],[433,62,409,60,"v"],[433,63,409,61],[433,64,409,62],[434,6,410,4],[434,7,410,5],[434,13,410,11],[435,8,411,6,"props"],[435,13,411,11],[435,14,411,12,"waitFor"],[435,21,411,19],[435,24,411,22],[435,28,411,26],[436,6,412,4],[437,6,413,4],[437,10,413,8],[437,32,413,30],[437,36,413,34,"config"],[437,42,413,40],[437,44,413,42],[438,8,414,6],[438,14,414,12,"shouldUseTouchEvents"],[438,34,414,32],[438,37,414,35],[438,41,414,39],[438,42,414,40,"shouldUseTouchEvents"],[438,62,414,60],[438,63,414,61],[438,67,414,65],[438,68,414,66,"config"],[438,74,414,72],[438,75,414,73],[439,8,415,6,"props"],[439,13,415,11],[439,14,415,12,"simultaneousHandlers"],[439,34,415,32],[439,37,415,35,"asArray"],[439,44,415,42],[439,45,415,43,"config"],[439,51,415,49],[439,52,415,50,"simultaneousHandlers"],[439,72,415,70],[439,73,415,71],[439,74,415,72,"map"],[439,77,415,75],[439,78,415,76,"handler"],[439,85,415,83],[439,89,415,87],[440,10,416,8],[440,14,416,12],[440,21,416,19,"handler"],[440,28,416,26],[440,33,416,31],[440,41,416,39],[440,43,416,41],[441,12,417,10],[441,19,417,17,"NodeManager"],[441,30,417,28],[441,31,417,29,"getHandler"],[441,41,417,39],[441,42,417,40,"handler"],[441,49,417,47],[441,50,417,48],[442,10,418,8],[442,11,418,9],[442,17,418,15],[443,12,419,10],[443,19,419,17,"NodeManager"],[443,30,419,28],[443,31,419,29,"getHandler"],[443,41,419,39],[443,42,419,40,"handler"],[443,49,419,47],[443,50,419,48,"handlerTag"],[443,60,419,58],[443,61,419,59],[444,10,420,8],[445,8,421,6],[445,9,421,7],[445,10,421,8],[445,11,421,9,"filter"],[445,17,421,15],[445,18,421,16,"v"],[445,19,421,17],[445,23,421,21,"v"],[445,24,421,22],[445,25,421,23],[446,8,422,6],[446,12,422,10,"shouldUseTouchEvents"],[446,32,422,30],[446,37,422,35],[446,41,422,39],[446,42,422,40,"shouldUseTouchEvents"],[446,62,422,60],[446,63,422,61,"props"],[446,68,422,66],[446,69,422,67],[446,71,422,69],[447,10,423,8],[447,11,423,9],[447,12,423,10],[447,14,423,12,"_ghQueueMicrotask"],[447,31,423,29],[447,32,423,30,"ghQueueMicrotask"],[447,48,423,46],[447,50,423,48],[447,56,423,54],[448,12,424,10],[449,12,425,10],[450,12,426,10],[450,16,426,14],[450,17,426,15,"destroy"],[450,24,426,22],[450,25,426,23],[450,26,426,24],[451,12,427,10],[451,16,427,14],[451,17,427,15,"setView"],[451,24,427,22],[451,25,427,23],[451,29,427,27],[451,30,427,28,"ref"],[451,33,427,31],[451,35,427,33],[451,39,427,37],[451,40,427,38,"propsRef"],[451,48,427,46],[451,49,427,47],[452,10,428,8],[452,11,428,9],[452,12,428,10],[453,8,429,6],[454,6,430,4],[454,7,430,5],[454,13,430,11],[455,8,431,6,"props"],[455,13,431,11],[455,14,431,12,"simultaneousHandlers"],[455,34,431,32],[455,37,431,35],[455,41,431,39],[456,6,432,4],[457,6,433,4],[457,12,433,10,"configProps"],[457,23,433,21],[457,26,433,24],[457,27,433,25],[457,40,433,38],[457,42,433,40],[457,55,433,53],[457,57,433,55],[457,66,433,64],[457,68,433,66],[457,77,433,75],[457,79,433,77],[457,90,433,88],[457,92,433,90],[457,107,433,105],[457,109,433,107],[457,120,433,118],[457,122,433,120],[457,135,433,133],[457,137,433,135],[457,155,433,153],[457,157,433,155],[457,175,433,173],[457,177,433,175],[457,193,433,191],[457,195,433,193],[457,211,433,209],[457,213,433,211],[457,233,433,231],[457,235,433,233],[457,253,433,251],[457,255,433,253],[457,275,433,273],[457,277,433,275],[457,295,433,293],[457,296,433,294],[458,6,434,4,"configProps"],[458,17,434,15],[458,18,434,16,"forEach"],[458,25,434,23],[458,26,434,24,"prop"],[458,30,434,28],[458,34,434,32],[459,8,435,6],[459,12,435,10],[459,19,435,17,"props"],[459,24,435,22],[459,25,435,23,"prop"],[459,29,435,27],[459,30,435,28],[459,35,435,33],[459,46,435,44],[459,48,435,46],[460,10,436,8,"props"],[460,15,436,13],[460,16,436,14,"prop"],[460,20,436,18],[460,21,436,19],[460,24,436,22,"Number"],[460,30,436,28],[460,31,436,29,"NaN"],[460,34,436,32],[461,8,437,6],[462,6,438,4],[462,7,438,5],[462,8,438,6],[463,6,439,4],[463,13,439,11,"props"],[463,18,439,16],[463,19,439,17],[463,20,439,18],[464,4,440,2],[465,2,441,0],[467,2,443,0],[468,2,444,0],[469,2,445,0],[469,11,445,9,"invokeNullableMethod"],[469,31,445,29,"invokeNullableMethod"],[469,32,445,30,"method"],[469,38,445,36],[469,40,445,38,"event"],[469,45,445,43],[469,47,445,45],[470,4,446,2],[470,8,446,6,"method"],[470,14,446,12],[470,16,446,14],[471,6,447,4],[471,10,447,8],[471,17,447,15,"method"],[471,23,447,21],[471,28,447,26],[471,38,447,36],[471,40,447,38],[472,8,448,6,"method"],[472,14,448,12],[472,15,448,13,"event"],[472,20,448,18],[472,21,448,19],[473,6,449,4],[473,7,449,5],[473,13,449,11],[474,8,450,6],[475,8,451,6],[475,12,451,10],[475,26,451,24],[475,30,451,28,"method"],[475,36,451,34],[475,40,451,38],[475,47,451,45,"method"],[475,53,451,51],[475,54,451,52,"__getHandler"],[475,66,451,64],[475,71,451,69],[475,81,451,79],[475,83,451,81],[476,10,452,8],[476,16,452,14,"handler"],[476,23,452,21],[476,26,452,24,"method"],[476,32,452,30],[476,33,452,31,"__getHandler"],[476,45,452,43],[476,46,452,44],[476,47,452,45],[477,10,453,8,"invokeNullableMethod"],[477,30,453,28],[477,31,453,29,"handler"],[477,38,453,36],[477,40,453,38,"event"],[477,45,453,43],[477,46,453,44],[478,8,454,6],[478,9,454,7],[478,15,454,13],[479,10,455,8],[479,14,455,12],[479,28,455,26],[479,32,455,30,"method"],[479,38,455,36],[479,40,455,38],[480,12,456,10],[480,18,456,16],[481,14,457,12,"argMapping"],[482,12,458,10],[482,13,458,11],[482,16,458,14,"method"],[482,22,458,20],[482,23,458,21,"__nodeConfig"],[482,35,458,33],[483,12,459,10],[483,16,459,14,"Array"],[483,21,459,19],[483,22,459,20,"isArray"],[483,29,459,27],[483,30,459,28,"argMapping"],[483,40,459,38],[483,41,459,39],[483,43,459,41],[484,14,460,12],[484,19,460,17],[484,25,460,23],[484,26,460,24,"index"],[484,31,460,29],[484,33,460,31],[484,34,460,32,"key"],[484,37,460,35],[484,39,460,37,"value"],[484,44,460,42],[484,45,460,43],[484,46,460,44],[484,50,460,48,"argMapping"],[484,60,460,58],[484,61,460,59,"entries"],[484,68,460,66],[484,69,460,67],[484,70,460,68],[484,72,460,70],[485,16,461,14],[485,20,461,18,"key"],[485,23,461,21],[485,27,461,25,"event"],[485,32,461,30],[485,33,461,31,"nativeEvent"],[485,44,461,42],[485,46,461,44],[486,18,462,16],[487,18,463,16],[487,24,463,22,"nativeValue"],[487,35,463,33],[487,38,463,36,"event"],[487,43,463,41],[487,44,463,42,"nativeEvent"],[487,55,463,53],[487,56,463,54,"key"],[487,59,463,57],[487,60,463,58],[488,18,464,16],[488,22,464,20,"value"],[488,27,464,25],[488,31,464,29,"value"],[488,36,464,34],[488,37,464,35,"setValue"],[488,45,464,43],[488,47,464,45],[489,20,465,18],[490,20,466,18,"value"],[490,25,466,23],[490,26,466,24,"setValue"],[490,34,466,32],[490,35,466,33,"nativeValue"],[490,46,466,44],[490,47,466,45],[491,18,467,16],[491,19,467,17],[491,25,467,23],[492,20,468,18],[493,20,469,18,"method"],[493,26,469,24],[493,27,469,25,"__nodeConfig"],[493,39,469,37],[493,40,469,38,"argMapping"],[493,50,469,48],[493,51,469,49,"index"],[493,56,469,54],[493,57,469,55],[493,60,469,58],[493,61,469,59,"key"],[493,64,469,62],[493,66,469,64,"nativeValue"],[493,77,469,75],[493,78,469,76],[494,18,470,16],[495,16,471,14],[496,14,472,12],[497,12,473,10],[498,10,474,8],[499,8,475,6],[500,6,476,4],[501,4,477,2],[502,2,478,0],[503,2,479,0],[503,11,479,9,"asArray"],[503,18,479,16,"asArray"],[503,19,479,17,"value"],[503,24,479,22],[503,26,479,24],[504,4,480,2],[505,4,481,2],[505,11,481,9,"value"],[505,16,481,14],[505,20,481,18],[505,24,481,22],[505,27,481,25],[505,29,481,27],[505,32,481,30,"Array"],[505,37,481,35],[505,38,481,36,"isArray"],[505,45,481,43],[505,46,481,44,"value"],[505,51,481,49],[505,52,481,50],[505,55,481,53,"value"],[505,60,481,58],[505,63,481,61],[505,64,481,62,"value"],[505,69,481,67],[505,70,481,68],[506,2,482,0],[507,2,483,0],[507,6,483,4,"_default"],[507,14,483,12],[507,17,483,15,"exports"],[507,24,483,22],[507,25,483,23,"default"],[507,32,483,30],[507,35,483,33,"GestureHandler"],[507,49,483,47],[508,0,483,48],[508,3]],"functionMap":{"names":["<global>","_interopRequireWildcard","_interopRequireDefault","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","clearSelfAsPending","updateGestureConfig","destroy","isPointInView","getState","transformEventData","transformNativeEvent","sendEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","config.simultaneousHandlers.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","sync","enable","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","<anonymous>","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA;ACY,smBD;AEC,qFF;AGO;ECW;GDE;EEI;GFE;EGC;GHE;EIC;GJE;EKC;GLG;EMC;GNE;EOC,2BP;EQC;GRE;ESC;GTE;EUC;GVI;EWC;GXE;EYC;GZE;uBaC;GbM;EcC;GdmB;YeC;GfO;kBgBC;GhBQ;EiBC;GjBM;EkBC;GlBkC;EmBC;GnBE;coBC;GpBW;EqBC;GrBO;EsBC;GtBM;EuBG;GvBG;EwBC;GxBK;EyBC;GzBQ;E0BC;G1BM;E2BC;6CCC,2BD;G3BC;E6BC;mCC8B;mBCe;SDG;KDE;G7BG;EgCC;0CFG,4BE;2DFC;OEE;8BFE,iCE;GhCC;EiCC;GjCa;EkCC;GlCE;EmCC,cnC;EoCC;sDCI;sCDE;GpCI;EsCC;GtCK;SuCC;mBCG;KDwD;GvCO;EyCC,kCzC;E0CG;kDCmB;8CDE,SE,MF;4ECM;ODM,SE,MF;gDGE;SHK;wBIM;KJI;G1CE;CHC;AkDI;ClDiC;AmDC;CnDG"},"hasCjsExports":true},"type":"js/module"}]}