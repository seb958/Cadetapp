{"dependencies":[{"name":"../../../utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"4wo4OYT4MSo2InL8kiWmZxvepwE=","exportNames":["*"],"imports":1}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":69,"index":124}}],"key":"84Qu5UH2d/L4S1+Pr1wW2nxbCNI=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":36,"index":161}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../../../findNodeHandle","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":162},"end":{"line":4,"column":53,"index":215}}],"key":"k+xfarWxri7fB3IShKFMK0oi5UQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useViewRefHandler = useViewRefHandler;\n  var _utils = require(_dependencyMap[0], \"../../../utils\");\n  var _getShadowNodeFromRef = require(_dependencyMap[1], \"../../../getShadowNodeFromRef\");\n  var _react = require(_dependencyMap[2], \"react\");\n  var _findNodeHandle = require(_dependencyMap[3], \"../../../findNodeHandle\");\n  var findNodeHandle = _interopDefault(_findNodeHandle);\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    const refHandler = (0, _react.useCallback)(ref => {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref; // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, findNodeHandle.default)(state.viewRef);\n      } // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n      if (__DEV__ && (0, _utils.isFabric)() && global.isViewFlatteningDisabled) {\n        const node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":45,"map":[[12,2,8,0,"exports"],[12,9,8,0],[12,10,8,0,"useViewRefHandler"],[12,27,8,0],[12,30,8,0,"useViewRefHandler"],[12,47,8,0],[13,2,1,0],[13,6,1,0,"_utils"],[13,12,1,0],[13,15,1,0,"require"],[13,22,1,0],[13,23,1,0,"_dependencyMap"],[13,37,1,0],[14,2,2,0],[14,6,2,0,"_getShadowNodeFromRef"],[14,27,2,0],[14,30,2,0,"require"],[14,37,2,0],[14,38,2,0,"_dependencyMap"],[14,52,2,0],[15,2,3,0],[15,6,3,0,"_react"],[15,12,3,0],[15,15,3,0,"require"],[15,22,3,0],[15,23,3,0,"_dependencyMap"],[15,37,3,0],[16,2,4,0],[16,6,4,0,"_findNodeHandle"],[16,21,4,0],[16,24,4,0,"require"],[16,31,4,0],[16,32,4,0,"_dependencyMap"],[16,46,4,0],[17,2,4,0],[17,6,4,0,"findNodeHandle"],[17,20,4,0],[17,23,4,0,"_interopDefault"],[17,38,4,0],[17,39,4,0,"_findNodeHandle"],[17,54,4,0],[18,2,5,0],[19,2,6,0],[20,2,7,0],[21,2,8,7],[21,11,8,16,"useViewRefHandler"],[21,28,8,33,"useViewRefHandler"],[21,29,8,34,"state"],[21,34,8,39],[21,36,8,41,"updateAttachedGestures"],[21,58,8,63],[21,60,8,65],[22,4,9,2],[22,10,9,8,"refHandler"],[22,20,9,18],[22,23,9,21],[22,27,9,21,"useCallback"],[22,33,9,32],[22,34,9,32,"useCallback"],[22,45,9,32],[22,47,9,33,"ref"],[22,50,9,36],[22,54,9,40],[23,6,10,4],[23,10,10,8,"ref"],[23,13,10,11],[23,18,10,16],[23,22,10,20],[23,24,10,22],[24,8,11,6],[25,6,12,4],[26,6,14,4,"state"],[26,11,14,9],[26,12,14,10,"viewRef"],[26,19,14,17],[26,22,14,20,"ref"],[26,25,14,23],[26,26,14,24],[26,27,14,25],[28,6,16,4],[28,10,16,8,"state"],[28,15,16,13],[28,16,16,14,"previousViewTag"],[28,31,16,29],[28,36,16,34],[28,37,16,35],[28,38,16,36],[28,40,16,38],[29,8,17,6,"state"],[29,13,17,11],[29,14,17,12,"previousViewTag"],[29,29,17,27],[29,32,17,30],[29,36,17,30,"findNodeHandle"],[29,50,17,44],[29,51,17,44,"default"],[29,58,17,44],[29,60,17,45,"state"],[29,65,17,50],[29,66,17,51,"viewRef"],[29,73,17,58],[29,74,17,59],[30,6,18,4],[30,7,18,5],[30,8,18,6],[31,6,19,4],[33,6,22,4],[33,10,22,8],[33,11,22,9,"state"],[33,16,22,14],[33,17,22,15,"firstRender"],[33,28,22,26],[33,30,22,28],[34,8,23,6,"updateAttachedGestures"],[34,30,23,28],[34,31,23,29],[34,35,23,33],[34,36,23,34],[35,6,24,4],[36,6,26,4],[36,10,26,8,"__DEV__"],[36,17,26,15],[36,21,26,19],[36,25,26,19,"isFabric"],[36,31,26,27],[36,32,26,27,"isFabric"],[36,40,26,27],[36,42,26,28],[36,43,26,29],[36,47,26,33,"global"],[36,53,26,39],[36,54,26,40,"isViewFlatteningDisabled"],[36,78,26,64],[36,80,26,66],[37,8,27,6],[37,14,27,12,"node"],[37,18,27,16],[37,21,27,19],[37,25,27,19,"getShadowNodeFromRef"],[37,46,27,39],[37,47,27,39,"getShadowNodeFromRef"],[37,67,27,39],[37,69,27,40,"ref"],[37,72,27,43],[37,73,27,44],[38,8,29,6],[38,12,29,10,"global"],[38,18,29,16],[38,19,29,17,"isViewFlatteningDisabled"],[38,43,29,41],[38,44,29,42,"node"],[38,48,29,46],[38,49,29,47],[38,54,29,52],[38,59,29,57],[38,61,29,59],[39,10,30,8,"console"],[39,17,30,15],[39,18,30,16,"error"],[39,23,30,21],[39,24,30,22],[39,28,30,22,"tagMessage"],[39,34,30,32],[39,35,30,32,"tagMessage"],[39,45,30,32],[39,47,30,33],[39,115,30,101],[39,118,30,104],[39,216,30,202],[39,217,30,203],[39,218,30,204],[40,8,31,6],[41,6,32,4],[42,4,33,2],[42,5,33,3],[42,7,33,5],[42,8,33,6,"state"],[42,13,33,11],[42,15,33,13,"updateAttachedGestures"],[42,37,33,35],[42,38,33,36],[42,39,33,37],[43,4,34,2],[43,11,34,9,"refHandler"],[43,21,34,19],[44,2,35,0],[45,0,35,1],[45,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCO;iCCC;GDwB;CDE"},"hasCjsExports":false},"type":"js/module"}]}