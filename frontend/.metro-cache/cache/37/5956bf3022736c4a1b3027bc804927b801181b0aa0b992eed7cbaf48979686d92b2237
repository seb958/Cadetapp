{"dependencies":[{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":112},"end":{"line":5,"column":36,"index":148}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":196},"end":{"line":7,"column":33,"index":229}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":230},"end":{"line":8,"column":39,"index":269}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":270},"end":{"line":9,"column":45,"index":315}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"],"imports":1}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":316},"end":{"line":10,"column":55,"index":371}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable */\n  /* eslint-disable */\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _egjsHammerjs = require(_dependencyMap[0], \"@egjs/hammerjs\");\n  var Hammer = _interopDefault(_egjsHammerjs);\n  var _reactNativeWebDistExportsFindNodeHandle = require(_dependencyMap[1], \"react-native-web/dist/exports/findNodeHandle\");\n  var findNodeHandle = _interopDefault(_reactNativeWebDistExportsFindNodeHandle);\n  var _State = require(_dependencyMap[2], \"../State\");\n  var _constants = require(_dependencyMap[3], \"./constants\");\n  var _NodeManager = require(_dependencyMap[4], \"./NodeManager\");\n  var NodeManager = _interopNamespace(_NodeManager);\n  var _ghQueueMicrotask = require(_dependencyMap[5], \"../ghQueueMicrotask\");\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n  let gestureInstances = 0;\n  class GestureHandler {\n    isGestureRunning = false;\n    view = null;\n    hasGestureFailed = false;\n    hammer = null;\n    initialRotation = null;\n    config = {};\n    previousState = _State.State.UNDETERMINED;\n    pendingGestures = {};\n    oldState = _State.State.UNDETERMINED;\n    lastSentState = null;\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    }\n\n    // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    clearSelfAsPending = () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    };\n    updateGestureConfig({\n      enabled = true,\n      ...props\n    }) {\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig({\n        enabled,\n        ...props\n      });\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    destroy = () => {\n      this.clearSelfAsPending();\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n      this.hammer = null;\n    };\n    isPointInView = ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event;\n      // const direction = DirectionMap[ev.direction];\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n\n      // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: {\n          numberOfPointers,\n          state,\n          pointerInside,\n          ...this.transformNativeEvent(event),\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        },\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    sendEvent = nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n\n    // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent({\n        ...event,\n        eventType: Hammer.default.INPUT_CANCEL,\n        isFinal: true\n      });\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      return config.simultaneousHandlers?.some(handler => handler.isNative) ?? false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n\n      // @ts-ignore\n      this.view = (0, findNodeHandle.default)(ref);\n\n      // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new Hammer.default.Manager(this.view, {\n        inputClass: Hammer.default.TouchInput\n      }) : new Hammer.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this;\n      // @ts-ignore TODO(TS)\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev);\n\n        // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    sync = () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        }\n\n        // Prevent events before the system is ready.\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n        if (this.hasGestureFailed) {\n          return false;\n        }\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          }\n          // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n          this._stillWaiting = this._getPendingGestures();\n          // This gesture should continue waiting.\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            }\n            // This gesture shouldn't start until the others have finished.\n            return false;\n          }\n        }\n\n        // Use default behaviour\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n        // @ts-ignore FIXME(TS)\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n          ...inputData,\n          deltaRotation\n        });\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      const params = this.getHammerConfig();\n      // @ts-ignore FIXME(TS)\n      gesture.set({\n        ...params,\n        enable\n      });\n    };\n    simulateCancelEvent(_inputData) {}\n\n    // Validate the props\n    ensureConfig(config) {\n      const props = {\n        ...config\n      };\n\n      // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  }\n\n  // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = GestureHandler;\n});","lineCount":509,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[6,2,4,0,"Object"],[6,8,4,0],[6,9,4,0,"defineProperty"],[6,23,4,0],[6,24,4,0,"exports"],[6,31,4,0],[7,4,4,0,"value"],[7,9,4,0],[8,2,4,0],[9,2,4,0],[9,11,4,0,"_interopDefault"],[9,27,4,0,"e"],[9,28,4,0],[10,4,4,0],[10,11,4,0,"e"],[10,12,4,0],[10,16,4,0,"e"],[10,17,4,0],[10,18,4,0,"__esModule"],[10,28,4,0],[10,31,4,0,"e"],[10,32,4,0],[11,6,4,0,"default"],[11,13,4,0],[11,15,4,0,"e"],[12,4,4,0],[13,2,4,0],[14,2,4,0],[14,11,4,0,"_interopNamespace"],[14,29,4,0,"e"],[14,30,4,0],[15,4,4,0],[15,8,4,0,"e"],[15,9,4,0],[15,13,4,0,"e"],[15,14,4,0],[15,15,4,0,"__esModule"],[15,25,4,0],[15,34,4,0,"e"],[15,35,4,0],[16,4,4,0],[16,8,4,0,"n"],[16,9,4,0],[17,4,4,0],[17,8,4,0,"e"],[17,9,4,0],[17,11,4,0,"Object"],[17,17,4,0],[17,18,4,0,"keys"],[17,22,4,0],[17,23,4,0,"e"],[17,24,4,0],[17,26,4,0,"forEach"],[17,33,4,0],[17,44,4,0,"k"],[17,45,4,0],[18,6,4,0],[18,10,4,0,"d"],[18,11,4,0],[18,14,4,0,"Object"],[18,20,4,0],[18,21,4,0,"getOwnPropertyDescriptor"],[18,45,4,0],[18,46,4,0,"e"],[18,47,4,0],[18,49,4,0,"k"],[18,50,4,0],[19,6,4,0,"Object"],[19,12,4,0],[19,13,4,0,"defineProperty"],[19,27,4,0],[19,28,4,0,"n"],[19,29,4,0],[19,31,4,0,"k"],[19,32,4,0],[19,34,4,0,"d"],[19,35,4,0],[19,36,4,0,"get"],[19,39,4,0],[19,42,4,0,"d"],[19,43,4,0],[20,8,4,0,"enumerable"],[20,18,4,0],[21,8,4,0,"get"],[21,11,4,0],[21,22,4,0,"get"],[21,23,4,0],[22,10,4,0],[22,17,4,0,"e"],[22,18,4,0],[22,19,4,0,"k"],[22,20,4,0],[23,8,4,0],[24,6,4,0],[25,4,4,0],[26,4,4,0,"n"],[26,5,4,0],[26,6,4,0,"default"],[26,13,4,0],[26,16,4,0,"e"],[26,17,4,0],[27,4,4,0],[27,11,4,0,"n"],[27,12,4,0],[28,2,4,0],[29,2,477,0,"Object"],[29,8,477,0],[29,9,477,0,"defineProperty"],[29,23,477,0],[29,24,477,0,"exports"],[29,31,477,0],[30,4,477,0,"enumerable"],[30,14,477,0],[31,4,477,0,"get"],[31,7,477,0],[31,18,477,0,"get"],[31,19,477,0],[32,6,477,0],[32,13,477,0,"_default"],[32,21,477,0],[33,4,477,0],[34,2,477,0],[35,2,5,0],[35,6,5,0,"_egjsHammerjs"],[35,19,5,0],[35,22,5,0,"require"],[35,29,5,0],[35,30,5,0,"_dependencyMap"],[35,44,5,0],[36,2,5,0],[36,6,5,0,"Hammer"],[36,12,5,0],[36,15,5,0,"_interopDefault"],[36,30,5,0],[36,31,5,0,"_egjsHammerjs"],[36,44,5,0],[37,2,5,36],[37,6,5,36,"_reactNativeWebDistExportsFindNodeHandle"],[37,46,5,36],[37,49,5,36,"require"],[37,56,5,36],[37,57,5,36,"_dependencyMap"],[37,71,5,36],[38,2,5,36],[38,6,5,36,"findNodeHandle"],[38,20,5,36],[38,23,5,36,"_interopDefault"],[38,38,5,36],[38,39,5,36,"_reactNativeWebDistExportsFindNodeHandle"],[38,79,5,36],[39,2,7,0],[39,6,7,0,"_State"],[39,12,7,0],[39,15,7,0,"require"],[39,22,7,0],[39,23,7,0,"_dependencyMap"],[39,37,7,0],[40,2,8,0],[40,6,8,0,"_constants"],[40,16,8,0],[40,19,8,0,"require"],[40,26,8,0],[40,27,8,0,"_dependencyMap"],[40,41,8,0],[41,2,9,0],[41,6,9,0,"_NodeManager"],[41,18,9,0],[41,21,9,0,"require"],[41,28,9,0],[41,29,9,0,"_dependencyMap"],[41,43,9,0],[42,2,9,0],[42,6,9,0,"NodeManager"],[42,17,9,0],[42,20,9,0,"_interopNamespace"],[42,37,9,0],[42,38,9,0,"_NodeManager"],[42,50,9,0],[43,2,10,0],[43,6,10,0,"_ghQueueMicrotask"],[43,23,10,0],[43,26,10,0,"require"],[43,33,10,0],[43,34,10,0,"_dependencyMap"],[43,48,10,0],[44,2,12,0],[45,2,14,0],[45,6,14,4,"gestureInstances"],[45,22,14,20],[45,25,14,23],[45,26,14,24],[46,2,15,0],[46,8,15,6,"GestureHandler"],[46,22,15,20],[46,23,15,21],[47,4,16,2,"isGestureRunning"],[47,20,16,18],[47,23,16,21],[47,28,16,26],[48,4,17,2,"view"],[48,8,17,6],[48,11,17,9],[48,15,17,13],[49,4,18,2,"hasGestureFailed"],[49,20,18,18],[49,23,18,21],[49,28,18,26],[50,4,19,2,"hammer"],[50,10,19,8],[50,13,19,11],[50,17,19,15],[51,4,20,2,"initialRotation"],[51,19,20,17],[51,22,20,20],[51,26,20,24],[52,4,21,2,"config"],[52,10,21,8],[52,13,21,11],[52,14,21,12],[52,15,21,13],[53,4,22,2,"previousState"],[53,17,22,15],[53,20,22,18,"State"],[53,26,22,23],[53,27,22,23,"State"],[53,32,22,23],[53,33,22,24,"UNDETERMINED"],[53,45,22,36],[54,4,23,2,"pendingGestures"],[54,19,23,17],[54,22,23,20],[54,23,23,21],[54,24,23,22],[55,4,24,2,"oldState"],[55,12,24,10],[55,15,24,13,"State"],[55,21,24,18],[55,22,24,18,"State"],[55,27,24,18],[55,28,24,19,"UNDETERMINED"],[55,40,24,31],[56,4,25,2,"lastSentState"],[56,17,25,15],[56,20,25,18],[56,24,25,22],[57,4,26,2],[57,8,26,6,"id"],[57,10,26,8,"id"],[57,11,26,8],[57,13,26,11],[58,6,27,4],[58,13,27,11],[58,16,27,14],[58,20,27,18],[58,21,27,19,"name"],[58,25,27,23],[58,28,27,26],[58,32,27,30],[58,33,27,31,"gestureInstance"],[58,48,27,46],[58,50,27,48],[59,4,28,2],[61,4,30,2],[62,4,31,2],[63,4,32,2],[63,8,32,6,"isNative"],[63,16,32,14,"isNative"],[63,17,32,14],[63,19,32,17],[64,6,33,4],[64,13,33,11],[64,18,33,16],[65,4,34,2],[66,4,35,2],[66,8,35,6,"isDiscrete"],[66,18,35,16,"isDiscrete"],[66,19,35,16],[66,21,35,19],[67,6,36,4],[67,13,36,11],[67,18,36,16],[68,4,37,2],[69,4,38,2],[69,8,38,6,"shouldEnableGestureOnSetup"],[69,34,38,32,"shouldEnableGestureOnSetup"],[69,35,38,32],[69,37,38,35],[70,6,39,4],[70,12,39,10],[70,16,39,14,"Error"],[70,21,39,19],[70,22,39,20],[70,79,39,77],[70,80,39,78],[71,4,40,2],[72,4,41,2,"constructor"],[72,15,41,13,"constructor"],[72,16,41,13],[72,18,41,16],[73,6,42,4],[73,10,42,8],[73,11,42,9,"gestureInstance"],[73,26,42,24],[73,29,42,27,"gestureInstances"],[73,45,42,43],[73,47,42,45],[74,6,43,4],[74,10,43,8],[74,11,43,9,"hasCustomActivationCriteria"],[74,38,43,36],[74,41,43,39],[74,46,43,44],[75,4,44,2],[76,4,45,2,"getConfig"],[76,13,45,11,"getConfig"],[76,14,45,11],[76,16,45,14],[77,6,46,4],[77,13,46,11],[77,17,46,15],[77,18,46,16,"config"],[77,24,46,22],[78,4,47,2],[79,4,48,2,"onWaitingEnded"],[79,18,48,16,"onWaitingEnded"],[79,19,48,17,"_gesture"],[79,27,48,25],[79,29,48,27],[79,30,48,28],[80,4,49,2,"removePendingGesture"],[80,24,49,22,"removePendingGesture"],[80,25,49,23,"id"],[80,27,49,25],[80,29,49,27],[81,6,50,4],[81,13,50,11],[81,17,50,15],[81,18,50,16,"pendingGestures"],[81,33,50,31],[81,34,50,32,"id"],[81,36,50,34],[81,37,50,35],[82,4,51,2],[83,4,52,2,"addPendingGesture"],[83,21,52,19,"addPendingGesture"],[83,22,52,20,"gesture"],[83,29,52,27],[83,31,52,29],[84,6,53,4],[84,10,53,8],[84,11,53,9,"pendingGestures"],[84,26,53,24],[84,27,53,25,"gesture"],[84,34,53,32],[84,35,53,33,"id"],[84,37,53,35],[84,38,53,36],[84,41,53,39,"gesture"],[84,48,53,46],[85,4,54,2],[86,4,55,2,"isGestureEnabledForEvent"],[86,28,55,26,"isGestureEnabledForEvent"],[86,29,55,27,"_config"],[86,36,55,34],[86,38,55,36,"_recognizer"],[86,49,55,47],[86,51,55,49,"_event"],[86,57,55,55],[86,59,55,57],[87,6,56,4],[87,13,56,11],[88,8,57,6,"success"],[88,15,57,13],[88,17,57,15],[89,6,58,4],[89,7,58,5],[90,4,59,2],[91,4,60,2],[91,8,60,6,"NativeGestureClass"],[91,26,60,24,"NativeGestureClass"],[91,27,60,24],[91,29,60,27],[92,6,61,4],[92,12,61,10],[92,16,61,14,"Error"],[92,21,61,19],[92,22,61,20],[92,71,61,69],[92,72,61,70],[93,4,62,2],[94,4,63,2,"updateHasCustomActivationCriteria"],[94,37,63,35,"updateHasCustomActivationCriteria"],[94,38,63,36,"_config"],[94,45,63,43],[94,47,63,45],[95,6,64,4],[95,13,64,11],[95,17,64,15],[96,4,65,2],[97,4,66,2,"clearSelfAsPending"],[97,22,66,20],[97,25,66,23,"clearSelfAsPending"],[97,26,66,23],[97,31,66,29],[98,6,67,4],[98,10,67,8,"Array"],[98,15,67,13],[98,16,67,14,"isArray"],[98,23,67,21],[98,24,67,22],[98,28,67,26],[98,29,67,27,"config"],[98,35,67,33],[98,36,67,34,"waitFor"],[98,43,67,41],[98,44,67,42],[98,46,67,44],[99,8,68,6],[99,13,68,11],[99,19,68,17,"gesture"],[99,26,68,24],[99,30,68,28],[99,34,68,32],[99,35,68,33,"config"],[99,41,68,39],[99,42,68,40,"waitFor"],[99,49,68,47],[99,51,68,49],[100,10,69,8,"gesture"],[100,17,69,15],[100,18,69,16,"removePendingGesture"],[100,38,69,36],[100,39,69,37],[100,43,69,41],[100,44,69,42,"id"],[100,46,69,44],[100,47,69,45],[101,8,70,6],[102,6,71,4],[103,4,72,2],[103,5,72,3],[104,4,73,2,"updateGestureConfig"],[104,23,73,21,"updateGestureConfig"],[104,24,73,22],[105,6,74,4,"enabled"],[105,13,74,11],[105,16,74,14],[105,20,74,18],[106,6,75,4],[106,9,75,7,"props"],[107,4,76,2],[107,5,76,3],[107,7,76,5],[108,6,77,4],[108,10,77,8],[108,11,77,9,"clearSelfAsPending"],[108,29,77,27],[108,30,77,28],[108,31,77,29],[109,6,78,4],[109,10,78,8],[109,11,78,9,"config"],[109,17,78,15],[109,20,78,18],[109,24,78,22],[109,25,78,23,"ensureConfig"],[109,37,78,35],[109,38,78,36],[110,8,79,6,"enabled"],[110,15,79,13],[111,8,80,6],[111,11,80,9,"props"],[112,6,81,4],[112,7,81,5],[112,8,81,6],[113,6,82,4],[113,10,82,8],[113,11,82,9,"hasCustomActivationCriteria"],[113,38,82,36],[113,41,82,39],[113,45,82,43],[113,46,82,44,"updateHasCustomActivationCriteria"],[113,79,82,77],[113,80,82,78],[113,84,82,82],[113,85,82,83,"config"],[113,91,82,89],[113,92,82,90],[114,6,83,4],[114,10,83,8,"Array"],[114,15,83,13],[114,16,83,14,"isArray"],[114,23,83,21],[114,24,83,22],[114,28,83,26],[114,29,83,27,"config"],[114,35,83,33],[114,36,83,34,"waitFor"],[114,43,83,41],[114,44,83,42],[114,46,83,44],[115,8,84,6],[115,13,84,11],[115,19,84,17,"gesture"],[115,26,84,24],[115,30,84,28],[115,34,84,32],[115,35,84,33,"config"],[115,41,84,39],[115,42,84,40,"waitFor"],[115,49,84,47],[115,51,84,49],[116,10,85,8,"gesture"],[116,17,85,15],[116,18,85,16,"addPendingGesture"],[116,35,85,33],[116,36,85,34],[116,40,85,38],[116,41,85,39],[117,8,86,6],[118,6,87,4],[119,6,88,4],[119,10,88,8],[119,14,88,12],[119,15,88,13,"hammer"],[119,21,88,19],[119,23,88,21],[120,8,89,6],[120,12,89,10],[120,13,89,11,"sync"],[120,17,89,15],[120,18,89,16],[120,19,89,17],[121,6,90,4],[122,6,91,4],[122,13,91,11],[122,17,91,15],[122,18,91,16,"config"],[122,24,91,22],[123,4,92,2],[124,4,93,2,"destroy"],[124,11,93,9],[124,14,93,12,"destroy"],[124,15,93,12],[124,20,93,18],[125,6,94,4],[125,10,94,8],[125,11,94,9,"clearSelfAsPending"],[125,29,94,27],[125,30,94,28],[125,31,94,29],[126,6,95,4],[126,10,95,8],[126,14,95,12],[126,15,95,13,"hammer"],[126,21,95,19],[126,23,95,21],[127,8,96,6],[127,12,96,10],[127,13,96,11,"hammer"],[127,19,96,17],[127,20,96,18,"stop"],[127,24,96,22],[127,25,96,23],[127,30,96,28],[127,31,96,29],[128,8,97,6],[128,12,97,10],[128,13,97,11,"hammer"],[128,19,97,17],[128,20,97,18,"destroy"],[128,27,97,25],[128,28,97,26],[128,29,97,27],[129,6,98,4],[130,6,99,4],[130,10,99,8],[130,11,99,9,"hammer"],[130,17,99,15],[130,20,99,18],[130,24,99,22],[131,4,100,2],[131,5,100,3],[132,4,101,2,"isPointInView"],[132,17,101,15],[132,20,101,18,"isPointInView"],[132,21,101,19],[133,6,102,4,"x"],[133,7,102,5],[134,6,103,4,"y"],[135,4,104,2],[135,5,104,3],[135,10,104,8],[136,6,105,4],[137,6,106,4],[137,12,106,10,"rect"],[137,16,106,14],[137,19,106,17],[137,23,106,21],[137,24,106,22,"view"],[137,28,106,26],[137,29,106,27,"getBoundingClientRect"],[137,50,106,48],[137,51,106,49],[137,52,106,50],[138,6,107,4],[138,12,107,10,"pointerInside"],[138,25,107,23],[138,28,107,26,"x"],[138,29,107,27],[138,33,107,31,"rect"],[138,37,107,35],[138,38,107,36,"left"],[138,42,107,40],[138,46,107,44,"x"],[138,47,107,45],[138,51,107,49,"rect"],[138,55,107,53],[138,56,107,54,"right"],[138,61,107,59],[138,65,107,63,"y"],[138,66,107,64],[138,70,107,68,"rect"],[138,74,107,72],[138,75,107,73,"top"],[138,78,107,76],[138,82,107,80,"y"],[138,83,107,81],[138,87,107,85,"rect"],[138,91,107,89],[138,92,107,90,"bottom"],[138,98,107,96],[139,6,108,4],[139,13,108,11,"pointerInside"],[139,26,108,24],[140,4,109,2],[140,5,109,3],[141,4,110,2,"getState"],[141,12,110,10,"getState"],[141,13,110,11,"type"],[141,17,110,15],[141,19,110,17],[142,6,111,4],[143,6,112,4],[143,10,112,8,"type"],[143,14,112,12],[143,18,112,16],[143,19,112,17],[143,21,112,19],[144,8,113,6],[144,15,113,13],[144,16,113,14],[145,6,114,4],[146,6,115,4],[146,13,115,11,"EventMap"],[146,23,115,19],[146,24,115,19,"EventMap"],[146,32,115,19],[146,33,115,20,"type"],[146,37,115,24],[146,38,115,25],[147,4,116,2],[148,4,117,2,"transformEventData"],[148,22,117,20,"transformEventData"],[148,23,117,21,"event"],[148,28,117,26],[148,30,117,28],[149,6,118,4],[149,12,118,10],[150,8,119,6,"eventType"],[150,17,119,15],[151,8,120,6,"maxPointers"],[151,19,120,17],[151,21,120,19,"numberOfPointers"],[152,6,121,4],[152,7,121,5],[152,10,121,8,"event"],[152,15,121,13],[153,6,122,4],[154,6,123,4],[154,12,123,10,"changedTouch"],[154,24,123,22],[154,27,123,25,"event"],[154,32,123,30],[154,33,123,31,"changedPointers"],[154,48,123,46],[154,49,123,47],[154,50,123,48],[154,51,123,49],[155,6,124,4],[155,12,124,10,"pointerInside"],[155,25,124,23],[155,28,124,26],[155,32,124,30],[155,33,124,31,"isPointInView"],[155,46,124,44],[155,47,124,45],[156,8,125,6,"x"],[156,9,125,7],[156,11,125,9,"changedTouch"],[156,23,125,21],[156,24,125,22,"clientX"],[156,31,125,29],[157,8,126,6,"y"],[157,9,126,7],[157,11,126,9,"changedTouch"],[157,23,126,21],[157,24,126,22,"clientY"],[158,6,127,4],[158,7,127,5],[158,8,127,6],[160,6,129,4],[161,6,130,4],[161,12,130,10,"state"],[161,17,130,15],[161,20,130,18],[161,24,130,22],[161,25,130,23,"getState"],[161,33,130,31],[161,34,130,32,"eventType"],[161,43,130,41],[161,44,130,42],[162,6,131,4],[162,10,131,8,"state"],[162,15,131,13],[162,20,131,18],[162,24,131,22],[162,25,131,23,"previousState"],[162,38,131,36],[162,40,131,38],[163,8,132,6],[163,12,132,10],[163,13,132,11,"oldState"],[163,21,132,19],[163,24,132,22],[163,28,132,26],[163,29,132,27,"previousState"],[163,42,132,40],[164,8,133,6],[164,12,133,10],[164,13,133,11,"previousState"],[164,26,133,24],[164,29,133,27,"state"],[164,34,133,32],[165,6,134,4],[166,6,135,4],[166,13,135,11],[167,8,136,6,"nativeEvent"],[167,19,136,17],[167,21,136,19],[168,10,137,8,"numberOfPointers"],[168,26,137,24],[169,10,138,8,"state"],[169,15,138,13],[170,10,139,8,"pointerInside"],[170,23,139,21],[171,10,140,8],[171,13,140,11],[171,17,140,15],[171,18,140,16,"transformNativeEvent"],[171,38,140,36],[171,39,140,37,"event"],[171,44,140,42],[171,45,140,43],[172,10,141,8],[173,10,142,8,"handlerTag"],[173,20,142,18],[173,22,142,20],[173,26,142,24],[173,27,142,25,"handlerTag"],[173,37,142,35],[174,10,143,8,"target"],[174,16,143,14],[174,18,143,16],[174,22,143,20],[174,23,143,21,"ref"],[174,26,143,24],[175,10,144,8],[176,10,145,8],[177,10,146,8],[178,10,147,8,"oldState"],[178,18,147,16],[178,20,147,18,"state"],[178,25,147,23],[178,30,147,28],[178,34,147,32],[178,35,147,33,"previousState"],[178,48,147,46],[178,52,147,50,"state"],[178,57,147,55],[178,61,147,59],[178,62,147,60],[178,65,147,63],[178,69,147,67],[178,70,147,68,"oldState"],[178,78,147,76],[178,81,147,79,"undefined"],[179,8,148,6],[179,9,148,7],[180,8,149,6,"timeStamp"],[180,17,149,15],[180,19,149,17,"Date"],[180,23,149,21],[180,24,149,22,"now"],[180,27,149,25],[180,28,149,26],[181,6,150,4],[181,7,150,5],[182,4,151,2],[183,4,152,2,"transformNativeEvent"],[183,24,152,22,"transformNativeEvent"],[183,25,152,23,"_event"],[183,31,152,29],[183,33,152,31],[184,6,153,4],[184,13,153,11],[184,14,153,12],[184,15,153,13],[185,4,154,2],[186,4,155,2,"sendEvent"],[186,13,155,11],[186,16,155,14,"nativeEvent"],[186,27,155,25],[186,31,155,29],[187,6,156,4],[187,12,156,10],[188,8,157,6,"onGestureHandlerEvent"],[188,29,157,27],[189,8,158,6,"onGestureHandlerStateChange"],[190,6,159,4],[190,7,159,5],[190,10,159,8],[190,14,159,12],[190,15,159,13,"propsRef"],[190,23,159,21],[190,24,159,22,"current"],[190,31,159,29],[191,6,160,4],[191,12,160,10,"event"],[191,17,160,15],[191,20,160,18],[191,24,160,22],[191,25,160,23,"transformEventData"],[191,43,160,41],[191,44,160,42,"nativeEvent"],[191,55,160,53],[191,56,160,54],[192,6,161,4,"invokeNullableMethod"],[192,26,161,24],[192,27,161,25,"onGestureHandlerEvent"],[192,48,161,46],[192,50,161,48,"event"],[192,55,161,53],[192,56,161,54],[193,6,162,4],[193,10,162,8],[193,14,162,12],[193,15,162,13,"lastSentState"],[193,28,162,26],[193,33,162,31,"event"],[193,38,162,36],[193,39,162,37,"nativeEvent"],[193,50,162,48],[193,51,162,49,"state"],[193,56,162,54],[193,58,162,56],[194,8,163,6],[194,12,163,10],[194,13,163,11,"lastSentState"],[194,26,163,24],[194,29,163,27,"event"],[194,34,163,32],[194,35,163,33,"nativeEvent"],[194,46,163,44],[194,47,163,45,"state"],[194,52,163,50],[195,8,164,6,"invokeNullableMethod"],[195,28,164,26],[195,29,164,27,"onGestureHandlerStateChange"],[195,56,164,54],[195,58,164,56,"event"],[195,63,164,61],[195,64,164,62],[196,6,165,4],[197,4,166,2],[197,5,166,3],[198,4,167,2,"cancelPendingGestures"],[198,25,167,23,"cancelPendingGestures"],[198,26,167,24,"event"],[198,31,167,29],[198,33,167,31],[199,6,168,4],[199,11,168,9],[199,17,168,15,"gesture"],[199,24,168,22],[199,28,168,26,"Object"],[199,34,168,32],[199,35,168,33,"values"],[199,41,168,39],[199,42,168,40],[199,46,168,44],[199,47,168,45,"pendingGestures"],[199,62,168,60],[199,63,168,61],[199,65,168,63],[200,8,169,6],[200,12,169,10,"gesture"],[200,19,169,17],[200,23,169,21,"gesture"],[200,30,169,28],[200,31,169,29,"isGestureRunning"],[200,47,169,45],[200,49,169,47],[201,10,170,8,"gesture"],[201,17,170,15],[201,18,170,16,"hasGestureFailed"],[201,34,170,32],[201,37,170,35],[201,41,170,39],[202,10,171,8,"gesture"],[202,17,171,15],[202,18,171,16,"cancelEvent"],[202,29,171,27],[202,30,171,28,"event"],[202,35,171,33],[202,36,171,34],[203,8,172,6],[204,6,173,4],[205,4,174,2],[206,4,175,2,"notifyPendingGestures"],[206,25,175,23,"notifyPendingGestures"],[206,26,175,23],[206,28,175,26],[207,6,176,4],[207,11,176,9],[207,17,176,15,"gesture"],[207,24,176,22],[207,28,176,26,"Object"],[207,34,176,32],[207,35,176,33,"values"],[207,41,176,39],[207,42,176,40],[207,46,176,44],[207,47,176,45,"pendingGestures"],[207,62,176,60],[207,63,176,61],[207,65,176,63],[208,8,177,6],[208,12,177,10,"gesture"],[208,19,177,17],[208,21,177,19],[209,10,178,8,"gesture"],[209,17,178,15],[209,18,178,16,"onWaitingEnded"],[209,32,178,30],[209,33,178,31],[209,37,178,35],[209,38,178,36],[210,8,179,6],[211,6,180,4],[212,4,181,2],[214,4,183,2],[215,4,184,2,"onGestureEnded"],[215,18,184,16,"onGestureEnded"],[215,19,184,17,"event"],[215,24,184,22],[215,26,184,24],[216,6,185,4],[216,10,185,8],[216,11,185,9,"isGestureRunning"],[216,27,185,25],[216,30,185,28],[216,35,185,33],[217,6,186,4],[217,10,186,8],[217,11,186,9,"cancelPendingGestures"],[217,32,186,30],[217,33,186,31,"event"],[217,38,186,36],[217,39,186,37],[218,4,187,2],[219,4,188,2,"forceInvalidate"],[219,19,188,17,"forceInvalidate"],[219,20,188,18,"event"],[219,25,188,23],[219,27,188,25],[220,6,189,4],[220,10,189,8],[220,14,189,12],[220,15,189,13,"isGestureRunning"],[220,31,189,29],[220,33,189,31],[221,8,190,6],[221,12,190,10],[221,13,190,11,"hasGestureFailed"],[221,29,190,27],[221,32,190,30],[221,36,190,34],[222,8,191,6],[222,12,191,10],[222,13,191,11,"cancelEvent"],[222,24,191,22],[222,25,191,23,"event"],[222,30,191,28],[222,31,191,29],[223,6,192,4],[224,4,193,2],[225,4,194,2,"cancelEvent"],[225,15,194,13,"cancelEvent"],[225,16,194,14,"event"],[225,21,194,19],[225,23,194,21],[226,6,195,4],[226,10,195,8],[226,11,195,9,"notifyPendingGestures"],[226,32,195,30],[226,33,195,31],[226,34,195,32],[227,6,196,4],[227,10,196,8],[227,11,196,9,"sendEvent"],[227,20,196,18],[227,21,196,19],[228,8,197,6],[228,11,197,9,"event"],[228,16,197,14],[229,8,198,6,"eventType"],[229,17,198,15],[229,19,198,17,"Hammer"],[229,25,198,23],[229,26,198,23,"default"],[229,33,198,23],[229,34,198,24,"INPUT_CANCEL"],[229,46,198,36],[230,8,199,6,"isFinal"],[230,15,199,13],[230,17,199,15],[231,6,200,4],[231,7,200,5],[231,8,200,6],[232,6,201,4],[232,10,201,8],[232,11,201,9,"onGestureEnded"],[232,25,201,23],[232,26,201,24,"event"],[232,31,201,29],[232,32,201,30],[233,4,202,2],[234,4,203,2,"onRawEvent"],[234,14,203,12,"onRawEvent"],[234,15,203,13],[235,6,204,4,"isFirst"],[236,4,205,2],[236,5,205,3],[236,7,205,5],[237,6,206,4],[237,10,206,8,"isFirst"],[237,17,206,15],[237,19,206,17],[238,8,207,6],[238,12,207,10],[238,13,207,11,"hasGestureFailed"],[238,29,207,27],[238,32,207,30],[238,37,207,35],[239,6,208,4],[240,4,209,2],[241,4,210,2,"shouldUseTouchEvents"],[241,24,210,22,"shouldUseTouchEvents"],[241,25,210,23,"config"],[241,31,210,29],[241,33,210,31],[242,6,211,4],[242,13,211,11,"config"],[242,19,211,17],[242,20,211,18,"simultaneousHandlers"],[242,40,211,38],[242,42,211,40,"some"],[242,46,211,44],[242,47,211,45,"handler"],[242,54,211,52],[242,58,211,56,"handler"],[242,65,211,63],[242,66,211,64,"isNative"],[242,74,211,72],[242,75,211,73],[242,79,211,77],[242,84,211,82],[243,4,212,2],[244,4,213,2,"setView"],[244,11,213,9,"setView"],[244,12,213,10,"ref"],[244,15,213,13],[244,17,213,15,"propsRef"],[244,25,213,23],[244,27,213,25],[245,6,214,4],[245,10,214,8,"ref"],[245,13,214,11],[245,17,214,15],[245,21,214,19],[245,23,214,21],[246,8,215,6],[246,12,215,10],[246,13,215,11,"destroy"],[246,20,215,18],[246,21,215,19],[246,22,215,20],[247,8,216,6],[247,12,216,10],[247,13,216,11,"view"],[247,17,216,15],[247,20,216,18],[247,24,216,22],[248,8,217,6],[249,6,218,4],[251,6,220,4],[252,6,221,4],[252,12,221,10,"SUPPORTS_TOUCH"],[252,26,221,24],[252,29,221,27],[252,43,221,41],[252,47,221,45,"window"],[252,53,221,51],[253,6,222,4],[253,10,222,8],[253,11,222,9,"propsRef"],[253,19,222,17],[253,22,222,20,"propsRef"],[253,30,222,28],[254,6,223,4],[254,10,223,8],[254,11,223,9,"ref"],[254,14,223,12],[254,17,223,15,"ref"],[254,20,223,18],[256,6,225,4],[257,6,226,4],[257,10,226,8],[257,11,226,9,"view"],[257,15,226,13],[257,18,226,16],[257,22,226,16,"findNodeHandle"],[257,36,226,30],[257,37,226,30,"default"],[257,44,226,30],[257,46,226,31,"ref"],[257,49,226,34],[257,50,226,35],[259,6,228,4],[260,6,229,4],[261,6,230,4],[262,6,231,4],[262,10,231,8],[262,11,231,9,"hammer"],[262,17,231,15],[262,20,231,18,"SUPPORTS_TOUCH"],[262,34,231,32],[262,38,231,36],[262,42,231,40],[262,43,231,41,"shouldUseTouchEvents"],[262,63,231,61],[262,64,231,62],[262,68,231,66],[262,69,231,67,"config"],[262,75,231,73],[262,76,231,74],[262,79,231,77],[262,83,231,81,"Hammer"],[262,89,231,87],[262,90,231,87,"default"],[262,97,231,87],[262,98,231,88,"Manager"],[262,105,231,95],[262,106,231,96],[262,110,231,100],[262,111,231,101,"view"],[262,115,231,105],[262,117,231,107],[263,8,232,6,"inputClass"],[263,18,232,16],[263,20,232,18,"Hammer"],[263,26,232,24],[263,27,232,24,"default"],[263,34,232,24],[263,35,232,25,"TouchInput"],[264,6,233,4],[264,7,233,5],[264,8,233,6],[264,11,233,9],[264,15,233,13,"Hammer"],[264,21,233,19],[264,22,233,19,"default"],[264,29,233,19],[264,30,233,20,"Manager"],[264,37,233,27],[264,38,233,28],[264,42,233,32],[264,43,233,33,"view"],[264,47,233,37],[264,48,233,38],[265,6,234,4],[265,10,234,8],[265,11,234,9,"oldState"],[265,19,234,17],[265,22,234,20,"State"],[265,28,234,25],[265,29,234,25,"State"],[265,34,234,25],[265,35,234,26,"UNDETERMINED"],[265,47,234,38],[266,6,235,4],[266,10,235,8],[266,11,235,9,"previousState"],[266,24,235,22],[266,27,235,25,"State"],[266,33,235,30],[266,34,235,30,"State"],[266,39,235,30],[266,40,235,31,"UNDETERMINED"],[266,52,235,43],[267,6,236,4],[267,10,236,8],[267,11,236,9,"lastSentState"],[267,24,236,22],[267,27,236,25],[267,31,236,29],[268,6,237,4],[268,12,237,10],[269,8,238,6,"NativeGestureClass"],[270,6,239,4],[270,7,239,5],[270,10,239,8],[270,14,239,12],[271,6,240,4],[272,6,241,4],[272,12,241,10,"gesture"],[272,19,241,17],[272,22,241,20],[272,26,241,24,"NativeGestureClass"],[272,44,241,42],[272,45,241,43],[272,49,241,47],[272,50,241,48,"getHammerConfig"],[272,65,241,63],[272,66,241,64],[272,67,241,65],[272,68,241,66],[273,6,242,4],[273,10,242,8],[273,11,242,9,"hammer"],[273,17,242,15],[273,18,242,16,"add"],[273,21,242,19],[273,22,242,20,"gesture"],[273,29,242,27],[273,30,242,28],[274,6,243,4],[274,10,243,8],[274,11,243,9,"hammer"],[274,17,243,15],[274,18,243,16,"on"],[274,20,243,18],[274,21,243,19],[274,35,243,33],[274,37,243,35,"ev"],[274,39,243,37],[274,43,243,41],[275,8,244,6],[275,12,244,10],[275,13,244,11],[275,17,244,15],[275,18,244,16,"config"],[275,24,244,22],[275,25,244,23,"enabled"],[275,32,244,30],[275,34,244,32],[276,10,245,8],[276,14,245,12],[276,15,245,13,"hasGestureFailed"],[276,31,245,29],[276,34,245,32],[276,39,245,37],[277,10,246,8],[277,14,246,12],[277,15,246,13,"isGestureRunning"],[277,31,246,29],[277,34,246,32],[277,39,246,37],[278,10,247,8],[279,8,248,6],[280,8,249,6],[280,12,249,10],[280,13,249,11,"onRawEvent"],[280,23,249,21],[280,24,249,22,"ev"],[280,26,249,24],[280,27,249,25],[282,8,251,6],[283,8,252,6],[284,8,253,6],[284,12,253,10],[284,16,253,14],[284,17,253,15,"initialRotation"],[284,32,253,30],[284,37,253,35],[284,41,253,39],[284,45,253,43,"ev"],[284,47,253,45],[284,48,253,46,"rotation"],[284,56,253,54],[284,61,253,59],[284,62,253,60],[284,64,253,62],[285,10,254,8],[285,14,254,12],[285,15,254,13,"initialRotation"],[285,30,254,28],[285,33,254,31,"ev"],[285,35,254,33],[285,36,254,34,"rotation"],[285,44,254,42],[286,8,255,6],[287,8,256,6],[287,12,256,10,"ev"],[287,14,256,12],[287,15,256,13,"isFinal"],[287,22,256,20],[287,24,256,22],[288,10,257,8],[289,10,258,8,"setTimeout"],[289,20,258,18],[289,21,258,19],[289,27,258,25],[290,12,259,10],[290,16,259,14],[290,17,259,15,"initialRotation"],[290,32,259,30],[290,35,259,33],[290,39,259,37],[291,12,260,10],[291,16,260,14],[291,17,260,15,"hasGestureFailed"],[291,33,260,31],[291,36,260,34],[291,41,260,39],[292,10,261,8],[292,11,261,9],[292,12,261,10],[293,8,262,6],[294,6,263,4],[294,7,263,5],[294,8,263,6],[295,6,264,4],[295,10,264,8],[295,11,264,9,"setupEvents"],[295,22,264,20],[295,23,264,21],[295,24,264,22],[296,6,265,4],[296,10,265,8],[296,11,265,9,"sync"],[296,15,265,13],[296,16,265,14],[296,17,265,15],[297,4,266,2],[298,4,267,2,"setupEvents"],[298,15,267,13,"setupEvents"],[298,16,267,13],[298,18,267,16],[299,6,268,4],[300,6,269,4],[300,10,269,8],[300,11,269,9],[300,15,269,13],[300,16,269,14,"isDiscrete"],[300,26,269,24],[300,28,269,26],[301,8,270,6],[301,12,270,10],[301,13,270,11,"hammer"],[301,19,270,17],[301,20,270,18,"on"],[301,22,270,20],[301,23,270,21],[301,26,270,24],[301,30,270,28],[301,31,270,29,"name"],[301,35,270,33],[301,42,270,40],[301,44,270,42,"event"],[301,49,270,47],[301,53,270,51],[301,57,270,55],[301,58,270,56,"onStart"],[301,65,270,63],[301,66,270,64,"event"],[301,71,270,69],[301,72,270,70],[301,73,270,71],[302,8,271,6],[302,12,271,10],[302,13,271,11,"hammer"],[302,19,271,17],[302,20,271,18,"on"],[302,22,271,20],[302,23,271,21],[302,26,271,24],[302,30,271,28],[302,31,271,29,"name"],[302,35,271,33],[302,42,271,40],[302,46,271,44],[302,47,271,45,"name"],[302,51,271,49],[302,59,271,57],[302,61,271,59,"event"],[302,66,271,64],[302,70,271,68],[303,10,272,8],[303,14,272,12],[303,15,272,13,"onGestureEnded"],[303,29,272,27],[303,30,272,28,"event"],[303,35,272,33],[303,36,272,34],[304,8,273,6],[304,9,273,7],[304,10,273,8],[305,6,274,4],[306,6,275,4],[306,10,275,8],[306,11,275,9,"hammer"],[306,17,275,15],[306,18,275,16,"on"],[306,20,275,18],[306,21,275,19],[306,25,275,23],[306,26,275,24,"name"],[306,30,275,28],[306,32,275,30,"ev"],[306,34,275,32],[306,38,275,36],[306,42,275,40],[306,43,275,41,"onGestureActivated"],[306,61,275,59],[306,62,275,60,"ev"],[306,64,275,62],[306,65,275,63],[306,66,275,64],[306,67,275,65],[306,68,275,66],[307,4,276,2],[308,4,277,2,"onStart"],[308,11,277,9,"onStart"],[308,12,277,10],[309,6,278,4,"deltaX"],[309,12,278,10],[310,6,279,4,"deltaY"],[310,12,279,10],[311,6,280,4,"rotation"],[312,4,281,2],[312,5,281,3],[312,7,281,5],[313,6,282,4],[314,6,283,4],[314,10,283,8],[314,11,283,9,"oldState"],[314,19,283,17],[314,22,283,20,"State"],[314,28,283,25],[314,29,283,25,"State"],[314,34,283,25],[314,35,283,26,"UNDETERMINED"],[314,47,283,38],[315,6,284,4],[315,10,284,8],[315,11,284,9,"previousState"],[315,24,284,22],[315,27,284,25,"State"],[315,33,284,30],[315,34,284,30,"State"],[315,39,284,30],[315,40,284,31,"UNDETERMINED"],[315,52,284,43],[316,6,285,4],[316,10,285,8],[316,11,285,9,"lastSentState"],[316,24,285,22],[316,27,285,25],[316,31,285,29],[317,6,286,4],[317,10,286,8],[317,11,286,9,"isGestureRunning"],[317,27,286,25],[317,30,286,28],[317,34,286,32],[318,6,287,4],[318,10,287,8],[318,11,287,9,"__initialX"],[318,21,287,19],[318,24,287,22,"deltaX"],[318,30,287,28],[319,6,288,4],[319,10,288,8],[319,11,288,9,"__initialY"],[319,21,288,19],[319,24,288,22,"deltaY"],[319,30,288,28],[320,6,289,4],[320,10,289,8],[320,11,289,9,"initialRotation"],[320,26,289,24],[320,29,289,27,"rotation"],[320,37,289,35],[321,4,290,2],[322,4,291,2,"onGestureActivated"],[322,22,291,20,"onGestureActivated"],[322,23,291,21,"ev"],[322,25,291,23],[322,27,291,25],[323,6,292,4],[323,10,292,8],[323,11,292,9,"sendEvent"],[323,20,292,18],[323,21,292,19,"ev"],[323,23,292,21],[323,24,292,22],[324,4,293,2],[325,4,294,2,"onSuccess"],[325,13,294,11,"onSuccess"],[325,14,294,11],[325,16,294,14],[325,17,294,15],[326,4,295,2,"_getPendingGestures"],[326,23,295,21,"_getPendingGestures"],[326,24,295,21],[326,26,295,24],[327,6,296,4],[327,10,296,8,"Array"],[327,15,296,13],[327,16,296,14,"isArray"],[327,23,296,21],[327,24,296,22],[327,28,296,26],[327,29,296,27,"config"],[327,35,296,33],[327,36,296,34,"waitFor"],[327,43,296,41],[327,44,296,42],[327,48,296,46],[327,52,296,50],[327,53,296,51,"config"],[327,59,296,57],[327,60,296,58,"waitFor"],[327,67,296,65],[327,68,296,66,"length"],[327,74,296,72],[327,76,296,74],[328,8,297,6],[329,8,298,6],[330,8,299,6],[330,14,299,12,"stillWaiting"],[330,26,299,24],[330,29,299,27],[330,33,299,31],[330,34,299,32,"config"],[330,40,299,38],[330,41,299,39,"waitFor"],[330,48,299,46],[330,49,299,47,"filter"],[330,55,299,53],[330,56,299,54],[330,57,299,55],[331,10,300,8,"hasGestureFailed"],[332,8,301,6],[332,9,301,7],[332,14,301,12,"hasGestureFailed"],[332,30,301,28],[332,35,301,33],[332,40,301,38],[332,41,301,39],[333,8,302,6],[333,15,302,13,"stillWaiting"],[333,27,302,25],[334,6,303,4],[335,6,304,4],[335,13,304,11],[335,15,304,13],[336,4,305,2],[337,4,306,2,"getHammerConfig"],[337,19,306,17,"getHammerConfig"],[337,20,306,17],[337,22,306,20],[338,6,307,4],[338,12,307,10,"pointers"],[338,20,307,18],[338,23,307,21],[338,27,307,25],[338,28,307,26,"config"],[338,34,307,32],[338,35,307,33,"minPointers"],[338,46,307,44],[338,51,307,49],[338,55,307,53],[338,56,307,54,"config"],[338,62,307,60],[338,63,307,61,"maxPointers"],[338,74,307,72],[338,77,307,75],[338,81,307,79],[338,82,307,80,"config"],[338,88,307,86],[338,89,307,87,"minPointers"],[338,100,307,98],[338,103,307,101],[338,104,307,102],[339,6,308,4],[339,13,308,11],[340,8,309,6,"pointers"],[341,6,310,4],[341,7,310,5],[342,4,311,2],[343,4,312,2,"sync"],[343,8,312,6],[343,11,312,9,"sync"],[343,12,312,9],[343,17,312,15],[344,6,313,4],[344,12,313,10,"gesture"],[344,19,313,17],[344,22,313,20],[344,26,313,24],[344,27,313,25,"hammer"],[344,33,313,31],[344,34,313,32,"get"],[344,37,313,35],[344,38,313,36],[344,42,313,40],[344,43,313,41,"name"],[344,47,313,45],[344,48,313,46],[345,6,314,4],[345,10,314,8],[345,11,314,9,"gesture"],[345,18,314,16],[345,20,314,18],[346,6,315,4],[346,12,315,10,"enable"],[346,18,315,16],[346,21,315,19,"enable"],[346,22,315,20,"recognizer"],[346,32,315,30],[346,34,315,32,"inputData"],[346,43,315,41],[346,48,315,46],[347,8,316,6],[347,12,316,10],[347,13,316,11],[347,17,316,15],[347,18,316,16,"config"],[347,24,316,22],[347,25,316,23,"enabled"],[347,32,316,30],[347,34,316,32],[348,10,317,8],[348,14,317,12],[348,15,317,13,"isGestureRunning"],[348,31,317,29],[348,34,317,32],[348,39,317,37],[349,10,318,8],[349,14,318,12],[349,15,318,13,"hasGestureFailed"],[349,31,318,29],[349,34,318,32],[349,39,318,37],[350,10,319,8],[350,17,319,15],[350,22,319,20],[351,8,320,6],[353,8,322,6],[354,8,323,6],[354,12,323,10],[354,13,323,11,"inputData"],[354,22,323,20],[354,26,323,24],[354,27,323,25,"recognizer"],[354,37,323,35],[354,38,323,36,"options"],[354,45,323,43],[354,49,323,47],[354,56,323,54,"inputData"],[354,65,323,63],[354,66,323,64,"maxPointers"],[354,77,323,75],[354,82,323,80],[354,93,323,91],[354,95,323,93],[355,10,324,8],[355,17,324,15],[355,21,324,19],[355,22,324,20,"shouldEnableGestureOnSetup"],[355,48,324,46],[356,8,325,6],[357,8,326,6],[357,12,326,10],[357,16,326,14],[357,17,326,15,"hasGestureFailed"],[357,33,326,31],[357,35,326,33],[358,10,327,8],[358,17,327,15],[358,22,327,20],[359,8,328,6],[360,8,329,6],[360,12,329,10],[360,13,329,11],[360,17,329,15],[360,18,329,16,"isDiscrete"],[360,28,329,26],[360,30,329,28],[361,10,330,8],[361,14,330,12],[361,18,330,16],[361,19,330,17,"isGestureRunning"],[361,35,330,33],[361,37,330,35],[362,12,331,10],[362,19,331,17],[362,23,331,21],[363,10,332,8],[364,10,333,8],[365,10,334,8],[366,10,335,8],[366,14,335,12],[366,15,335,13,"_stillWaiting"],[366,28,335,26],[366,31,335,29],[366,35,335,33],[366,36,335,34,"_getPendingGestures"],[366,55,335,53],[366,56,335,54],[366,57,335,55],[367,10,336,8],[368,10,337,8],[368,14,337,12],[368,18,337,16],[368,19,337,17,"_stillWaiting"],[368,32,337,30],[368,33,337,31,"length"],[368,39,337,37],[368,41,337,39],[369,12,338,10],[370,12,339,10],[371,12,340,10],[371,17,340,15],[371,23,340,21,"gesture"],[371,30,340,28],[371,34,340,32],[371,38,340,36],[371,39,340,37,"_stillWaiting"],[371,52,340,50],[371,54,340,52],[372,14,341,12],[373,14,342,12],[373,18,342,16],[373,19,342,17,"gesture"],[373,26,342,24],[373,27,342,25,"isDiscrete"],[373,37,342,35],[373,41,342,39,"gesture"],[373,48,342,46],[373,49,342,47,"isGestureRunning"],[373,65,342,63],[373,67,342,65],[374,16,343,14],[374,20,343,18],[374,21,343,19,"hasGestureFailed"],[374,37,343,35],[374,40,343,38],[374,44,343,42],[375,16,344,14],[375,20,344,18],[375,21,344,19,"isGestureRunning"],[375,37,344,35],[375,40,344,38],[375,45,344,43],[376,16,345,14],[376,23,345,21],[376,28,345,26],[377,14,346,12],[378,12,347,10],[379,12,348,10],[380,12,349,10],[380,19,349,17],[380,24,349,22],[381,10,350,8],[382,8,351,6],[384,8,353,6],[385,8,354,6],[385,12,354,10],[385,13,354,11],[385,17,354,15],[385,18,354,16,"hasCustomActivationCriteria"],[385,45,354,43],[385,47,354,45],[386,10,355,8],[386,17,355,15],[386,21,355,19],[387,8,356,6],[388,8,357,6],[388,14,357,12,"deltaRotation"],[388,27,357,25],[388,30,357,28],[388,34,357,32],[388,35,357,33,"initialRotation"],[388,50,357,48],[388,54,357,52],[388,58,357,56],[388,61,357,59],[388,62,357,60],[388,65,357,63,"inputData"],[388,74,357,72],[388,75,357,73,"rotation"],[388,83,357,81],[388,86,357,84],[388,90,357,88],[388,91,357,89,"initialRotation"],[388,106,357,104],[389,8,358,6],[390,8,359,6],[390,14,359,12],[391,10,360,8,"success"],[391,17,360,15],[392,10,361,8,"failed"],[393,8,362,6],[393,9,362,7],[393,12,362,10],[393,16,362,14],[393,17,362,15,"isGestureEnabledForEvent"],[393,41,362,39],[393,42,362,40],[393,46,362,44],[393,47,362,45,"getConfig"],[393,56,362,54],[393,57,362,55],[393,58,362,56],[393,60,362,58,"recognizer"],[393,70,362,68],[393,72,362,70],[394,10,363,8],[394,13,363,11,"inputData"],[394,22,363,20],[395,10,364,8,"deltaRotation"],[396,8,365,6],[396,9,365,7],[396,10,365,8],[397,8,366,6],[397,12,366,10,"failed"],[397,18,366,16],[397,20,366,18],[398,10,367,8],[398,14,367,12],[398,15,367,13,"simulateCancelEvent"],[398,34,367,32],[398,35,367,33,"inputData"],[398,44,367,42],[398,45,367,43],[399,10,368,8],[399,14,368,12],[399,15,368,13,"hasGestureFailed"],[399,31,368,29],[399,34,368,32],[399,38,368,36],[400,8,369,6],[401,8,370,6],[401,15,370,13,"success"],[401,22,370,20],[402,6,371,4],[402,7,371,5],[403,6,372,4],[403,12,372,10,"params"],[403,18,372,16],[403,21,372,19],[403,25,372,23],[403,26,372,24,"getHammerConfig"],[403,41,372,39],[403,42,372,40],[403,43,372,41],[404,6,373,4],[405,6,374,4,"gesture"],[405,13,374,11],[405,14,374,12,"set"],[405,17,374,15],[405,18,374,16],[406,8,375,6],[406,11,375,9,"params"],[406,17,375,15],[407,8,376,6,"enable"],[408,6,377,4],[408,7,377,5],[408,8,377,6],[409,4,378,2],[409,5,378,3],[410,4,379,2,"simulateCancelEvent"],[410,23,379,21,"simulateCancelEvent"],[410,24,379,22,"_inputData"],[410,34,379,32],[410,36,379,34],[410,37,379,35],[412,4,381,2],[413,4,382,2,"ensureConfig"],[413,16,382,14,"ensureConfig"],[413,17,382,15,"config"],[413,23,382,21],[413,25,382,23],[414,6,383,4],[414,12,383,10,"props"],[414,17,383,15],[414,20,383,18],[415,8,384,6],[415,11,384,9,"config"],[416,6,385,4],[416,7,385,5],[418,6,387,4],[419,6,388,4],[419,10,388,8],[419,19,388,17],[419,23,388,21,"config"],[419,29,388,27],[419,31,388,29],[420,8,389,6,"props"],[420,13,389,11],[420,14,389,12,"minDist"],[420,21,389,19],[420,24,389,22,"config"],[420,30,389,28],[420,31,389,29,"minDist"],[420,38,389,36],[421,8,390,6,"props"],[421,13,390,11],[421,14,390,12,"minDistSq"],[421,23,390,21],[421,26,390,24,"props"],[421,31,390,29],[421,32,390,30,"minDist"],[421,39,390,37],[421,42,390,40,"props"],[421,47,390,45],[421,48,390,46,"minDist"],[421,55,390,53],[422,6,391,4],[423,6,392,4],[423,10,392,8],[423,23,392,21],[423,27,392,25,"config"],[423,33,392,31],[423,35,392,33],[424,8,393,6,"props"],[424,13,393,11],[424,14,393,12,"minVelocity"],[424,25,393,23],[424,28,393,26,"config"],[424,34,393,32],[424,35,393,33,"minVelocity"],[424,46,393,44],[425,8,394,6,"props"],[425,13,394,11],[425,14,394,12,"minVelocitySq"],[425,27,394,25],[425,30,394,28,"props"],[425,35,394,33],[425,36,394,34,"minVelocity"],[425,47,394,45],[425,50,394,48,"props"],[425,55,394,53],[425,56,394,54,"minVelocity"],[425,67,394,65],[426,6,395,4],[427,6,396,4],[427,10,396,8],[427,19,396,17],[427,23,396,21,"config"],[427,29,396,27],[427,31,396,29],[428,8,397,6,"props"],[428,13,397,11],[428,14,397,12,"maxDist"],[428,21,397,19],[428,24,397,22,"config"],[428,30,397,28],[428,31,397,29,"maxDist"],[428,38,397,36],[429,8,398,6,"props"],[429,13,398,11],[429,14,398,12,"maxDistSq"],[429,23,398,21],[429,26,398,24,"config"],[429,32,398,30],[429,33,398,31,"maxDist"],[429,40,398,38],[429,43,398,41,"config"],[429,49,398,47],[429,50,398,48,"maxDist"],[429,57,398,55],[430,6,399,4],[431,6,400,4],[431,10,400,8],[431,19,400,17],[431,23,400,21,"config"],[431,29,400,27],[431,31,400,29],[432,8,401,6,"props"],[432,13,401,11],[432,14,401,12,"waitFor"],[432,21,401,19],[432,24,401,22,"asArray"],[432,31,401,29],[432,32,401,30,"config"],[432,38,401,36],[432,39,401,37,"waitFor"],[432,46,401,44],[432,47,401,45],[432,48,401,46,"map"],[432,51,401,49],[432,52,401,50],[432,53,401,51],[433,10,402,8,"handlerTag"],[434,8,403,6],[434,9,403,7],[434,14,403,12,"NodeManager"],[434,25,403,23],[434,26,403,24,"getHandler"],[434,36,403,34],[434,37,403,35,"handlerTag"],[434,47,403,45],[434,48,403,46],[434,49,403,47],[434,50,403,48,"filter"],[434,56,403,54],[434,57,403,55,"v"],[434,58,403,56],[434,62,403,60,"v"],[434,63,403,61],[434,64,403,62],[435,6,404,4],[435,7,404,5],[435,13,404,11],[436,8,405,6,"props"],[436,13,405,11],[436,14,405,12,"waitFor"],[436,21,405,19],[436,24,405,22],[436,28,405,26],[437,6,406,4],[438,6,407,4],[438,10,407,8],[438,32,407,30],[438,36,407,34,"config"],[438,42,407,40],[438,44,407,42],[439,8,408,6],[439,14,408,12,"shouldUseTouchEvents"],[439,34,408,32],[439,37,408,35],[439,41,408,39],[439,42,408,40,"shouldUseTouchEvents"],[439,62,408,60],[439,63,408,61],[439,67,408,65],[439,68,408,66,"config"],[439,74,408,72],[439,75,408,73],[440,8,409,6,"props"],[440,13,409,11],[440,14,409,12,"simultaneousHandlers"],[440,34,409,32],[440,37,409,35,"asArray"],[440,44,409,42],[440,45,409,43,"config"],[440,51,409,49],[440,52,409,50,"simultaneousHandlers"],[440,72,409,70],[440,73,409,71],[440,74,409,72,"map"],[440,77,409,75],[440,78,409,76,"handler"],[440,85,409,83],[440,89,409,87],[441,10,410,8],[441,14,410,12],[441,21,410,19,"handler"],[441,28,410,26],[441,33,410,31],[441,41,410,39],[441,43,410,41],[442,12,411,10],[442,19,411,17,"NodeManager"],[442,30,411,28],[442,31,411,29,"getHandler"],[442,41,411,39],[442,42,411,40,"handler"],[442,49,411,47],[442,50,411,48],[443,10,412,8],[443,11,412,9],[443,17,412,15],[444,12,413,10],[444,19,413,17,"NodeManager"],[444,30,413,28],[444,31,413,29,"getHandler"],[444,41,413,39],[444,42,413,40,"handler"],[444,49,413,47],[444,50,413,48,"handlerTag"],[444,60,413,58],[444,61,413,59],[445,10,414,8],[446,8,415,6],[446,9,415,7],[446,10,415,8],[446,11,415,9,"filter"],[446,17,415,15],[446,18,415,16,"v"],[446,19,415,17],[446,23,415,21,"v"],[446,24,415,22],[446,25,415,23],[447,8,416,6],[447,12,416,10,"shouldUseTouchEvents"],[447,32,416,30],[447,37,416,35],[447,41,416,39],[447,42,416,40,"shouldUseTouchEvents"],[447,62,416,60],[447,63,416,61,"props"],[447,68,416,66],[447,69,416,67],[447,71,416,69],[448,10,417,8],[448,14,417,8,"ghQueueMicrotask"],[448,31,417,24],[448,32,417,24,"ghQueueMicrotask"],[448,48,417,24],[448,50,417,25],[448,56,417,31],[449,12,418,10],[450,12,419,10],[451,12,420,10],[451,16,420,14],[451,17,420,15,"destroy"],[451,24,420,22],[451,25,420,23],[451,26,420,24],[452,12,421,10],[452,16,421,14],[452,17,421,15,"setView"],[452,24,421,22],[452,25,421,23],[452,29,421,27],[452,30,421,28,"ref"],[452,33,421,31],[452,35,421,33],[452,39,421,37],[452,40,421,38,"propsRef"],[452,48,421,46],[452,49,421,47],[453,10,422,8],[453,11,422,9],[453,12,422,10],[454,8,423,6],[455,6,424,4],[455,7,424,5],[455,13,424,11],[456,8,425,6,"props"],[456,13,425,11],[456,14,425,12,"simultaneousHandlers"],[456,34,425,32],[456,37,425,35],[456,41,425,39],[457,6,426,4],[458,6,427,4],[458,12,427,10,"configProps"],[458,23,427,21],[458,26,427,24],[458,27,427,25],[458,40,427,38],[458,42,427,40],[458,55,427,53],[458,57,427,55],[458,66,427,64],[458,68,427,66],[458,77,427,75],[458,79,427,77],[458,90,427,88],[458,92,427,90],[458,107,427,105],[458,109,427,107],[458,120,427,118],[458,122,427,120],[458,135,427,133],[458,137,427,135],[458,155,427,153],[458,157,427,155],[458,175,427,173],[458,177,427,175],[458,193,427,191],[458,195,427,193],[458,211,427,209],[458,213,427,211],[458,233,427,231],[458,235,427,233],[458,253,427,251],[458,255,427,253],[458,275,427,273],[458,277,427,275],[458,295,427,293],[458,296,427,294],[459,6,428,4,"configProps"],[459,17,428,15],[459,18,428,16,"forEach"],[459,25,428,23],[459,26,428,24,"prop"],[459,30,428,28],[459,34,428,32],[460,8,429,6],[460,12,429,10],[460,19,429,17,"props"],[460,24,429,22],[460,25,429,23,"prop"],[460,29,429,27],[460,30,429,28],[460,35,429,33],[460,46,429,44],[460,48,429,46],[461,10,430,8,"props"],[461,15,430,13],[461,16,430,14,"prop"],[461,20,430,18],[461,21,430,19],[461,24,430,22,"Number"],[461,30,430,28],[461,31,430,29,"NaN"],[461,34,430,32],[462,8,431,6],[463,6,432,4],[463,7,432,5],[463,8,432,6],[464,6,433,4],[464,13,433,11,"props"],[464,18,433,16],[464,19,433,17],[464,20,433,18],[465,4,434,2],[466,2,435,0],[468,2,437,0],[469,2,438,0],[470,2,439,0],[470,11,439,9,"invokeNullableMethod"],[470,31,439,29,"invokeNullableMethod"],[470,32,439,30,"method"],[470,38,439,36],[470,40,439,38,"event"],[470,45,439,43],[470,47,439,45],[471,4,440,2],[471,8,440,6,"method"],[471,14,440,12],[471,16,440,14],[472,6,441,4],[472,10,441,8],[472,17,441,15,"method"],[472,23,441,21],[472,28,441,26],[472,38,441,36],[472,40,441,38],[473,8,442,6,"method"],[473,14,442,12],[473,15,442,13,"event"],[473,20,442,18],[473,21,442,19],[474,6,443,4],[474,7,443,5],[474,13,443,11],[475,8,444,6],[476,8,445,6],[476,12,445,10],[476,26,445,24],[476,30,445,28,"method"],[476,36,445,34],[476,40,445,38],[476,47,445,45,"method"],[476,53,445,51],[476,54,445,52,"__getHandler"],[476,66,445,64],[476,71,445,69],[476,81,445,79],[476,83,445,81],[477,10,446,8],[477,16,446,14,"handler"],[477,23,446,21],[477,26,446,24,"method"],[477,32,446,30],[477,33,446,31,"__getHandler"],[477,45,446,43],[477,46,446,44],[477,47,446,45],[478,10,447,8,"invokeNullableMethod"],[478,30,447,28],[478,31,447,29,"handler"],[478,38,447,36],[478,40,447,38,"event"],[478,45,447,43],[478,46,447,44],[479,8,448,6],[479,9,448,7],[479,15,448,13],[480,10,449,8],[480,14,449,12],[480,28,449,26],[480,32,449,30,"method"],[480,38,449,36],[480,40,449,38],[481,12,450,10],[481,18,450,16],[482,14,451,12,"argMapping"],[483,12,452,10],[483,13,452,11],[483,16,452,14,"method"],[483,22,452,20],[483,23,452,21,"__nodeConfig"],[483,35,452,33],[484,12,453,10],[484,16,453,14,"Array"],[484,21,453,19],[484,22,453,20,"isArray"],[484,29,453,27],[484,30,453,28,"argMapping"],[484,40,453,38],[484,41,453,39],[484,43,453,41],[485,14,454,12],[485,19,454,17],[485,25,454,23],[485,26,454,24,"index"],[485,31,454,29],[485,33,454,31],[485,34,454,32,"key"],[485,37,454,35],[485,39,454,37,"value"],[485,44,454,42],[485,45,454,43],[485,46,454,44],[485,50,454,48,"argMapping"],[485,60,454,58],[485,61,454,59,"entries"],[485,68,454,66],[485,69,454,67],[485,70,454,68],[485,72,454,70],[486,16,455,14],[486,20,455,18,"key"],[486,23,455,21],[486,27,455,25,"event"],[486,32,455,30],[486,33,455,31,"nativeEvent"],[486,44,455,42],[486,46,455,44],[487,18,456,16],[488,18,457,16],[488,24,457,22,"nativeValue"],[488,35,457,33],[488,38,457,36,"event"],[488,43,457,41],[488,44,457,42,"nativeEvent"],[488,55,457,53],[488,56,457,54,"key"],[488,59,457,57],[488,60,457,58],[489,18,458,16],[489,22,458,20,"value"],[489,27,458,25],[489,31,458,29,"value"],[489,36,458,34],[489,37,458,35,"setValue"],[489,45,458,43],[489,47,458,45],[490,20,459,18],[491,20,460,18,"value"],[491,25,460,23],[491,26,460,24,"setValue"],[491,34,460,32],[491,35,460,33,"nativeValue"],[491,46,460,44],[491,47,460,45],[492,18,461,16],[492,19,461,17],[492,25,461,23],[493,20,462,18],[494,20,463,18,"method"],[494,26,463,24],[494,27,463,25,"__nodeConfig"],[494,39,463,37],[494,40,463,38,"argMapping"],[494,50,463,48],[494,51,463,49,"index"],[494,56,463,54],[494,57,463,55],[494,60,463,58],[494,61,463,59,"key"],[494,64,463,62],[494,66,463,64,"nativeValue"],[494,77,463,75],[494,78,463,76],[495,18,464,16],[496,16,465,14],[497,14,466,12],[498,12,467,10],[499,10,468,8],[500,8,469,6],[501,6,470,4],[502,4,471,2],[503,2,472,0],[504,2,473,0],[504,11,473,9,"asArray"],[504,18,473,16,"asArray"],[504,19,473,17,"value"],[504,24,473,22],[504,26,473,24],[505,4,474,2],[506,4,475,2],[506,11,475,9,"value"],[506,16,475,14],[506,20,475,18],[506,24,475,22],[506,27,475,25],[506,29,475,27],[506,32,475,30,"Array"],[506,37,475,35],[506,38,475,36,"isArray"],[506,45,475,43],[506,46,475,44,"value"],[506,51,475,49],[506,52,475,50],[506,55,475,53,"value"],[506,60,475,58],[506,63,475,61],[506,64,475,62,"value"],[506,69,475,67],[506,70,475,68],[507,2,476,0],[508,2,477,0],[508,6,477,0,"_default"],[508,14,477,0],[508,17,477,15,"GestureHandler"],[508,31,477,29],[509,0,477,30],[509,3]],"functionMap":{"names":["<global>","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","clearSelfAsPending","updateGestureConfig","destroy","isPointInView","getState","transformEventData","transformNativeEvent","sendEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","config.simultaneousHandlers.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","sync","enable","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","ghQueueMicrotask$argument_0","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA;ACc;ECW;GDE;EEI;GFE;EGC;GHE;EIC;GJE;EKC;GLG;EMC;GNE;EOC,2BP;EQC;GRE;ESC;GTE;EUC;GVI;EWC;GXE;EYC;GZE;uBaC;GbM;EcC;GdmB;YeC;GfO;kBgBC;GhBQ;EiBC;GjBM;EkBC;GlBkC;EmBC;GnBE;coBC;GpBW;EqBC;GrBO;EsBC;GtBM;EuBG;GvBG;EwBC;GxBK;EyBC;GzBQ;E0BC;G1BM;E2BC;6CCC,2BD;G3BC;E6BC;mCC8B;mBCe;SDG;KDE;G7BG;EgCC;0CFG,4BE;2DFC;OEE;8BFE,iCE;GhCC;EiCC;GjCa;EkCC;GlCE;EmCC,cnC;EoCC;sDCI;sCDE;GpCI;EsCC;GtCK;SuCC;mBCG;KDwD;GvCO;EyCC,kCzC;E0CG;kDCmB;8CDE,SE,MF;4ECM;ODM,SE,MF;yBGE;SHK;wBIM;KJI;G1CE;CDC;AgDI;ChDiC;AiDC;CjDG"},"hasCjsExports":false},"type":"js/module"}]}