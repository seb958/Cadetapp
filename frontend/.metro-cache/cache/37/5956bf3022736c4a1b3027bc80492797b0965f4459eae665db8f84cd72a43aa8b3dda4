{"dependencies":[{"name":"@egjs/hammerjs","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":291},"end":{"line":6,"column":36,"index":327}}],"key":"I5Lt2ouU6D9a2C2V4SJv4GWe8Fg=","exportNames":["*"],"imports":1}},{"name":"react-native-web/dist/exports/findNodeHandle","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"2RP7Dp//wHy/IL2D3/pkDbKjgUI=","exportNames":["*"],"imports":1}},{"name":"../State","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":375},"end":{"line":8,"column":33,"index":408}}],"key":"ISRoyBmrsYyTcSqLDCBIFNoRZWE=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":409},"end":{"line":9,"column":39,"index":448}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"],"imports":1}},{"name":"./NodeManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":449},"end":{"line":10,"column":45,"index":494}}],"key":"krMbHBNX+RO/bw1gHRLBNgemf/A=","exportNames":["*"],"imports":1}},{"name":"../ghQueueMicrotask","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":495},"end":{"line":11,"column":55,"index":550}}],"key":"Ty3ERJQ4RajY8XDWg1+a8wq7RdE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _egjsHammerjs = require(_dependencyMap[0], \"@egjs/hammerjs\");\n  var Hammer = _interopDefault(_egjsHammerjs);\n  var _reactNativeWebDistExportsFindNodeHandle = require(_dependencyMap[1], \"react-native-web/dist/exports/findNodeHandle\");\n  var findNodeHandle = _interopDefault(_reactNativeWebDistExportsFindNodeHandle);\n  var _State = require(_dependencyMap[2], \"../State\");\n  var _constants = require(_dependencyMap[3], \"./constants\");\n  var _NodeManager = require(_dependencyMap[4], \"./NodeManager\");\n  var NodeManager = _interopNamespace(_NodeManager);\n  var _ghQueueMicrotask = require(_dependencyMap[5], \"../ghQueueMicrotask\");\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  /* eslint-disable eslint-comments/no-unlimited-disable */\n\n  /* eslint-disable */\n\n  // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\n  let gestureInstances = 0;\n  class GestureHandler {\n    get id() {\n      return `${this.name}${this.gestureInstance}`;\n    } // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n    // here to use instanceof would cause import cycle\n\n    get isNative() {\n      return false;\n    }\n    get isDiscrete() {\n      return false;\n    }\n    get shouldEnableGestureOnSetup() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n    constructor() {\n      _defineProperty(this, \"handlerTag\", void 0);\n      _defineProperty(this, \"isGestureRunning\", false);\n      _defineProperty(this, \"view\", null);\n      _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n      _defineProperty(this, \"hasGestureFailed\", false);\n      _defineProperty(this, \"hammer\", null);\n      _defineProperty(this, \"initialRotation\", null);\n      _defineProperty(this, \"__initialX\", void 0);\n      _defineProperty(this, \"__initialY\", void 0);\n      _defineProperty(this, \"config\", {});\n      _defineProperty(this, \"previousState\", _State.State.UNDETERMINED);\n      _defineProperty(this, \"pendingGestures\", {});\n      _defineProperty(this, \"oldState\", _State.State.UNDETERMINED);\n      _defineProperty(this, \"lastSentState\", null);\n      _defineProperty(this, \"gestureInstance\", void 0);\n      _defineProperty(this, \"_stillWaiting\", void 0);\n      _defineProperty(this, \"propsRef\", void 0);\n      _defineProperty(this, \"ref\", void 0);\n      _defineProperty(this, \"clearSelfAsPending\", () => {\n        if (Array.isArray(this.config.waitFor)) {\n          for (const gesture of this.config.waitFor) {\n            gesture.removePendingGesture(this.id);\n          }\n        }\n      });\n      _defineProperty(this, \"destroy\", () => {\n        this.clearSelfAsPending();\n        if (this.hammer) {\n          this.hammer.stop(false);\n          this.hammer.destroy();\n        }\n        this.hammer = null;\n      });\n      _defineProperty(this, \"isPointInView\", ({\n        x,\n        y\n      }) => {\n        // @ts-ignore FIXME(TS)\n        const rect = this.view.getBoundingClientRect();\n        const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n        return pointerInside;\n      });\n      _defineProperty(this, \"sendEvent\", nativeEvent => {\n        const {\n          onGestureHandlerEvent,\n          onGestureHandlerStateChange\n        } = this.propsRef.current;\n        const event = this.transformEventData(nativeEvent);\n        invokeNullableMethod(onGestureHandlerEvent, event);\n        if (this.lastSentState !== event.nativeEvent.state) {\n          this.lastSentState = event.nativeEvent.state;\n          invokeNullableMethod(onGestureHandlerStateChange, event);\n        }\n      });\n      _defineProperty(this, \"sync\", () => {\n        const gesture = this.hammer.get(this.name);\n        if (!gesture) return;\n        const enable = (recognizer, inputData) => {\n          if (!this.config.enabled) {\n            this.isGestureRunning = false;\n            this.hasGestureFailed = false;\n            return false;\n          } // Prevent events before the system is ready.\n\n          if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n            return this.shouldEnableGestureOnSetup;\n          }\n          if (this.hasGestureFailed) {\n            return false;\n          }\n          if (!this.isDiscrete) {\n            if (this.isGestureRunning) {\n              return true;\n            } // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n            // Only process if there are views to wait for.\n\n            this._stillWaiting = this._getPendingGestures(); // This gesture should continue waiting.\n\n            if (this._stillWaiting.length) {\n              // Check to see if one of the gestures you're waiting for has started.\n              // If it has then the gesture should fail.\n              for (const gesture of this._stillWaiting) {\n                // When the target gesture has started, this gesture must force fail.\n                if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                  this.hasGestureFailed = true;\n                  this.isGestureRunning = false;\n                  return false;\n                }\n              } // This gesture shouldn't start until the others have finished.\n\n              return false;\n            }\n          } // Use default behaviour\n\n          if (!this.hasCustomActivationCriteria) {\n            return true;\n          }\n          const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation; // @ts-ignore FIXME(TS)\n\n          const {\n            success,\n            failed\n          } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n            ...inputData,\n            deltaRotation\n          });\n          if (failed) {\n            this.simulateCancelEvent(inputData);\n            this.hasGestureFailed = true;\n          }\n          return success;\n        };\n        const params = this.getHammerConfig(); // @ts-ignore FIXME(TS)\n\n        gesture.set({\n          ...params,\n          enable\n        });\n      });\n      this.gestureInstance = gestureInstances++;\n      this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n      return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n    get NativeGestureClass() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n    updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n    updateGestureConfig({\n      enabled = true,\n      ...props\n    }) {\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig({\n        enabled,\n        ...props\n      });\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n    getState(type) {\n      // @ts-ignore TODO(TS) check if this is needed\n      if (type == 0) {\n        return 0;\n      }\n      return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n      const {\n        eventType,\n        maxPointers: numberOfPointers\n      } = event; // const direction = DirectionMap[ev.direction];\n\n      const changedTouch = event.changedPointers[0];\n      const pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      }); // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n\n      const state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: {\n          numberOfPointers,\n          state,\n          pointerInside,\n          ...this.transformNativeEvent(event),\n          // onHandlerStateChange only\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          // send oldState only when the state was changed, or is different than ACTIVE\n          // GestureDetector relies on the presence of `oldState` to differentiate between\n          // update events and state change events\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        },\n        timeStamp: Date.now()\n      };\n    }\n    transformNativeEvent(_event) {\n      return {};\n    }\n    cancelPendingGestures(event) {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n    notifyPendingGestures() {\n      for (const gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    } // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n\n    onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n    cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent({\n        ...event,\n        eventType: Hammer.default.INPUT_CANCEL,\n        isFinal: true\n      });\n      this.onGestureEnded(event);\n    }\n    onRawEvent({\n      isFirst\n    }) {\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n    shouldUseTouchEvents(config) {\n      var _config$simultaneousH, _config$simultaneousH2;\n      return (_config$simultaneousH = (_config$simultaneousH2 = config.simultaneousHandlers) === null || _config$simultaneousH2 === void 0 ? void 0 : _config$simultaneousH2.some(handler => handler.isNative)) !== null && _config$simultaneousH !== void 0 ? _config$simultaneousH : false;\n    }\n    setView(ref, propsRef) {\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      } // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n\n      const SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = (0, findNodeHandle.default)(ref); // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n      // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n      // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new Hammer.default.Manager(this.view, {\n        inputClass: Hammer.default.TouchInput\n      }) : new Hammer.default.Manager(this.view);\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      const {\n        NativeGestureClass\n      } = this; // @ts-ignore TODO(TS)\n\n      const gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', ev => {\n        if (!this.config.enabled) {\n          this.hasGestureFailed = false;\n          this.isGestureRunning = false;\n          return;\n        }\n        this.onRawEvent(ev); // TODO: Bacon: Check against something other than null\n        // The isFirst value is not called when the first rotation is calculated.\n\n        if (this.initialRotation === null && ev.rotation !== 0) {\n          this.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          // in favor of a willFail otherwise the last frame of the gesture will be captured.\n          setTimeout(() => {\n            this.initialRotation = null;\n            this.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n    setupEvents() {\n      // TODO(TS) Hammer types aren't exactly that what we get in runtime\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, event => this.onStart(event));\n        this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n          this.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({\n      deltaX,\n      deltaY,\n      rotation\n    }) {\n      // Reset the state for the next gesture\n      this.oldState = _State.State.UNDETERMINED;\n      this.previousState = _State.State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        // Get the list of gestures that this gesture is still waiting for.\n        // Use `=== false` in case a ref that isn't a gesture handler is used.\n        const stillWaiting = this.config.waitFor.filter(({\n          hasGestureFailed\n        }) => hasGestureFailed === false);\n        return stillWaiting;\n      }\n      return [];\n    }\n    getHammerConfig() {\n      const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers\n      };\n    }\n    simulateCancelEvent(_inputData) {} // Validate the props\n\n    ensureConfig(config) {\n      const props = {\n        ...config\n      }; // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(({\n          handlerTag\n        }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(v => v);\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          (0, _ghQueueMicrotask.ghQueueMicrotask)(() => {\n            // if the undelying event API needs to be changed, we need to unmount and mount\n            // the hammer instance again.\n            this.destroy();\n            this.setView(this.ref, this.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(prop => {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props; // TODO(TS) how to convince TS that props are filled?\n    }\n  } // TODO(TS) investigate this method\n  // Used for sending data to a callback or AnimatedEvent\n\n  function invokeNullableMethod(method, event) {\n    if (method) {\n      if (typeof method === 'function') {\n        method(event);\n      } else {\n        // For use with reanimated's AnimatedEvent\n        if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n          const handler = method.__getHandler();\n          invokeNullableMethod(handler, event);\n        } else {\n          if ('__nodeConfig' in method) {\n            const {\n              argMapping\n            } = method.__nodeConfig;\n            if (Array.isArray(argMapping)) {\n              for (const [index, [key, value]] of argMapping.entries()) {\n                if (key in event.nativeEvent) {\n                  // @ts-ignore fix method type\n                  const nativeValue = event.nativeEvent[key];\n                  if (value && value.setValue) {\n                    // Reanimated API\n                    value.setValue(nativeValue);\n                  } else {\n                    // RN Animated API\n                    method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [value];\n  }\n  var _default = GestureHandler;\n});","lineCount":522,"map":[[27,2,562,0,"Object"],[27,8,562,0],[27,9,562,0,"defineProperty"],[27,23,562,0],[27,24,562,0,"exports"],[27,31,562,0],[28,4,562,0,"enumerable"],[28,14,562,0],[29,4,562,0,"get"],[29,7,562,0],[29,18,562,0,"get"],[29,19,562,0],[30,6,562,0],[30,13,562,0,"_default"],[30,21,562,0],[31,4,562,0],[32,2,562,0],[33,2,6,0],[33,6,6,0,"_egjsHammerjs"],[33,19,6,0],[33,22,6,0,"require"],[33,29,6,0],[33,30,6,0,"_dependencyMap"],[33,44,6,0],[34,2,6,0],[34,6,6,0,"Hammer"],[34,12,6,0],[34,15,6,0,"_interopDefault"],[34,30,6,0],[34,31,6,0,"_egjsHammerjs"],[34,44,6,0],[35,2,6,36],[35,6,6,36,"_reactNativeWebDistExportsFindNodeHandle"],[35,46,6,36],[35,49,6,36,"require"],[35,56,6,36],[35,57,6,36,"_dependencyMap"],[35,71,6,36],[36,2,6,36],[36,6,6,36,"findNodeHandle"],[36,20,6,36],[36,23,6,36,"_interopDefault"],[36,38,6,36],[36,39,6,36,"_reactNativeWebDistExportsFindNodeHandle"],[36,79,6,36],[37,2,8,0],[37,6,8,0,"_State"],[37,12,8,0],[37,15,8,0,"require"],[37,22,8,0],[37,23,8,0,"_dependencyMap"],[37,37,8,0],[38,2,9,0],[38,6,9,0,"_constants"],[38,16,9,0],[38,19,9,0,"require"],[38,26,9,0],[38,27,9,0,"_dependencyMap"],[38,41,9,0],[39,2,10,0],[39,6,10,0,"_NodeManager"],[39,18,10,0],[39,21,10,0,"require"],[39,28,10,0],[39,29,10,0,"_dependencyMap"],[39,43,10,0],[40,2,10,0],[40,6,10,0,"NodeManager"],[40,17,10,0],[40,20,10,0,"_interopNamespace"],[40,37,10,0],[40,38,10,0,"_NodeManager"],[40,50,10,0],[41,2,11,0],[41,6,11,0,"_ghQueueMicrotask"],[41,23,11,0],[41,26,11,0,"require"],[41,33,11,0],[41,34,11,0,"_dependencyMap"],[41,48,11,0],[42,2,1,0],[42,11,1,9,"_defineProperty"],[42,26,1,24,"_defineProperty"],[42,27,1,25,"obj"],[42,30,1,28],[42,32,1,30,"key"],[42,35,1,33],[42,37,1,35,"value"],[42,42,1,40],[42,44,1,42],[43,4,1,44],[43,8,1,48,"key"],[43,11,1,51],[43,15,1,55,"obj"],[43,18,1,58],[43,20,1,60],[44,6,1,62,"Object"],[44,12,1,68],[44,13,1,69,"defineProperty"],[44,27,1,83],[44,28,1,84,"obj"],[44,31,1,87],[44,33,1,89,"key"],[44,36,1,92],[44,38,1,94],[45,8,1,96,"value"],[45,13,1,101],[45,15,1,103,"value"],[45,20,1,108],[46,8,1,110,"enumerable"],[46,18,1,120],[46,20,1,122],[46,24,1,126],[47,8,1,128,"configurable"],[47,20,1,140],[47,22,1,142],[47,26,1,146],[48,8,1,148,"writable"],[48,16,1,156],[48,18,1,158],[49,6,1,163],[49,7,1,164],[49,8,1,165],[50,4,1,167],[50,5,1,168],[50,11,1,174],[51,6,1,176,"obj"],[51,9,1,179],[51,10,1,180,"key"],[51,13,1,183],[51,14,1,184],[51,17,1,187,"value"],[51,22,1,192],[52,4,1,194],[53,4,1,196],[53,11,1,203,"obj"],[53,14,1,206],[54,2,1,208],[56,2,3,0],[58,2,5,0],[60,2,11,56],[62,2,13,0],[62,6,13,4,"gestureInstances"],[62,22,13,20],[62,25,13,23],[62,26,13,24],[63,2,15,0],[63,8,15,6,"GestureHandler"],[63,22,15,20],[63,23,15,21],[64,4,16,2],[64,8,16,6,"id"],[64,10,16,8,"id"],[64,11,16,8],[64,13,16,11],[65,6,17,4],[65,13,17,11],[65,16,17,14],[65,20,17,18],[65,21,17,19,"name"],[65,25,17,23],[65,28,17,26],[65,32,17,30],[65,33,17,31,"gestureInstance"],[65,48,17,46],[65,50,17,48],[66,4,18,2],[66,5,18,3],[66,6,18,4],[67,4,19,2],[69,4,22,2],[69,8,22,6,"isNative"],[69,16,22,14,"isNative"],[69,17,22,14],[69,19,22,17],[70,6,23,4],[70,13,23,11],[70,18,23,16],[71,4,24,2],[72,4,26,2],[72,8,26,6,"isDiscrete"],[72,18,26,16,"isDiscrete"],[72,19,26,16],[72,21,26,19],[73,6,27,4],[73,13,27,11],[73,18,27,16],[74,4,28,2],[75,4,30,2],[75,8,30,6,"shouldEnableGestureOnSetup"],[75,34,30,32,"shouldEnableGestureOnSetup"],[75,35,30,32],[75,37,30,35],[76,6,31,4],[76,12,31,10],[76,16,31,14,"Error"],[76,21,31,19],[76,22,31,20],[76,79,31,77],[76,80,31,78],[77,4,32,2],[78,4,34,2,"constructor"],[78,15,34,13,"constructor"],[78,16,34,13],[78,18,34,16],[79,6,35,4,"_defineProperty"],[79,21,35,19],[79,22,35,20],[79,26,35,24],[79,28,35,26],[79,40,35,38],[79,42,35,40],[79,47,35,45],[79,48,35,46],[79,49,35,47],[80,6,37,4,"_defineProperty"],[80,21,37,19],[80,22,37,20],[80,26,37,24],[80,28,37,26],[80,46,37,44],[80,48,37,46],[80,53,37,51],[80,54,37,52],[81,6,39,4,"_defineProperty"],[81,21,39,19],[81,22,39,20],[81,26,39,24],[81,28,39,26],[81,34,39,32],[81,36,39,34],[81,40,39,38],[81,41,39,39],[82,6,41,4,"_defineProperty"],[82,21,41,19],[82,22,41,20],[82,26,41,24],[82,28,41,26],[82,57,41,55],[82,59,41,57],[82,64,41,62],[82,65,41,63],[82,66,41,64],[83,6,43,4,"_defineProperty"],[83,21,43,19],[83,22,43,20],[83,26,43,24],[83,28,43,26],[83,46,43,44],[83,48,43,46],[83,53,43,51],[83,54,43,52],[84,6,45,4,"_defineProperty"],[84,21,45,19],[84,22,45,20],[84,26,45,24],[84,28,45,26],[84,36,45,34],[84,38,45,36],[84,42,45,40],[84,43,45,41],[85,6,47,4,"_defineProperty"],[85,21,47,19],[85,22,47,20],[85,26,47,24],[85,28,47,26],[85,45,47,43],[85,47,47,45],[85,51,47,49],[85,52,47,50],[86,6,49,4,"_defineProperty"],[86,21,49,19],[86,22,49,20],[86,26,49,24],[86,28,49,26],[86,40,49,38],[86,42,49,40],[86,47,49,45],[86,48,49,46],[86,49,49,47],[87,6,51,4,"_defineProperty"],[87,21,51,19],[87,22,51,20],[87,26,51,24],[87,28,51,26],[87,40,51,38],[87,42,51,40],[87,47,51,45],[87,48,51,46],[87,49,51,47],[88,6,53,4,"_defineProperty"],[88,21,53,19],[88,22,53,20],[88,26,53,24],[88,28,53,26],[88,36,53,34],[88,38,53,36],[88,39,53,37],[88,40,53,38],[88,41,53,39],[89,6,55,4,"_defineProperty"],[89,21,55,19],[89,22,55,20],[89,26,55,24],[89,28,55,26],[89,43,55,41],[89,45,55,43,"State"],[89,51,55,48],[89,52,55,48,"State"],[89,57,55,48],[89,58,55,49,"UNDETERMINED"],[89,70,55,61],[89,71,55,62],[90,6,57,4,"_defineProperty"],[90,21,57,19],[90,22,57,20],[90,26,57,24],[90,28,57,26],[90,45,57,43],[90,47,57,45],[90,48,57,46],[90,49,57,47],[90,50,57,48],[91,6,59,4,"_defineProperty"],[91,21,59,19],[91,22,59,20],[91,26,59,24],[91,28,59,26],[91,38,59,36],[91,40,59,38,"State"],[91,46,59,43],[91,47,59,43,"State"],[91,52,59,43],[91,53,59,44,"UNDETERMINED"],[91,65,59,56],[91,66,59,57],[92,6,61,4,"_defineProperty"],[92,21,61,19],[92,22,61,20],[92,26,61,24],[92,28,61,26],[92,43,61,41],[92,45,61,43],[92,49,61,47],[92,50,61,48],[93,6,63,4,"_defineProperty"],[93,21,63,19],[93,22,63,20],[93,26,63,24],[93,28,63,26],[93,45,63,43],[93,47,63,45],[93,52,63,50],[93,53,63,51],[93,54,63,52],[94,6,65,4,"_defineProperty"],[94,21,65,19],[94,22,65,20],[94,26,65,24],[94,28,65,26],[94,43,65,41],[94,45,65,43],[94,50,65,48],[94,51,65,49],[94,52,65,50],[95,6,67,4,"_defineProperty"],[95,21,67,19],[95,22,67,20],[95,26,67,24],[95,28,67,26],[95,38,67,36],[95,40,67,38],[95,45,67,43],[95,46,67,44],[95,47,67,45],[96,6,69,4,"_defineProperty"],[96,21,69,19],[96,22,69,20],[96,26,69,24],[96,28,69,26],[96,33,69,31],[96,35,69,33],[96,40,69,38],[96,41,69,39],[96,42,69,40],[97,6,71,4,"_defineProperty"],[97,21,71,19],[97,22,71,20],[97,26,71,24],[97,28,71,26],[97,48,71,46],[97,50,71,48],[97,56,71,54],[98,8,72,6],[98,12,72,10,"Array"],[98,17,72,15],[98,18,72,16,"isArray"],[98,25,72,23],[98,26,72,24],[98,30,72,28],[98,31,72,29,"config"],[98,37,72,35],[98,38,72,36,"waitFor"],[98,45,72,43],[98,46,72,44],[98,48,72,46],[99,10,73,8],[99,15,73,13],[99,21,73,19,"gesture"],[99,28,73,26],[99,32,73,30],[99,36,73,34],[99,37,73,35,"config"],[99,43,73,41],[99,44,73,42,"waitFor"],[99,51,73,49],[99,53,73,51],[100,12,74,10,"gesture"],[100,19,74,17],[100,20,74,18,"removePendingGesture"],[100,40,74,38],[100,41,74,39],[100,45,74,43],[100,46,74,44,"id"],[100,48,74,46],[100,49,74,47],[101,10,75,8],[102,8,76,6],[103,6,77,4],[103,7,77,5],[103,8,77,6],[104,6,79,4,"_defineProperty"],[104,21,79,19],[104,22,79,20],[104,26,79,24],[104,28,79,26],[104,37,79,35],[104,39,79,37],[104,45,79,43],[105,8,80,6],[105,12,80,10],[105,13,80,11,"clearSelfAsPending"],[105,31,80,29],[105,32,80,30],[105,33,80,31],[106,8,82,6],[106,12,82,10],[106,16,82,14],[106,17,82,15,"hammer"],[106,23,82,21],[106,25,82,23],[107,10,83,8],[107,14,83,12],[107,15,83,13,"hammer"],[107,21,83,19],[107,22,83,20,"stop"],[107,26,83,24],[107,27,83,25],[107,32,83,30],[107,33,83,31],[108,10,84,8],[108,14,84,12],[108,15,84,13,"hammer"],[108,21,84,19],[108,22,84,20,"destroy"],[108,29,84,27],[108,30,84,28],[108,31,84,29],[109,8,85,6],[110,8,87,6],[110,12,87,10],[110,13,87,11,"hammer"],[110,19,87,17],[110,22,87,20],[110,26,87,24],[111,6,88,4],[111,7,88,5],[111,8,88,6],[112,6,90,4,"_defineProperty"],[112,21,90,19],[112,22,90,20],[112,26,90,24],[112,28,90,26],[112,43,90,41],[112,45,90,43],[112,46,90,44],[113,8,91,6,"x"],[113,9,91,7],[114,8,92,6,"y"],[115,6,93,4],[115,7,93,5],[115,12,93,10],[116,8,94,6],[117,8,95,6],[117,14,95,12,"rect"],[117,18,95,16],[117,21,95,19],[117,25,95,23],[117,26,95,24,"view"],[117,30,95,28],[117,31,95,29,"getBoundingClientRect"],[117,52,95,50],[117,53,95,51],[117,54,95,52],[118,8,96,6],[118,14,96,12,"pointerInside"],[118,27,96,25],[118,30,96,28,"x"],[118,31,96,29],[118,35,96,33,"rect"],[118,39,96,37],[118,40,96,38,"left"],[118,44,96,42],[118,48,96,46,"x"],[118,49,96,47],[118,53,96,51,"rect"],[118,57,96,55],[118,58,96,56,"right"],[118,63,96,61],[118,67,96,65,"y"],[118,68,96,66],[118,72,96,70,"rect"],[118,76,96,74],[118,77,96,75,"top"],[118,80,96,78],[118,84,96,82,"y"],[118,85,96,83],[118,89,96,87,"rect"],[118,93,96,91],[118,94,96,92,"bottom"],[118,100,96,98],[119,8,97,6],[119,15,97,13,"pointerInside"],[119,28,97,26],[120,6,98,4],[120,7,98,5],[120,8,98,6],[121,6,100,4,"_defineProperty"],[121,21,100,19],[121,22,100,20],[121,26,100,24],[121,28,100,26],[121,39,100,37],[121,41,100,39,"nativeEvent"],[121,52,100,50],[121,56,100,54],[122,8,101,6],[122,14,101,12],[123,10,102,8,"onGestureHandlerEvent"],[123,31,102,29],[124,10,103,8,"onGestureHandlerStateChange"],[125,8,104,6],[125,9,104,7],[125,12,104,10],[125,16,104,14],[125,17,104,15,"propsRef"],[125,25,104,23],[125,26,104,24,"current"],[125,33,104,31],[126,8,105,6],[126,14,105,12,"event"],[126,19,105,17],[126,22,105,20],[126,26,105,24],[126,27,105,25,"transformEventData"],[126,45,105,43],[126,46,105,44,"nativeEvent"],[126,57,105,55],[126,58,105,56],[127,8,106,6,"invokeNullableMethod"],[127,28,106,26],[127,29,106,27,"onGestureHandlerEvent"],[127,50,106,48],[127,52,106,50,"event"],[127,57,106,55],[127,58,106,56],[128,8,108,6],[128,12,108,10],[128,16,108,14],[128,17,108,15,"lastSentState"],[128,30,108,28],[128,35,108,33,"event"],[128,40,108,38],[128,41,108,39,"nativeEvent"],[128,52,108,50],[128,53,108,51,"state"],[128,58,108,56],[128,60,108,58],[129,10,109,8],[129,14,109,12],[129,15,109,13,"lastSentState"],[129,28,109,26],[129,31,109,29,"event"],[129,36,109,34],[129,37,109,35,"nativeEvent"],[129,48,109,46],[129,49,109,47,"state"],[129,54,109,52],[130,10,110,8,"invokeNullableMethod"],[130,30,110,28],[130,31,110,29,"onGestureHandlerStateChange"],[130,58,110,56],[130,60,110,58,"event"],[130,65,110,63],[130,66,110,64],[131,8,111,6],[132,6,112,4],[132,7,112,5],[132,8,112,6],[133,6,114,4,"_defineProperty"],[133,21,114,19],[133,22,114,20],[133,26,114,24],[133,28,114,26],[133,34,114,32],[133,36,114,34],[133,42,114,40],[134,8,115,6],[134,14,115,12,"gesture"],[134,21,115,19],[134,24,115,22],[134,28,115,26],[134,29,115,27,"hammer"],[134,35,115,33],[134,36,115,34,"get"],[134,39,115,37],[134,40,115,38],[134,44,115,42],[134,45,115,43,"name"],[134,49,115,47],[134,50,115,48],[135,8,116,6],[135,12,116,10],[135,13,116,11,"gesture"],[135,20,116,18],[135,22,116,20],[136,8,118,6],[136,14,118,12,"enable"],[136,20,118,18],[136,23,118,21,"enable"],[136,24,118,22,"recognizer"],[136,34,118,32],[136,36,118,34,"inputData"],[136,45,118,43],[136,50,118,48],[137,10,119,8],[137,14,119,12],[137,15,119,13],[137,19,119,17],[137,20,119,18,"config"],[137,26,119,24],[137,27,119,25,"enabled"],[137,34,119,32],[137,36,119,34],[138,12,120,10],[138,16,120,14],[138,17,120,15,"isGestureRunning"],[138,33,120,31],[138,36,120,34],[138,41,120,39],[139,12,121,10],[139,16,121,14],[139,17,121,15,"hasGestureFailed"],[139,33,121,31],[139,36,121,34],[139,41,121,39],[140,12,122,10],[140,19,122,17],[140,24,122,22],[141,10,123,8],[141,11,123,9],[141,12,123,10],[143,10,126,8],[143,14,126,12],[143,15,126,13,"inputData"],[143,24,126,22],[143,28,126,26],[143,29,126,27,"recognizer"],[143,39,126,37],[143,40,126,38,"options"],[143,47,126,45],[143,51,126,49],[143,58,126,56,"inputData"],[143,67,126,65],[143,68,126,66,"maxPointers"],[143,79,126,77],[143,84,126,82],[143,95,126,93],[143,97,126,95],[144,12,127,10],[144,19,127,17],[144,23,127,21],[144,24,127,22,"shouldEnableGestureOnSetup"],[144,50,127,48],[145,10,128,8],[146,10,130,8],[146,14,130,12],[146,18,130,16],[146,19,130,17,"hasGestureFailed"],[146,35,130,33],[146,37,130,35],[147,12,131,10],[147,19,131,17],[147,24,131,22],[148,10,132,8],[149,10,134,8],[149,14,134,12],[149,15,134,13],[149,19,134,17],[149,20,134,18,"isDiscrete"],[149,30,134,28],[149,32,134,30],[150,12,135,10],[150,16,135,14],[150,20,135,18],[150,21,135,19,"isGestureRunning"],[150,37,135,35],[150,39,135,37],[151,14,136,12],[151,21,136,19],[151,25,136,23],[152,12,137,10],[152,13,137,11],[152,14,137,12],[153,12,138,10],[155,12,141,10],[155,16,141,14],[155,17,141,15,"_stillWaiting"],[155,30,141,28],[155,33,141,31],[155,37,141,35],[155,38,141,36,"_getPendingGestures"],[155,57,141,55],[155,58,141,56],[155,59,141,57],[155,60,141,58],[155,61,141,59],[157,12,143,10],[157,16,143,14],[157,20,143,18],[157,21,143,19,"_stillWaiting"],[157,34,143,32],[157,35,143,33,"length"],[157,41,143,39],[157,43,143,41],[158,14,144,12],[159,14,145,12],[160,14,146,12],[160,19,146,17],[160,25,146,23,"gesture"],[160,32,146,30],[160,36,146,34],[160,40,146,38],[160,41,146,39,"_stillWaiting"],[160,54,146,52],[160,56,146,54],[161,16,147,14],[162,16,148,14],[162,20,148,18],[162,21,148,19,"gesture"],[162,28,148,26],[162,29,148,27,"isDiscrete"],[162,39,148,37],[162,43,148,41,"gesture"],[162,50,148,48],[162,51,148,49,"isGestureRunning"],[162,67,148,65],[162,69,148,67],[163,18,149,16],[163,22,149,20],[163,23,149,21,"hasGestureFailed"],[163,39,149,37],[163,42,149,40],[163,46,149,44],[164,18,150,16],[164,22,150,20],[164,23,150,21,"isGestureRunning"],[164,39,150,37],[164,42,150,40],[164,47,150,45],[165,18,151,16],[165,25,151,23],[165,30,151,28],[166,16,152,14],[167,14,153,12],[167,15,153,13],[167,16,153,14],[169,14,156,12],[169,21,156,19],[169,26,156,24],[170,12,157,10],[171,10,158,8],[171,11,158,9],[171,12,158,10],[173,10,161,8],[173,14,161,12],[173,15,161,13],[173,19,161,17],[173,20,161,18,"hasCustomActivationCriteria"],[173,47,161,45],[173,49,161,47],[174,12,162,10],[174,19,162,17],[174,23,162,21],[175,10,163,8],[176,10,165,8],[176,16,165,14,"deltaRotation"],[176,29,165,27],[176,32,165,30],[176,36,165,34],[176,37,165,35,"initialRotation"],[176,52,165,50],[176,56,165,54],[176,60,165,58],[176,63,165,61],[176,64,165,62],[176,67,165,65,"inputData"],[176,76,165,74],[176,77,165,75,"rotation"],[176,85,165,83],[176,88,165,86],[176,92,165,90],[176,93,165,91,"initialRotation"],[176,108,165,106],[176,109,165,107],[176,110,165,108],[178,10,167,8],[178,16,167,14],[179,12,168,10,"success"],[179,19,168,17],[180,12,169,10,"failed"],[181,10,170,8],[181,11,170,9],[181,14,170,12],[181,18,170,16],[181,19,170,17,"isGestureEnabledForEvent"],[181,43,170,41],[181,44,170,42],[181,48,170,46],[181,49,170,47,"getConfig"],[181,58,170,56],[181,59,170,57],[181,60,170,58],[181,62,170,60,"recognizer"],[181,72,170,70],[181,74,170,72],[182,12,170,74],[182,15,170,77,"inputData"],[182,24,170,86],[183,12,171,10,"deltaRotation"],[184,10,172,8],[184,11,172,9],[184,12,172,10],[185,10,174,8],[185,14,174,12,"failed"],[185,20,174,18],[185,22,174,20],[186,12,175,10],[186,16,175,14],[186,17,175,15,"simulateCancelEvent"],[186,36,175,34],[186,37,175,35,"inputData"],[186,46,175,44],[186,47,175,45],[187,12,176,10],[187,16,176,14],[187,17,176,15,"hasGestureFailed"],[187,33,176,31],[187,36,176,34],[187,40,176,38],[188,10,177,8],[189,10,179,8],[189,17,179,15,"success"],[189,24,179,22],[190,8,180,6],[190,9,180,7],[191,8,182,6],[191,14,182,12,"params"],[191,20,182,18],[191,23,182,21],[191,27,182,25],[191,28,182,26,"getHammerConfig"],[191,43,182,41],[191,44,182,42],[191,45,182,43],[191,46,182,44],[191,47,182,45],[193,8,184,6,"gesture"],[193,15,184,13],[193,16,184,14,"set"],[193,19,184,17],[193,20,184,18],[194,10,184,20],[194,13,184,23,"params"],[194,19,184,29],[195,10,185,8,"enable"],[196,8,186,6],[196,9,186,7],[196,10,186,8],[197,6,187,4],[197,7,187,5],[197,8,187,6],[198,6,189,4],[198,10,189,8],[198,11,189,9,"gestureInstance"],[198,26,189,24],[198,29,189,27,"gestureInstances"],[198,45,189,43],[198,47,189,45],[199,6,190,4],[199,10,190,8],[199,11,190,9,"hasCustomActivationCriteria"],[199,38,190,36],[199,41,190,39],[199,46,190,44],[200,4,191,2],[201,4,193,2,"getConfig"],[201,13,193,11,"getConfig"],[201,14,193,11],[201,16,193,14],[202,6,194,4],[202,13,194,11],[202,17,194,15],[202,18,194,16,"config"],[202,24,194,22],[203,4,195,2],[204,4,197,2,"onWaitingEnded"],[204,18,197,16,"onWaitingEnded"],[204,19,197,17,"_gesture"],[204,27,197,25],[204,29,197,27],[204,30,197,28],[205,4,199,2,"removePendingGesture"],[205,24,199,22,"removePendingGesture"],[205,25,199,23,"id"],[205,27,199,25],[205,29,199,27],[206,6,200,4],[206,13,200,11],[206,17,200,15],[206,18,200,16,"pendingGestures"],[206,33,200,31],[206,34,200,32,"id"],[206,36,200,34],[206,37,200,35],[207,4,201,2],[208,4,203,2,"addPendingGesture"],[208,21,203,19,"addPendingGesture"],[208,22,203,20,"gesture"],[208,29,203,27],[208,31,203,29],[209,6,204,4],[209,10,204,8],[209,11,204,9,"pendingGestures"],[209,26,204,24],[209,27,204,25,"gesture"],[209,34,204,32],[209,35,204,33,"id"],[209,37,204,35],[209,38,204,36],[209,41,204,39,"gesture"],[209,48,204,46],[210,4,205,2],[211,4,207,2,"isGestureEnabledForEvent"],[211,28,207,26,"isGestureEnabledForEvent"],[211,29,207,27,"_config"],[211,36,207,34],[211,38,207,36,"_recognizer"],[211,49,207,47],[211,51,207,49,"_event"],[211,57,207,55],[211,59,207,57],[212,6,208,4],[212,13,208,11],[213,8,209,6,"success"],[213,15,209,13],[213,17,209,15],[214,6,210,4],[214,7,210,5],[215,4,211,2],[216,4,213,2],[216,8,213,6,"NativeGestureClass"],[216,26,213,24,"NativeGestureClass"],[216,27,213,24],[216,29,213,27],[217,6,214,4],[217,12,214,10],[217,16,214,14,"Error"],[217,21,214,19],[217,22,214,20],[217,71,214,69],[217,72,214,70],[218,4,215,2],[219,4,217,2,"updateHasCustomActivationCriteria"],[219,37,217,35,"updateHasCustomActivationCriteria"],[219,38,217,36,"_config"],[219,45,217,43],[219,47,217,45],[220,6,218,4],[220,13,218,11],[220,17,218,15],[221,4,219,2],[222,4,221,2,"updateGestureConfig"],[222,23,221,21,"updateGestureConfig"],[222,24,221,22],[223,6,222,4,"enabled"],[223,13,222,11],[223,16,222,14],[223,20,222,18],[224,6,223,4],[224,9,223,7,"props"],[225,4,224,2],[225,5,224,3],[225,7,224,5],[226,6,225,4],[226,10,225,8],[226,11,225,9,"clearSelfAsPending"],[226,29,225,27],[226,30,225,28],[226,31,225,29],[227,6,226,4],[227,10,226,8],[227,11,226,9,"config"],[227,17,226,15],[227,20,226,18],[227,24,226,22],[227,25,226,23,"ensureConfig"],[227,37,226,35],[227,38,226,36],[228,8,227,6,"enabled"],[228,15,227,13],[229,8,228,6],[229,11,228,9,"props"],[230,6,229,4],[230,7,229,5],[230,8,229,6],[231,6,230,4],[231,10,230,8],[231,11,230,9,"hasCustomActivationCriteria"],[231,38,230,36],[231,41,230,39],[231,45,230,43],[231,46,230,44,"updateHasCustomActivationCriteria"],[231,79,230,77],[231,80,230,78],[231,84,230,82],[231,85,230,83,"config"],[231,91,230,89],[231,92,230,90],[232,6,232,4],[232,10,232,8,"Array"],[232,15,232,13],[232,16,232,14,"isArray"],[232,23,232,21],[232,24,232,22],[232,28,232,26],[232,29,232,27,"config"],[232,35,232,33],[232,36,232,34,"waitFor"],[232,43,232,41],[232,44,232,42],[232,46,232,44],[233,8,233,6],[233,13,233,11],[233,19,233,17,"gesture"],[233,26,233,24],[233,30,233,28],[233,34,233,32],[233,35,233,33,"config"],[233,41,233,39],[233,42,233,40,"waitFor"],[233,49,233,47],[233,51,233,49],[234,10,234,8,"gesture"],[234,17,234,15],[234,18,234,16,"addPendingGesture"],[234,35,234,33],[234,36,234,34],[234,40,234,38],[234,41,234,39],[235,8,235,6],[236,6,236,4],[237,6,238,4],[237,10,238,8],[237,14,238,12],[237,15,238,13,"hammer"],[237,21,238,19],[237,23,238,21],[238,8,239,6],[238,12,239,10],[238,13,239,11,"sync"],[238,17,239,15],[238,18,239,16],[238,19,239,17],[239,6,240,4],[240,6,242,4],[240,13,242,11],[240,17,242,15],[240,18,242,16,"config"],[240,24,242,22],[241,4,243,2],[242,4,245,2,"getState"],[242,12,245,10,"getState"],[242,13,245,11,"type"],[242,17,245,15],[242,19,245,17],[243,6,246,4],[244,6,247,4],[244,10,247,8,"type"],[244,14,247,12],[244,18,247,16],[244,19,247,17],[244,21,247,19],[245,8,248,6],[245,15,248,13],[245,16,248,14],[246,6,249,4],[247,6,251,4],[247,13,251,11,"EventMap"],[247,23,251,19],[247,24,251,19,"EventMap"],[247,32,251,19],[247,33,251,20,"type"],[247,37,251,24],[247,38,251,25],[248,4,252,2],[249,4,254,2,"transformEventData"],[249,22,254,20,"transformEventData"],[249,23,254,21,"event"],[249,28,254,26],[249,30,254,28],[250,6,255,4],[250,12,255,10],[251,8,256,6,"eventType"],[251,17,256,15],[252,8,257,6,"maxPointers"],[252,19,257,17],[252,21,257,19,"numberOfPointers"],[253,6,258,4],[253,7,258,5],[253,10,258,8,"event"],[253,15,258,13],[253,16,258,14],[253,17,258,15],[255,6,260,4],[255,12,260,10,"changedTouch"],[255,24,260,22],[255,27,260,25,"event"],[255,32,260,30],[255,33,260,31,"changedPointers"],[255,48,260,46],[255,49,260,47],[255,50,260,48],[255,51,260,49],[256,6,261,4],[256,12,261,10,"pointerInside"],[256,25,261,23],[256,28,261,26],[256,32,261,30],[256,33,261,31,"isPointInView"],[256,46,261,44],[256,47,261,45],[257,8,262,6,"x"],[257,9,262,7],[257,11,262,9,"changedTouch"],[257,23,262,21],[257,24,262,22,"clientX"],[257,31,262,29],[258,8,263,6,"y"],[258,9,263,7],[258,11,263,9,"changedTouch"],[258,23,263,21],[258,24,263,22,"clientY"],[259,6,264,4],[259,7,264,5],[259,8,264,6],[259,9,264,7],[259,10,264,8],[261,6,266,4],[261,12,266,10,"state"],[261,17,266,15],[261,20,266,18],[261,24,266,22],[261,25,266,23,"getState"],[261,33,266,31],[261,34,266,32,"eventType"],[261,43,266,41],[261,44,266,42],[262,6,268,4],[262,10,268,8,"state"],[262,15,268,13],[262,20,268,18],[262,24,268,22],[262,25,268,23,"previousState"],[262,38,268,36],[262,40,268,38],[263,8,269,6],[263,12,269,10],[263,13,269,11,"oldState"],[263,21,269,19],[263,24,269,22],[263,28,269,26],[263,29,269,27,"previousState"],[263,42,269,40],[264,8,270,6],[264,12,270,10],[264,13,270,11,"previousState"],[264,26,270,24],[264,29,270,27,"state"],[264,34,270,32],[265,6,271,4],[266,6,273,4],[266,13,273,11],[267,8,274,6,"nativeEvent"],[267,19,274,17],[267,21,274,19],[268,10,275,8,"numberOfPointers"],[268,26,275,24],[269,10,276,8,"state"],[269,15,276,13],[270,10,277,8,"pointerInside"],[270,23,277,21],[271,10,278,8],[271,13,278,11],[271,17,278,15],[271,18,278,16,"transformNativeEvent"],[271,38,278,36],[271,39,278,37,"event"],[271,44,278,42],[271,45,278,43],[272,10,279,8],[273,10,280,8,"handlerTag"],[273,20,280,18],[273,22,280,20],[273,26,280,24],[273,27,280,25,"handlerTag"],[273,37,280,35],[274,10,281,8,"target"],[274,16,281,14],[274,18,281,16],[274,22,281,20],[274,23,281,21,"ref"],[274,26,281,24],[275,10,282,8],[276,10,283,8],[277,10,284,8],[278,10,285,8,"oldState"],[278,18,285,16],[278,20,285,18,"state"],[278,25,285,23],[278,30,285,28],[278,34,285,32],[278,35,285,33,"previousState"],[278,48,285,46],[278,52,285,50,"state"],[278,57,285,55],[278,61,285,59],[278,62,285,60],[278,65,285,63],[278,69,285,67],[278,70,285,68,"oldState"],[278,78,285,76],[278,81,285,79,"undefined"],[279,8,286,6],[279,9,286,7],[280,8,287,6,"timeStamp"],[280,17,287,15],[280,19,287,17,"Date"],[280,23,287,21],[280,24,287,22,"now"],[280,27,287,25],[280,28,287,26],[281,6,288,4],[281,7,288,5],[282,4,289,2],[283,4,291,2,"transformNativeEvent"],[283,24,291,22,"transformNativeEvent"],[283,25,291,23,"_event"],[283,31,291,29],[283,33,291,31],[284,6,292,4],[284,13,292,11],[284,14,292,12],[284,15,292,13],[285,4,293,2],[286,4,295,2,"cancelPendingGestures"],[286,25,295,23,"cancelPendingGestures"],[286,26,295,24,"event"],[286,31,295,29],[286,33,295,31],[287,6,296,4],[287,11,296,9],[287,17,296,15,"gesture"],[287,24,296,22],[287,28,296,26,"Object"],[287,34,296,32],[287,35,296,33,"values"],[287,41,296,39],[287,42,296,40],[287,46,296,44],[287,47,296,45,"pendingGestures"],[287,62,296,60],[287,63,296,61],[287,65,296,63],[288,8,297,6],[288,12,297,10,"gesture"],[288,19,297,17],[288,23,297,21,"gesture"],[288,30,297,28],[288,31,297,29,"isGestureRunning"],[288,47,297,45],[288,49,297,47],[289,10,298,8,"gesture"],[289,17,298,15],[289,18,298,16,"hasGestureFailed"],[289,34,298,32],[289,37,298,35],[289,41,298,39],[290,10,299,8,"gesture"],[290,17,299,15],[290,18,299,16,"cancelEvent"],[290,29,299,27],[290,30,299,28,"event"],[290,35,299,33],[290,36,299,34],[291,8,300,6],[292,6,301,4],[293,4,302,2],[294,4,304,2,"notifyPendingGestures"],[294,25,304,23,"notifyPendingGestures"],[294,26,304,23],[294,28,304,26],[295,6,305,4],[295,11,305,9],[295,17,305,15,"gesture"],[295,24,305,22],[295,28,305,26,"Object"],[295,34,305,32],[295,35,305,33,"values"],[295,41,305,39],[295,42,305,40],[295,46,305,44],[295,47,305,45,"pendingGestures"],[295,62,305,60],[295,63,305,61],[295,65,305,63],[296,8,306,6],[296,12,306,10,"gesture"],[296,19,306,17],[296,21,306,19],[297,10,307,8,"gesture"],[297,17,307,15],[297,18,307,16,"onWaitingEnded"],[297,32,307,30],[297,33,307,31],[297,37,307,35],[297,38,307,36],[298,8,308,6],[299,6,309,4],[300,4,310,2],[300,5,310,3],[300,6,310,4],[302,4,313,2,"onGestureEnded"],[302,18,313,16,"onGestureEnded"],[302,19,313,17,"event"],[302,24,313,22],[302,26,313,24],[303,6,314,4],[303,10,314,8],[303,11,314,9,"isGestureRunning"],[303,27,314,25],[303,30,314,28],[303,35,314,33],[304,6,315,4],[304,10,315,8],[304,11,315,9,"cancelPendingGestures"],[304,32,315,30],[304,33,315,31,"event"],[304,38,315,36],[304,39,315,37],[305,4,316,2],[306,4,318,2,"forceInvalidate"],[306,19,318,17,"forceInvalidate"],[306,20,318,18,"event"],[306,25,318,23],[306,27,318,25],[307,6,319,4],[307,10,319,8],[307,14,319,12],[307,15,319,13,"isGestureRunning"],[307,31,319,29],[307,33,319,31],[308,8,320,6],[308,12,320,10],[308,13,320,11,"hasGestureFailed"],[308,29,320,27],[308,32,320,30],[308,36,320,34],[309,8,321,6],[309,12,321,10],[309,13,321,11,"cancelEvent"],[309,24,321,22],[309,25,321,23,"event"],[309,30,321,28],[309,31,321,29],[310,6,322,4],[311,4,323,2],[312,4,325,2,"cancelEvent"],[312,15,325,13,"cancelEvent"],[312,16,325,14,"event"],[312,21,325,19],[312,23,325,21],[313,6,326,4],[313,10,326,8],[313,11,326,9,"notifyPendingGestures"],[313,32,326,30],[313,33,326,31],[313,34,326,32],[314,6,327,4],[314,10,327,8],[314,11,327,9,"sendEvent"],[314,20,327,18],[314,21,327,19],[315,8,327,21],[315,11,327,24,"event"],[315,16,327,29],[316,8,328,6,"eventType"],[316,17,328,15],[316,19,328,17,"Hammer"],[316,25,328,23],[316,26,328,23,"default"],[316,33,328,23],[316,34,328,24,"INPUT_CANCEL"],[316,46,328,36],[317,8,329,6,"isFinal"],[317,15,329,13],[317,17,329,15],[318,6,330,4],[318,7,330,5],[318,8,330,6],[319,6,331,4],[319,10,331,8],[319,11,331,9,"onGestureEnded"],[319,25,331,23],[319,26,331,24,"event"],[319,31,331,29],[319,32,331,30],[320,4,332,2],[321,4,334,2,"onRawEvent"],[321,14,334,12,"onRawEvent"],[321,15,334,13],[322,6,335,4,"isFirst"],[323,4,336,2],[323,5,336,3],[323,7,336,5],[324,6,337,4],[324,10,337,8,"isFirst"],[324,17,337,15],[324,19,337,17],[325,8,338,6],[325,12,338,10],[325,13,338,11,"hasGestureFailed"],[325,29,338,27],[325,32,338,30],[325,37,338,35],[326,6,339,4],[327,4,340,2],[328,4,342,2,"shouldUseTouchEvents"],[328,24,342,22,"shouldUseTouchEvents"],[328,25,342,23,"config"],[328,31,342,29],[328,33,342,31],[329,6,343,4],[329,10,343,8,"_config$simultaneousH"],[329,31,343,29],[329,33,343,31,"_config$simultaneousH2"],[329,55,343,53],[330,6,345,4],[330,13,345,11],[330,14,345,12,"_config$simultaneousH"],[330,35,345,33],[330,38,345,36],[330,39,345,37,"_config$simultaneousH2"],[330,61,345,59],[330,64,345,62,"config"],[330,70,345,68],[330,71,345,69,"simultaneousHandlers"],[330,91,345,89],[330,97,345,95],[330,101,345,99],[330,105,345,103,"_config$simultaneousH2"],[330,127,345,125],[330,132,345,130],[330,137,345,135],[330,138,345,136],[330,141,345,139],[330,146,345,144],[330,147,345,145],[330,150,345,148,"_config$simultaneousH2"],[330,172,345,170],[330,173,345,171,"some"],[330,177,345,175],[330,178,345,176,"handler"],[330,185,345,183],[330,189,345,187,"handler"],[330,196,345,194],[330,197,345,195,"isNative"],[330,205,345,203],[330,206,345,204],[330,212,345,210],[330,216,345,214],[330,220,345,218,"_config$simultaneousH"],[330,241,345,239],[330,246,345,244],[330,251,345,249],[330,252,345,250],[330,255,345,253,"_config$simultaneousH"],[330,276,345,274],[330,279,345,277],[330,284,345,282],[331,4,346,2],[332,4,348,2,"setView"],[332,11,348,9,"setView"],[332,12,348,10,"ref"],[332,15,348,13],[332,17,348,15,"propsRef"],[332,25,348,23],[332,27,348,25],[333,6,349,4],[333,10,349,8,"ref"],[333,13,349,11],[333,17,349,15],[333,21,349,19],[333,23,349,21],[334,8,350,6],[334,12,350,10],[334,13,350,11,"destroy"],[334,20,350,18],[334,21,350,19],[334,22,350,20],[335,8,351,6],[335,12,351,10],[335,13,351,11,"view"],[335,17,351,15],[335,20,351,18],[335,24,351,22],[336,8,352,6],[337,6,353,4],[337,7,353,5],[337,8,353,6],[339,6,356,4],[339,12,356,10,"SUPPORTS_TOUCH"],[339,26,356,24],[339,29,356,28],[339,43,356,42],[339,47,356,46,"window"],[339,53,356,53],[340,6,357,4],[340,10,357,8],[340,11,357,9,"propsRef"],[340,19,357,17],[340,22,357,20,"propsRef"],[340,30,357,28],[341,6,358,4],[341,10,358,8],[341,11,358,9,"ref"],[341,14,358,12],[341,17,358,15,"ref"],[341,20,358,18],[342,6,359,4],[342,10,359,8],[342,11,359,9,"view"],[342,15,359,13],[342,18,359,16],[342,22,359,16,"findNodeHandle"],[342,36,359,30],[342,37,359,30,"default"],[342,44,359,30],[342,46,359,31,"ref"],[342,49,359,34],[342,50,359,35],[342,51,359,36],[342,52,359,37],[343,6,360,4],[344,6,361,4],[346,6,363,4],[346,10,363,8],[346,11,363,9,"hammer"],[346,17,363,15],[346,20,363,18,"SUPPORTS_TOUCH"],[346,34,363,32],[346,38,363,36],[346,42,363,40],[346,43,363,41,"shouldUseTouchEvents"],[346,63,363,61],[346,64,363,62],[346,68,363,66],[346,69,363,67,"config"],[346,75,363,73],[346,76,363,74],[346,79,363,77],[346,83,363,81,"Hammer"],[346,89,363,87],[346,90,363,87,"default"],[346,97,363,87],[346,98,363,88,"Manager"],[346,105,363,95],[346,106,363,96],[346,110,363,100],[346,111,363,101,"view"],[346,115,363,105],[346,117,363,107],[347,8,364,6,"inputClass"],[347,18,364,16],[347,20,364,18,"Hammer"],[347,26,364,24],[347,27,364,24,"default"],[347,34,364,24],[347,35,364,25,"TouchInput"],[348,6,365,4],[348,7,365,5],[348,8,365,6],[348,11,365,9],[348,15,365,13,"Hammer"],[348,21,365,19],[348,22,365,19,"default"],[348,29,365,19],[348,30,365,20,"Manager"],[348,37,365,27],[348,38,365,28],[348,42,365,32],[348,43,365,33,"view"],[348,47,365,37],[348,48,365,38],[349,6,366,4],[349,10,366,8],[349,11,366,9,"oldState"],[349,19,366,17],[349,22,366,20,"State"],[349,28,366,25],[349,29,366,25,"State"],[349,34,366,25],[349,35,366,26,"UNDETERMINED"],[349,47,366,38],[350,6,367,4],[350,10,367,8],[350,11,367,9,"previousState"],[350,24,367,22],[350,27,367,25,"State"],[350,33,367,30],[350,34,367,30,"State"],[350,39,367,30],[350,40,367,31,"UNDETERMINED"],[350,52,367,43],[351,6,368,4],[351,10,368,8],[351,11,368,9,"lastSentState"],[351,24,368,22],[351,27,368,25],[351,31,368,29],[352,6,369,4],[352,12,369,10],[353,8,370,6,"NativeGestureClass"],[354,6,371,4],[354,7,371,5],[354,10,371,8],[354,14,371,12],[354,15,371,13],[354,16,371,14],[356,6,373,4],[356,12,373,10,"gesture"],[356,19,373,17],[356,22,373,20],[356,26,373,24,"NativeGestureClass"],[356,44,373,42],[356,45,373,43],[356,49,373,47],[356,50,373,48,"getHammerConfig"],[356,65,373,63],[356,66,373,64],[356,67,373,65],[356,68,373,66],[357,6,374,4],[357,10,374,8],[357,11,374,9,"hammer"],[357,17,374,15],[357,18,374,16,"add"],[357,21,374,19],[357,22,374,20,"gesture"],[357,29,374,27],[357,30,374,28],[358,6,375,4],[358,10,375,8],[358,11,375,9,"hammer"],[358,17,375,15],[358,18,375,16,"on"],[358,20,375,18],[358,21,375,19],[358,35,375,33],[358,37,375,35,"ev"],[358,39,375,37],[358,43,375,41],[359,8,376,6],[359,12,376,10],[359,13,376,11],[359,17,376,15],[359,18,376,16,"config"],[359,24,376,22],[359,25,376,23,"enabled"],[359,32,376,30],[359,34,376,32],[360,10,377,8],[360,14,377,12],[360,15,377,13,"hasGestureFailed"],[360,31,377,29],[360,34,377,32],[360,39,377,37],[361,10,378,8],[361,14,378,12],[361,15,378,13,"isGestureRunning"],[361,31,378,29],[361,34,378,32],[361,39,378,37],[362,10,379,8],[363,8,380,6],[364,8,382,6],[364,12,382,10],[364,13,382,11,"onRawEvent"],[364,23,382,21],[364,24,382,22,"ev"],[364,26,382,24],[364,27,382,25],[364,28,382,26],[364,29,382,27],[365,8,383,6],[367,8,385,6],[367,12,385,10],[367,16,385,14],[367,17,385,15,"initialRotation"],[367,32,385,30],[367,37,385,35],[367,41,385,39],[367,45,385,43,"ev"],[367,47,385,45],[367,48,385,46,"rotation"],[367,56,385,54],[367,61,385,59],[367,62,385,60],[367,64,385,62],[368,10,386,8],[368,14,386,12],[368,15,386,13,"initialRotation"],[368,30,386,28],[368,33,386,31,"ev"],[368,35,386,33],[368,36,386,34,"rotation"],[368,44,386,42],[369,8,387,6],[370,8,389,6],[370,12,389,10,"ev"],[370,14,389,12],[370,15,389,13,"isFinal"],[370,22,389,20],[370,24,389,22],[371,10,390,8],[372,10,391,8,"setTimeout"],[372,20,391,18],[372,21,391,19],[372,27,391,25],[373,12,392,10],[373,16,392,14],[373,17,392,15,"initialRotation"],[373,32,392,30],[373,35,392,33],[373,39,392,37],[374,12,393,10],[374,16,393,14],[374,17,393,15,"hasGestureFailed"],[374,33,393,31],[374,36,393,34],[374,41,393,39],[375,10,394,8],[375,11,394,9],[375,12,394,10],[376,8,395,6],[377,6,396,4],[377,7,396,5],[377,8,396,6],[378,6,397,4],[378,10,397,8],[378,11,397,9,"setupEvents"],[378,22,397,20],[378,23,397,21],[378,24,397,22],[379,6,398,4],[379,10,398,8],[379,11,398,9,"sync"],[379,15,398,13],[379,16,398,14],[379,17,398,15],[380,4,399,2],[381,4,401,2,"setupEvents"],[381,15,401,13,"setupEvents"],[381,16,401,13],[381,18,401,16],[382,6,402,4],[383,6,403,4],[383,10,403,8],[383,11,403,9],[383,15,403,13],[383,16,403,14,"isDiscrete"],[383,26,403,24],[383,28,403,26],[384,8,404,6],[384,12,404,10],[384,13,404,11,"hammer"],[384,19,404,17],[384,20,404,18,"on"],[384,22,404,20],[384,23,404,21],[384,26,404,24],[384,30,404,28],[384,31,404,29,"name"],[384,35,404,33],[384,42,404,40],[384,44,404,42,"event"],[384,49,404,47],[384,53,404,51],[384,57,404,55],[384,58,404,56,"onStart"],[384,65,404,63],[384,66,404,64,"event"],[384,71,404,69],[384,72,404,70],[384,73,404,71],[385,8,405,6],[385,12,405,10],[385,13,405,11,"hammer"],[385,19,405,17],[385,20,405,18,"on"],[385,22,405,20],[385,23,405,21],[385,26,405,24],[385,30,405,28],[385,31,405,29,"name"],[385,35,405,33],[385,42,405,40],[385,46,405,44],[385,47,405,45,"name"],[385,51,405,49],[385,59,405,57],[385,61,405,59,"event"],[385,66,405,64],[385,70,405,68],[386,10,406,8],[386,14,406,12],[386,15,406,13,"onGestureEnded"],[386,29,406,27],[386,30,406,28,"event"],[386,35,406,33],[386,36,406,34],[387,8,407,6],[387,9,407,7],[387,10,407,8],[388,6,408,4],[389,6,410,4],[389,10,410,8],[389,11,410,9,"hammer"],[389,17,410,15],[389,18,410,16,"on"],[389,20,410,18],[389,21,410,19],[389,25,410,23],[389,26,410,24,"name"],[389,30,410,28],[389,32,410,30,"ev"],[389,34,410,32],[389,38,410,36],[389,42,410,40],[389,43,410,41,"onGestureActivated"],[389,61,410,59],[389,62,410,60,"ev"],[389,64,410,62],[389,65,410,63],[389,66,410,64],[389,67,410,65],[389,68,410,66],[390,4,411,2],[391,4,413,2,"onStart"],[391,11,413,9,"onStart"],[391,12,413,10],[392,6,414,4,"deltaX"],[392,12,414,10],[393,6,415,4,"deltaY"],[393,12,415,10],[394,6,416,4,"rotation"],[395,4,417,2],[395,5,417,3],[395,7,417,5],[396,6,418,4],[397,6,419,4],[397,10,419,8],[397,11,419,9,"oldState"],[397,19,419,17],[397,22,419,20,"State"],[397,28,419,25],[397,29,419,25,"State"],[397,34,419,25],[397,35,419,26,"UNDETERMINED"],[397,47,419,38],[398,6,420,4],[398,10,420,8],[398,11,420,9,"previousState"],[398,24,420,22],[398,27,420,25,"State"],[398,33,420,30],[398,34,420,30,"State"],[398,39,420,30],[398,40,420,31,"UNDETERMINED"],[398,52,420,43],[399,6,421,4],[399,10,421,8],[399,11,421,9,"lastSentState"],[399,24,421,22],[399,27,421,25],[399,31,421,29],[400,6,422,4],[400,10,422,8],[400,11,422,9,"isGestureRunning"],[400,27,422,25],[400,30,422,28],[400,34,422,32],[401,6,423,4],[401,10,423,8],[401,11,423,9,"__initialX"],[401,21,423,19],[401,24,423,22,"deltaX"],[401,30,423,28],[402,6,424,4],[402,10,424,8],[402,11,424,9,"__initialY"],[402,21,424,19],[402,24,424,22,"deltaY"],[402,30,424,28],[403,6,425,4],[403,10,425,8],[403,11,425,9,"initialRotation"],[403,26,425,24],[403,29,425,27,"rotation"],[403,37,425,35],[404,4,426,2],[405,4,428,2,"onGestureActivated"],[405,22,428,20,"onGestureActivated"],[405,23,428,21,"ev"],[405,25,428,23],[405,27,428,25],[406,6,429,4],[406,10,429,8],[406,11,429,9,"sendEvent"],[406,20,429,18],[406,21,429,19,"ev"],[406,23,429,21],[406,24,429,22],[407,4,430,2],[408,4,432,2,"onSuccess"],[408,13,432,11,"onSuccess"],[408,14,432,11],[408,16,432,14],[408,17,432,15],[409,4,434,2,"_getPendingGestures"],[409,23,434,21,"_getPendingGestures"],[409,24,434,21],[409,26,434,24],[410,6,435,4],[410,10,435,8,"Array"],[410,15,435,13],[410,16,435,14,"isArray"],[410,23,435,21],[410,24,435,22],[410,28,435,26],[410,29,435,27,"config"],[410,35,435,33],[410,36,435,34,"waitFor"],[410,43,435,41],[410,44,435,42],[410,48,435,46],[410,52,435,50],[410,53,435,51,"config"],[410,59,435,57],[410,60,435,58,"waitFor"],[410,67,435,65],[410,68,435,66,"length"],[410,74,435,72],[410,76,435,74],[411,8,436,6],[412,8,437,6],[413,8,438,6],[413,14,438,12,"stillWaiting"],[413,26,438,24],[413,29,438,27],[413,33,438,31],[413,34,438,32,"config"],[413,40,438,38],[413,41,438,39,"waitFor"],[413,48,438,46],[413,49,438,47,"filter"],[413,55,438,53],[413,56,438,54],[413,57,438,55],[414,10,439,8,"hasGestureFailed"],[415,8,440,6],[415,9,440,7],[415,14,440,12,"hasGestureFailed"],[415,30,440,28],[415,35,440,33],[415,40,440,38],[415,41,440,39],[416,8,441,6],[416,15,441,13,"stillWaiting"],[416,27,441,25],[417,6,442,4],[418,6,444,4],[418,13,444,11],[418,15,444,13],[419,4,445,2],[420,4,447,2,"getHammerConfig"],[420,19,447,17,"getHammerConfig"],[420,20,447,17],[420,22,447,20],[421,6,448,4],[421,12,448,10,"pointers"],[421,20,448,18],[421,23,448,21],[421,27,448,25],[421,28,448,26,"config"],[421,34,448,32],[421,35,448,33,"minPointers"],[421,46,448,44],[421,51,448,49],[421,55,448,53],[421,56,448,54,"config"],[421,62,448,60],[421,63,448,61,"maxPointers"],[421,74,448,72],[421,77,448,75],[421,81,448,79],[421,82,448,80,"config"],[421,88,448,86],[421,89,448,87,"minPointers"],[421,100,448,98],[421,103,448,101],[421,104,448,102],[422,6,449,4],[422,13,449,11],[423,8,450,6,"pointers"],[424,6,451,4],[424,7,451,5],[425,4,452,2],[426,4,454,2,"simulateCancelEvent"],[426,23,454,21,"simulateCancelEvent"],[426,24,454,22,"_inputData"],[426,34,454,32],[426,36,454,34],[426,37,454,35],[426,38,454,36],[426,39,454,37],[428,4,457,2,"ensureConfig"],[428,16,457,14,"ensureConfig"],[428,17,457,15,"config"],[428,23,457,21],[428,25,457,23],[429,6,458,4],[429,12,458,10,"props"],[429,17,458,15],[429,20,458,18],[430,8,458,20],[430,11,458,23,"config"],[431,6,459,4],[431,7,459,5],[431,8,459,6],[431,9,459,7],[433,6,461,4],[433,10,461,8],[433,19,461,17],[433,23,461,21,"config"],[433,29,461,27],[433,31,461,29],[434,8,462,6,"props"],[434,13,462,11],[434,14,462,12,"minDist"],[434,21,462,19],[434,24,462,22,"config"],[434,30,462,28],[434,31,462,29,"minDist"],[434,38,462,36],[435,8,463,6,"props"],[435,13,463,11],[435,14,463,12,"minDistSq"],[435,23,463,21],[435,26,463,24,"props"],[435,31,463,29],[435,32,463,30,"minDist"],[435,39,463,37],[435,42,463,40,"props"],[435,47,463,45],[435,48,463,46,"minDist"],[435,55,463,53],[436,6,464,4],[437,6,466,4],[437,10,466,8],[437,23,466,21],[437,27,466,25,"config"],[437,33,466,31],[437,35,466,33],[438,8,467,6,"props"],[438,13,467,11],[438,14,467,12,"minVelocity"],[438,25,467,23],[438,28,467,26,"config"],[438,34,467,32],[438,35,467,33,"minVelocity"],[438,46,467,44],[439,8,468,6,"props"],[439,13,468,11],[439,14,468,12,"minVelocitySq"],[439,27,468,25],[439,30,468,28,"props"],[439,35,468,33],[439,36,468,34,"minVelocity"],[439,47,468,45],[439,50,468,48,"props"],[439,55,468,53],[439,56,468,54,"minVelocity"],[439,67,468,65],[440,6,469,4],[441,6,471,4],[441,10,471,8],[441,19,471,17],[441,23,471,21,"config"],[441,29,471,27],[441,31,471,29],[442,8,472,6,"props"],[442,13,472,11],[442,14,472,12,"maxDist"],[442,21,472,19],[442,24,472,22,"config"],[442,30,472,28],[442,31,472,29,"maxDist"],[442,38,472,36],[443,8,473,6,"props"],[443,13,473,11],[443,14,473,12,"maxDistSq"],[443,23,473,21],[443,26,473,24,"config"],[443,32,473,30],[443,33,473,31,"maxDist"],[443,40,473,38],[443,43,473,41,"config"],[443,49,473,47],[443,50,473,48,"maxDist"],[443,57,473,55],[444,6,474,4],[445,6,476,4],[445,10,476,8],[445,19,476,17],[445,23,476,21,"config"],[445,29,476,27],[445,31,476,29],[446,8,477,6,"props"],[446,13,477,11],[446,14,477,12,"waitFor"],[446,21,477,19],[446,24,477,22,"asArray"],[446,31,477,29],[446,32,477,30,"config"],[446,38,477,36],[446,39,477,37,"waitFor"],[446,46,477,44],[446,47,477,45],[446,48,477,46,"map"],[446,51,477,49],[446,52,477,50],[446,53,477,51],[447,10,478,8,"handlerTag"],[448,8,479,6],[448,9,479,7],[448,14,479,12,"NodeManager"],[448,25,479,23],[448,26,479,24,"getHandler"],[448,36,479,34],[448,37,479,35,"handlerTag"],[448,47,479,45],[448,48,479,46],[448,49,479,47],[448,50,479,48,"filter"],[448,56,479,54],[448,57,479,55,"v"],[448,58,479,56],[448,62,479,60,"v"],[448,63,479,61],[448,64,479,62],[449,6,480,4],[449,7,480,5],[449,13,480,11],[450,8,481,6,"props"],[450,13,481,11],[450,14,481,12,"waitFor"],[450,21,481,19],[450,24,481,22],[450,28,481,26],[451,6,482,4],[452,6,484,4],[452,10,484,8],[452,32,484,30],[452,36,484,34,"config"],[452,42,484,40],[452,44,484,42],[453,8,485,6],[453,14,485,12,"shouldUseTouchEvents"],[453,34,485,32],[453,37,485,35],[453,41,485,39],[453,42,485,40,"shouldUseTouchEvents"],[453,62,485,60],[453,63,485,61],[453,67,485,65],[453,68,485,66,"config"],[453,74,485,72],[453,75,485,73],[454,8,486,6,"props"],[454,13,486,11],[454,14,486,12,"simultaneousHandlers"],[454,34,486,32],[454,37,486,35,"asArray"],[454,44,486,42],[454,45,486,43,"config"],[454,51,486,49],[454,52,486,50,"simultaneousHandlers"],[454,72,486,70],[454,73,486,71],[454,74,486,72,"map"],[454,77,486,75],[454,78,486,76,"handler"],[454,85,486,83],[454,89,486,87],[455,10,487,8],[455,14,487,12],[455,21,487,19,"handler"],[455,28,487,26],[455,33,487,31],[455,41,487,39],[455,43,487,41],[456,12,488,10],[456,19,488,17,"NodeManager"],[456,30,488,28],[456,31,488,29,"getHandler"],[456,41,488,39],[456,42,488,40,"handler"],[456,49,488,47],[456,50,488,48],[457,10,489,8],[457,11,489,9],[457,17,489,15],[458,12,490,10],[458,19,490,17,"NodeManager"],[458,30,490,28],[458,31,490,29,"getHandler"],[458,41,490,39],[458,42,490,40,"handler"],[458,49,490,47],[458,50,490,48,"handlerTag"],[458,60,490,58],[458,61,490,59],[459,10,491,8],[460,8,492,6],[460,9,492,7],[460,10,492,8],[460,11,492,9,"filter"],[460,17,492,15],[460,18,492,16,"v"],[460,19,492,17],[460,23,492,21,"v"],[460,24,492,22],[460,25,492,23],[461,8,494,6],[461,12,494,10,"shouldUseTouchEvents"],[461,32,494,30],[461,37,494,35],[461,41,494,39],[461,42,494,40,"shouldUseTouchEvents"],[461,62,494,60],[461,63,494,61,"props"],[461,68,494,66],[461,69,494,67],[461,71,494,69],[462,10,495,8],[462,14,495,8,"ghQueueMicrotask"],[462,31,495,24],[462,32,495,24,"ghQueueMicrotask"],[462,48,495,24],[462,50,495,25],[462,56,495,31],[463,12,496,10],[464,12,497,10],[465,12,498,10],[465,16,498,14],[465,17,498,15,"destroy"],[465,24,498,22],[465,25,498,23],[465,26,498,24],[466,12,499,10],[466,16,499,14],[466,17,499,15,"setView"],[466,24,499,22],[466,25,499,23],[466,29,499,27],[466,30,499,28,"ref"],[466,33,499,31],[466,35,499,33],[466,39,499,37],[466,40,499,38,"propsRef"],[466,48,499,46],[466,49,499,47],[467,10,500,8],[467,11,500,9],[467,12,500,10],[468,8,501,6],[469,6,502,4],[469,7,502,5],[469,13,502,11],[470,8,503,6,"props"],[470,13,503,11],[470,14,503,12,"simultaneousHandlers"],[470,34,503,32],[470,37,503,35],[470,41,503,39],[471,6,504,4],[472,6,506,4],[472,12,506,10,"configProps"],[472,23,506,21],[472,26,506,24],[472,27,506,25],[472,40,506,38],[472,42,506,40],[472,55,506,53],[472,57,506,55],[472,66,506,64],[472,68,506,66],[472,77,506,75],[472,79,506,77],[472,90,506,88],[472,92,506,90],[472,107,506,105],[472,109,506,107],[472,120,506,118],[472,122,506,120],[472,135,506,133],[472,137,506,135],[472,155,506,153],[472,157,506,155],[472,175,506,173],[472,177,506,175],[472,193,506,191],[472,195,506,193],[472,211,506,209],[472,213,506,211],[472,233,506,231],[472,235,506,233],[472,253,506,251],[472,255,506,253],[472,275,506,273],[472,277,506,275],[472,295,506,293],[472,296,506,294],[473,6,507,4,"configProps"],[473,17,507,15],[473,18,507,16,"forEach"],[473,25,507,23],[473,26,507,24,"prop"],[473,30,507,28],[473,34,507,32],[474,8,508,6],[474,12,508,10],[474,19,508,17,"props"],[474,24,508,22],[474,25,508,23,"prop"],[474,29,508,27],[474,30,508,28],[474,35,508,33],[474,46,508,44],[474,48,508,46],[475,10,509,8,"props"],[475,15,509,13],[475,16,509,14,"prop"],[475,20,509,18],[475,21,509,19],[475,24,509,22,"Number"],[475,30,509,28],[475,31,509,29,"NaN"],[475,34,509,32],[476,8,510,6],[477,6,511,4],[477,7,511,5],[477,8,511,6],[478,6,512,4],[478,13,512,11,"props"],[478,18,512,16],[478,19,512,17],[478,20,512,18],[479,4,513,2],[480,2,515,0],[480,3,515,1],[480,4,515,2],[481,2,516,0],[483,2,519,0],[483,11,519,9,"invokeNullableMethod"],[483,31,519,29,"invokeNullableMethod"],[483,32,519,30,"method"],[483,38,519,36],[483,40,519,38,"event"],[483,45,519,43],[483,47,519,45],[484,4,520,2],[484,8,520,6,"method"],[484,14,520,12],[484,16,520,14],[485,6,521,4],[485,10,521,8],[485,17,521,15,"method"],[485,23,521,21],[485,28,521,26],[485,38,521,36],[485,40,521,38],[486,8,522,6,"method"],[486,14,522,12],[486,15,522,13,"event"],[486,20,522,18],[486,21,522,19],[487,6,523,4],[487,7,523,5],[487,13,523,11],[488,8,524,6],[489,8,525,6],[489,12,525,10],[489,26,525,24],[489,30,525,28,"method"],[489,36,525,34],[489,40,525,38],[489,47,525,45,"method"],[489,53,525,51],[489,54,525,52,"__getHandler"],[489,66,525,64],[489,71,525,69],[489,81,525,79],[489,83,525,81],[490,10,526,8],[490,16,526,14,"handler"],[490,23,526,21],[490,26,526,24,"method"],[490,32,526,30],[490,33,526,31,"__getHandler"],[490,45,526,43],[490,46,526,44],[490,47,526,45],[491,10,528,8,"invokeNullableMethod"],[491,30,528,28],[491,31,528,29,"handler"],[491,38,528,36],[491,40,528,38,"event"],[491,45,528,43],[491,46,528,44],[492,8,529,6],[492,9,529,7],[492,15,529,13],[493,10,530,8],[493,14,530,12],[493,28,530,26],[493,32,530,30,"method"],[493,38,530,36],[493,40,530,38],[494,12,531,10],[494,18,531,16],[495,14,532,12,"argMapping"],[496,12,533,10],[496,13,533,11],[496,16,533,14,"method"],[496,22,533,20],[496,23,533,21,"__nodeConfig"],[496,35,533,33],[497,12,535,10],[497,16,535,14,"Array"],[497,21,535,19],[497,22,535,20,"isArray"],[497,29,535,27],[497,30,535,28,"argMapping"],[497,40,535,38],[497,41,535,39],[497,43,535,41],[498,14,536,12],[498,19,536,17],[498,25,536,23],[498,26,536,24,"index"],[498,31,536,29],[498,33,536,31],[498,34,536,32,"key"],[498,37,536,35],[498,39,536,37,"value"],[498,44,536,42],[498,45,536,43],[498,46,536,44],[498,50,536,48,"argMapping"],[498,60,536,58],[498,61,536,59,"entries"],[498,68,536,66],[498,69,536,67],[498,70,536,68],[498,72,536,70],[499,16,537,14],[499,20,537,18,"key"],[499,23,537,21],[499,27,537,25,"event"],[499,32,537,30],[499,33,537,31,"nativeEvent"],[499,44,537,42],[499,46,537,44],[500,18,538,16],[501,18,539,16],[501,24,539,22,"nativeValue"],[501,35,539,33],[501,38,539,36,"event"],[501,43,539,41],[501,44,539,42,"nativeEvent"],[501,55,539,53],[501,56,539,54,"key"],[501,59,539,57],[501,60,539,58],[502,18,541,16],[502,22,541,20,"value"],[502,27,541,25],[502,31,541,29,"value"],[502,36,541,34],[502,37,541,35,"setValue"],[502,45,541,43],[502,47,541,45],[503,20,542,18],[504,20,543,18,"value"],[504,25,543,23],[504,26,543,24,"setValue"],[504,34,543,32],[504,35,543,33,"nativeValue"],[504,46,543,44],[504,47,543,45],[505,18,544,16],[505,19,544,17],[505,25,544,23],[506,20,545,18],[507,20,546,18,"method"],[507,26,546,24],[507,27,546,25,"__nodeConfig"],[507,39,546,37],[507,40,546,38,"argMapping"],[507,50,546,48],[507,51,546,49,"index"],[507,56,546,54],[507,57,546,55],[507,60,546,58],[507,61,546,59,"key"],[507,64,546,62],[507,66,546,64,"nativeValue"],[507,77,546,75],[507,78,546,76],[508,18,547,16],[509,16,548,14],[510,14,549,12],[511,12,550,10],[512,10,551,8],[513,8,552,6],[514,6,553,4],[515,4,554,2],[516,2,555,0],[517,2,557,0],[517,11,557,9,"asArray"],[517,18,557,16,"asArray"],[517,19,557,17,"value"],[517,24,557,22],[517,26,557,24],[518,4,558,2],[519,4,559,2],[519,11,559,9,"value"],[519,16,559,14],[519,20,559,18],[519,24,559,22],[519,27,559,25],[519,29,559,27],[519,32,559,30,"Array"],[519,37,559,35],[519,38,559,36,"isArray"],[519,45,559,43],[519,46,559,44,"value"],[519,51,559,49],[519,52,559,50],[519,55,559,53,"value"],[519,60,559,58],[519,63,559,61],[519,64,559,62,"value"],[519,69,559,67],[519,70,559,68],[520,2,560,0],[521,2,562,0],[521,6,562,0,"_default"],[521,14,562,0],[521,17,562,15,"GestureHandler"],[521,31,562,29],[522,0,562,30],[522,3]],"functionMap":{"names":["_defineProperty","<global>","GestureHandler","get__id","get__isNative","get__isDiscrete","get__shouldEnableGestureOnSetup","constructor","_defineProperty$argument_2","enable","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","isGestureEnabledForEvent","get__NativeGestureClass","updateHasCustomActivationCriteria","updateGestureConfig","getState","transformEventData","transformNativeEvent","cancelPendingGestures","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","onRawEvent","shouldUseTouchEvents","_config$simultaneousH2.some$argument_0","setView","hammer.on$argument_1","setTimeout$argument_0","setupEvents","onStart","onGestureActivated","onSuccess","_getPendingGestures","config.waitFor.filter$argument_0","getHammerConfig","simulateCancelEvent","ensureConfig","asArray.map$argument_0","asArray.map.filter$argument_0","ghQueueMicrotask$argument_0","configProps.forEach$argument_0","invokeNullableMethod","asArray"],"mappings":"AAA,iNC;ACc;ECC;GDE;EEI;GFE;EGE;GHE;EIE;GJE;EKE;gDCqC;KDM;qCCE;KDS;2CCE;KDQ;uCCE;KDY;kCCE;qBCI;OD8D;KDO;GLI;EQE;GRE;ESE,2BT;EUE;GVE;EWE;GXE;EYE;GZI;EaE;GbE;EcE;GdE;EeE;GfsB;EgBE;GhBO;EiBE;GjBmC;EkBE;GlBE;EmBE;GnBO;EoBE;GpBM;EqBG;GrBG;EsBE;GtBK;EuBE;GvBO;EwBE;GxBM;EyBE;gLCG,2BD;GzBC;E2BE;mCC2B;mBCgB;SDG;KDE;G3BG;E8BE;0CFG,4BE;2DFC;OEE;8BFG,iCE;G9BC;E+BE;G/Ba;EgCE;GhCE;EiCE,cjC;EkCE;sDCI;sCDE;GlCK;EoCE;GpCK;EqCE,kCrC;EsCG;kDCoB;8CDE,SE,MF;4ECO;ODM,SE,MF;yBGG;SHK;wBIO;KJI;GtCE;CDE;A4CI;C5CoC;A6CE;C7CG"},"hasCjsExports":false},"type":"js/module"}]}